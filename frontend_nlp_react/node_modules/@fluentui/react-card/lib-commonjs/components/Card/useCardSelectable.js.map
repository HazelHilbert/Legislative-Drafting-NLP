{"version":3,"sources":["useCardSelectable.js"],"sourcesContent":["import * as React from 'react';\nimport { mergeCallbacks, slot, useControllableState } from '@fluentui/react-utilities';\nimport { Enter } from '@fluentui/keyboard-keys';\nimport { useFocusFinders } from '@fluentui/react-tabster';\n/**\n * @internal\n *\n * Create the state related to selectable cards.\n *\n * This internal hook controls all the logic for selectable cards and is\n * intended to be used alongside with useCard_unstable.\n *\n * @param props - props from this instance of Card\n * @param a11yProps - accessibility props shared between elements of the card\n * @param cardRef - reference to the root element of Card\n */ export const useCardSelectable = (props, { referenceLabel, referenceId }, cardRef)=>{\n    const { checkbox = {}, onSelectionChange, floatingAction, onClick, onKeyDown } = props;\n    const { findAllFocusable } = useFocusFinders();\n    const checkboxRef = React.useRef(null);\n    const [selected, setSelected] = useControllableState({\n        state: props.selected,\n        defaultState: props.defaultSelected,\n        initialState: false\n    });\n    const selectable = [\n        props.selected,\n        props.defaultSelected,\n        onSelectionChange\n    ].some((prop)=>typeof prop !== 'undefined');\n    const [selectFocused, setSelectFocused] = React.useState(false);\n    const shouldRestrictTriggerAction = React.useCallback((event)=>{\n        if (!cardRef.current) {\n            return false;\n        }\n        const focusableElements = findAllFocusable(cardRef.current);\n        const target = event.target;\n        const isElementInFocusableGroup = focusableElements.some((element)=>element.contains(target));\n        const isCheckboxSlot = (checkboxRef === null || checkboxRef === void 0 ? void 0 : checkboxRef.current) === target;\n        return isElementInFocusableGroup && !isCheckboxSlot;\n    }, [\n        cardRef,\n        findAllFocusable\n    ]);\n    const onChangeHandler = React.useCallback((event)=>{\n        if (shouldRestrictTriggerAction(event)) {\n            return;\n        }\n        const newCheckedValue = !selected;\n        setSelected(newCheckedValue);\n        if (onSelectionChange) {\n            onSelectionChange(event, {\n                selected: newCheckedValue\n            });\n        }\n    }, [\n        onSelectionChange,\n        selected,\n        setSelected,\n        shouldRestrictTriggerAction\n    ]);\n    const onKeyDownHandler = React.useCallback((event)=>{\n        if ([\n            Enter\n        ].includes(event.key)) {\n            event.preventDefault();\n            onChangeHandler(event);\n        }\n    }, [\n        onChangeHandler\n    ]);\n    const checkboxSlot = React.useMemo(()=>{\n        if (!selectable || floatingAction) {\n            return;\n        }\n        const selectableCheckboxProps = {};\n        if (referenceId) {\n            selectableCheckboxProps['aria-labelledby'] = referenceId;\n        } else if (referenceLabel) {\n            selectableCheckboxProps['aria-label'] = referenceLabel;\n        }\n        return slot.optional(checkbox, {\n            defaultProps: {\n                ref: checkboxRef,\n                type: 'checkbox',\n                checked: selected,\n                onChange: (event)=>onChangeHandler(event),\n                onFocus: ()=>setSelectFocused(true),\n                onBlur: ()=>setSelectFocused(false),\n                ...selectableCheckboxProps\n            },\n            elementType: 'input'\n        });\n    }, [\n        checkbox,\n        floatingAction,\n        selected,\n        selectable,\n        onChangeHandler,\n        referenceId,\n        referenceLabel\n    ]);\n    const floatingActionSlot = React.useMemo(()=>{\n        if (!floatingAction) {\n            return;\n        }\n        return slot.optional(floatingAction, {\n            defaultProps: {\n                ref: checkboxRef\n            },\n            elementType: 'div'\n        });\n    }, [\n        floatingAction\n    ]);\n    const selectableCardProps = React.useMemo(()=>{\n        if (!selectable) {\n            return null;\n        }\n        return {\n            onClick: mergeCallbacks(onClick, onChangeHandler),\n            onKeyDown: mergeCallbacks(onKeyDown, onKeyDownHandler)\n        };\n    }, [\n        selectable,\n        onChangeHandler,\n        onClick,\n        onKeyDown,\n        onKeyDownHandler\n    ]);\n    return {\n        selected,\n        selectable,\n        selectFocused,\n        selectableCardProps,\n        checkboxSlot,\n        floatingActionSlot\n    };\n};\n"],"names":["useCardSelectable","props","referenceLabel","referenceId","cardRef","checkbox","onSelectionChange","floatingAction","onClick","onKeyDown","findAllFocusable","useFocusFinders","checkboxRef","React","useRef","selected","setSelected","useControllableState","state","defaultState","defaultSelected","initialState","selectable","some","prop","selectFocused","setSelectFocused","useState","shouldRestrictTriggerAction","useCallback","event","current","focusableElements","target","isElementInFocusableGroup","element","contains","isCheckboxSlot","onChangeHandler","newCheckedValue","onKeyDownHandler","Enter","includes","key","preventDefault","checkboxSlot","useMemo","selectableCheckboxProps","slot","optional","defaultProps","ref","type","checked","onChange","onFocus","onBlur","elementType","floatingActionSlot","selectableCardProps","mergeCallbacks"],"mappings":"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"}