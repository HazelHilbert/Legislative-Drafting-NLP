{"version":3,"sources":["useFlatControllableCheckedItems.js"],"sourcesContent":["import { useControllableState } from '@fluentui/react-utilities';\nimport { ImmutableMap } from '../../utils/ImmutableMap';\nimport * as React from 'react';\nimport { createCheckedItems } from '../../utils/createCheckedItems';\nexport function useFlatControllableCheckedItems(props, headlessTree) {\n    return useControllableState({\n        initialState: ImmutableMap.empty,\n        state: React.useMemo(()=>props.selectionMode ? props.checkedItems && createCheckedItems(props.checkedItems) : undefined, [\n            props.checkedItems,\n            props.selectionMode\n        ]),\n        defaultState: ()=>initializeCheckedItems(props, headlessTree)\n    });\n}\nexport function createNextFlatCheckedItems(data, previousCheckedItems, headlessTree) {\n    if (data.selectionMode === 'single') {\n        return ImmutableMap.create([\n            [\n                data.value,\n                data.checked\n            ]\n        ]);\n    }\n    const treeItem = headlessTree.get(data.value);\n    if (!treeItem) {\n        if (process.env.NODE_ENV !== 'production') {\n            // eslint-disable-next-line no-console\n            console.error(`@fluentui/react-tree [useHeadlessFlatTree]:\nTree item ${data.value} not found.`);\n        }\n        return previousCheckedItems;\n    }\n    const nextCheckedItems = new Map(previousCheckedItems);\n    for (const children of headlessTree.subtree(data.value)){\n        nextCheckedItems.set(children.value, data.checked);\n    }\n    nextCheckedItems.set(data.value, data.checked);\n    let isAncestorsMixed = false;\n    for (const parent of headlessTree.ancestors(treeItem.value)){\n        // if one parent is mixed, all ancestors are mixed\n        if (isAncestorsMixed) {\n            nextCheckedItems.set(parent.value, 'mixed');\n            continue;\n        }\n        const checkedChildren = [];\n        for (const child of headlessTree.children(parent.value)){\n            var _nextCheckedItems_get;\n            if (((_nextCheckedItems_get = nextCheckedItems.get(child.value)) !== null && _nextCheckedItems_get !== void 0 ? _nextCheckedItems_get : false) === data.checked) {\n                checkedChildren.push(child);\n            }\n        }\n        if (checkedChildren.length === parent.childrenValues.length) {\n            nextCheckedItems.set(parent.value, data.checked);\n        } else {\n            // if one parent is mixed, all ancestors are mixed\n            isAncestorsMixed = true;\n            nextCheckedItems.set(parent.value, 'mixed');\n        }\n    }\n    return ImmutableMap.dangerouslyCreate_unstable(nextCheckedItems);\n}\nfunction initializeCheckedItems(props, headlessTree) {\n    if (!props.selectionMode) {\n        return ImmutableMap.empty;\n    }\n    let state = createCheckedItems(props.defaultCheckedItems);\n    if (props.selectionMode === 'multiselect') {\n        for (const [value, checked] of state){\n            state = createNextFlatCheckedItems({\n                value,\n                checked,\n                selectionMode: props.selectionMode\n            }, state, headlessTree);\n        }\n    }\n    return state;\n}\n"],"names":["useFlatControllableCheckedItems","createNextFlatCheckedItems","props","headlessTree","useControllableState","initialState","ImmutableMap","empty","state","React","useMemo","selectionMode","checkedItems","createCheckedItems","undefined","defaultState","initializeCheckedItems","data","previousCheckedItems","create","value","checked","treeItem","get","process","env","NODE_ENV","console","error","nextCheckedItems","Map","children","subtree","set","isAncestorsMixed","parent","ancestors","checkedChildren","child","_nextCheckedItems_get","push","length","childrenValues","dangerouslyCreate_unstable","defaultCheckedItems"],"mappings":";;;;;;;;;;;IAIgBA,+BAA+B;eAA/BA;;IAUAC,0BAA0B;eAA1BA;;;;gCAdqB;8BACR;iEACN;oCACY;AAC5B,SAASD,gCAAgCE,KAAK,EAAEC,YAAY;IAC/D,OAAOC,IAAAA,oCAAoB,EAAC;QACxBC,cAAcC,0BAAY,CAACC,KAAK;QAChCC,OAAOC,OAAMC,OAAO,CAAC,IAAIR,MAAMS,aAAa,GAAGT,MAAMU,YAAY,IAAIC,IAAAA,sCAAkB,EAACX,MAAMU,YAAY,IAAIE,WAAW;YACrHZ,MAAMU,YAAY;YAClBV,MAAMS,aAAa;SACtB;QACDI,cAAc,IAAIC,uBAAuBd,OAAOC;IACpD;AACJ;AACO,SAASF,2BAA2BgB,IAAI,EAAEC,oBAAoB,EAAEf,YAAY;IAC/E,IAAIc,KAAKN,aAAa,KAAK,UAAU;QACjC,OAAOL,0BAAY,CAACa,MAAM,CAAC;YACvB;gBACIF,KAAKG,KAAK;gBACVH,KAAKI,OAAO;aACf;SACJ;IACL;IACA,MAAMC,WAAWnB,aAAaoB,GAAG,CAACN,KAAKG,KAAK;IAC5C,IAAI,CAACE,UAAU;QACX,IAAIE,QAAQC,GAAG,CAACC,QAAQ,KAAK,cAAc;YACvC,sCAAsC;YACtCC,QAAQC,KAAK,CAAC,CAAC;UACjB,EAAEX,KAAKG,KAAK,CAAC,WAAW,CAAC;QAC3B;QACA,OAAOF;IACX;IACA,MAAMW,mBAAmB,IAAIC,IAAIZ;IACjC,KAAK,MAAMa,YAAY5B,aAAa6B,OAAO,CAACf,KAAKG,KAAK,EAAE;QACpDS,iBAAiBI,GAAG,CAACF,SAASX,KAAK,EAAEH,KAAKI,OAAO;IACrD;IACAQ,iBAAiBI,GAAG,CAAChB,KAAKG,KAAK,EAAEH,KAAKI,OAAO;IAC7C,IAAIa,mBAAmB;IACvB,KAAK,MAAMC,UAAUhC,aAAaiC,SAAS,CAACd,SAASF,KAAK,EAAE;QACxD,kDAAkD;QAClD,IAAIc,kBAAkB;YAClBL,iBAAiBI,GAAG,CAACE,OAAOf,KAAK,EAAE;YACnC;QACJ;QACA,MAAMiB,kBAAkB,EAAE;QAC1B,KAAK,MAAMC,SAASnC,aAAa4B,QAAQ,CAACI,OAAOf,KAAK,EAAE;YACpD,IAAImB;YACJ,IAAI,AAAC,CAAA,AAACA,CAAAA,wBAAwBV,iBAAiBN,GAAG,CAACe,MAAMlB,KAAK,CAAA,MAAO,QAAQmB,0BAA0B,KAAK,IAAIA,wBAAwB,KAAI,MAAOtB,KAAKI,OAAO,EAAE;gBAC7JgB,gBAAgBG,IAAI,CAACF;YACzB;QACJ;QACA,IAAID,gBAAgBI,MAAM,KAAKN,OAAOO,cAAc,CAACD,MAAM,EAAE;YACzDZ,iBAAiBI,GAAG,CAACE,OAAOf,KAAK,EAAEH,KAAKI,OAAO;QACnD,OAAO;YACH,kDAAkD;YAClDa,mBAAmB;YACnBL,iBAAiBI,GAAG,CAACE,OAAOf,KAAK,EAAE;QACvC;IACJ;IACA,OAAOd,0BAAY,CAACqC,0BAA0B,CAACd;AACnD;AACA,SAASb,uBAAuBd,KAAK,EAAEC,YAAY;IAC/C,IAAI,CAACD,MAAMS,aAAa,EAAE;QACtB,OAAOL,0BAAY,CAACC,KAAK;IAC7B;IACA,IAAIC,QAAQK,IAAAA,sCAAkB,EAACX,MAAM0C,mBAAmB;IACxD,IAAI1C,MAAMS,aAAa,KAAK,eAAe;QACvC,KAAK,MAAM,CAACS,OAAOC,QAAQ,IAAIb,MAAM;YACjCA,QAAQP,2BAA2B;gBAC/BmB;gBACAC;gBACAV,eAAeT,MAAMS,aAAa;YACtC,GAAGH,OAAOL;QACd;IACJ;IACA,OAAOK;AACX"}