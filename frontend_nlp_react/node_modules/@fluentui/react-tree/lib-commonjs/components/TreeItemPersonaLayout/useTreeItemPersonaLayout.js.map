{"version":3,"sources":["useTreeItemPersonaLayout.js"],"sourcesContent":["import * as React from 'react';\nimport { slot } from '@fluentui/react-utilities';\nimport { useTreeContext_unstable } from '../../contexts';\nimport { treeAvatarSize } from '../../utils/tokens';\nimport { useTreeItemLayout_unstable } from '../TreeItemLayout/useTreeItemLayout';\nimport { Checkbox } from '@fluentui/react-checkbox';\nimport { Radio } from '@fluentui/react-radio';\n/**\n * Create the state required to render TreeItemPersonaLayout.\n *\n * The returned state can be modified with hooks such as useTreeItemPersonaLayoutStyles_unstable,\n * before being passed to renderTreeItemPersonaLayout_unstable.\n *\n * @param props - props from this instance of TreeItemPersonaLayout\n * @param ref - reference to root HTMLElement of TreeItemPersonaLayout\n */ export const useTreeItemPersonaLayout_unstable = (props, ref)=>{\n    const { media, children, main, description } = props;\n    const treeItemLayoutState = useTreeItemLayout_unstable({\n        ...props,\n        iconBefore: null,\n        iconAfter: null\n    }, ref);\n    const size = useTreeContext_unstable((ctx)=>ctx.size);\n    const selectionMode = useTreeContext_unstable((ctx)=>ctx.selectionMode);\n    return {\n        ...treeItemLayoutState,\n        components: {\n            expandIcon: 'div',\n            main: 'div',\n            description: 'div',\n            root: 'div',\n            media: 'div',\n            aside: 'div',\n            actions: 'div',\n            // Casting here to a union between checkbox and radio\n            selector: selectionMode === 'multiselect' ? Checkbox : Radio\n        },\n        avatarSize: treeAvatarSize[size],\n        main: slot.always(main, {\n            defaultProps: {\n                children\n            },\n            elementType: 'div'\n        }),\n        media: slot.always(media, {\n            elementType: 'div'\n        }),\n        description: slot.optional(description, {\n            elementType: 'div'\n        })\n    };\n};\n"],"names":["useTreeItemPersonaLayout_unstable","props","ref","media","children","main","description","treeItemLayoutState","useTreeItemLayout_unstable","iconBefore","iconAfter","size","useTreeContext_unstable","ctx","selectionMode","components","expandIcon","root","aside","actions","selector","Checkbox","Radio","avatarSize","treeAvatarSize","slot","always","defaultProps","elementType","optional"],"mappings":";;;;+BAeiBA;;;eAAAA;;;;iEAfM;gCACF;0BACmB;wBACT;mCACY;+BAClB;4BACH;AASX,MAAMA,oCAAoC,CAACC,OAAOC;IACzD,MAAM,EAAEC,KAAK,EAAEC,QAAQ,EAAEC,IAAI,EAAEC,WAAW,EAAE,GAAGL;IAC/C,MAAMM,sBAAsBC,IAAAA,6CAA0B,EAAC;QACnD,GAAGP,KAAK;QACRQ,YAAY;QACZC,WAAW;IACf,GAAGR;IACH,MAAMS,OAAOC,IAAAA,iCAAuB,EAAC,CAACC,MAAMA,IAAIF,IAAI;IACpD,MAAMG,gBAAgBF,IAAAA,iCAAuB,EAAC,CAACC,MAAMA,IAAIC,aAAa;IACtE,OAAO;QACH,GAAGP,mBAAmB;QACtBQ,YAAY;YACRC,YAAY;YACZX,MAAM;YACNC,aAAa;YACbW,MAAM;YACNd,OAAO;YACPe,OAAO;YACPC,SAAS;YACT,qDAAqD;YACrDC,UAAUN,kBAAkB,gBAAgBO,uBAAQ,GAAGC,iBAAK;QAChE;QACAC,YAAYC,sBAAc,CAACb,KAAK;QAChCN,MAAMoB,oBAAI,CAACC,MAAM,CAACrB,MAAM;YACpBsB,cAAc;gBACVvB;YACJ;YACAwB,aAAa;QACjB;QACAzB,OAAOsB,oBAAI,CAACC,MAAM,CAACvB,OAAO;YACtByB,aAAa;QACjB;QACAtB,aAAamB,oBAAI,CAACI,QAAQ,CAACvB,aAAa;YACpCsB,aAAa;QACjB;IACJ;AACJ"}