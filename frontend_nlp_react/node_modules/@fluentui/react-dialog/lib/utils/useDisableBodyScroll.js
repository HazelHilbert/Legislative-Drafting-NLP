import { useFluent_unstable } from '@fluentui/react-shared-contexts';
import { useCallback } from 'react';
const disableScrollElementProp = '__fluentDisableScrollElement';
/**
 * hook that disables body scrolling through `overflow: hidden` CSS property
 */ export function useDisableBodyScroll() {
    const { targetDocument } = useFluent_unstable();
    return useCallback(()=>{
        if (targetDocument) {
            return disableScroll(targetDocument.body);
        }
    }, [
        targetDocument
    ]);
}
/**
 * disables scrolling from a given element through `overflow: hidden` CSS property
 * @param target - element to disable scrolling from
 * @returns a method for enabling scrolling again
 */ export function disableScroll(target) {
    var _target_ownerDocument_defaultView;
    const { clientWidth } = target.ownerDocument.documentElement;
    var _target_ownerDocument_defaultView_innerWidth;
    const innerWidth = (_target_ownerDocument_defaultView_innerWidth = (_target_ownerDocument_defaultView = target.ownerDocument.defaultView) === null || _target_ownerDocument_defaultView === void 0 ? void 0 : _target_ownerDocument_defaultView.innerWidth) !== null && _target_ownerDocument_defaultView_innerWidth !== void 0 ? _target_ownerDocument_defaultView_innerWidth : 0;
    assertIsDisableScrollElement(target);
    if (target[disableScrollElementProp].count === 0) {
        target.style.overflow = 'hidden';
        target.style.paddingRight = `${innerWidth - clientWidth}px`;
    }
    target[disableScrollElementProp].count++;
    return ()=>{
        target[disableScrollElementProp].count--;
        if (target[disableScrollElementProp].count === 0) {
            target.style.overflow = target[disableScrollElementProp].previousOverflowStyle;
            target.style.paddingRight = target[disableScrollElementProp].previousPaddingRightStyle;
        }
    };
}
function assertIsDisableScrollElement(element) {
    var _element, _disableScrollElementProp;
    var _;
    (_ = (_element = element)[_disableScrollElementProp = disableScrollElementProp]) !== null && _ !== void 0 ? _ : _element[_disableScrollElementProp] = {
        count: 0,
        previousOverflowStyle: element.style.overflow,
        previousPaddingRightStyle: element.style.paddingRight
    };
}
