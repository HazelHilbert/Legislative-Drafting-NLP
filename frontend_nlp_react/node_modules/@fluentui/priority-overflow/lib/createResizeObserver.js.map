{"version":3,"sources":["createResizeObserver.ts"],"sourcesContent":["/**\n * Helper function that creates a resize observer in the element's own window global\n * @param elementToObserve - Uses the element's window global to create the resize observer\n * @param callback\n * @returns function to cleanup the resize observer\n */\nexport function observeResize(elementToObserve: HTMLElement, callback: ResizeObserverCallback) {\n  const GlobalResizeObsever = elementToObserve.ownerDocument.defaultView?.ResizeObserver;\n\n  if (!GlobalResizeObsever) {\n    if (process.env.NODE_ENV !== 'production') {\n      // eslint-disable-next-line no-console\n      console.error('@fluentui/priority-overflow', 'ResizeObserver does not exist on container window');\n    }\n    return () => null;\n  }\n\n  let resizeObserver: ResizeObserver | undefined = new GlobalResizeObsever(callback);\n  resizeObserver.observe(elementToObserve);\n\n  return () => {\n    resizeObserver?.disconnect();\n    resizeObserver = undefined;\n  };\n}\n"],"names":["observeResize","elementToObserve","callback","GlobalResizeObsever","ownerDocument","defaultView","ResizeObserver","process","env","NODE_ENV","console","error","resizeObserver","observe","disconnect","undefined"],"mappings":"AAAA;;;;;CAKC,GACD,OAAO,SAASA,cAAcC,gBAA6B,EAAEC,QAAgC;QAC/DD;IAA5B,MAAME,uBAAsBF,8CAAAA,iBAAiBG,aAAa,CAACC,WAAW,cAA1CJ,kEAAAA,4CAA4CK,cAAc;IAEtF,IAAI,CAACH,qBAAqB;QACxB,IAAII,QAAQC,GAAG,CAACC,QAAQ,KAAK,cAAc;YACzC,sCAAsC;YACtCC,QAAQC,KAAK,CAAC,+BAA+B;QAC/C;QACA,OAAO,IAAM;IACf;IAEA,IAAIC,iBAA6C,IAAIT,oBAAoBD;IACzEU,eAAeC,OAAO,CAACZ;IAEvB,OAAO;QACLW,2BAAAA,qCAAAA,eAAgBE,UAAU;QAC1BF,iBAAiBG;IACnB;AACF"}