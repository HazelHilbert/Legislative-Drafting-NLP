{"version":3,"sources":["useAvatar.js"],"sourcesContent":["import * as React from 'react';\nimport { getIntrinsicElementProps, mergeCallbacks, useId, slot } from '@fluentui/react-utilities';\nimport { getInitials } from '../../utils/index';\nimport { PersonRegular } from '@fluentui/react-icons';\nimport { PresenceBadge } from '@fluentui/react-badge';\nimport { useFluent_unstable as useFluent } from '@fluentui/react-shared-contexts';\nimport { useAvatarContext } from '../../contexts/AvatarContext';\nexport const DEFAULT_STRINGS = {\n    active: 'active',\n    inactive: 'inactive'\n};\nexport const useAvatar_unstable = (props, ref)=>{\n    const { dir } = useFluent();\n    const { shape: contextShape, size: contextSize } = useAvatarContext();\n    const { name, size = contextSize !== null && contextSize !== void 0 ? contextSize : 32, shape = contextShape !== null && contextShape !== void 0 ? contextShape : 'circular', active = 'unset', activeAppearance = 'ring', idForColor } = props;\n    let { color = 'neutral' } = props;\n    // Resolve 'colorful' to a specific color name\n    if (color === 'colorful') {\n        var _ref;\n        color = avatarColors[getHashCode((_ref = idForColor !== null && idForColor !== void 0 ? idForColor : name) !== null && _ref !== void 0 ? _ref : '') % avatarColors.length];\n    }\n    const baseId = useId('avatar-');\n    const root = slot.always(getIntrinsicElementProps('span', {\n        role: 'img',\n        id: baseId,\n        // aria-label and/or aria-labelledby are resolved below\n        ...props,\n        ref\n    }, /* excludedPropNames: */ [\n        'name'\n    ]), {\n        elementType: 'span'\n    });\n    const [imageHidden, setImageHidden] = React.useState(undefined);\n    let image = slot.optional(props.image, {\n        defaultProps: {\n            alt: '',\n            role: 'presentation',\n            'aria-hidden': true,\n            hidden: imageHidden\n        },\n        elementType: 'img'\n    }); // Image shouldn't be rendered if its src is not set\n    if (!(image === null || image === void 0 ? void 0 : image.src)) {\n        image = undefined;\n    } // Hide the image if it fails to load and restore it on a successful load\n    if (image) {\n        image.onError = mergeCallbacks(image.onError, ()=>setImageHidden(true));\n        image.onLoad = mergeCallbacks(image.onLoad, ()=>setImageHidden(undefined));\n    } // Resolve the initials slot, defaulted to getInitials.\n    let initials = slot.optional(props.initials, {\n        renderByDefault: true,\n        defaultProps: {\n            children: getInitials(name, dir === 'rtl', {\n                firstInitialOnly: size <= 16\n            }),\n            id: baseId + '__initials'\n        },\n        elementType: 'span'\n    }); // Don't render the initials slot if it's empty\n    if (!(initials === null || initials === void 0 ? void 0 : initials.children)) {\n        initials = undefined;\n    } // Render the icon slot *only if* there aren't any initials or image to display\n    let icon = undefined;\n    if (!initials && (!image || imageHidden)) {\n        icon = slot.optional(props.icon, {\n            renderByDefault: true,\n            defaultProps: {\n                children: /*#__PURE__*/ React.createElement(PersonRegular, null),\n                'aria-hidden': true\n            },\n            elementType: 'span'\n        });\n    }\n    const badge = slot.optional(props.badge, {\n        defaultProps: {\n            size: getBadgeSize(size),\n            id: baseId + '__badge'\n        },\n        elementType: PresenceBadge\n    });\n    let activeAriaLabelElement; // Resolve aria-label and/or aria-labelledby if not provided by the user\n    if (!root['aria-label'] && !root['aria-labelledby']) {\n        if (name) {\n            root['aria-label'] = name; // Include the badge in labelledby if it exists\n            if (badge) {\n                root['aria-labelledby'] = root.id + ' ' + badge.id;\n            }\n        } else if (initials) {\n            // root's aria-label should be the name, but fall back to being labelledby the initials if name is missing\n            root['aria-labelledby'] = initials.id + (badge ? ' ' + badge.id : '');\n        } // Add the active state to the aria label\n        if (active === 'active' || active === 'inactive') {\n            const activeText = DEFAULT_STRINGS[active];\n            if (root['aria-labelledby']) {\n                // If using aria-labelledby, render a hidden span and append it to the labelledby\n                const activeId = baseId + '__active';\n                root['aria-labelledby'] += ' ' + activeId;\n                activeAriaLabelElement = /*#__PURE__*/ React.createElement(\"span\", {\n                    hidden: true,\n                    id: activeId\n                }, activeText);\n            } else if (root['aria-label']) {\n                // Otherwise, just append it to the aria-label\n                root['aria-label'] += ' ' + activeText;\n            }\n        }\n    }\n    return {\n        size,\n        shape,\n        active,\n        activeAppearance,\n        activeAriaLabelElement,\n        color,\n        components: {\n            root: 'span',\n            initials: 'span',\n            icon: 'span',\n            image: 'img',\n            badge: PresenceBadge\n        },\n        root,\n        initials,\n        icon,\n        image,\n        badge\n    };\n};\nconst getBadgeSize = (size)=>{\n    if (size >= 96) {\n        return 'extra-large';\n    } else if (size >= 64) {\n        return 'large';\n    } else if (size >= 56) {\n        return 'medium';\n    } else if (size >= 40) {\n        return 'small';\n    } else if (size >= 28) {\n        return 'extra-small';\n    } else {\n        return 'tiny';\n    }\n};\nconst avatarColors = [\n    'dark-red',\n    'cranberry',\n    'red',\n    'pumpkin',\n    'peach',\n    'marigold',\n    'gold',\n    'brass',\n    'brown',\n    'forest',\n    'seafoam',\n    'dark-green',\n    'light-teal',\n    'teal',\n    'steel',\n    'blue',\n    'royal-blue',\n    'cornflower',\n    'navy',\n    'lavender',\n    'purple',\n    'grape',\n    'lilac',\n    'pink',\n    'magenta',\n    'plum',\n    'beige',\n    'mink',\n    'platinum',\n    'anchor'\n];\nconst getHashCode = (str)=>{\n    let hashCode = 0;\n    for(let len = str.length - 1; len >= 0; len--){\n        const ch = str.charCodeAt(len);\n        const shift = len % 8;\n        hashCode ^= (ch << shift) + (ch >> 8 - shift); // eslint-disable-line no-bitwise\n    }\n    return hashCode;\n};\n"],"names":["DEFAULT_STRINGS","useAvatar_unstable","active","inactive","props","ref","dir","useFluent","shape","contextShape","size","contextSize","useAvatarContext","name","activeAppearance","idForColor","color","_ref","avatarColors","getHashCode","length","baseId","useId","root","slot","always","getIntrinsicElementProps","role","id","elementType","imageHidden","setImageHidden","React","useState","undefined","image","optional","defaultProps","alt","hidden","src","onError","mergeCallbacks","onLoad","initials","renderByDefault","children","getInitials","firstInitialOnly","icon","createElement","PersonRegular","badge","getBadgeSize","PresenceBadge","activeAriaLabelElement","activeText","activeId","components","str","hashCode","len","ch","charCodeAt","shift"],"mappings":"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"}