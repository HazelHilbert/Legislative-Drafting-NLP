"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "useMotionClassNames", {
    enumerable: true,
    get: function() {
        return useMotionClassNames;
    }
});
const _interop_require_wildcard = require("@swc/helpers/_/_interop_require_wildcard");
const _react = /*#__PURE__*/ _interop_require_wildcard._(require("react"));
const _react1 = require("@griffel/react");
const _useReducedMotionStylesstyles = require("../styles/useReducedMotionStyles.styles");
function assertMotionStyles(styles) {
    /**
   * This verification is not necessary in production
   * as we're verifying static properties that will not change between environments
   */ if (process.env.NODE_ENV !== 'production') {
        Object.keys(styles).forEach((key)=>{
            const allowedTypes = [
                'default',
                'enter',
                'exit',
                'entering',
                'entered',
                'idle',
                'exiting',
                'exited',
                'unmounted'
            ];
            /* This means the style provided has a prop that is not allowed as a motion style */ if (!allowedTypes.includes(key)) {
                // eslint-disable-next-line no-console
                console.warn([
                    `@fluentui/react-motion-preview [${assertMotionStyles.name}]:`,
                    `The property "${key}" is not a valid motion style key!`,
                    `The valid keys are: "${allowedTypes.join(', ')}".`,
                    'Be sure to create motion styles properly.'
                ].join('\n'));
            }
        });
    }
}
const useMotionClassNames = (motion, motionStyles)=>{
    const { reduced: reducedMotionStyles } = (0, _useReducedMotionStylesstyles.useReducedMotionStyles)();
    const motionClassNames = _react.useMemo(()=>{
        if (!motionStyles.enter && !motionStyles.exit) {
            return '';
        }
        if (motion.active || motion.type === 'idle') {
            return motionStyles.enter;
        }
        if (!motion.active) {
            return motionStyles.exit;
        }
        return '';
    }, [
        motion.active,
        motion.type,
        motionStyles.enter,
        motionStyles.exit
    ]);
    _react.useEffect(()=>assertMotionStyles(motionStyles), [
        motionStyles
    ]);
    return (0, _react1.mergeClasses)(motionStyles.default, motionClassNames, motionStyles[motion.type], reducedMotionStyles);
};
