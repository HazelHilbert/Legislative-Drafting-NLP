{"version":3,"sources":["dom-style.js"],"sourcesContent":["import { canUseDOM } from '@fluentui/react-utilities';\n/**\n *\n * Gets the computed style of a given element.\n * If the browser supports CSSOM, it will return a ComputedStyleMap object.\n * Otherwise, it will return a CSSStyleDeclaration object.\n */ export const getCSSStyle = (node)=>{\n    if (hasCSSOMSupport(node)) {\n        return node.computedStyleMap();\n    }\n    return getElementComputedStyle(node);\n};\n/**\n * Checks if the browser supports CSSOM.\n * @see https://developer.mozilla.org/en-US/docs/Web/API/Element/computedStyleMap\n *\n * @param node - DOM node\n * @returns Whether the browser supports CSSOM\n */ export const hasCSSOMSupport = (node)=>{\n    /**\n   * As we are using the experimental CSSOM API, we need to check if the browser supports it.\n   * The typecast here is to allow the use of the `number` function that is not yet part of the CSSOM typings.\n   * @see https://www.npmjs.com/package/@types/w3c-css-typed-object-model-level-1\n   */ return Boolean(typeof CSS !== 'undefined' && CSS.number && node.computedStyleMap);\n};\n/**\n * @internal\n *\n * Returns CSS styles of the given node.\n * @param node - DOM node.\n * @returns - CSS styles.\n */ export const getElementComputedStyle = (node)=>{\n    var _node_ownerDocument;\n    var _node_ownerDocument_defaultView;\n    const win = canUseDOM() && ((_node_ownerDocument_defaultView = (_node_ownerDocument = node.ownerDocument) === null || _node_ownerDocument === void 0 ? void 0 : _node_ownerDocument.defaultView) !== null && _node_ownerDocument_defaultView !== void 0 ? _node_ownerDocument_defaultView : // eslint-disable-next-line no-restricted-globals\n    window);\n    if (!win) {\n        return {\n            getPropertyValue: (_)=>''\n        };\n    }\n    return win.getComputedStyle(node, null);\n};\n/**\n * Converts a CSS duration string to milliseconds.\n *\n * @param duration - CSS duration string\n * @returns Duration in milliseconds\n */ export function toMs(duration) {\n    const trimmed = duration.trim();\n    if (trimmed.includes('auto')) {\n        return 0;\n    }\n    if (trimmed.endsWith('ms')) {\n        const parsed = Number(trimmed.replace('ms', ''));\n        return isNaN(parsed) ? 0 : parsed;\n    }\n    return Number(trimmed.slice(0, -1).replace(',', '.')) * 1000;\n}\n/**\n * Gets the computed map property for a given element using the CSSOM API.\n * @see https://developer.mozilla.org/en-US/docs/Web/API/Element/computedStyleMap\n *\n * @param computedStyle - Computed style of the element\n * @param prop - CSS property\n * @returns Computed map property\n */ export const getComputedMapProp = (computedStyle, prop)=>{\n    const props = computedStyle.getAll(prop);\n    if (props.length > 0) {\n        return props.map(({ value, unit })=>`${value}${unit}`);\n    }\n    return [\n        '0'\n    ];\n};\n/**\n * Gets the computed style property for a given element using the getComputedStyle API.\n *\n * @param computedStyle - Computed style of the element\n * @param prop - CSS property\n * @returns Computed style property\n */ export const getComputedStyleProp = (computedStyle, prop)=>{\n    const propValue = computedStyle.getPropertyValue(prop);\n    return propValue ? propValue.split(',') : [\n        '0'\n    ];\n};\n/**\n * Gets the maximum duration from a list of CSS durations.\n *\n * @param durations - List of CSS durations\n * @param delays - List of CSS delays\n * @returns Maximum duration\n */ export const getMaxCSSDuration = (durations, delays)=>{\n    const totalProps = Math.max(durations.length, delays.length);\n    const totalDurations = [];\n    if (totalProps === 0) {\n        return 0;\n    }\n    for(let i = 0; i < totalProps; i++){\n        const duration = toMs(durations[i] || '0');\n        const delay = toMs(delays[i] || '0');\n        totalDurations.push(duration + delay);\n    }\n    return Math.max(...totalDurations);\n};\n/**\n * Gets the motion information for a given element.\n *\n * @param computedStyle - Computed style of the element\n * @returns motion information\n */ export const getMotionDuration = (node)=>{\n    const hasModernCSSSupport = hasCSSOMSupport(node);\n    const computedStyle = getCSSStyle(node);\n    const getProp = (prop)=>{\n        return hasModernCSSSupport ? getComputedMapProp(computedStyle, prop) : getComputedStyleProp(computedStyle, prop);\n    };\n    const transitionDuration = getMaxCSSDuration(getProp('transition-duration'), getProp('transition-delay'));\n    const animationDuration = getMaxCSSDuration(getProp('animation-duration'), getProp('animation-delay'));\n    return Math.max(transitionDuration, animationDuration);\n};\n"],"names":["getCSSStyle","hasCSSOMSupport","getElementComputedStyle","toMs","getComputedMapProp","getComputedStyleProp","getMaxCSSDuration","getMotionDuration","node","computedStyleMap","Boolean","CSS","number","_node_ownerDocument","_node_ownerDocument_defaultView","win","canUseDOM","ownerDocument","defaultView","window","getPropertyValue","_","getComputedStyle","duration","trimmed","trim","includes","endsWith","parsed","Number","replace","isNaN","slice","computedStyle","prop","props","getAll","length","map","value","unit","propValue","split","durations","delays","totalProps","Math","max","totalDurations","i","delay","push","hasModernCSSSupport","getProp","transitionDuration","animationDuration"],"mappings":"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"}