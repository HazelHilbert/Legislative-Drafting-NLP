{"version":3,"sources":["useMotion.ts"],"sourcesContent":["import * as React from 'react';\nimport { useAnimationFrame, useTimeout, useFirstMount } from '@fluentui/react-utilities';\n\nimport { useReducedMotion } from './useReducedMotion';\nimport { getMotionDuration } from '../utils/dom-style';\nimport type { HTMLElementWithStyledMap } from '../utils/dom-style';\n\nexport type MotionOptions = {\n  /**\n   * Whether to animate the element on first mount.\n   *\n   * @default false\n   */\n  animateOnFirstMount?: boolean;\n\n  /**\n   * Duration of the animation in milliseconds.\n   * If not specified, the duration will be inferred from the CSS transition/animation duration.\n   *\n   * @default 0\n   */\n  duration?: number;\n};\n\nexport type MotionType = 'entering' | 'entered' | 'idle' | 'exiting' | 'exited' | 'unmounted';\n\nexport type MotionState<Element extends HTMLElement = HTMLElement> = {\n  /**\n   * Ref to the element.\n   */\n  ref: React.Ref<Element>;\n\n  /**\n   * Current state of the element.\n   *\n   * - `unmounted` - The element is not yet rendered or can be safely removed from the DOM.\n   * - `entering` - The element is performing enter animation.\n   * - `entered` - The element has finished enter animation.\n   * - `idle` - The element is currently not animating, but rendered on screen.\n   * - `exiting` - The element is performing exit animation.\n   * - `exited` - The element has finished exit animation.\n   */\n  type: MotionType;\n\n  /**\n   * Indicates whether the component can be rendered.\n   * Useful to render the element before animating it or to remove it from the DOM after exit animation.\n   */\n  canRender: boolean;\n\n  /**\n   * Indicates whether the component is ready to receive a CSS transition className.\n   * Useful to apply CSS transitions when the element is mounted and ready to be animated.\n   */\n  active: boolean;\n};\n\nexport type MotionShorthandValue = boolean;\nexport type MotionShorthand<Element extends HTMLElement = HTMLElement> = MotionShorthandValue | MotionState<Element>;\n\n/**\n * @internal\n *\n * Checks if components was mounted after first render and a certain condition is met.\n *\n * @param condition - Condition to check\n */\nconst useFirstMountCondition = (condition: boolean): boolean => {\n  const isFirst = React.useRef(true);\n\n  if (isFirst.current && condition) {\n    isFirst.current = false;\n    return true;\n  }\n\n  return isFirst.current;\n};\n\n/**\n * @internal\n *\n * Hook to manage the presence of an element in the DOM based on its CSS transition/animation state.\n *\n * @param present - Whether the element should be present in the DOM\n * @param events - Callbacks for when the element enters or exits the DOM\n */\nfunction useMotionPresence<Element extends HTMLElement>(\n  presence: boolean,\n  options: MotionOptions = {},\n): MotionState<Element> {\n  const { animateOnFirstMount, duration } = { animateOnFirstMount: false, ...options };\n\n  const [type, setType] = React.useState<MotionType>(\n    presence && animateOnFirstMount ? 'entering' : presence ? 'idle' : 'unmounted',\n  );\n  const [active, setActive] = React.useState<boolean>(!animateOnFirstMount && presence);\n\n  const [setAnimationTimeout, clearAnimationTimeout] = useTimeout();\n  const [setTickTimeout, clearTickTimeout] = useTimeout();\n  const [setAnimationFrame, cancelAnimationFrame] = useAnimationFrame();\n\n  const [currentElement, setCurrentElement] = React.useState<HTMLElementWithStyledMap<Element> | null>(null);\n\n  const isReducedMotion = useReducedMotion();\n  const isFirstReactRender = useFirstMount();\n  const isFirstDOMRender = useFirstMountCondition(!!currentElement);\n  const isInitiallyPresent = React.useRef<boolean>(presence).current;\n  const disableAnimation = isReducedMotion || (isFirstDOMRender && isInitiallyPresent && !animateOnFirstMount);\n\n  const ref: React.RefCallback<HTMLElementWithStyledMap<Element>> = React.useCallback(node => {\n    if (!node) {\n      return;\n    }\n\n    setCurrentElement(node);\n  }, []);\n\n  const nextTick = React.useCallback(\n    (cb: () => void) => {\n      setTickTimeout(() => setAnimationFrame(cb), 0);\n\n      return () => {\n        clearTickTimeout();\n        cancelAnimationFrame();\n      };\n    },\n    [cancelAnimationFrame, clearTickTimeout, setAnimationFrame, setTickTimeout],\n  );\n\n  const onFinished = React.useCallback(() => {\n    setType(presence ? 'entered' : 'exited');\n    nextTick(() => setType(presence ? 'idle' : 'unmounted'));\n  }, [nextTick, presence]);\n\n  React.useEffect(() => {\n    if (isFirstReactRender) {\n      return;\n    }\n\n    // In case animation is disabled, we can skip the animation and go straight to the idle state.\n    if (disableAnimation) {\n      setType(presence ? 'idle' : 'unmounted');\n      setActive(presence);\n      return;\n    }\n\n    setType(presence ? 'entering' : 'exiting');\n\n    // If the element is not rendered, nothing to do.\n    if (!currentElement) {\n      return;\n    }\n\n    // Wait for the next frame to ensure the element is rendered and the animation can start.\n    nextTick(() => {\n      setActive(presence);\n\n      // Wait for the next frame to ensure the animation has started.\n      nextTick(() => {\n        const finalDuration = duration || getMotionDuration(currentElement);\n\n        if (finalDuration === 0) {\n          onFinished();\n          return;\n        }\n\n        /**\n         * Wait for the animation to finish before updating the state.\n         * This is an alternative to using the `transitionend` event which can be unreliable as it fires multiple times\n         * if the transition has multiple properties.\n         */\n        setAnimationTimeout(() => onFinished(), finalDuration);\n      });\n    });\n\n    return () => clearAnimationTimeout();\n    /*\n     * Only tracks dependencies that are either not stable or are used in the callbacks\n     * This is to avoid re-running the effect on every render, especially when the DOM element is not rendered\n     */\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [currentElement, disableAnimation, onFinished, presence]);\n\n  return React.useMemo<MotionState<Element>>(\n    () => ({\n      ref,\n      type,\n      active,\n      canRender: presence || type !== 'unmounted',\n    }),\n    // No need to add ref to the deps array as it is stable\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [active, type, presence],\n  );\n}\n\n/**\n * Returns a default motion state.\n */\nexport function getDefaultMotionState<Element extends HTMLElement>(): MotionState<Element> {\n  return {\n    ref: React.createRef<Element>(),\n    type: 'unmounted',\n    active: false,\n    canRender: false,\n  };\n}\n\n/**\n * Hook to manage the presence of an element in the DOM based on its CSS transition/animation state.\n *\n * @param props - Motion props to manage the presence of an element in the DOM\n * @param options - Motion options to configure the hook\n */\nexport function useMotion<Element extends HTMLElement>(\n  shorthand: MotionShorthand<Element>,\n  options?: MotionOptions,\n): MotionState<Element> {\n  const isShorthand = typeof shorthand === 'object';\n  const motion = useMotionPresence<Element>(isShorthand ? false : shorthand, options);\n\n  return isShorthand ? shorthand : motion;\n}\n"],"names":["React","useAnimationFrame","useTimeout","useFirstMount","useReducedMotion","getMotionDuration","useFirstMountCondition","condition","isFirst","useRef","current","useMotionPresence","presence","options","animateOnFirstMount","duration","type","setType","useState","active","setActive","setAnimationTimeout","clearAnimationTimeout","setTickTimeout","clearTickTimeout","setAnimationFrame","cancelAnimationFrame","currentElement","setCurrentElement","isReducedMotion","isFirstReactRender","isFirstDOMRender","isInitiallyPresent","disableAnimation","ref","useCallback","node","nextTick","cb","onFinished","useEffect","finalDuration","useMemo","canRender","getDefaultMotionState","createRef","useMotion","shorthand","isShorthand","motion"],"mappings":"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"}