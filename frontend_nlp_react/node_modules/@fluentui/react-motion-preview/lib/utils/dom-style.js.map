{"version":3,"sources":["dom-style.ts"],"sourcesContent":["import { canUseDOM } from '@fluentui/react-utilities';\n\n/**\n * CSS Typed Object Model\n * @see https://drafts.css-houdini.org/css-typed-om-1/\n * @see https://developer.mozilla.org/en-US/docs/Web/API/CSSUnitValue\n */\nexport interface CSSUnitValue {\n  value: number;\n  readonly unit: string;\n}\n\n/**\n * Style property map read only.\n * @see https://developer.mozilla.org/en-US/docs/Web/API/StylePropertyMapReadOnly\n */\nexport interface StylePropertyMapReadOnly {\n  [Symbol.iterator](): IterableIterator<[string, CSSUnitValue[]]>;\n\n  get(property: string): CSSUnitValue | undefined;\n  getAll(property: string): CSSUnitValue[];\n  has(property: string): boolean;\n  readonly size: number;\n}\n\n/**\n * HTMLElement with styled map.\n * @see https://developer.mozilla.org/en-US/docs/Web/API/Element/computedStyleMap\n */\nexport type HTMLElementWithStyledMap<T extends HTMLElement = HTMLElement> = T & {\n  computedStyleMap(): StylePropertyMapReadOnly;\n};\n\n/**\n * CSS with number parsing.\n * @see https://drafts.css-houdini.org/css-typed-om-1/#css\n * @see https://developer.mozilla.org/en-US/docs/Web/API/CSS/number\n */\nexport type CSSWithNumber = typeof CSS & {\n  number(value: number): {\n    value: number;\n    readonly unit: string;\n  };\n};\n\n/**\n *\n * Gets the computed style of a given element.\n * If the browser supports CSSOM, it will return a ComputedStyleMap object.\n * Otherwise, it will return a CSSStyleDeclaration object.\n */\nexport const getCSSStyle = (node: HTMLElementWithStyledMap): CSSStyleDeclaration | StylePropertyMapReadOnly => {\n  if (hasCSSOMSupport(node)) {\n    return node.computedStyleMap() as unknown as StylePropertyMapReadOnly;\n  }\n\n  return getElementComputedStyle(node);\n};\n\n/**\n * Checks if the browser supports CSSOM.\n * @see https://developer.mozilla.org/en-US/docs/Web/API/Element/computedStyleMap\n *\n * @param node - DOM node\n * @returns Whether the browser supports CSSOM\n */\nexport const hasCSSOMSupport = (node: HTMLElementWithStyledMap) => {\n  /**\n   * As we are using the experimental CSSOM API, we need to check if the browser supports it.\n   * The typecast here is to allow the use of the `number` function that is not yet part of the CSSOM typings.\n   * @see https://www.npmjs.com/package/@types/w3c-css-typed-object-model-level-1\n   */\n  return Boolean(typeof CSS !== 'undefined' && (CSS as CSSWithNumber).number && node.computedStyleMap);\n};\n\n/**\n * @internal\n *\n * Returns CSS styles of the given node.\n * @param node - DOM node.\n * @returns - CSS styles.\n */\nexport const getElementComputedStyle = (node: HTMLElement): CSSStyleDeclaration => {\n  const win =\n    canUseDOM() &&\n    (node.ownerDocument?.defaultView ??\n      // eslint-disable-next-line no-restricted-globals\n      window);\n\n  if (!win) {\n    return {\n      getPropertyValue: (_: string) => '',\n    } as CSSStyleDeclaration;\n  }\n\n  return win.getComputedStyle(node, null);\n};\n\n/**\n * Converts a CSS duration string to milliseconds.\n *\n * @param duration - CSS duration string\n * @returns Duration in milliseconds\n */\nexport function toMs(duration: string): number {\n  const trimmed = duration.trim();\n\n  if (trimmed.includes('auto')) {\n    return 0;\n  }\n\n  if (trimmed.endsWith('ms')) {\n    const parsed = Number(trimmed.replace('ms', ''));\n\n    return isNaN(parsed) ? 0 : parsed;\n  }\n\n  return Number(trimmed.slice(0, -1).replace(',', '.')) * 1000;\n}\n\n/**\n * Gets the computed map property for a given element using the CSSOM API.\n * @see https://developer.mozilla.org/en-US/docs/Web/API/Element/computedStyleMap\n *\n * @param computedStyle - Computed style of the element\n * @param prop - CSS property\n * @returns Computed map property\n */\nexport const getComputedMapProp = (computedStyle: StylePropertyMapReadOnly, prop: string): string[] => {\n  const props = computedStyle.getAll(prop);\n\n  if (props.length > 0) {\n    return props.map(({ value, unit }) => `${value}${unit}`);\n  }\n\n  return ['0'];\n};\n\n/**\n * Gets the computed style property for a given element using the getComputedStyle API.\n *\n * @param computedStyle - Computed style of the element\n * @param prop - CSS property\n * @returns Computed style property\n */\nexport const getComputedStyleProp = (computedStyle: CSSStyleDeclaration, prop: string): string[] => {\n  const propValue = computedStyle.getPropertyValue(prop);\n\n  return propValue ? propValue.split(',') : ['0'];\n};\n\n/**\n * Gets the maximum duration from a list of CSS durations.\n *\n * @param durations - List of CSS durations\n * @param delays - List of CSS delays\n * @returns Maximum duration\n */\nexport const getMaxCSSDuration = (durations: string[], delays: string[]): number => {\n  const totalProps = Math.max(durations.length, delays.length);\n  const totalDurations = [];\n\n  if (totalProps === 0) {\n    return 0;\n  }\n\n  for (let i = 0; i < totalProps; i++) {\n    const duration = toMs(durations[i] || '0');\n    const delay = toMs(delays[i] || '0');\n\n    totalDurations.push(duration + delay);\n  }\n\n  return Math.max(...totalDurations);\n};\n\n/**\n * Gets the motion information for a given element.\n *\n * @param computedStyle - Computed style of the element\n * @returns motion information\n */\nexport const getMotionDuration = (node: HTMLElementWithStyledMap) => {\n  const hasModernCSSSupport = hasCSSOMSupport(node);\n  const computedStyle = getCSSStyle(node);\n\n  const getProp = (prop: string): string[] => {\n    return hasModernCSSSupport\n      ? getComputedMapProp(computedStyle as StylePropertyMapReadOnly, prop)\n      : getComputedStyleProp(computedStyle as CSSStyleDeclaration, prop);\n  };\n\n  const transitionDuration = getMaxCSSDuration(getProp('transition-duration'), getProp('transition-delay'));\n  const animationDuration = getMaxCSSDuration(getProp('animation-duration'), getProp('animation-delay'));\n\n  return Math.max(transitionDuration, animationDuration);\n};\n"],"names":["canUseDOM","getCSSStyle","node","hasCSSOMSupport","computedStyleMap","getElementComputedStyle","Boolean","CSS","number","win","ownerDocument","defaultView","window","getPropertyValue","_","getComputedStyle","toMs","duration","trimmed","trim","includes","endsWith","parsed","Number","replace","isNaN","slice","getComputedMapProp","computedStyle","prop","props","getAll","length","map","value","unit","getComputedStyleProp","propValue","split","getMaxCSSDuration","durations","delays","totalProps","Math","max","totalDurations","i","delay","push","getMotionDuration","hasModernCSSSupport","getProp","transitionDuration","animationDuration"],"mappings":"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"}