import * as React_2 from 'react';

/**
 * Returns a default motion state.
 */
export declare function getDefaultMotionState<Element extends HTMLElement>(): MotionState<Element>;

export declare type MotionClassNames = {
    [key in MotionStylesKeys]?: string;
};

export declare type MotionOptions = {
    /**
     * Whether to animate the element on first mount.
     *
     * @default false
     */
    animateOnFirstMount?: boolean;
    /**
     * Duration of the animation in milliseconds.
     * If not specified, the duration will be inferred from the CSS transition/animation duration.
     *
     * @default 0
     */
    duration?: number;
};

export declare type MotionShorthand<Element extends HTMLElement = HTMLElement> = MotionShorthandValue | MotionState<Element>;

export declare type MotionShorthandValue = boolean;

export declare type MotionState<Element extends HTMLElement = HTMLElement> = {
    /**
     * Ref to the element.
     */
    ref: React_2.Ref<Element>;
    /**
     * Current state of the element.
     *
     * - `unmounted` - The element is not yet rendered or can be safely removed from the DOM.
     * - `entering` - The element is performing enter animation.
     * - `entered` - The element has finished enter animation.
     * - `idle` - The element is currently not animating, but rendered on screen.
     * - `exiting` - The element is performing exit animation.
     * - `exited` - The element has finished exit animation.
     */
    type: MotionType;
    /**
     * Indicates whether the component can be rendered.
     * Useful to render the element before animating it or to remove it from the DOM after exit animation.
     */
    canRender: boolean;
    /**
     * Indicates whether the component is ready to receive a CSS transition className.
     * Useful to apply CSS transitions when the element is mounted and ready to be animated.
     */
    active: boolean;
};

export declare type MotionStylesKeys = 'default' | 'enter' | 'exit' | MotionType;

export declare type MotionType = 'entering' | 'entered' | 'idle' | 'exiting' | 'exited' | 'unmounted';

/**
 * Hook to manage the presence of an element in the DOM based on its CSS transition/animation state.
 *
 * @param props - Motion props to manage the presence of an element in the DOM
 * @param options - Motion options to configure the hook
 */
export declare function useMotion<Element extends HTMLElement>(shorthand: MotionShorthand<Element>, options?: MotionOptions): MotionState<Element>;

export declare const useMotionClassNames: (motion: MotionState, motionStyles: MotionClassNames) => string;

export { }
