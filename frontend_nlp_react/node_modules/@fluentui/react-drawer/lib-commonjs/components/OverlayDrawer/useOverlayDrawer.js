"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "useOverlayDrawer_unstable", {
    enumerable: true,
    get: function() {
        return useOverlayDrawer_unstable;
    }
});
const _interop_require_wildcard = require("@swc/helpers/_/_interop_require_wildcard");
const _react = /*#__PURE__*/ _interop_require_wildcard._(require("react"));
const _reactutilities = require("@fluentui/react-utilities");
const _reactdialog = require("@fluentui/react-dialog");
const _reactmotionpreview = require("@fluentui/react-motion-preview");
const _useDrawerDefaultProps = require("../../shared/useDrawerDefaultProps");
const _OverlayDrawerSurface = require("./OverlayDrawerSurface");
const useOverlayDrawer_unstable = (props, ref)=>{
    const { open, size, position } = (0, _useDrawerDefaultProps.useDrawerDefaultProps)(props);
    const { modalType = 'modal', inertTrapFocus, defaultOpen = false, onOpenChange } = props;
    const motion = (0, _reactmotionpreview.useMotion)(open);
    const backdropProps = _reactutilities.slot.resolveShorthand(props.backdrop);
    const hasCustomBackdrop = modalType !== 'non-modal' && backdropProps !== null;
    const root = _reactutilities.slot.always({
        ...props,
        backdrop: hasCustomBackdrop ? {
            ...backdropProps
        } : null
    }, {
        elementType: _OverlayDrawerSurface.OverlayDrawerSurface,
        defaultProps: {
            ref: (0, _reactutilities.useMergedRefs)(ref, motion.ref)
        }
    });
    const dialog = _reactutilities.slot.always({
        open: true,
        defaultOpen,
        onOpenChange,
        inertTrapFocus,
        modalType,
        /**
       * children is not needed here because we construct the children in the render function,
       * but it's required by DialogProps
       */ children: null
    }, {
        elementType: _reactdialog.Dialog
    });
    return {
        components: {
            root: _OverlayDrawerSurface.OverlayDrawerSurface,
            dialog: _reactdialog.Dialog
        },
        root,
        dialog,
        size,
        position,
        motion
    };
};
