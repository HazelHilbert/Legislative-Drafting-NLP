{"version":3,"sources":["FluentProvider.types.ts"],"sourcesContent":["import type { IconDirectionContextValue } from '@fluentui/react-icons';\nimport type {\n  OverridesContextValue_unstable as OverridesContextValue,\n  ProviderContextValue_unstable as ProviderContextValue,\n  TooltipVisibilityContextValue_unstable as TooltipVisibilityContextValue,\n  ThemeClassNameContextValue_unstable as ThemeClassNameContextValue,\n  ThemeContextValue_unstable as ThemeContextValue,\n  CustomStyleHooksContextValue_unstable as CustomStyleHooksContextValue,\n} from '@fluentui/react-shared-contexts';\nimport type { PartialTheme } from '@fluentui/react-theme';\nimport type { ComponentProps, ComponentState, Slot } from '@fluentui/react-utilities';\n\nexport type FluentProviderSlots = {\n  root: Slot<'div'>;\n};\n\n// exported for callers to avoid referencing react-shared-context\n// and applying Partial<> when passing custom style hooks.\nexport type FluentProviderCustomStyleHooks = CustomStyleHooksContextValue;\n\nexport type FluentProviderProps = Omit<ComponentProps<FluentProviderSlots>, 'dir'> & {\n  /**\n   * Passes styles applied to a component down to portals if enabled.\n   * @default true\n   */\n  applyStylesToPortals?: boolean;\n\n  /** Sets the hooks for custom styling components. */\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  customStyleHooks_unstable?: FluentProviderCustomStyleHooks;\n\n  /** Sets the direction of text & generated styles. */\n  dir?: 'ltr' | 'rtl';\n\n  /** Provides the document, can be undefined during SSR render. */\n  targetDocument?: Document;\n\n  /** Sets the theme used in a scope. */\n  theme?: PartialTheme;\n\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  overrides_unstable?: OverridesContextValue;\n};\n\nexport type FluentProviderState = ComponentState<FluentProviderSlots> &\n  Pick<FluentProviderProps, 'targetDocument'> &\n  Required<\n    Pick<FluentProviderProps, 'applyStylesToPortals' | 'customStyleHooks_unstable' | 'dir' | 'overrides_unstable'>\n  > & {\n    theme: ThemeContextValue;\n    themeClassName: string;\n    /**\n     * Props used to render SSR theme variables style element\n     */\n    serverStyleProps: {\n      /**\n       * CSS rule containing CSS variables\n       */\n      cssRule: string;\n      /**\n       * Additional attributes applied to the style element\n       */\n      attributes: Record<string, string>;\n    };\n  };\n\nexport type FluentProviderContextValues = Pick<\n  FluentProviderState,\n  'customStyleHooks_unstable' | 'theme' | 'overrides_unstable'\n> & {\n  provider: ProviderContextValue;\n  themeClassName: ThemeClassNameContextValue;\n  textDirection: 'ltr' | 'rtl';\n  iconDirection: IconDirectionContextValue;\n  tooltip: TooltipVisibilityContextValue;\n};\n"],"names":[],"mappings":"AAAA,WA2EE"}