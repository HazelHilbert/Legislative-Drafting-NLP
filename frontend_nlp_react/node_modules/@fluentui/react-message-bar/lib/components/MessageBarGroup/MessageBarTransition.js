import * as React from 'react';
import { Transition } from 'react-transition-group';
import { MessageBarTransitionContextProvider } from '../../contexts/messageBarTransitionContext';
const getClassName = (status, enterClassName, exitClassName, animate)=>{
    switch(status){
        case 'entering':
        case 'entered':
            return animate === 'both' ? enterClassName : '';
        case 'exiting':
        case 'exited':
            return exitClassName;
        default:
            return '';
    }
};
/**
 * Internal component that controls the animation transition for MessageBar components
 * @internal
 */ export const MessageBarTransition = ({ children, enterClassName, exitClassName, animate, ...rest })=>{
    const nodeRef = React.useRef(null);
    return /*#__PURE__*/ React.createElement(Transition, {
        timeout: 250,
        nodeRef: nodeRef,
        ...rest
    }, (state)=>/*#__PURE__*/ React.createElement(MessageBarTransitionInner, {
            animate: animate,
            enterClassName: enterClassName,
            exitClassName: exitClassName,
            nodeRef: nodeRef,
            state: state
        }, children));
};
const MessageBarTransitionInner = ({ children, state, enterClassName, exitClassName, animate, nodeRef })=>{
    const className = getClassName(state, enterClassName, exitClassName, animate);
    const context = React.useMemo(()=>({
            className,
            nodeRef
        }), [
        className,
        nodeRef
    ]);
    return /*#__PURE__*/ React.createElement(MessageBarTransitionContextProvider, {
        value: context
    }, children);
};
