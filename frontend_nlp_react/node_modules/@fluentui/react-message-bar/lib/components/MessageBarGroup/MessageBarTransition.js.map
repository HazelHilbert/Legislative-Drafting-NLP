{"version":3,"sources":["MessageBarTransition.tsx"],"sourcesContent":["import * as React from 'react';\nimport { Transition, TransitionStatus } from 'react-transition-group';\nimport { MessageBarTransitionContextProvider } from '../../contexts/messageBarTransitionContext';\nimport { MessageBarGroupProps } from './MessageBarGroup.types';\n\nconst getClassName = (\n  status: TransitionStatus,\n  enterClassName: string,\n  exitClassName: string,\n  animate: MessageBarGroupProps['animate'],\n) => {\n  switch (status) {\n    case 'entering':\n    case 'entered':\n      return animate === 'both' ? enterClassName : '';\n    case 'exiting':\n    case 'exited':\n      return exitClassName;\n    default:\n      return '';\n  }\n};\n\n/**\n * Internal component that controls the animation transition for MessageBar components\n * @internal\n */\nexport const MessageBarTransition: React.FC<{\n  children: React.ReactElement;\n  enterClassName: string;\n  exitClassName: string;\n  animate: MessageBarGroupProps['animate'];\n}> = ({ children, enterClassName, exitClassName, animate, ...rest }) => {\n  const nodeRef = React.useRef<HTMLDivElement>(null);\n\n  return (\n    <Transition timeout={250} nodeRef={nodeRef} {...rest}>\n      {state => (\n        <MessageBarTransitionInner\n          animate={animate}\n          enterClassName={enterClassName}\n          exitClassName={exitClassName}\n          nodeRef={nodeRef}\n          state={state}\n        >\n          {children}\n        </MessageBarTransitionInner>\n      )}\n    </Transition>\n  );\n};\n\nconst MessageBarTransitionInner: React.FC<{\n  children: React.ReactElement;\n  enterClassName: string;\n  exitClassName: string;\n  animate: MessageBarGroupProps['animate'];\n  nodeRef: React.Ref<HTMLDivElement | null>;\n  state: TransitionStatus;\n}> = ({ children, state, enterClassName, exitClassName, animate, nodeRef }) => {\n  const className = getClassName(state, enterClassName, exitClassName, animate);\n  const context = React.useMemo(\n    () => ({\n      className,\n      nodeRef,\n    }),\n    [className, nodeRef],\n  );\n\n  return <MessageBarTransitionContextProvider value={context}>{children}</MessageBarTransitionContextProvider>;\n};\n"],"names":["React","Transition","MessageBarTransitionContextProvider","getClassName","status","enterClassName","exitClassName","animate","MessageBarTransition","children","rest","nodeRef","useRef","timeout","state","MessageBarTransitionInner","className","context","useMemo","value"],"mappings":"AAAA,YAAYA,WAAW,QAAQ;AAC/B,SAASC,UAAU,QAA0B,yBAAyB;AACtE,SAASC,mCAAmC,QAAQ,6CAA6C;AAGjG,MAAMC,eAAe,CACnBC,QACAC,gBACAC,eACAC;IAEA,OAAQH;QACN,KAAK;QACL,KAAK;YACH,OAAOG,YAAY,SAASF,iBAAiB;QAC/C,KAAK;QACL,KAAK;YACH,OAAOC;QACT;YACE,OAAO;IACX;AACF;AAEA;;;CAGC,GACD,OAAO,MAAME,uBAKR,CAAC,EAAEC,QAAQ,EAAEJ,cAAc,EAAEC,aAAa,EAAEC,OAAO,EAAE,GAAGG,MAAM;IACjE,MAAMC,UAAUX,MAAMY,MAAM,CAAiB;IAE7C,qBACE,oBAACX;QAAWY,SAAS;QAAKF,SAASA;QAAU,GAAGD,IAAI;OACjDI,CAAAA,sBACC,oBAACC;YACCR,SAASA;YACTF,gBAAgBA;YAChBC,eAAeA;YACfK,SAASA;YACTG,OAAOA;WAENL;AAKX,EAAE;AAEF,MAAMM,4BAOD,CAAC,EAAEN,QAAQ,EAAEK,KAAK,EAAET,cAAc,EAAEC,aAAa,EAAEC,OAAO,EAAEI,OAAO,EAAE;IACxE,MAAMK,YAAYb,aAAaW,OAAOT,gBAAgBC,eAAeC;IACrE,MAAMU,UAAUjB,MAAMkB,OAAO,CAC3B,IAAO,CAAA;YACLF;YACAL;QACF,CAAA,GACA;QAACK;QAAWL;KAAQ;IAGtB,qBAAO,oBAACT;QAAoCiB,OAAOF;OAAUR;AAC/D"}