{"version":3,"sources":["useMessageBarReflow.js"],"sourcesContent":["import * as React from 'react';\nimport { useFluent_unstable as useFluent } from '@fluentui/react-shared-contexts';\nimport { isHTMLElement } from '@fluentui/react-utilities';\nexport function useMessageBarReflow(enabled = false) {\n    const { targetDocument } = useFluent();\n    const forceUpdate = React.useReducer(()=>({}), {})[1];\n    const reflowingRef = React.useRef(false);\n    const resizeObserverRef = React.useRef(null);\n    const prevInlineSizeRef = React.useRef(-1);\n    const handleResize = React.useCallback((entries)=>{\n        // Resize observer is only owned by this component - one resize observer entry expected\n        // No need to support multiple fragments - one border box entry expected\n        if (process.env.NODE_ENV !== 'production' && entries.length > 1) {\n            // eslint-disable-next-line no-console\n            console.error([\n                'useMessageBarReflow: Resize observer should only have one entry. ',\n                'If multiple entries are observed, the first entry will be used.',\n                'This is a bug, please report it to the Fluent UI team.'\n            ].join(' '));\n        }\n        const entry = entries[0];\n        const borderBoxSize = entry === null || entry === void 0 ? void 0 : entry.borderBoxSize[0];\n        if (!borderBoxSize || !entry) {\n            return;\n        }\n        const { inlineSize } = borderBoxSize;\n        const { target } = entry;\n        if (!isHTMLElement(target)) {\n            return;\n        }\n        let nextReflowing;\n        // No easy way to really determine when the single line layout will fit\n        // Just keep try to set single line layout as long as the size is growing\n        // Will cause flickering when size is being adjusted gradually (i.e. drag) - but this should not be a common case\n        if (reflowingRef.current) {\n            if (prevInlineSizeRef.current < inlineSize) {\n                nextReflowing = false;\n            }\n        } else {\n            const scrollWidth = target.scrollWidth;\n            if (inlineSize < scrollWidth) {\n                nextReflowing = true;\n            }\n        }\n        prevInlineSizeRef.current = inlineSize;\n        if (typeof nextReflowing !== 'undefined' && reflowingRef.current !== nextReflowing) {\n            reflowingRef.current = nextReflowing;\n            forceUpdate();\n        }\n    }, [\n        forceUpdate\n    ]);\n    const ref = React.useCallback((el)=>{\n        var _resizeObserverRef_current;\n        if (!enabled || !el || !(targetDocument === null || targetDocument === void 0 ? void 0 : targetDocument.defaultView)) {\n            return;\n        }\n        (_resizeObserverRef_current = resizeObserverRef.current) === null || _resizeObserverRef_current === void 0 ? void 0 : _resizeObserverRef_current.disconnect();\n        const win = targetDocument.defaultView;\n        const resizeObserver = new win.ResizeObserver(handleResize);\n        resizeObserverRef.current = resizeObserver;\n        resizeObserver.observe(el, {\n            box: 'border-box'\n        });\n    }, [\n        targetDocument,\n        handleResize,\n        enabled\n    ]);\n    React.useEffect(()=>{\n        return ()=>{\n            var _resizeObserverRef_current;\n            (_resizeObserverRef_current = resizeObserverRef.current) === null || _resizeObserverRef_current === void 0 ? void 0 : _resizeObserverRef_current.disconnect();\n        };\n    }, []);\n    return {\n        ref,\n        reflowing: reflowingRef.current\n    };\n}\n"],"names":["useMessageBarReflow","enabled","targetDocument","useFluent","forceUpdate","React","useReducer","reflowingRef","useRef","resizeObserverRef","prevInlineSizeRef","handleResize","useCallback","entries","process","env","NODE_ENV","length","console","error","join","entry","borderBoxSize","inlineSize","target","isHTMLElement","nextReflowing","current","scrollWidth","ref","el","_resizeObserverRef_current","defaultView","disconnect","win","resizeObserver","ResizeObserver","observe","box","useEffect","reflowing"],"mappings":";;;;+BAGgBA;;;eAAAA;;;;iEAHO;qCACyB;gCAClB;AACvB,SAASA,oBAAoBC,UAAU,KAAK;IAC/C,MAAM,EAAEC,cAAc,EAAE,GAAGC,IAAAA,uCAAS;IACpC,MAAMC,cAAcC,OAAMC,UAAU,CAAC,IAAK,CAAA,CAAC,CAAA,GAAI,CAAC,EAAE,CAAC,EAAE;IACrD,MAAMC,eAAeF,OAAMG,MAAM,CAAC;IAClC,MAAMC,oBAAoBJ,OAAMG,MAAM,CAAC;IACvC,MAAME,oBAAoBL,OAAMG,MAAM,CAAC,CAAC;IACxC,MAAMG,eAAeN,OAAMO,WAAW,CAAC,CAACC;QACpC,uFAAuF;QACvF,wEAAwE;QACxE,IAAIC,QAAQC,GAAG,CAACC,QAAQ,KAAK,gBAAgBH,QAAQI,MAAM,GAAG,GAAG;YAC7D,sCAAsC;YACtCC,QAAQC,KAAK,CAAC;gBACV;gBACA;gBACA;aACH,CAACC,IAAI,CAAC;QACX;QACA,MAAMC,QAAQR,OAAO,CAAC,EAAE;QACxB,MAAMS,gBAAgBD,UAAU,QAAQA,UAAU,KAAK,IAAI,KAAK,IAAIA,MAAMC,aAAa,CAAC,EAAE;QAC1F,IAAI,CAACA,iBAAiB,CAACD,OAAO;YAC1B;QACJ;QACA,MAAM,EAAEE,UAAU,EAAE,GAAGD;QACvB,MAAM,EAAEE,MAAM,EAAE,GAAGH;QACnB,IAAI,CAACI,IAAAA,6BAAa,EAACD,SAAS;YACxB;QACJ;QACA,IAAIE;QACJ,uEAAuE;QACvE,yEAAyE;QACzE,iHAAiH;QACjH,IAAInB,aAAaoB,OAAO,EAAE;YACtB,IAAIjB,kBAAkBiB,OAAO,GAAGJ,YAAY;gBACxCG,gBAAgB;YACpB;QACJ,OAAO;YACH,MAAME,cAAcJ,OAAOI,WAAW;YACtC,IAAIL,aAAaK,aAAa;gBAC1BF,gBAAgB;YACpB;QACJ;QACAhB,kBAAkBiB,OAAO,GAAGJ;QAC5B,IAAI,OAAOG,kBAAkB,eAAenB,aAAaoB,OAAO,KAAKD,eAAe;YAChFnB,aAAaoB,OAAO,GAAGD;YACvBtB;QACJ;IACJ,GAAG;QACCA;KACH;IACD,MAAMyB,MAAMxB,OAAMO,WAAW,CAAC,CAACkB;QAC3B,IAAIC;QACJ,IAAI,CAAC9B,WAAW,CAAC6B,MAAM,CAAE5B,CAAAA,mBAAmB,QAAQA,mBAAmB,KAAK,IAAI,KAAK,IAAIA,eAAe8B,WAAW,AAAD,GAAI;YAClH;QACJ;QACCD,CAAAA,6BAA6BtB,kBAAkBkB,OAAO,AAAD,MAAO,QAAQI,+BAA+B,KAAK,IAAI,KAAK,IAAIA,2BAA2BE,UAAU;QAC3J,MAAMC,MAAMhC,eAAe8B,WAAW;QACtC,MAAMG,iBAAiB,IAAID,IAAIE,cAAc,CAACzB;QAC9CF,kBAAkBkB,OAAO,GAAGQ;QAC5BA,eAAeE,OAAO,CAACP,IAAI;YACvBQ,KAAK;QACT;IACJ,GAAG;QACCpC;QACAS;QACAV;KACH;IACDI,OAAMkC,SAAS,CAAC;QACZ,OAAO;YACH,IAAIR;YACHA,CAAAA,6BAA6BtB,kBAAkBkB,OAAO,AAAD,MAAO,QAAQI,+BAA+B,KAAK,IAAI,KAAK,IAAIA,2BAA2BE,UAAU;QAC/J;IACJ,GAAG,EAAE;IACL,OAAO;QACHJ;QACAW,WAAWjC,aAAaoB,OAAO;IACnC;AACJ"}