{"version":3,"sources":["useAriaLiveAnnouncer.ts"],"sourcesContent":["import { useFluent_unstable as useFluent } from '@fluentui/react-shared-contexts';\nimport { createPriorityQueue, useTimeout } from '@fluentui/react-utilities';\nimport * as React from 'react';\n\nimport type {\n  AriaLiveAnnounceFn,\n  AriaLiveAnnouncerState,\n  AriaLiveAnnouncerProps,\n  AriaLiveMessage,\n} from './AriaLiveAnnouncer.types';\n\n/** The duration the message needs to be in present in DOM for screen readers to register a change and announce */\nconst MESSAGE_DURATION = 500;\n\nconst VISUALLY_HIDDEN_STYLES = {\n  clip: 'rect(0px, 0px, 0px, 0px)',\n  height: '1px',\n  margin: '-1px',\n  width: '1px',\n  position: 'absolute',\n  overflow: 'hidden',\n  textWrap: 'nowrap',\n};\n\nexport const useAriaLiveAnnouncer_unstable = (props: AriaLiveAnnouncerProps): AriaLiveAnnouncerState => {\n  const { targetDocument } = useFluent();\n\n  const timeoutRef = React.useRef<number | undefined>(undefined);\n  const [setAnnounceTimeout, clearAnnounceTimeout] = useTimeout();\n\n  const elementRef = React.useRef<HTMLDivElement | null>(null);\n\n  const order = React.useRef(0);\n\n  // investigate alert implementation later\n  // const [alertList, setAlertList] = React.useState<string[]>([]);\n\n  const batchMessages = React.useRef<{ batchId: string; message: AriaLiveMessage }[]>([]);\n\n  const [messageQueue] = React.useState(() =>\n    createPriorityQueue<AriaLiveMessage>((a, b) => {\n      if (a.priority !== b.priority) {\n        return b.priority - a.priority;\n      }\n\n      return a.createdAt - b.createdAt;\n    }),\n  );\n\n  const queueMessage = React.useCallback(() => {\n    if (timeoutRef.current || !elementRef.current) {\n      return;\n    }\n\n    const runCycle = () => {\n      if (!elementRef.current) {\n        return;\n      }\n\n      if (targetDocument && messageQueue.peek()) {\n        // need a wrapping element for Narrator/Edge, which currently does not pick up text-only live region changes\n        // consistently\n        // if this is fixed, we can set textContent to the string directly\n\n        const wrappingEl = targetDocument.createElement('span');\n\n        wrappingEl.innerText = messageQueue\n          .all()\n          .filter(msg => msg.message.trim().length > 0)\n          .reduce((prevText, currMsg) => prevText + currMsg.message + '. ', '');\n\n        elementRef.current.innerText = '';\n        elementRef.current.appendChild(wrappingEl);\n\n        messageQueue.clear();\n        batchMessages.current = [];\n\n        // begin new cycle to clear (or update) messages\n        timeoutRef.current = setAnnounceTimeout(() => {\n          runCycle();\n        }, MESSAGE_DURATION);\n      } else {\n        elementRef.current.textContent = '';\n        clearAnnounceTimeout();\n\n        timeoutRef.current = undefined;\n      }\n    };\n\n    runCycle();\n  }, [clearAnnounceTimeout, messageQueue, setAnnounceTimeout, targetDocument]);\n\n  const announce: AriaLiveAnnounceFn = React.useMemo(\n    () =>\n      (message, options = {}) => {\n        const { alert = false, priority = 0, batchId } = options;\n\n        // check if message is an alert\n        if (alert) {\n          // TODO: alert implementation\n          // setAlertList([...alertList, message]);\n        }\n\n        const liveMessage: AriaLiveMessage = {\n          message,\n          createdAt: order.current++,\n          priority,\n          batchId,\n        };\n\n        // check if batchId exists\n        if (batchId) {\n          // update associated msg if it does\n          const batchMessage = batchMessages.current.find(msg => msg.batchId === batchId);\n\n          if (batchMessage) {\n            // replace existing message in queue\n            messageQueue.remove(batchMessage.message);\n\n            // update list of existing batchIds w/ most recent message\n            batchMessage.message = liveMessage;\n          } else {\n            // update list of existing batchIds, add new if doesn't already exist\n            batchMessages.current = [...batchMessages.current, { batchId, message: liveMessage }];\n          }\n        }\n\n        // add new message\n        messageQueue.enqueue(liveMessage);\n        queueMessage();\n      },\n    [messageQueue, queueMessage],\n  );\n\n  React.useEffect(() => {\n    if (!targetDocument) {\n      return;\n    }\n\n    const element = targetDocument.createElement('div');\n    element.setAttribute('aria-live', 'assertive');\n\n    Object.assign(element.style, VISUALLY_HIDDEN_STYLES);\n    targetDocument.body.append(element);\n\n    elementRef.current = element;\n\n    return () => {\n      element.remove();\n      elementRef.current = null;\n    };\n  }, [targetDocument]);\n\n  return {\n    announce,\n    children: props.children,\n  };\n};\n"],"names":["useFluent_unstable","useFluent","createPriorityQueue","useTimeout","React","MESSAGE_DURATION","VISUALLY_HIDDEN_STYLES","clip","height","margin","width","position","overflow","textWrap","useAriaLiveAnnouncer_unstable","props","targetDocument","timeoutRef","useRef","undefined","setAnnounceTimeout","clearAnnounceTimeout","elementRef","order","batchMessages","messageQueue","useState","a","b","priority","createdAt","queueMessage","useCallback","current","runCycle","peek","wrappingEl","createElement","innerText","all","filter","msg","message","trim","length","reduce","prevText","currMsg","appendChild","clear","textContent","announce","useMemo","options","alert","batchId","liveMessage","batchMessage","find","remove","enqueue","useEffect","element","setAttribute","Object","assign","style","body","append","children"],"mappings":"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"}