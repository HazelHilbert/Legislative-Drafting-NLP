"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "useActiveDescendant", {
    enumerable: true,
    get: function() {
        return useActiveDescendant;
    }
});
const _interop_require_wildcard = require("@swc/helpers/_/_interop_require_wildcard");
const _react = /*#__PURE__*/ _interop_require_wildcard._(require("react"));
const _reactutilities = require("@fluentui/react-utilities");
const _reacttabster = require("@fluentui/react-tabster");
const _useOptionWalker = require("./useOptionWalker");
const _constants = require("./constants");
const _scrollIntoView = require("./scrollIntoView");
function useActiveDescendant(options) {
    const { imperativeRef, matchOption: matchOptionUnstable } = options;
    const focusVisibleRef = _react.useRef(false);
    const activeIdRef = _react.useRef(null);
    const activeParentRef = _react.useRef(null);
    (0, _reacttabster.useOnKeyboardNavigationChange)((isNavigatingWithKeyboard)=>{
        focusVisibleRef.current = isNavigatingWithKeyboard;
        const active = getActiveDescendant();
        if (!active) {
            return;
        }
        if (isNavigatingWithKeyboard) {
            active.setAttribute(_constants.ACTIVEDESCENDANT_FOCUSVISIBLE_ATTRIBUTE, '');
        } else {
            active.removeAttribute(_constants.ACTIVEDESCENDANT_FOCUSVISIBLE_ATTRIBUTE);
        }
    });
    const matchOption = (0, _reactutilities.useEventCallback)(matchOptionUnstable);
    const { listboxRef, optionWalker } = (0, _useOptionWalker.useOptionWalker)({
        matchOption
    });
    const getActiveDescendant = _react.useCallback(()=>{
        var _listboxRef_current;
        return (_listboxRef_current = listboxRef.current) === null || _listboxRef_current === void 0 ? void 0 : _listboxRef_current.querySelector(`#${activeIdRef.current}`);
    }, [
        listboxRef
    ]);
    const blurActiveDescendant = _react.useCallback(()=>{
        var _activeParentRef_current;
        const active = getActiveDescendant();
        if (active) {
            active.removeAttribute(_constants.ACTIVEDESCENDANT_ATTRIBUTE);
            active.removeAttribute(_constants.ACTIVEDESCENDANT_FOCUSVISIBLE_ATTRIBUTE);
        }
        (_activeParentRef_current = activeParentRef.current) === null || _activeParentRef_current === void 0 ? void 0 : _activeParentRef_current.removeAttribute('aria-activedescendant');
        activeIdRef.current = null;
    }, [
        activeParentRef,
        getActiveDescendant
    ]);
    const focusActiveDescendant = _react.useCallback((nextActive)=>{
        var _activeParentRef_current;
        if (!nextActive) {
            return;
        }
        blurActiveDescendant();
        (0, _scrollIntoView.scrollIntoView)(nextActive, listboxRef.current);
        (_activeParentRef_current = activeParentRef.current) === null || _activeParentRef_current === void 0 ? void 0 : _activeParentRef_current.setAttribute('aria-activedescendant', nextActive.id);
        activeIdRef.current = nextActive.id;
        nextActive.setAttribute(_constants.ACTIVEDESCENDANT_ATTRIBUTE, '');
        if (focusVisibleRef.current) {
            nextActive.setAttribute(_constants.ACTIVEDESCENDANT_FOCUSVISIBLE_ATTRIBUTE, '');
        }
    }, [
        activeParentRef,
        listboxRef,
        blurActiveDescendant
    ]);
    const controller = _react.useMemo(()=>({
            first: ({ passive } = {})=>{
                const first = optionWalker.first();
                if (!passive) {
                    focusActiveDescendant(first);
                }
                return first === null || first === void 0 ? void 0 : first.id;
            },
            last: ({ passive } = {})=>{
                const last = optionWalker.last();
                if (!passive) {
                    focusActiveDescendant(last);
                }
                return last === null || last === void 0 ? void 0 : last.id;
            },
            next: ({ passive } = {})=>{
                const active = getActiveDescendant();
                if (!active) {
                    return;
                }
                optionWalker.setCurrent(active);
                const next = optionWalker.next();
                if (!passive) {
                    focusActiveDescendant(next);
                }
                return next === null || next === void 0 ? void 0 : next.id;
            },
            prev: ({ passive } = {})=>{
                const active = getActiveDescendant();
                if (!active) {
                    return;
                }
                optionWalker.setCurrent(active);
                const next = optionWalker.prev();
                if (!passive) {
                    focusActiveDescendant(next);
                }
                return next === null || next === void 0 ? void 0 : next.id;
            },
            blur: ()=>{
                blurActiveDescendant();
            },
            active: ()=>{
                var _getActiveDescendant;
                return (_getActiveDescendant = getActiveDescendant()) === null || _getActiveDescendant === void 0 ? void 0 : _getActiveDescendant.id;
            },
            focus: (id)=>{
                if (!listboxRef.current) {
                    return;
                }
                const target = listboxRef.current.querySelector(`#${id}`);
                if (target) {
                    focusActiveDescendant(target);
                }
            },
            find (predicate, { passive } = {}) {
                const target = optionWalker.find(predicate);
                if (!passive) {
                    focusActiveDescendant(target);
                }
                return target === null || target === void 0 ? void 0 : target.id;
            }
        }), [
        optionWalker,
        listboxRef,
        focusActiveDescendant,
        blurActiveDescendant,
        getActiveDescendant
    ]);
    _react.useImperativeHandle(imperativeRef, ()=>controller);
    return {
        listboxRef,
        activeParentRef,
        controller
    };
}
