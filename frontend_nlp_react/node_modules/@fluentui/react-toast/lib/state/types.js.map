{"version":3,"sources":["types.ts"],"sourcesContent":["import type { Slot } from '@fluentui/react-utilities';\nimport { EVENTS } from './constants';\nimport * as React from 'react';\n\nexport type ToastId = string;\nexport type ToasterId = string;\n\nexport type ToastPosition = 'top-end' | 'top-start' | 'bottom-end' | 'bottom-start' | 'top' | 'bottom';\nexport type ToastPoliteness = 'assertive' | 'polite';\nexport type ToastStatus = 'queued' | 'visible' | 'dismissed' | 'unmounted';\nexport type ToastIntent = 'info' | 'success' | 'error' | 'warning';\nexport type ToastChangeHandler = (event: null, data: ToastChangeData) => void;\n\nexport interface ToastChangeData extends ToastOptions, Pick<Toast, 'updateId'> {\n  status: ToastStatus;\n}\n\nexport interface ToastOptions<TData = object> {\n  /**\n   * Uniquely identifies a toast, used for update and dismiss operations\n   */\n  toastId: ToastId;\n  /**\n   * The position the toast should render to\n   */\n  position: ToastPosition;\n  /**\n   * Toast content\n   */\n  content: unknown;\n  /**\n   * Auto dismiss timeout in milliseconds\n   * @default 3000\n   */\n  timeout: number;\n  /**\n   * Toast timeout pauses while focus is on another window\n   * @default false\n   */\n  pauseOnWindowBlur: boolean;\n  /**\n   * Toast timeout pauses while user cursor is on the toast\n   * @default false\n   */\n  pauseOnHover: boolean;\n  /**\n   * Toast belongs to a specific toaster\n   */\n  toasterId: ToasterId | undefined;\n  /**\n   * Higher priority toasts will be rendered before lower priority toasts\n   */\n  priority: number;\n  /**\n   * Used to determine [aria-live](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Live_Regions) narration\n   * This will override the intent prop\n   */\n  politeness?: ToastPoliteness;\n\n  /**\n   * Default toast types that determine the urgency or [aria-live](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Live_Regions) narration\n   * The UI layer may use these intents to apply specific styling.\n   * @default info\n   */\n  intent?: ToastIntent;\n  /**\n   * Additional data that needs to be passed to the toast\n   */\n  data: TData;\n\n  /**\n   * Reports changes to the Toast lifecycle\n   */\n  onStatusChange: ToastChangeHandler | undefined;\n}\n\nexport interface ToastOffsetObject {\n  horizontal?: number;\n  vertical?: number;\n}\n\nexport type ToastOffset = Partial<Record<ToastPosition, ToastOffsetObject>> | ToastOffsetObject;\n\nexport interface ToasterShortcuts {\n  focus: (e: KeyboardEvent) => boolean;\n}\n\nexport interface ToasterOptions\n  extends Pick<ToastOptions, 'position' | 'timeout' | 'pauseOnWindowBlur' | 'pauseOnHover' | 'priority'> {\n  offset?: ToastOffset;\n  toasterId?: ToasterId;\n  limit?: number;\n  shortcuts?: ToasterShortcuts;\n}\n\nexport interface Toast<TData = object> extends ToastOptions<TData> {\n  /**\n   * Determines the visiblity of a toast\n   */\n  close: () => void;\n  /**\n   * Removes a toast completely\n   */\n  remove: () => void;\n  /**\n   * A number used to track updates immutably\n   */\n  updateId: number;\n  /**\n   * Used to determine default priority when the user does not set one\n   * Simple counter of toasts dispatched.\n   */\n  order: number;\n\n  imperativeRef: React.RefObject<ToastImperativeRef>;\n}\n\nexport interface CommonToastDetail {\n  toasterId?: ToasterId;\n}\n\nexport interface ShowToastEventDetail extends Partial<ToastOptions>, CommonToastDetail {\n  toastId: ToastId;\n}\n\nexport interface UpdateToastEventDetail extends Partial<ToastOptions>, CommonToastDetail {\n  toastId: ToastId;\n}\n\nexport interface DismissToastEventDetail extends CommonToastDetail {\n  toastId: ToastId;\n}\n\nexport interface PauseToastEventDetail extends CommonToastDetail {\n  toastId: ToastId;\n}\n\nexport interface PlayToastEventDetail extends CommonToastDetail {\n  toastId: ToastId;\n}\n\nexport interface DismissAllToastsEventDetail extends CommonToastDetail {}\n\ntype EventListener<TDetail> = (e: CustomEvent<TDetail>) => void;\n\nexport type ToastListenerMap = {\n  [EVENTS.show]: EventListener<ShowToastEventDetail>;\n  [EVENTS.dismiss]: EventListener<DismissToastEventDetail>;\n  [EVENTS.dismissAll]: EventListener<DismissAllToastsEventDetail>;\n  [EVENTS.update]: EventListener<UpdateToastEventDetail>;\n  [EVENTS.play]: EventListener<PlayToastEventDetail>;\n  [EVENTS.pause]: EventListener<PauseToastEventDetail>;\n};\n\ntype RootSlot = Slot<'div'>;\n\nexport interface DispatchToastOptions extends Partial<Omit<ToastOptions, 'toasterId'>> {\n  root?: RootSlot;\n}\n\nexport interface UpdateToastOptions extends UpdateToastEventDetail {\n  root?: RootSlot;\n}\n\nexport type ToastImperativeRef = {\n  /**\n   * Focuses the Toast.\n   * If there are no focusable elements in the Toast, the Toast itself is focused.\n   */\n  focus: () => void;\n\n  /**\n   * Resumes the timeout of a paused toast\n   */\n  play: () => void;\n\n  /**\n   * Pauses the timeout of a toast\n   */\n  pause: () => void;\n};\n"],"names":["React"],"mappings":"AAEA,YAAYA,WAAW,QAAQ"}