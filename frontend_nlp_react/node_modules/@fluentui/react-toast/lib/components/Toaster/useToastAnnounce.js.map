{"version":3,"sources":["useToastAnnounce.ts"],"sourcesContent":["import * as React from 'react';\nimport { Announce } from '../AriaLive';\nimport { isHTMLElement } from '@fluentui/react-utilities';\n\n/**\n * Wraps an aria live announcement function.\n * Aria live announcements can be detrimental once the user is already navigating\n * multiple toasts. Once the user is focused inside the toaster, the announecments should be disabled.\n * @param announce\n * @returns A function to announce a toast and a ref to attach to the toaster element\n */\nexport function useToastAnnounce(announce: Announce) {\n  const activeRef = React.useRef(true);\n  const cleanupRef = React.useRef<() => void>(() => undefined);\n  const announceToast = React.useCallback<Announce>(\n    (message, options) => {\n      if (activeRef.current) {\n        announce(message, options);\n      }\n    },\n    [announce],\n  );\n\n  const toasterRef = React.useCallback((el: HTMLDivElement | null) => {\n    if (!el) {\n      cleanupRef.current();\n      return;\n    }\n\n    const onFocusIn = (e: FocusEvent) => {\n      if (\n        isHTMLElement(e.currentTarget) &&\n        e.currentTarget.contains(isHTMLElement(e.relatedTarget) ? e.relatedTarget : null)\n      ) {\n        return;\n      }\n\n      activeRef.current = false;\n    };\n\n    const onFocusOut = (e: FocusEvent) => {\n      if (\n        isHTMLElement(e.currentTarget) &&\n        e.currentTarget.contains(isHTMLElement(e.relatedTarget) ? e.relatedTarget : null)\n      ) {\n        return;\n      }\n\n      activeRef.current = true;\n    };\n\n    el.addEventListener('focusin', onFocusIn);\n    el.addEventListener('focusout', onFocusOut);\n\n    cleanupRef.current = () => {\n      el.removeEventListener('focusin', onFocusIn);\n      el.removeEventListener('focusout', onFocusOut);\n    };\n  }, []);\n\n  return {\n    announceToast,\n    toasterRef,\n  };\n}\n"],"names":["React","isHTMLElement","useToastAnnounce","announce","activeRef","useRef","cleanupRef","undefined","announceToast","useCallback","message","options","current","toasterRef","el","onFocusIn","e","currentTarget","contains","relatedTarget","onFocusOut","addEventListener","removeEventListener"],"mappings":"AAAA,YAAYA,WAAW,QAAQ;AAE/B,SAASC,aAAa,QAAQ,4BAA4B;AAE1D;;;;;;CAMC,GACD,OAAO,SAASC,iBAAiBC,QAAkB;IACjD,MAAMC,YAAYJ,MAAMK,MAAM,CAAC;IAC/B,MAAMC,aAAaN,MAAMK,MAAM,CAAa,IAAME;IAClD,MAAMC,gBAAgBR,MAAMS,WAAW,CACrC,CAACC,SAASC;QACR,IAAIP,UAAUQ,OAAO,EAAE;YACrBT,SAASO,SAASC;QACpB;IACF,GACA;QAACR;KAAS;IAGZ,MAAMU,aAAab,MAAMS,WAAW,CAAC,CAACK;QACpC,IAAI,CAACA,IAAI;YACPR,WAAWM,OAAO;YAClB;QACF;QAEA,MAAMG,YAAY,CAACC;YACjB,IACEf,cAAce,EAAEC,aAAa,KAC7BD,EAAEC,aAAa,CAACC,QAAQ,CAACjB,cAAce,EAAEG,aAAa,IAAIH,EAAEG,aAAa,GAAG,OAC5E;gBACA;YACF;YAEAf,UAAUQ,OAAO,GAAG;QACtB;QAEA,MAAMQ,aAAa,CAACJ;YAClB,IACEf,cAAce,EAAEC,aAAa,KAC7BD,EAAEC,aAAa,CAACC,QAAQ,CAACjB,cAAce,EAAEG,aAAa,IAAIH,EAAEG,aAAa,GAAG,OAC5E;gBACA;YACF;YAEAf,UAAUQ,OAAO,GAAG;QACtB;QAEAE,GAAGO,gBAAgB,CAAC,WAAWN;QAC/BD,GAAGO,gBAAgB,CAAC,YAAYD;QAEhCd,WAAWM,OAAO,GAAG;YACnBE,GAAGQ,mBAAmB,CAAC,WAAWP;YAClCD,GAAGQ,mBAAmB,CAAC,YAAYF;QACrC;IACF,GAAG,EAAE;IAEL,OAAO;QACLZ;QACAK;IACF;AACF"}