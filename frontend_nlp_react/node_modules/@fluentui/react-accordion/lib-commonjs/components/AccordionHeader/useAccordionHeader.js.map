{"version":3,"sources":["useAccordionHeader.js"],"sourcesContent":["import * as React from 'react';\nimport { getIntrinsicElementProps, useEventCallback, slot, isResolvedShorthand } from '@fluentui/react-utilities';\nimport { useARIAButtonProps } from '@fluentui/react-aria';\nimport { useAccordionContext_unstable } from '../../contexts/accordion';\nimport { ChevronRightRegular } from '@fluentui/react-icons';\nimport { useFluent_unstable as useFluent } from '@fluentui/react-shared-contexts';\nimport { useAccordionItemContext_unstable } from '../../contexts/accordionItem';\n/**\n * Returns the props and state required to render the component\n * @param props - AccordionHeader properties\n * @param ref - reference to root HTMLElement of AccordionHeader\n */ export const useAccordionHeader_unstable = (props, ref)=>{\n    const { icon, button, expandIcon, inline = false, size = 'medium', expandIconPosition = 'start' } = props;\n    const { value, disabled, open } = useAccordionItemContext_unstable();\n    const requestToggle = useAccordionContext_unstable((ctx)=>ctx.requestToggle);\n    /**\n   * force disabled state on button if accordion isn't collapsible\n   * and this is the only item opened\n   */ const disabledFocusable = useAccordionContext_unstable((ctx)=>!ctx.collapsible && ctx.openItems.length === 1 && open);\n    const { dir } = useFluent();\n    // Calculate how to rotate the expand icon [>] (ChevronRightRegular)\n    let expandIconRotation;\n    if (expandIconPosition === 'end') {\n        // If expand icon is at the end, the chevron points up [^] when open, and down [v] when closed\n        expandIconRotation = open ? -90 : 90;\n    } else {\n        // Otherwise, the chevron points down [v] when open, and right [>] (or left [<] in RTL) when closed\n        expandIconRotation = open ? 90 : dir !== 'rtl' ? 0 : 180;\n    }\n    const buttonSlot = slot.always(button, {\n        elementType: 'button',\n        defaultProps: {\n            disabled,\n            disabledFocusable,\n            'aria-expanded': open,\n            type: 'button'\n        }\n    });\n    buttonSlot.onClick = useEventCallback((event)=>{\n        if (isResolvedShorthand(button)) {\n            var _button_onClick;\n            (_button_onClick = button.onClick) === null || _button_onClick === void 0 ? void 0 : _button_onClick.call(button, event);\n        }\n        if (!event.defaultPrevented) {\n            requestToggle({\n                value,\n                event\n            });\n        }\n    });\n    return {\n        disabled,\n        open,\n        size,\n        inline,\n        expandIconPosition,\n        components: {\n            root: 'div',\n            button: 'button',\n            expandIcon: 'span',\n            icon: 'div'\n        },\n        root: slot.always(getIntrinsicElementProps('div', {\n            // FIXME:\n            // `ref` is wrongly assigned to be `HTMLElement` instead of `HTMLDivElement`\n            // but since it would be a breaking change to fix it, we are casting ref to it's proper type\n            ref: ref,\n            ...props\n        }), {\n            elementType: 'div'\n        }),\n        icon: slot.optional(icon, {\n            elementType: 'div'\n        }),\n        expandIcon: slot.optional(expandIcon, {\n            renderByDefault: true,\n            defaultProps: {\n                children: /*#__PURE__*/ React.createElement(ChevronRightRegular, {\n                    style: {\n                        transform: `rotate(${expandIconRotation}deg)`\n                    }\n                }),\n                'aria-hidden': true\n            },\n            elementType: 'span'\n        }),\n        button: useARIAButtonProps(buttonSlot.as, buttonSlot)\n    };\n};\n"],"names":["useAccordionHeader_unstable","props","ref","icon","button","expandIcon","inline","size","expandIconPosition","value","disabled","open","useAccordionItemContext_unstable","requestToggle","useAccordionContext_unstable","ctx","disabledFocusable","collapsible","openItems","length","dir","useFluent","expandIconRotation","buttonSlot","slot","always","elementType","defaultProps","type","onClick","useEventCallback","event","isResolvedShorthand","_button_onClick","call","defaultPrevented","components","root","getIntrinsicElementProps","optional","renderByDefault","children","React","createElement","ChevronRightRegular","style","transform","useARIAButtonProps","as"],"mappings":";;;;+BAWiBA;;;eAAAA;;;;iEAXM;gCAC+D;2BACnD;2BACU;4BACT;qCACY;+BACC;AAKtC,MAAMA,8BAA8B,CAACC,OAAOC;IACnD,MAAM,EAAEC,IAAI,EAAEC,MAAM,EAAEC,UAAU,EAAEC,SAAS,KAAK,EAAEC,OAAO,QAAQ,EAAEC,qBAAqB,OAAO,EAAE,GAAGP;IACpG,MAAM,EAAEQ,KAAK,EAAEC,QAAQ,EAAEC,IAAI,EAAE,GAAGC,IAAAA,+CAAgC;IAClE,MAAMC,gBAAgBC,IAAAA,uCAA4B,EAAC,CAACC,MAAMA,IAAIF,aAAa;IAC3E;;;GAGD,GAAG,MAAMG,oBAAoBF,IAAAA,uCAA4B,EAAC,CAACC,MAAM,CAACA,IAAIE,WAAW,IAAIF,IAAIG,SAAS,CAACC,MAAM,KAAK,KAAKR;IAClH,MAAM,EAAES,GAAG,EAAE,GAAGC,IAAAA,uCAAS;IACzB,oEAAoE;IACpE,IAAIC;IACJ,IAAId,uBAAuB,OAAO;QAC9B,8FAA8F;QAC9Fc,qBAAqBX,OAAO,CAAC,KAAK;IACtC,OAAO;QACH,mGAAmG;QACnGW,qBAAqBX,OAAO,KAAKS,QAAQ,QAAQ,IAAI;IACzD;IACA,MAAMG,aAAaC,oBAAI,CAACC,MAAM,CAACrB,QAAQ;QACnCsB,aAAa;QACbC,cAAc;YACVjB;YACAM;YACA,iBAAiBL;YACjBiB,MAAM;QACV;IACJ;IACAL,WAAWM,OAAO,GAAGC,IAAAA,gCAAgB,EAAC,CAACC;QACnC,IAAIC,IAAAA,mCAAmB,EAAC5B,SAAS;YAC7B,IAAI6B;YACHA,CAAAA,kBAAkB7B,OAAOyB,OAAO,AAAD,MAAO,QAAQI,oBAAoB,KAAK,IAAI,KAAK,IAAIA,gBAAgBC,IAAI,CAAC9B,QAAQ2B;QACtH;QACA,IAAI,CAACA,MAAMI,gBAAgB,EAAE;YACzBtB,cAAc;gBACVJ;gBACAsB;YACJ;QACJ;IACJ;IACA,OAAO;QACHrB;QACAC;QACAJ;QACAD;QACAE;QACA4B,YAAY;YACRC,MAAM;YACNjC,QAAQ;YACRC,YAAY;YACZF,MAAM;QACV;QACAkC,MAAMb,oBAAI,CAACC,MAAM,CAACa,IAAAA,wCAAwB,EAAC,OAAO;YAC9C,SAAS;YACT,4EAA4E;YAC5E,4FAA4F;YAC5FpC,KAAKA;YACL,GAAGD,KAAK;QACZ,IAAI;YACAyB,aAAa;QACjB;QACAvB,MAAMqB,oBAAI,CAACe,QAAQ,CAACpC,MAAM;YACtBuB,aAAa;QACjB;QACArB,YAAYmB,oBAAI,CAACe,QAAQ,CAAClC,YAAY;YAClCmC,iBAAiB;YACjBb,cAAc;gBACVc,UAAU,WAAW,GAAGC,OAAMC,aAAa,CAACC,+BAAmB,EAAE;oBAC7DC,OAAO;wBACHC,WAAW,CAAC,OAAO,EAAExB,mBAAmB,IAAI,CAAC;oBACjD;gBACJ;gBACA,eAAe;YACnB;YACAI,aAAa;QACjB;QACAtB,QAAQ2C,IAAAA,6BAAkB,EAACxB,WAAWyB,EAAE,EAAEzB;IAC9C;AACJ"}