{"version":3,"sources":["useAccordion.js"],"sourcesContent":["import * as React from 'react';\nimport { getIntrinsicElementProps, useControllableState, useEventCallback, slot } from '@fluentui/react-utilities';\nimport { useArrowNavigationGroup } from '@fluentui/react-tabster';\n/**\n * Returns the props and state required to render the component\n * @param props - Accordion properties\n * @param ref - reference to root HTMLElement of Accordion\n */ export const useAccordion_unstable = (props, ref)=>{\n    const { openItems: controlledOpenItems, defaultOpenItems, multiple = false, collapsible = false, onToggle, navigation } = props;\n    const [openItems, setOpenItems] = useControllableState({\n        state: React.useMemo(()=>normalizeValues(controlledOpenItems), [\n            controlledOpenItems\n        ]),\n        defaultState: ()=>initializeUncontrolledOpenItems({\n                defaultOpenItems,\n                multiple\n            }),\n        initialState: []\n    });\n    const arrowNavigationProps = useArrowNavigationGroup({\n        circular: navigation === 'circular',\n        tabbable: true\n    });\n    const requestToggle = useEventCallback((data)=>{\n        const nextOpenItems = updateOpenItems(data.value, openItems, multiple, collapsible);\n        onToggle === null || onToggle === void 0 ? void 0 : onToggle(data.event, {\n            value: data.value,\n            openItems: nextOpenItems\n        });\n        setOpenItems(nextOpenItems);\n    });\n    return {\n        collapsible,\n        multiple,\n        navigation,\n        openItems,\n        requestToggle,\n        components: {\n            root: 'div'\n        },\n        root: slot.always(getIntrinsicElementProps('div', {\n            ...props,\n            ...navigation ? arrowNavigationProps : undefined,\n            // FIXME:\n            // `ref` is wrongly assigned to be `HTMLElement` instead of `HTMLDivElement`\n            // but since it would be a breaking change to fix it, we are casting ref to it's proper type\n            ref: ref\n        }), {\n            elementType: 'div'\n        })\n    };\n};\n/**\n * Initial value for the uncontrolled case of the list of open indexes\n */ function initializeUncontrolledOpenItems({ defaultOpenItems, multiple }) {\n    if (defaultOpenItems !== undefined) {\n        if (Array.isArray(defaultOpenItems)) {\n            return multiple ? defaultOpenItems : [\n                defaultOpenItems[0]\n            ];\n        }\n        return [\n            defaultOpenItems\n        ];\n    }\n    return [];\n}\n/**\n * Updates the list of open indexes based on an index that changes\n * @param value - the index that will change\n * @param previousOpenItems - list of current open indexes\n * @param multiple - if Accordion support multiple Panels opened at the same time\n * @param collapsible - if Accordion support multiple Panels closed at the same time\n */ function updateOpenItems(value, previousOpenItems, multiple, collapsible) {\n    if (multiple) {\n        if (previousOpenItems.includes(value)) {\n            if (previousOpenItems.length > 1 || collapsible) {\n                return previousOpenItems.filter((i)=>i !== value);\n            }\n        } else {\n            return [\n                ...previousOpenItems,\n                value\n            ].sort();\n        }\n    } else {\n        return previousOpenItems[0] === value && collapsible ? [] : [\n            value\n        ];\n    }\n    return previousOpenItems;\n}\n/**\n * Normalizes Accordion index into an array of indexes\n */ function normalizeValues(index) {\n    if (index === undefined) {\n        return undefined;\n    }\n    return Array.isArray(index) ? index : [\n        index\n    ];\n}\n"],"names":["useAccordion_unstable","props","ref","openItems","controlledOpenItems","defaultOpenItems","multiple","collapsible","onToggle","navigation","setOpenItems","useControllableState","state","React","useMemo","normalizeValues","defaultState","initializeUncontrolledOpenItems","initialState","arrowNavigationProps","useArrowNavigationGroup","circular","tabbable","requestToggle","useEventCallback","data","nextOpenItems","updateOpenItems","value","event","components","root","slot","always","getIntrinsicElementProps","undefined","elementType","Array","isArray","previousOpenItems","includes","length","filter","i","sort","index"],"mappings":";;;;+BAOiBA;;;eAAAA;;;;iEAPM;gCACgE;8BAC/C;AAK7B,MAAMA,wBAAwB,CAACC,OAAOC;IAC7C,MAAM,EAAEC,WAAWC,mBAAmB,EAAEC,gBAAgB,EAAEC,WAAW,KAAK,EAAEC,cAAc,KAAK,EAAEC,QAAQ,EAAEC,UAAU,EAAE,GAAGR;IAC1H,MAAM,CAACE,WAAWO,aAAa,GAAGC,IAAAA,oCAAoB,EAAC;QACnDC,OAAOC,OAAMC,OAAO,CAAC,IAAIC,gBAAgBX,sBAAsB;YAC3DA;SACH;QACDY,cAAc,IAAIC,gCAAgC;gBAC1CZ;gBACAC;YACJ;QACJY,cAAc,EAAE;IACpB;IACA,MAAMC,uBAAuBC,IAAAA,qCAAuB,EAAC;QACjDC,UAAUZ,eAAe;QACzBa,UAAU;IACd;IACA,MAAMC,gBAAgBC,IAAAA,gCAAgB,EAAC,CAACC;QACpC,MAAMC,gBAAgBC,gBAAgBF,KAAKG,KAAK,EAAEzB,WAAWG,UAAUC;QACvEC,aAAa,QAAQA,aAAa,KAAK,IAAI,KAAK,IAAIA,SAASiB,KAAKI,KAAK,EAAE;YACrED,OAAOH,KAAKG,KAAK;YACjBzB,WAAWuB;QACf;QACAhB,aAAagB;IACjB;IACA,OAAO;QACHnB;QACAD;QACAG;QACAN;QACAoB;QACAO,YAAY;YACRC,MAAM;QACV;QACAA,MAAMC,oBAAI,CAACC,MAAM,CAACC,IAAAA,wCAAwB,EAAC,OAAO;YAC9C,GAAGjC,KAAK;YACR,GAAGQ,aAAaU,uBAAuBgB,SAAS;YAChD,SAAS;YACT,4EAA4E;YAC5E,4FAA4F;YAC5FjC,KAAKA;QACT,IAAI;YACAkC,aAAa;QACjB;IACJ;AACJ;AACA;;CAEC,GAAG,SAASnB,gCAAgC,EAAEZ,gBAAgB,EAAEC,QAAQ,EAAE;IACvE,IAAID,qBAAqB8B,WAAW;QAChC,IAAIE,MAAMC,OAAO,CAACjC,mBAAmB;YACjC,OAAOC,WAAWD,mBAAmB;gBACjCA,gBAAgB,CAAC,EAAE;aACtB;QACL;QACA,OAAO;YACHA;SACH;IACL;IACA,OAAO,EAAE;AACb;AACA;;;;;;CAMC,GAAG,SAASsB,gBAAgBC,KAAK,EAAEW,iBAAiB,EAAEjC,QAAQ,EAAEC,WAAW;IACxE,IAAID,UAAU;QACV,IAAIiC,kBAAkBC,QAAQ,CAACZ,QAAQ;YACnC,IAAIW,kBAAkBE,MAAM,GAAG,KAAKlC,aAAa;gBAC7C,OAAOgC,kBAAkBG,MAAM,CAAC,CAACC,IAAIA,MAAMf;YAC/C;QACJ,OAAO;YACH,OAAO;mBACAW;gBACHX;aACH,CAACgB,IAAI;QACV;IACJ,OAAO;QACH,OAAOL,iBAAiB,CAAC,EAAE,KAAKX,SAASrB,cAAc,EAAE,GAAG;YACxDqB;SACH;IACL;IACA,OAAOW;AACX;AACA;;CAEC,GAAG,SAASxB,gBAAgB8B,KAAK;IAC9B,IAAIA,UAAUV,WAAW;QACrB,OAAOA;IACX;IACA,OAAOE,MAAMC,OAAO,CAACO,SAASA,QAAQ;QAClCA;KACH;AACL"}