{"version":3,"sources":["precision.js"],"sourcesContent":["/**\n * Calculates a number's precision based on the number of trailing\n * zeros if the number does not have a decimal indicated by a negative\n * precision. Otherwise, it calculates the number of digits after\n * the decimal point indicated by a positive precision.\n * @param value - the value to determine the precision of\n */ export function calculatePrecision(value) {\n    /**\n   * Group 1:\n   * [1-9]([0]+$) matches trailing zeros\n   * Group 2:\n   * \\.([0-9]*) matches all digits after a decimal point.\n   */ const groups = /[1-9]([0]+$)|\\.([0-9]*)/.exec(String(value));\n    if (!groups) {\n        return 0;\n    }\n    if (groups[1]) {\n        return -groups[1].length;\n    }\n    if (groups[2]) {\n        return groups[2].length;\n    }\n    return 0;\n}\n/**\n * Rounds a number to a certain level of precision. Accepts negative precision.\n * @param value - The value that is being rounded.\n * @param precision - The number of decimal places to round the number to\n */ export function precisionRound(value, precision, base = 10) {\n    const exp = Math.pow(base, precision);\n    return Math.round(value * exp) / exp;\n}\n"],"names":["calculatePrecision","precisionRound","value","groups","exec","String","length","precision","base","exp","Math","pow","round"],"mappings":"AAAA;;;;;;CAMC;;;;;;;;;;;IAAmBA,kBAAkB;eAAlBA;;IAsBAC,cAAc;eAAdA;;;AAtBT,SAASD,mBAAmBE,KAAK;IACxC;;;;;GAKD,GAAG,MAAMC,SAAS,0BAA0BC,IAAI,CAACC,OAAOH;IACvD,IAAI,CAACC,QAAQ;QACT,OAAO;IACX;IACA,IAAIA,MAAM,CAAC,EAAE,EAAE;QACX,OAAO,CAACA,MAAM,CAAC,EAAE,CAACG,MAAM;IAC5B;IACA,IAAIH,MAAM,CAAC,EAAE,EAAE;QACX,OAAOA,MAAM,CAAC,EAAE,CAACG,MAAM;IAC3B;IACA,OAAO;AACX;AAKW,SAASL,eAAeC,KAAK,EAAEK,SAAS,EAAEC,OAAO,EAAE;IAC1D,MAAMC,MAAMC,KAAKC,GAAG,CAACH,MAAMD;IAC3B,OAAOG,KAAKE,KAAK,CAACV,QAAQO,OAAOA;AACrC"}