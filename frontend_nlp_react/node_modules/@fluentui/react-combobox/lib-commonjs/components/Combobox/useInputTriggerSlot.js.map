{"version":3,"sources":["useInputTriggerSlot.js"],"sourcesContent":["import * as React from 'react';\nimport { mergeCallbacks, useEventCallback } from '@fluentui/react-utilities';\nimport { ArrowLeft, ArrowRight } from '@fluentui/keyboard-keys';\nimport { useTriggerSlot } from '../../utils/useTriggerSlot';\nimport { getDropdownActionFromKey } from '../../utils/dropdownKeyActions';\n/*\n * useInputTriggerSlot returns a tuple of trigger/listbox shorthand,\n * with the semantics and event handlers needed for the Combobox and Dropdown components.\n * The element type of the ref should always match the element type used in the trigger shorthand.\n */ export function useInputTriggerSlot(triggerFromProps, ref, options) {\n    const { state: { open, value, activeOption, selectOption, setValue, setActiveOption, setFocusVisible, multiselect, selectedOptions, clearSelection, getOptionsMatchingText, getIndexOfId, setOpen }, freeform, defaultProps } = options;\n    const onBlur = (ev)=>{\n        // handle selection and updating value if freeform is false\n        if (!open && !freeform) {\n            // select matching option, if the value fully matches\n            if (value && activeOption && value.trim().toLowerCase() === (activeOption === null || activeOption === void 0 ? void 0 : activeOption.text.toLowerCase())) {\n                selectOption(ev, activeOption);\n            }\n            // reset typed value when the input loses focus while collapsed, unless freeform is true\n            setValue(undefined);\n        }\n    };\n    const getOptionFromInput = (inputValue)=>{\n        const searchString = inputValue === null || inputValue === void 0 ? void 0 : inputValue.trim().toLowerCase();\n        if (!searchString || searchString.length === 0) {\n            return;\n        }\n        const matcher = (optionText)=>optionText.toLowerCase().indexOf(searchString) === 0;\n        const matches = getOptionsMatchingText(matcher);\n        // return first matching option after the current active option, looping back to the top\n        if (matches.length > 1 && activeOption) {\n            const startIndex = getIndexOfId(activeOption.id);\n            const nextMatch = matches.find((option)=>getIndexOfId(option.id) >= startIndex);\n            return nextMatch !== null && nextMatch !== void 0 ? nextMatch : matches[0];\n        }\n        var _matches_;\n        return (_matches_ = matches[0]) !== null && _matches_ !== void 0 ? _matches_ : undefined;\n    };\n    // update value and active option based on input\n    const onChange = (ev)=>{\n        const inputValue = ev.target.value;\n        // update uncontrolled value\n        setValue(inputValue);\n        // handle updating active option based on input\n        const matchingOption = getOptionFromInput(inputValue);\n        setActiveOption(matchingOption);\n        setFocusVisible(true);\n        // clear selection for single-select if the input value no longer matches the selection\n        if (!multiselect && selectedOptions.length === 1 && (inputValue.length < 1 || !matchingOption)) {\n            clearSelection(ev);\n        }\n    };\n    const trigger = useTriggerSlot(triggerFromProps, ref, {\n        state: options.state,\n        defaultProps,\n        elementType: 'input'\n    });\n    trigger.onChange = mergeCallbacks(trigger.onChange, onChange);\n    trigger.onBlur = mergeCallbacks(trigger.onBlur, onBlur);\n    // NVDA and JAWS have bugs that suppress reading the input value text when aria-activedescendant is set\n    // To prevent this, we clear the HTML attribute (but save the state) when a user presses left/right arrows\n    // ref: https://github.com/microsoft/fluentui/issues/26359#issuecomment-1397759888\n    const [hideActiveDescendant, setHideActiveDescendant] = React.useState(false);\n    // save the typing vs. navigating options state, as the space key should behave differently in each case\n    // we do not want to update the combobox when this changes, just save the value between renders\n    const isTyping = React.useRef(false);\n    /**\n   * Freeform combobox should not select\n   */ const defaultOnKeyDown = trigger.onKeyDown;\n    const onKeyDown = useEventCallback((ev)=>{\n        if (!open && getDropdownActionFromKey(ev) === 'Type') {\n            setOpen(ev, true);\n        }\n        // clear activedescendant when moving the text insertion cursor\n        if (ev.key === ArrowLeft || ev.key === ArrowRight) {\n            setHideActiveDescendant(true);\n        } else {\n            setHideActiveDescendant(false);\n        }\n        // update typing state to true if the user is typing\n        const action = getDropdownActionFromKey(ev, {\n            open,\n            multiselect\n        });\n        if (action === 'Type') {\n            isTyping.current = true;\n        } else if (action === 'Open' && ev.key !== ' ' || action === 'Next' || action === 'Previous' || action === 'First' || action === 'Last' || action === 'PageUp' || action === 'PageDown') {\n            isTyping.current = false;\n        }\n        // allow space to insert a character if freeform & the last action was typing, or if the popup is closed\n        if ((isTyping.current || !open) && ev.key === ' ') {\n            var _triggerFromProps_onKeyDown;\n            triggerFromProps === null || triggerFromProps === void 0 ? void 0 : (_triggerFromProps_onKeyDown = triggerFromProps.onKeyDown) === null || _triggerFromProps_onKeyDown === void 0 ? void 0 : _triggerFromProps_onKeyDown.call(triggerFromProps, ev);\n            return;\n        }\n        defaultOnKeyDown === null || defaultOnKeyDown === void 0 ? void 0 : defaultOnKeyDown(ev);\n    });\n    trigger.onKeyDown = onKeyDown;\n    if (hideActiveDescendant) {\n        trigger['aria-activedescendant'] = undefined;\n    }\n    return trigger;\n}\n"],"names":["useInputTriggerSlot","triggerFromProps","ref","options","state","open","value","activeOption","selectOption","setValue","setActiveOption","setFocusVisible","multiselect","selectedOptions","clearSelection","getOptionsMatchingText","getIndexOfId","setOpen","freeform","defaultProps","onBlur","ev","trim","toLowerCase","text","undefined","getOptionFromInput","inputValue","searchString","length","matcher","optionText","indexOf","matches","startIndex","id","nextMatch","find","option","_matches_","onChange","target","matchingOption","trigger","useTriggerSlot","elementType","mergeCallbacks","hideActiveDescendant","setHideActiveDescendant","React","useState","isTyping","useRef","defaultOnKeyDown","onKeyDown","useEventCallback","getDropdownActionFromKey","key","ArrowLeft","ArrowRight","action","current","_triggerFromProps_onKeyDown","call"],"mappings":"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"}