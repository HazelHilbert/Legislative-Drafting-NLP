"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "useScrollOptionsIntoView", {
    enumerable: true,
    get: function() {
        return useScrollOptionsIntoView;
    }
});
const _interop_require_wildcard = require("@swc/helpers/_/_interop_require_wildcard");
const _react = /*#__PURE__*/ _interop_require_wildcard._(require("react"));
const _reactutilities = require("@fluentui/react-utilities");
function useScrollOptionsIntoView(state) {
    const { activeOption } = state;
    const scrollContainerRef = _react.useRef(null);
    _react.useEffect(()=>{
        if (scrollContainerRef.current && activeOption && (0, _reactutilities.canUseDOM)()) {
            const activeOptionElement = scrollContainerRef.current.querySelector(`#${activeOption.id}`);
            if (!activeOptionElement) {
                return;
            }
            const { offsetHeight, offsetTop } = activeOptionElement;
            const { offsetHeight: parentOffsetHeight, scrollTop } = scrollContainerRef.current;
            const isAbove = offsetTop < scrollTop;
            const isBelow = offsetTop + offsetHeight > scrollTop + parentOffsetHeight;
            // add a small buffer for general visual nicety
            // it looks slightly better if the option has some space from the top/bottom while arrowing
            const buffer = 2;
            if (isAbove) {
                scrollContainerRef.current.scrollTo(0, offsetTop - buffer);
            } else if (isBelow) {
                scrollContainerRef.current.scrollTo(0, offsetTop - parentOffsetHeight + offsetHeight + buffer);
            }
        }
    }, [
        activeOption
    ]);
    return scrollContainerRef;
}
