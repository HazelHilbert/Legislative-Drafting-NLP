{"version":3,"sources":["useBreadcrumbDivider.tsx"],"sourcesContent":["import * as React from 'react';\nimport { getIntrinsicElementProps, slot } from '@fluentui/react-utilities';\nimport type { BreadcrumbDividerProps, BreadcrumbDividerState } from './BreadcrumbDivider.types';\nimport {\n  ChevronRight20Regular,\n  ChevronRight16Regular,\n  ChevronRight12Regular,\n  ChevronLeft20Regular,\n  ChevronLeft16Regular,\n  ChevronLeft12Regular,\n} from '@fluentui/react-icons';\nimport { BreadcrumbProps } from '../Breadcrumb/Breadcrumb.types';\nimport { useBreadcrumbContext_unstable } from '../Breadcrumb/BreadcrumbContext';\nimport { useFluent_unstable as useFluent } from '@fluentui/react-shared-contexts';\n\n/**\n * Create the state required to render BreadcrumbDivider.\n *\n * The returned state can be modified with hooks such as useBreadcrumbDividerStyles_unstable,\n * before being passed to renderBreadcrumbDivider_unstable.\n *\n * @param props - props from this instance of BreadcrumbDivider\n * @param ref - reference to root HTMLElement of BreadcrumbDivider\n */\nexport const useBreadcrumbDivider_unstable = (\n  props: BreadcrumbDividerProps,\n  ref: React.Ref<HTMLLIElement>,\n): BreadcrumbDividerState => {\n  const { size } = useBreadcrumbContext_unstable();\n  const { dir } = useFluent();\n  const icon = getDividerIcon(size, dir);\n\n  return {\n    components: {\n      root: 'li',\n    },\n    root: slot.always(\n      getIntrinsicElementProps('li', {\n        ref,\n        'aria-hidden': true,\n        children: icon,\n        ...props,\n      }),\n      { elementType: 'li' },\n    ),\n  };\n};\n\nconst dividerIcons = {\n  rtl: {\n    small: <ChevronLeft12Regular />,\n    medium: <ChevronLeft16Regular />,\n    large: <ChevronLeft20Regular />,\n  },\n  ltr: {\n    small: <ChevronRight12Regular />,\n    medium: <ChevronRight16Regular />,\n    large: <ChevronRight20Regular />,\n  },\n};\n\n/**\n * Get icon of the divider\n *\n * @param size - size of the Breadcrumb\n */\nfunction getDividerIcon(size: BreadcrumbProps['size'] = 'medium', dir: string) {\n  const dividerIcon = dir === 'rtl' ? dividerIcons.rtl : dividerIcons.ltr;\n  if (size === 'small') {\n    return dividerIcon.small;\n  }\n  if (size === 'large') {\n    return dividerIcon.large;\n  }\n  return dividerIcon.medium;\n}\n"],"names":["React","getIntrinsicElementProps","slot","ChevronRight20Regular","ChevronRight16Regular","ChevronRight12Regular","ChevronLeft20Regular","ChevronLeft16Regular","ChevronLeft12Regular","useBreadcrumbContext_unstable","useFluent_unstable","useFluent","useBreadcrumbDivider_unstable","props","ref","size","dir","icon","getDividerIcon","components","root","always","children","elementType","dividerIcons","rtl","small","medium","large","ltr","dividerIcon"],"mappings":"AAAA,YAAYA,WAAW,QAAQ;AAC/B,SAASC,wBAAwB,EAAEC,IAAI,QAAQ,4BAA4B;AAE3E,SACEC,qBAAqB,EACrBC,qBAAqB,EACrBC,qBAAqB,EACrBC,oBAAoB,EACpBC,oBAAoB,EACpBC,oBAAoB,QACf,wBAAwB;AAE/B,SAASC,6BAA6B,QAAQ,kCAAkC;AAChF,SAASC,sBAAsBC,SAAS,QAAQ,kCAAkC;AAElF;;;;;;;;CAQC,GACD,OAAO,MAAMC,gCAAgC,CAC3CC,OACAC;IAEA,MAAM,EAAEC,IAAI,EAAE,GAAGN;IACjB,MAAM,EAAEO,GAAG,EAAE,GAAGL;IAChB,MAAMM,OAAOC,eAAeH,MAAMC;IAElC,OAAO;QACLG,YAAY;YACVC,MAAM;QACR;QACAA,MAAMlB,KAAKmB,MAAM,CACfpB,yBAAyB,MAAM;YAC7Ba;YACA,eAAe;YACfQ,UAAUL;YACV,GAAGJ,KAAK;QACV,IACA;YAAEU,aAAa;QAAK;IAExB;AACF,EAAE;AAEF,MAAMC,eAAe;IACnBC,KAAK;QACHC,qBAAO,oBAAClB;QACRmB,sBAAQ,oBAACpB;QACTqB,qBAAO,oBAACtB;IACV;IACAuB,KAAK;QACHH,qBAAO,oBAACrB;QACRsB,sBAAQ,oBAACvB;QACTwB,qBAAO,oBAACzB;IACV;AACF;AAEA;;;;CAIC,GACD,SAASe,eAAeH,OAAgC,QAAQ,EAAEC,GAAW;IAC3E,MAAMc,cAAcd,QAAQ,QAAQQ,aAAaC,GAAG,GAAGD,aAAaK,GAAG;IACvE,IAAId,SAAS,SAAS;QACpB,OAAOe,YAAYJ,KAAK;IAC1B;IACA,IAAIX,SAAS,SAAS;QACpB,OAAOe,YAAYF,KAAK;IAC1B;IACA,OAAOE,YAAYH,MAAM;AAC3B"}