{"version":3,"sources":["priorityQueue.js"],"sourcesContent":["/**\n * @internal\n */ /**\n * @internal\n * @param compare - comparison function for items\n * @returns Priority queue implemented with a min heap\n */ export function createPriorityQueue(compare) {\n    const arr = [];\n    let size = 0;\n    const swap = (a, b)=>{\n        const tmp = arr[a];\n        arr[a] = arr[b];\n        arr[b] = tmp;\n    };\n    const heapify = (i)=>{\n        let smallest = i;\n        const l = left(i);\n        const r = right(i);\n        if (l < size && compare(arr[l], arr[smallest]) < 0) {\n            smallest = l;\n        }\n        if (r < size && compare(arr[r], arr[smallest]) < 0) {\n            smallest = r;\n        }\n        if (smallest !== i) {\n            swap(smallest, i);\n            heapify(smallest);\n        }\n    };\n    const dequeue = ()=>{\n        if (size === 0) {\n            throw new Error('Priority queue empty');\n        }\n        const res = arr[0];\n        arr[0] = arr[--size];\n        heapify(0);\n        return res;\n    };\n    const peek = ()=>{\n        if (size === 0) {\n            return null;\n        }\n        return arr[0];\n    };\n    const enqueue = (item)=>{\n        arr[size++] = item;\n        let i = size - 1;\n        let p = parent(i);\n        while(i > 0 && compare(arr[p], arr[i]) > 0){\n            swap(p, i);\n            i = p;\n            p = parent(i);\n        }\n    };\n    const contains = (item)=>{\n        const index = arr.indexOf(item);\n        return index >= 0 && index < size;\n    };\n    const remove = (item)=>{\n        const i = arr.indexOf(item);\n        if (i === -1 || i >= size) {\n            return;\n        }\n        arr[i] = arr[--size];\n        heapify(i);\n    };\n    const clear = ()=>{\n        size = 0;\n    };\n    const all = ()=>{\n        return arr.slice(0, size);\n    };\n    return {\n        all,\n        clear,\n        contains,\n        dequeue,\n        enqueue,\n        peek,\n        remove,\n        size: ()=>size\n    };\n}\nconst left = (i)=>{\n    return 2 * i + 1;\n};\nconst right = (i)=>{\n    return 2 * i + 2;\n};\nconst parent = (i)=>{\n    return Math.floor((i - 1) / 2);\n};\n"],"names":["createPriorityQueue","compare","arr","size","swap","a","b","tmp","heapify","i","smallest","l","left","r","right","dequeue","Error","res","peek","enqueue","item","p","parent","contains","index","indexOf","remove","clear","all","slice","Math","floor"],"mappings":"AAAA;;CAEC,GAAG;;;;CAIH;;;;+BAAmBA;;;eAAAA;;;AAAT,SAASA,oBAAoBC,OAAO;IAC3C,MAAMC,MAAM,EAAE;IACd,IAAIC,OAAO;IACX,MAAMC,OAAO,CAACC,GAAGC;QACb,MAAMC,MAAML,GAAG,CAACG,EAAE;QAClBH,GAAG,CAACG,EAAE,GAAGH,GAAG,CAACI,EAAE;QACfJ,GAAG,CAACI,EAAE,GAAGC;IACb;IACA,MAAMC,UAAU,CAACC;QACb,IAAIC,WAAWD;QACf,MAAME,IAAIC,KAAKH;QACf,MAAMI,IAAIC,MAAML;QAChB,IAAIE,IAAIR,QAAQF,QAAQC,GAAG,CAACS,EAAE,EAAET,GAAG,CAACQ,SAAS,IAAI,GAAG;YAChDA,WAAWC;QACf;QACA,IAAIE,IAAIV,QAAQF,QAAQC,GAAG,CAACW,EAAE,EAAEX,GAAG,CAACQ,SAAS,IAAI,GAAG;YAChDA,WAAWG;QACf;QACA,IAAIH,aAAaD,GAAG;YAChBL,KAAKM,UAAUD;YACfD,QAAQE;QACZ;IACJ;IACA,MAAMK,UAAU;QACZ,IAAIZ,SAAS,GAAG;YACZ,MAAM,IAAIa,MAAM;QACpB;QACA,MAAMC,MAAMf,GAAG,CAAC,EAAE;QAClBA,GAAG,CAAC,EAAE,GAAGA,GAAG,CAAC,EAAEC,KAAK;QACpBK,QAAQ;QACR,OAAOS;IACX;IACA,MAAMC,OAAO;QACT,IAAIf,SAAS,GAAG;YACZ,OAAO;QACX;QACA,OAAOD,GAAG,CAAC,EAAE;IACjB;IACA,MAAMiB,UAAU,CAACC;QACblB,GAAG,CAACC,OAAO,GAAGiB;QACd,IAAIX,IAAIN,OAAO;QACf,IAAIkB,IAAIC,OAAOb;QACf,MAAMA,IAAI,KAAKR,QAAQC,GAAG,CAACmB,EAAE,EAAEnB,GAAG,CAACO,EAAE,IAAI,EAAE;YACvCL,KAAKiB,GAAGZ;YACRA,IAAIY;YACJA,IAAIC,OAAOb;QACf;IACJ;IACA,MAAMc,WAAW,CAACH;QACd,MAAMI,QAAQtB,IAAIuB,OAAO,CAACL;QAC1B,OAAOI,SAAS,KAAKA,QAAQrB;IACjC;IACA,MAAMuB,SAAS,CAACN;QACZ,MAAMX,IAAIP,IAAIuB,OAAO,CAACL;QACtB,IAAIX,MAAM,CAAC,KAAKA,KAAKN,MAAM;YACvB;QACJ;QACAD,GAAG,CAACO,EAAE,GAAGP,GAAG,CAAC,EAAEC,KAAK;QACpBK,QAAQC;IACZ;IACA,MAAMkB,QAAQ;QACVxB,OAAO;IACX;IACA,MAAMyB,MAAM;QACR,OAAO1B,IAAI2B,KAAK,CAAC,GAAG1B;IACxB;IACA,OAAO;QACHyB;QACAD;QACAJ;QACAR;QACAI;QACAD;QACAQ;QACAvB,MAAM,IAAIA;IACd;AACJ;AACA,MAAMS,OAAO,CAACH;IACV,OAAO,IAAIA,IAAI;AACnB;AACA,MAAMK,QAAQ,CAACL;IACX,OAAO,IAAIA,IAAI;AACnB;AACA,MAAMa,SAAS,CAACb;IACZ,OAAOqB,KAAKC,KAAK,CAAC,AAACtB,CAAAA,IAAI,CAAA,IAAK;AAChC"}