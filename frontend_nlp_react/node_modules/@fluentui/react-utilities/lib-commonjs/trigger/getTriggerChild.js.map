{"version":3,"sources":["getTriggerChild.js"],"sourcesContent":["import * as React from 'react';\nimport { isFluentTrigger } from './isFluentTrigger';\n/**\n * @internal\n * Gets the trigger element of a FluentTriggerComponent (such as Tooltip or MenuTrigger).\n *\n * In the case where the immediate child is itself a FluentTriggerComponent and/or React Fragment,\n * it returns the first descendant that is _not_ a FluentTriggerComponent or Fragment.\n * This allows multiple triggers to be stacked, and still apply their props to the actual trigger element.\n *\n * For example, the following returns `<div id=\"child\" />`:\n * ```jsx\n * getTriggerChild(\n *   <Tooltip>\n *     <MenuTrigger>\n *       <div id=\"child\" />\n *     </MenuTrigger>\n *   </Tooltip>\n * );\n * ```\n *\n * In the case where the immediate child is not a valid element,\n * null is returned\n */ export function getTriggerChild(children) {\n    if (!React.isValidElement(children)) {\n        return null;\n    }\n    return isFluentTrigger(children) ? getTriggerChild(// FIXME: This casting should be unnecessary as isFluentTrigger is a guard type method,\n    // but for some reason it's failing on build\n    children.props.children) : children;\n}\n"],"names":["getTriggerChild","children","React","isValidElement","isFluentTrigger","props"],"mappings":";;;;+BAuBoBA;;;eAAAA;;;;iEAvBG;iCACS;AAsBrB,SAASA,gBAAgBC,QAAQ;IACxC,IAAI,eAACC,OAAMC,cAAc,CAACF,WAAW;QACjC,OAAO;IACX;IACA,OAAOG,IAAAA,gCAAe,EAACH,YAAYD,gBACnC,4CAA4C;IAC5CC,SAASI,KAAK,CAACJ,QAAQ,IAAIA;AAC/B"}