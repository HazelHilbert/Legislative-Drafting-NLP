{"version":3,"sources":["useId.js"],"sourcesContent":["import * as React from 'react';\nimport { defaultSSRContextValue, useSSRContext } from '../ssr/index';\nconst IdPrefixContext = React.createContext(undefined);\n/**\n * Allows to define a prefix that will be used for all IDs generated by useId() hook. It's useful to avoid collisions\n * between different bundles.\n */ export const IdPrefixProvider = IdPrefixContext.Provider;\nfunction useIdPrefix() {\n    return React.useContext(IdPrefixContext) || '';\n}\n/**\n * Resets generated IDs, should be used only in tests.\n */ export function resetIdsForTests() {\n    defaultSSRContextValue.current = 0;\n}\n/**\n * Hook to generate a unique ID.\n *\n * @param prefix - Optional prefix for the ID. Defaults to 'fui-'.\n * @param providedId - Optional id provided by a parent component. Defaults to the provided value if present,\n *  without conditioning the hook call\n * @returns The ID\n */ export function useId(prefix = 'fui-', providedId) {\n    const contextValue = useSSRContext();\n    const idPrefix = useIdPrefix();\n    // Checking if useId is available on React, if it is, we use it to generate the id. String concatenation is used to\n    // prevent bundlers from complaining with older versions of React.\n    const _useId = React['use' + 'Id'];\n    if (_useId) {\n        const generatedId = _useId();\n        // eslint-disable-next-line react-hooks/rules-of-hooks\n        const escapedId = React.useMemo(()=>generatedId.replace(/:/g, ''), [\n            generatedId\n        ]);\n        return providedId || `${idPrefix}${prefix}${escapedId}`;\n    }\n    // Hooks appear to be running conditionally, but they will always run in the same order since it's based on\n    // the version of React being used. This is safe to ignore.\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    return React.useMemo(()=>{\n        if (providedId) {\n            return providedId;\n        }\n        return `${idPrefix}${prefix}${++contextValue.current}`;\n    }, [\n        idPrefix,\n        prefix,\n        providedId,\n        contextValue\n    ]);\n}\n"],"names":["IdPrefixProvider","resetIdsForTests","useId","IdPrefixContext","React","createContext","undefined","Provider","useIdPrefix","useContext","defaultSSRContextValue","current","prefix","providedId","contextValue","useSSRContext","idPrefix","_useId","generatedId","escapedId","useMemo","replace"],"mappings":";;;;;;;;;;;IAMiBA,gBAAgB;eAAhBA;;IAMGC,gBAAgB;eAAhBA;;IAUAC,KAAK;eAALA;;;;iEAtBG;uBAC+B;AACtD,MAAMC,gCAAkBC,OAAMC,aAAa,CAACC;AAIjC,MAAMN,mBAAmBG,gBAAgBI,QAAQ;AAC5D,SAASC;IACL,OAAOJ,OAAMK,UAAU,CAACN,oBAAoB;AAChD;AAGW,SAASF;IAChBS,6BAAsB,CAACC,OAAO,GAAG;AACrC;AAQW,SAAST,MAAMU,SAAS,MAAM,EAAEC,UAAU;IACjD,MAAMC,eAAeC,IAAAA,oBAAa;IAClC,MAAMC,WAAWR;IACjB,mHAAmH;IACnH,kEAAkE;IAClE,MAAMS,SAASb,MAAK,CAAC,QAAQ,KAAK;IAClC,IAAIa,QAAQ;QACR,MAAMC,cAAcD;QACpB,sDAAsD;QACtD,MAAME,YAAYf,OAAMgB,OAAO,CAAC,IAAIF,YAAYG,OAAO,CAAC,MAAM,KAAK;YAC/DH;SACH;QACD,OAAOL,cAAc,CAAC,EAAEG,SAAS,EAAEJ,OAAO,EAAEO,UAAU,CAAC;IAC3D;IACA,2GAA2G;IAC3G,2DAA2D;IAC3D,sDAAsD;IACtD,OAAOf,OAAMgB,OAAO,CAAC;QACjB,IAAIP,YAAY;YACZ,OAAOA;QACX;QACA,OAAO,CAAC,EAAEG,SAAS,EAAEJ,OAAO,EAAE,EAAEE,aAAaH,OAAO,CAAC,CAAC;IAC1D,GAAG;QACCK;QACAJ;QACAC;QACAC;KACH;AACL"}