"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    slot: function() {
        return _index.slot;
    },
    isSlot: function() {
        return _index.isSlot;
    },
    getSlots: function() {
        return _index.getSlots;
    },
    getSlotsNext: function() {
        return _index.getSlotsNext;
    },
    assertSlots: function() {
        return _index.assertSlots;
    },
    resolveShorthand: function() {
        return _index.resolveShorthand;
    },
    isResolvedShorthand: function() {
        return _index.isResolvedShorthand;
    },
    getIntrinsicElementProps: function() {
        return _index.getIntrinsicElementProps;
    },
    SLOT_ELEMENT_TYPE_SYMBOL: function() {
        return _index.SLOT_ELEMENT_TYPE_SYMBOL;
    },
    SLOT_RENDER_FUNCTION_SYMBOL: function() {
        return _index.SLOT_RENDER_FUNCTION_SYMBOL;
    },
    IdPrefixProvider: function() {
        return _index1.IdPrefixProvider;
    },
    resetIdsForTests: function() {
        return _index1.resetIdsForTests;
    },
    useAnimationFrame: function() {
        return _index1.useAnimationFrame;
    },
    useControllableState: function() {
        return _index1.useControllableState;
    },
    useEventCallback: function() {
        return _index1.useEventCallback;
    },
    useFirstMount: function() {
        return _index1.useFirstMount;
    },
    useForceUpdate: function() {
        return _index1.useForceUpdate;
    },
    useId: function() {
        return _index1.useId;
    },
    useIsomorphicLayoutEffect: function() {
        return _index1.useIsomorphicLayoutEffect;
    },
    useMergedRefs: function() {
        return _index1.useMergedRefs;
    },
    useOnClickOutside: function() {
        return _index1.useOnClickOutside;
    },
    useOnScrollOutside: function() {
        return _index1.useOnScrollOutside;
    },
    usePrevious: function() {
        return _index1.usePrevious;
    },
    useScrollbarWidth: function() {
        return _index1.useScrollbarWidth;
    },
    useTimeout: function() {
        return _index1.useTimeout;
    },
    canUseDOM: function() {
        return _index2.canUseDOM;
    },
    useIsSSR: function() {
        return _index2.useIsSSR;
    },
    SSRProvider: function() {
        return _index2.SSRProvider;
    },
    clamp: function() {
        return _index3.clamp;
    },
    getNativeElementProps: function() {
        return _index3.getNativeElementProps;
    },
    getPartitionedNativeProps: function() {
        return _index3.getPartitionedNativeProps;
    },
    getRTLSafeKey: function() {
        return _index3.getRTLSafeKey;
    },
    mergeCallbacks: function() {
        return _index3.mergeCallbacks;
    },
    isHTMLElement: function() {
        return _index3.isHTMLElement;
    },
    isInteractiveHTMLElement: function() {
        return _index3.isInteractiveHTMLElement;
    },
    omit: function() {
        return _index3.omit;
    },
    createPriorityQueue: function() {
        return _index3.createPriorityQueue;
    },
    applyTriggerPropsToChildren: function() {
        return _index4.applyTriggerPropsToChildren;
    },
    getTriggerChild: function() {
        return _index4.getTriggerChild;
    },
    isFluentTrigger: function() {
        return _index4.isFluentTrigger;
    },
    isTouchEvent: function() {
        return _index5.isTouchEvent;
    },
    isMouseEvent: function() {
        return _index5.isMouseEvent;
    },
    getEventClientCoords: function() {
        return _index5.getEventClientCoords;
    },
    useSelection: function() {
        return _index6.useSelection;
    },
    elementContains: function() {
        return _index7.elementContains;
    },
    setVirtualParent: function() {
        return _index7.setVirtualParent;
    },
    getParent: function() {
        return _index7.getParent;
    }
});
const _index = require("./compose/index");
const _index1 = require("./hooks/index");
const _index2 = require("./ssr/index");
const _index3 = require("./utils/index");
const _index4 = require("./trigger/index");
const _index5 = require("./events/index");
const _index6 = require("./selection/index");
const _index7 = require("./virtualParent/index");
