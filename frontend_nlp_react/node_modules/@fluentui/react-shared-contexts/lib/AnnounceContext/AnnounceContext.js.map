{"version":3,"sources":["AnnounceContext.ts"],"sourcesContent":["import * as React from 'react';\n\n/**\n * Defines options for a message to be announced.\n */\nexport type AnnounceOptions = {\n  alert?: boolean;\n\n  /**\n   * A unique identifier for the message. If a message with the same id is already announced, it will be replaced.\n   */\n  batchId?: string;\n\n  /**\n   * Indicates that the message announcement can be interrupted by another message and will be announced only\n   * user is idle.\n   */\n  polite?: boolean;\n\n  /** Defines the priority of the message. Higher priority messages will be announced first. */\n  priority?: number;\n};\n\nexport type AnnounceContextValue = {\n  announce: (message: string, options?: AnnounceOptions) => void;\n};\n\n/**\n * @internal\n */\nconst AnnounceContext = React.createContext<AnnounceContextValue | undefined>(undefined);\n\nexport const AnnounceProvider = AnnounceContext.Provider;\n\n/**\n * Returns a function that can be used to announce messages to screen readers.\n */\nexport function useAnnounce(): AnnounceContextValue {\n  return React.useContext(AnnounceContext) ?? { announce: () => undefined };\n}\n"],"names":["React","AnnounceContext","createContext","undefined","AnnounceProvider","Provider","useAnnounce","useContext","announce"],"mappings":"AAAA,YAAYA,WAAW,QAAQ;AA2B/B;;CAEC,GACD,MAAMC,kBAAkBD,MAAME,aAAa,CAAmCC;AAE9E,OAAO,MAAMC,mBAAmBH,gBAAgBI,QAAQ,CAAC;AAEzD;;CAEC,GACD,OAAO,SAASC;QACPN;IAAP,OAAOA,CAAAA,oBAAAA,MAAMO,UAAU,CAACN,8BAAjBD,+BAAAA,oBAAqC;QAAEQ,UAAU,IAAML;IAAU;AAC1E"}