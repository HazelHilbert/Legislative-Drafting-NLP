"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "useVirtualizerScrollViewDynamic_unstable", {
    enumerable: true,
    get: function() {
        return useVirtualizerScrollViewDynamic_unstable;
    }
});
const _interop_require_wildcard = require("@swc/helpers/_/_interop_require_wildcard");
const _react = /*#__PURE__*/ _interop_require_wildcard._(require("react"));
const _reactutilities = require("@fluentui/react-utilities");
const _useVirtualizer = require("../Virtualizer/useVirtualizer");
const _Hooks = require("../../Hooks");
const _Utilities = require("../../Utilities");
const _useMeasureList = require("../../hooks/useMeasureList");
function useVirtualizerScrollViewDynamic_unstable(props) {
    const contextState = (0, _Utilities.useVirtualizerContextState_unstable)(props.virtualizerContext);
    const { imperativeRef, axis = 'vertical', reversed, imperativeVirtualizerRef } = props;
    let sizeTrackingArray = _react.useRef(new Array(props.numItems).fill(props.itemSize));
    const getChildSizeAuto = _react.useCallback((index)=>{
        if (sizeTrackingArray.current.length <= index || sizeTrackingArray.current[index] <= 0) {
            // Default size for initial state or untracked
            return props.itemSize;
        }
        /* Required to be defined prior to our measure function
       * we use a sizing array ref that we will update post-render
       */ return sizeTrackingArray.current[index];
    }, [
        sizeTrackingArray,
        props.itemSize
    ]);
    var _props_axis, _props_getItemSize, _contextState_contextIndex;
    const { virtualizerLength, bufferItems, bufferSize, scrollRef } = (0, _Hooks.useDynamicVirtualizerMeasure)({
        defaultItemSize: props.itemSize,
        direction: (_props_axis = props.axis) !== null && _props_axis !== void 0 ? _props_axis : 'vertical',
        getItemSize: (_props_getItemSize = props.getItemSize) !== null && _props_getItemSize !== void 0 ? _props_getItemSize : getChildSizeAuto,
        currentIndex: (_contextState_contextIndex = contextState === null || contextState === void 0 ? void 0 : contextState.contextIndex) !== null && _contextState_contextIndex !== void 0 ? _contextState_contextIndex : 0,
        numItems: props.numItems
    });
    // Store the virtualizer length as a ref for imperative ref access
    const virtualizerLengthRef = _react.useRef(virtualizerLength);
    if (virtualizerLengthRef.current !== virtualizerLength) {
        virtualizerLengthRef.current = virtualizerLength;
    }
    const scrollViewRef = (0, _reactutilities.useMergedRefs)(props.scrollViewRef, scrollRef);
    const scrollCallbackRef = _react.useRef(null);
    const _imperativeVirtualizerRef = (0, _reactutilities.useMergedRefs)(_react.useRef(null), imperativeVirtualizerRef);
    (0, _react.useImperativeHandle)(imperativeRef, ()=>{
        var _imperativeVirtualizerRef_current;
        return {
            scrollTo (index, behavior = 'auto', callback) {
                scrollCallbackRef.current = callback !== null && callback !== void 0 ? callback : null;
                if (_imperativeVirtualizerRef.current) {
                    var _imperativeVirtualizerRef_current;
                    const progressiveSizes = _imperativeVirtualizerRef.current.progressiveSizes.current;
                    const totalSize = progressiveSizes && (progressiveSizes === null || progressiveSizes === void 0 ? void 0 : progressiveSizes.length) > 0 ? progressiveSizes[Math.max(progressiveSizes.length - 1, 0)] : 0;
                    _imperativeVirtualizerRef.current.setFlaggedIndex(index);
                    (0, _Utilities.scrollToItemDynamic)({
                        index,
                        itemSizes: (_imperativeVirtualizerRef_current = _imperativeVirtualizerRef.current) === null || _imperativeVirtualizerRef_current === void 0 ? void 0 : _imperativeVirtualizerRef_current.nodeSizes,
                        totalSize,
                        scrollViewRef,
                        axis,
                        reversed,
                        behavior
                    });
                }
            },
            currentIndex: (_imperativeVirtualizerRef_current = _imperativeVirtualizerRef.current) === null || _imperativeVirtualizerRef_current === void 0 ? void 0 : _imperativeVirtualizerRef_current.currentIndex,
            virtualizerLength: virtualizerLengthRef
        };
    }, [
        axis,
        scrollViewRef,
        reversed,
        _imperativeVirtualizerRef
    ]);
    const handleRenderedIndex = (index)=>{
        if (scrollCallbackRef.current) {
            scrollCallbackRef.current(index);
        }
    };
    var _props_getItemSize1;
    const virtualizerState = (0, _useVirtualizer.useVirtualizer_unstable)({
        ...props,
        getItemSize: (_props_getItemSize1 = props.getItemSize) !== null && _props_getItemSize1 !== void 0 ? _props_getItemSize1 : getChildSizeAuto,
        virtualizerLength,
        bufferItems,
        bufferSize,
        scrollViewRef,
        virtualizerContext: contextState,
        imperativeVirtualizerRef: _imperativeVirtualizerRef,
        onRenderedFlaggedIndex: handleRenderedIndex
    });
    const measureObject = (0, _useMeasureList.useMeasureList)(virtualizerState.virtualizerStartIndex, virtualizerLength, props.numItems, props.itemSize);
    if (axis === 'horizontal') {
        sizeTrackingArray = measureObject.widthArray;
    } else {
        sizeTrackingArray = measureObject.heightArray;
    }
    if (!props.getItemSize) {
        // Auto-measuring is required
        _react.Children.map(virtualizerState.virtualizedChildren, (child, index)=>{
            if (/*#__PURE__*/ _react.isValidElement(child)) {
                virtualizerState.virtualizedChildren[index] = /*#__PURE__*/ _react.createElement(child.type, {
                    ...child.props,
                    key: child.key,
                    ref: (element)=>{
                        // If a ref exists in props, call it
                        if (typeof child.props.ref === 'function') {
                            child.props.ref(element);
                        } else if (child.props.ref) {
                            child.props.ref.current = element;
                        }
                        if (child.hasOwnProperty('ref')) {
                            // We must access this from the child directly, not props (forward ref).
                            // eslint-disable-next-line  @typescript-eslint/no-explicit-any
                            const localRef = child === null || child === void 0 ? void 0 : child.ref;
                            if (typeof localRef === 'function') {
                                localRef(element);
                            } else if (localRef) {
                                localRef.current = element;
                            }
                        }
                        // Call the auto-measure ref attachment.
                        measureObject.createIndexedRef(index)(element);
                    }
                });
            }
        });
    }
    return {
        ...virtualizerState,
        components: {
            ...virtualizerState.components,
            container: 'div'
        },
        container: _reactutilities.slot.always(props.container, {
            defaultProps: {
                ref: scrollViewRef
            },
            elementType: 'div'
        })
    };
}
