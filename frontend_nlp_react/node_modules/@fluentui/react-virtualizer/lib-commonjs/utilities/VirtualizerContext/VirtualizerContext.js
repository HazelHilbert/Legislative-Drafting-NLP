"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    VirtualizerContextProvider: function() {
        return VirtualizerContextProvider;
    },
    useVirtualizerContext_unstable: function() {
        return useVirtualizerContext_unstable;
    },
    useVirtualizerContextState_unstable: function() {
        return useVirtualizerContextState_unstable;
    }
});
const _interop_require_wildcard = require("@swc/helpers/_/_interop_require_wildcard");
const _react = /*#__PURE__*/ _interop_require_wildcard._(require("react"));
const VirtualizerContext = /*#__PURE__*/ _react.createContext(undefined);
const VirtualizerContextProvider = VirtualizerContext.Provider;
const useVirtualizerContext_unstable = ()=>{
    return _react.useContext(VirtualizerContext);
};
const useVirtualizerContextState_unstable = (passedContext)=>{
    const virtualizerContext = useVirtualizerContext_unstable();
    const [_contextIndex, _setContextIndex] = (0, _react.useState)(-1);
    /* We respect any wrapped providers while also ensuring defaults or passed through
   * Order of usage -> Passed Prop -> Provider Context -> Internal State default
   */ const _context = (0, _react.useMemo)(()=>{
        var _ref;
        return (_ref = passedContext !== null && passedContext !== void 0 ? passedContext : virtualizerContext) !== null && _ref !== void 0 ? _ref : {
            contextIndex: _contextIndex,
            setContextIndex: _setContextIndex
        };
    }, [
        _contextIndex,
        passedContext,
        virtualizerContext
    ]);
    const context = (0, _react.useMemo)(()=>{
        return {
            contextIndex: _context.contextIndex,
            setContextIndex: _context.setContextIndex
        };
    }, [
        _context
    ]);
    return context;
};
