"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "usePortalMountNode", {
    enumerable: true,
    get: function() {
        return usePortalMountNode;
    }
});
const _interop_require_wildcard = require("@swc/helpers/_/_interop_require_wildcard");
const _react = /*#__PURE__*/ _interop_require_wildcard._(require("react"));
const _reactsharedcontexts = require("@fluentui/react-shared-contexts");
const _react1 = require("@griffel/react");
const _reacttabster = require("@fluentui/react-tabster");
const _usedisposable = require("use-disposable");
const _usePortalMountNodeStylesstyles = require("./usePortalMountNodeStyles.styles");
const useInsertionEffect = _react['useInsertion' + 'Effect'];
const usePortalMountNode = (options)=>{
    const { targetDocument, dir } = (0, _reactsharedcontexts.useFluent_unstable)();
    const mountNode = (0, _reactsharedcontexts.usePortalMountNode)();
    const focusVisibleRef = (0, _reacttabster.useFocusVisible)();
    const classes = (0, _usePortalMountNodeStylesstyles.usePortalMountNodeStylesStyles)();
    const themeClassName = (0, _reactsharedcontexts.useThemeClassName_unstable)();
    const className = (0, _react1.mergeClasses)(themeClassName, classes.root, options.className);
    const targetNode = mountNode !== null && mountNode !== void 0 ? mountNode : targetDocument === null || targetDocument === void 0 ? void 0 : targetDocument.body;
    const element = (0, _usedisposable.useDisposable)(()=>{
        if (targetNode === undefined || options.disabled) {
            return [
                null,
                ()=>null
            ];
        }
        const newElement = targetNode.ownerDocument.createElement('div');
        targetNode.appendChild(newElement);
        return [
            newElement,
            ()=>newElement.remove()
        ];
    }, [
        targetNode
    ]);
    if (useInsertionEffect) {
        // eslint-disable-next-line react-hooks/rules-of-hooks
        useInsertionEffect(()=>{
            if (!element) {
                return;
            }
            const classesToApply = className.split(' ').filter(Boolean);
            element.classList.add(...classesToApply);
            element.setAttribute('dir', dir);
            focusVisibleRef.current = element;
            return ()=>{
                element.classList.remove(...classesToApply);
                element.removeAttribute('dir');
            };
        }, [
            className,
            dir,
            element,
            focusVisibleRef
        ]);
    } else {
        // This useMemo call is intentional for React 17
        // We don't want to re-create the portal element when its attributes change.
        // This also should not be done in an effect because, changing the value of css variables
        // after initial mount can trigger interesting CSS side effects like transitions.
        // eslint-disable-next-line react-hooks/rules-of-hooks
        _react.useMemo(()=>{
            if (!element) {
                return;
            }
            // Force replace all classes
            element.className = className;
            element.setAttribute('dir', dir);
            focusVisibleRef.current = element;
        }, [
            className,
            dir,
            element,
            focusVisibleRef
        ]);
    }
    return element;
};
