{"version":3,"sources":["useDataGridRow.js"],"sourcesContent":["import * as React from 'react';\nimport { isInteractiveHTMLElement, useEventCallback, slot } from '@fluentui/react-utilities';\nimport { Space } from '@fluentui/keyboard-keys';\nimport { useTableRow_unstable } from '../TableRow/useTableRow';\nimport { dataGridContextDefaultValue, useDataGridContext_unstable } from '../../contexts/dataGridContext';\nimport { DataGridSelectionCell } from '../DataGridSelectionCell/DataGridSelectionCell';\nimport { useTableRowIdContext } from '../../contexts/rowIdContext';\nimport { useIsInTableHeader } from '../../contexts/tableHeaderContext';\n/**\n * Create the state required to render DataGridRow.\n *\n * The returned state can be modified with hooks such as useDataGridRowStyles_unstable,\n * before being passed to renderDataGridRow_unstable.\n *\n * @param props - props from this instance of DataGridRow\n * @param ref - reference to root HTMLElement of DataGridRow\n */ export const useDataGridRow_unstable = (props, ref)=>{\n    const rowId = useTableRowIdContext();\n    const isHeader = useIsInTableHeader();\n    const columnDefs = useDataGridContext_unstable((ctx)=>ctx.columns);\n    const selectable = useDataGridContext_unstable((ctx)=>ctx.selectableRows);\n    const selected = useDataGridContext_unstable((ctx)=>ctx.selection.isRowSelected(rowId));\n    const focusMode = useDataGridContext_unstable((ctx)=>ctx.focusMode);\n    const compositeRowTabsterAttribute = useDataGridContext_unstable((ctx)=>ctx.compositeRowTabsterAttribute);\n    const tabbable = focusMode === 'row_unstable' || focusMode === 'composite';\n    const appearance = useDataGridContext_unstable((ctx)=>{\n        if (!isHeader && selectable && ctx.selection.isRowSelected(rowId)) {\n            return ctx.selectionAppearance;\n        }\n        return 'none';\n    });\n    const toggleRow = useDataGridContext_unstable((ctx)=>ctx.selection.toggleRow);\n    const onClick = useEventCallback((e)=>{\n        var _props_onClick;\n        if (selectable && !isHeader) {\n            toggleRow(e, rowId);\n        }\n        (_props_onClick = props.onClick) === null || _props_onClick === void 0 ? void 0 : _props_onClick.call(props, e);\n    });\n    const onKeyDown = useEventCallback((e)=>{\n        var _props_onKeyDown;\n        if (selectable && !isHeader && e.key === Space && !isInteractiveHTMLElement(e.target)) {\n            // stop scrolling\n            e.preventDefault();\n            toggleRow(e, rowId);\n        }\n        (_props_onKeyDown = props.onKeyDown) === null || _props_onKeyDown === void 0 ? void 0 : _props_onKeyDown.call(props, e);\n    });\n    const baseState = useTableRow_unstable({\n        appearance,\n        'aria-selected': selectable ? selected : undefined,\n        tabIndex: tabbable && !isHeader ? 0 : undefined,\n        ...focusMode === 'composite' && !isHeader && compositeRowTabsterAttribute,\n        ...props,\n        onClick,\n        onKeyDown,\n        children: null,\n        as: 'div'\n    }, ref);\n    return {\n        ...baseState,\n        components: {\n            ...baseState.components,\n            selectionCell: DataGridSelectionCell\n        },\n        selectionCell: slot.optional(props.selectionCell, {\n            renderByDefault: selectable,\n            elementType: DataGridSelectionCell\n        }),\n        renderCell: props.children,\n        columnDefs,\n        // This context value should not be used internally\n        // It's intended to help power user render functions\n        dataGridContextValue: useStableDataGridContextValue()\n    };\n};\nfunction useStableDataGridContextValue() {\n    const ref = React.useRef(dataGridContextDefaultValue);\n    // Heads up!\n    // We will not re-render when the context value changes, but we will have the latest value of the context when we do\n    // render for other reasons.\n    //\n    // This relies on a context selector that always returns the same value:\n    // - we will not re-render when the context value changes\n    // - we will store the context value in a ref\n    useDataGridContext_unstable((ctx)=>{\n        ref.current = ctx;\n        return null;\n    });\n    return ref.current;\n}\n"],"names":["useDataGridRow_unstable","props","ref","rowId","useTableRowIdContext","isHeader","useIsInTableHeader","columnDefs","useDataGridContext_unstable","ctx","columns","selectable","selectableRows","selected","selection","isRowSelected","focusMode","compositeRowTabsterAttribute","tabbable","appearance","selectionAppearance","toggleRow","onClick","useEventCallback","e","_props_onClick","call","onKeyDown","_props_onKeyDown","key","Space","isInteractiveHTMLElement","target","preventDefault","baseState","useTableRow_unstable","undefined","tabIndex","children","as","components","selectionCell","DataGridSelectionCell","slot","optional","renderByDefault","elementType","renderCell","dataGridContextValue","useStableDataGridContextValue","React","useRef","dataGridContextDefaultValue","current"],"mappings":";;;;+BAgBiBA;;;eAAAA;;;;iEAhBM;gCAC0C;8BAC3C;6BACe;iCACoC;uCACnC;8BACD;oCACF;AASxB,MAAMA,0BAA0B,CAACC,OAAOC;IAC/C,MAAMC,QAAQC,IAAAA,kCAAoB;IAClC,MAAMC,WAAWC,IAAAA,sCAAkB;IACnC,MAAMC,aAAaC,IAAAA,4CAA2B,EAAC,CAACC,MAAMA,IAAIC,OAAO;IACjE,MAAMC,aAAaH,IAAAA,4CAA2B,EAAC,CAACC,MAAMA,IAAIG,cAAc;IACxE,MAAMC,WAAWL,IAAAA,4CAA2B,EAAC,CAACC,MAAMA,IAAIK,SAAS,CAACC,aAAa,CAACZ;IAChF,MAAMa,YAAYR,IAAAA,4CAA2B,EAAC,CAACC,MAAMA,IAAIO,SAAS;IAClE,MAAMC,+BAA+BT,IAAAA,4CAA2B,EAAC,CAACC,MAAMA,IAAIQ,4BAA4B;IACxG,MAAMC,WAAWF,cAAc,kBAAkBA,cAAc;IAC/D,MAAMG,aAAaX,IAAAA,4CAA2B,EAAC,CAACC;QAC5C,IAAI,CAACJ,YAAYM,cAAcF,IAAIK,SAAS,CAACC,aAAa,CAACZ,QAAQ;YAC/D,OAAOM,IAAIW,mBAAmB;QAClC;QACA,OAAO;IACX;IACA,MAAMC,YAAYb,IAAAA,4CAA2B,EAAC,CAACC,MAAMA,IAAIK,SAAS,CAACO,SAAS;IAC5E,MAAMC,UAAUC,IAAAA,gCAAgB,EAAC,CAACC;QAC9B,IAAIC;QACJ,IAAId,cAAc,CAACN,UAAU;YACzBgB,UAAUG,GAAGrB;QACjB;QACCsB,CAAAA,iBAAiBxB,MAAMqB,OAAO,AAAD,MAAO,QAAQG,mBAAmB,KAAK,IAAI,KAAK,IAAIA,eAAeC,IAAI,CAACzB,OAAOuB;IACjH;IACA,MAAMG,YAAYJ,IAAAA,gCAAgB,EAAC,CAACC;QAChC,IAAII;QACJ,IAAIjB,cAAc,CAACN,YAAYmB,EAAEK,GAAG,KAAKC,mBAAK,IAAI,CAACC,IAAAA,wCAAwB,EAACP,EAAEQ,MAAM,GAAG;YACnF,iBAAiB;YACjBR,EAAES,cAAc;YAChBZ,UAAUG,GAAGrB;QACjB;QACCyB,CAAAA,mBAAmB3B,MAAM0B,SAAS,AAAD,MAAO,QAAQC,qBAAqB,KAAK,IAAI,KAAK,IAAIA,iBAAiBF,IAAI,CAACzB,OAAOuB;IACzH;IACA,MAAMU,YAAYC,IAAAA,iCAAoB,EAAC;QACnChB;QACA,iBAAiBR,aAAaE,WAAWuB;QACzCC,UAAUnB,YAAY,CAACb,WAAW,IAAI+B;QACtC,GAAGpB,cAAc,eAAe,CAACX,YAAYY,4BAA4B;QACzE,GAAGhB,KAAK;QACRqB;QACAK;QACAW,UAAU;QACVC,IAAI;IACR,GAAGrC;IACH,OAAO;QACH,GAAGgC,SAAS;QACZM,YAAY;YACR,GAAGN,UAAUM,UAAU;YACvBC,eAAeC,4CAAqB;QACxC;QACAD,eAAeE,oBAAI,CAACC,QAAQ,CAAC3C,MAAMwC,aAAa,EAAE;YAC9CI,iBAAiBlC;YACjBmC,aAAaJ,4CAAqB;QACtC;QACAK,YAAY9C,MAAMqC,QAAQ;QAC1B/B;QACA,mDAAmD;QACnD,oDAAoD;QACpDyC,sBAAsBC;IAC1B;AACJ;AACA,SAASA;IACL,MAAM/C,MAAMgD,OAAMC,MAAM,CAACC,4CAA2B;IACpD,YAAY;IACZ,oHAAoH;IACpH,4BAA4B;IAC5B,EAAE;IACF,wEAAwE;IACxE,yDAAyD;IACzD,6CAA6C;IAC7C5C,IAAAA,4CAA2B,EAAC,CAACC;QACzBP,IAAImD,OAAO,GAAG5C;QACd,OAAO;IACX;IACA,OAAOP,IAAImD,OAAO;AACtB"}