{"version":3,"sources":["useTableCellLayout.js"],"sourcesContent":["import * as React from 'react';\nimport { getIntrinsicElementProps, slot } from '@fluentui/react-utilities';\nimport { useTableContext } from '../../contexts/tableContext';\nconst tableAvatarSizeMap = {\n    medium: 32,\n    small: 24,\n    'extra-small': 20\n};\n/**\n * Create the state required to render TableCellLayout.\n *\n * The returned state can be modified with hooks such as useTableCellLayoutStyles_unstable,\n * before being passed to renderTableCellLayout_unstable.\n *\n * @param props - props from this instance of TableCellLayout\n * @param ref - reference to root HTMLElement of TableCellLayout\n */ export const useTableCellLayout_unstable = (props, ref)=>{\n    const { size } = useTableContext();\n    return {\n        components: {\n            root: 'div',\n            main: 'span',\n            description: 'span',\n            content: 'div',\n            media: 'span'\n        },\n        root: slot.always(getIntrinsicElementProps('div', {\n            // FIXME:\n            // `ref` is wrongly assigned to be `HTMLElement` instead of `HTMLDivElement`\n            // but since it would be a breaking change to fix it, we are casting ref to it's proper type\n            ref: ref,\n            ...props\n        }), {\n            elementType: 'div'\n        }),\n        appearance: props.appearance,\n        truncate: props.truncate,\n        main: slot.optional(props.main, {\n            renderByDefault: true,\n            elementType: 'span'\n        }),\n        media: slot.optional(props.media, {\n            elementType: 'span'\n        }),\n        description: slot.optional(props.description, {\n            elementType: 'span'\n        }),\n        content: slot.optional(props.content, {\n            renderByDefault: !!props.description || !!props.children,\n            elementType: 'div'\n        }),\n        avatarSize: tableAvatarSizeMap[size],\n        size\n    };\n};\n"],"names":["useTableCellLayout_unstable","tableAvatarSizeMap","medium","small","props","ref","size","useTableContext","components","root","main","description","content","media","slot","always","getIntrinsicElementProps","elementType","appearance","truncate","optional","renderByDefault","children","avatarSize"],"mappings":";;;;+BAgBiBA;;;eAAAA;;;;iEAhBM;gCACwB;8BACf;AAChC,MAAMC,qBAAqB;IACvBC,QAAQ;IACRC,OAAO;IACP,eAAe;AACnB;AASW,MAAMH,8BAA8B,CAACI,OAAOC;IACnD,MAAM,EAAEC,IAAI,EAAE,GAAGC,IAAAA,6BAAe;IAChC,OAAO;QACHC,YAAY;YACRC,MAAM;YACNC,MAAM;YACNC,aAAa;YACbC,SAAS;YACTC,OAAO;QACX;QACAJ,MAAMK,oBAAI,CAACC,MAAM,CAACC,IAAAA,wCAAwB,EAAC,OAAO;YAC9C,SAAS;YACT,4EAA4E;YAC5E,4FAA4F;YAC5FX,KAAKA;YACL,GAAGD,KAAK;QACZ,IAAI;YACAa,aAAa;QACjB;QACAC,YAAYd,MAAMc,UAAU;QAC5BC,UAAUf,MAAMe,QAAQ;QACxBT,MAAMI,oBAAI,CAACM,QAAQ,CAAChB,MAAMM,IAAI,EAAE;YAC5BW,iBAAiB;YACjBJ,aAAa;QACjB;QACAJ,OAAOC,oBAAI,CAACM,QAAQ,CAAChB,MAAMS,KAAK,EAAE;YAC9BI,aAAa;QACjB;QACAN,aAAaG,oBAAI,CAACM,QAAQ,CAAChB,MAAMO,WAAW,EAAE;YAC1CM,aAAa;QACjB;QACAL,SAASE,oBAAI,CAACM,QAAQ,CAAChB,MAAMQ,OAAO,EAAE;YAClCS,iBAAiB,CAAC,CAACjB,MAAMO,WAAW,IAAI,CAAC,CAACP,MAAMkB,QAAQ;YACxDL,aAAa;QACjB;QACAM,YAAYtB,kBAAkB,CAACK,KAAK;QACpCA;IACJ;AACJ"}