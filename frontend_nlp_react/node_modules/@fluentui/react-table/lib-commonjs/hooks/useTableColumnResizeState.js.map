{"version":3,"sources":["useTableColumnResizeState.js"],"sourcesContent":["import { useEventCallback, useIsomorphicLayoutEffect } from '@fluentui/react-utilities';\nimport * as React from 'react';\nimport { columnDefinitionsToState, adjustColumnWidthsToFitContainer, getColumnById, setColumnProperty, getColumnWidth } from '../utils/columnResizeUtils';\nconst createReducer = ()=>(state, action)=>{\n        switch(action.type){\n            case 'CONTAINER_WIDTH_UPDATED':\n                return {\n                    ...state,\n                    containerWidth: action.containerWidth,\n                    columnWidthState: adjustColumnWidthsToFitContainer(state.columnWidthState, action.containerWidth)\n                };\n            case 'COLUMNS_UPDATED':\n                const newS = columnDefinitionsToState(action.columns, state.columnWidthState, state.columnSizingOptions);\n                return {\n                    ...state,\n                    columns: action.columns,\n                    columnWidthState: adjustColumnWidthsToFitContainer(newS, state.containerWidth)\n                };\n            case 'COLUMN_SIZING_OPTIONS_UPDATED':\n                const newState = columnDefinitionsToState(state.columns, state.columnWidthState, action.columnSizingOptions);\n                return {\n                    ...state,\n                    columnSizingOptions: action.columnSizingOptions,\n                    columnWidthState: adjustColumnWidthsToFitContainer(newState, state.containerWidth)\n                };\n            case 'SET_COLUMN_WIDTH':\n                const { columnId, width } = action;\n                const { containerWidth } = state;\n                const column = getColumnById(state.columnWidthState, columnId);\n                let newColumnWidthState = [\n                    ...state.columnWidthState\n                ];\n                if (!column) {\n                    return state;\n                }\n                // Adjust the column width and measure the new total width\n                newColumnWidthState = setColumnProperty(newColumnWidthState, columnId, 'width', width);\n                // Set this width as idealWidth, because its a deliberate change, not a recalculation because of container\n                newColumnWidthState = setColumnProperty(newColumnWidthState, columnId, 'idealWidth', width);\n                // Adjust the widths to the container size\n                newColumnWidthState = adjustColumnWidthsToFitContainer(newColumnWidthState, containerWidth);\n                return {\n                    ...state,\n                    columnWidthState: newColumnWidthState\n                };\n        }\n    };\nexport function useTableColumnResizeState(columns, containerWidth, params = {}) {\n    const { onColumnResize, columnSizingOptions } = params;\n    const reducer = React.useMemo(()=>createReducer(), []);\n    const [state, dispatch] = React.useReducer(reducer, {\n        columns,\n        containerWidth: 0,\n        columnWidthState: columnDefinitionsToState(columns, undefined, columnSizingOptions),\n        columnSizingOptions\n    });\n    useIsomorphicLayoutEffect(()=>{\n        dispatch({\n            type: 'CONTAINER_WIDTH_UPDATED',\n            containerWidth\n        });\n    }, [\n        containerWidth\n    ]);\n    useIsomorphicLayoutEffect(()=>{\n        dispatch({\n            type: 'COLUMNS_UPDATED',\n            columns\n        });\n    }, [\n        columns\n    ]);\n    useIsomorphicLayoutEffect(()=>{\n        dispatch({\n            type: 'COLUMN_SIZING_OPTIONS_UPDATED',\n            columnSizingOptions\n        });\n    }, [\n        columnSizingOptions\n    ]);\n    const setColumnWidth = useEventCallback((event, data)=>{\n        let { width } = data;\n        const { columnId } = data;\n        const col = getColumnById(state.columnWidthState, columnId);\n        if (!col) {\n            return;\n        }\n        width = Math.max(col.minWidth || 0, width);\n        if (onColumnResize) {\n            onColumnResize(event, {\n                columnId,\n                width\n            });\n        }\n        dispatch({\n            type: 'SET_COLUMN_WIDTH',\n            columnId,\n            width\n        });\n    });\n    return {\n        getColumnById: React.useCallback((colId)=>getColumnById(state.columnWidthState, colId), [\n            state.columnWidthState\n        ]),\n        getColumns: React.useCallback(()=>state.columnWidthState, [\n            state.columnWidthState\n        ]),\n        getColumnWidth: React.useCallback((colId)=>getColumnWidth(state.columnWidthState, colId), [\n            state.columnWidthState\n        ]),\n        setColumnWidth\n    };\n}\n"],"names":["useTableColumnResizeState","createReducer","state","action","type","containerWidth","columnWidthState","adjustColumnWidthsToFitContainer","newS","columnDefinitionsToState","columns","columnSizingOptions","newState","columnId","width","column","getColumnById","newColumnWidthState","setColumnProperty","params","onColumnResize","reducer","React","useMemo","dispatch","useReducer","undefined","useIsomorphicLayoutEffect","setColumnWidth","useEventCallback","event","data","col","Math","max","minWidth","useCallback","colId","getColumns","getColumnWidth"],"mappings":"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"}