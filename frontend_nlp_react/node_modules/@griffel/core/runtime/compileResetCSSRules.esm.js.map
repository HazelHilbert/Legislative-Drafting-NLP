{"version":3,"file":"compileResetCSSRules.esm.js","sources":["../../../../packages/core/src/runtime/compileResetCSSRules.ts"],"sourcesContent":["import { compile, middleware, serialize, stringify } from 'stylis';\n\nimport { globalPlugin } from './stylis/globalPlugin';\nimport { isAtRuleElement } from './stylis/isAtRuleElement';\nimport { prefixerPlugin } from './stylis/prefixerPlugin';\nimport { rulesheetPlugin } from './stylis/rulesheetPlugin';\n\nexport function compileResetCSSRules(cssRules: string): [string[], string[]] {\n  const rules: string[] = [];\n  const atRules: string[] = [];\n\n  serialize(\n    compile(cssRules),\n    middleware([\n      globalPlugin,\n      prefixerPlugin,\n      stringify,\n\n      // ðŸ’¡ we are using `.insertRule()` API for DOM operations, which does not support\n      // insertion of multiple CSS rules in a single call. `rulesheet` plugin extracts\n      // individual rules to be used with this API\n      rulesheetPlugin((element, rule) => {\n        if (isAtRuleElement(element)) {\n          atRules.push(rule);\n          return;\n        }\n\n        rules.push(rule);\n      }),\n    ]),\n  );\n\n  return [rules, atRules];\n}\n"],"names":["compileResetCSSRules","cssRules","rules","atRules","serialize","compile","middleware","globalPlugin","prefixerPlugin","stringify","rulesheetPlugin","element","rule","isAtRuleElement","push"],"mappings":";;;;;;SAOgBA,oBAAoBA,CAACC,QAAgB;EACnD,MAAMC,KAAK,GAAa,EAAE;EAC1B,MAAMC,OAAO,GAAa,EAAE;EAE5BC,SAAS,CACPC,OAAO,CAACJ,QAAQ,CAAC,EACjBK,UAAU,CAAC,CACTC,YAAY,EACZC,cAAc,EACdC,SAAS;;;;EAKTC,eAAe,CAAC,CAACC,OAAO,EAAEC,IAAI;IAC5B,IAAIC,eAAe,CAACF,OAAO,CAAC,EAAE;MAC5BR,OAAO,CAACW,IAAI,CAACF,IAAI,CAAC;MAClB;;IAGFV,KAAK,CAACY,IAAI,CAACF,IAAI,CAAC;GACjB,CAAC,CACH,CAAC,CACH;EAED,OAAO,CAACV,KAAK,EAAEC,OAAO,CAAC;AACzB;;;;"}