{"version":3,"file":"hashPropertyKey.cjs.js","sources":["../../../../../packages/core/src/runtime/utils/hashPropertyKey.ts"],"sourcesContent":["import hash from '@emotion/hash';\nimport type { PropertyHash } from '../../types';\n\nexport function hashPropertyKey(\n  selector: string,\n  container: string,\n  media: string,\n  support: string,\n  property: string,\n): PropertyHash {\n  // uniq key based on property & selector, used for merging later\n  const computedKey = selector + container + media + support + property;\n\n  // \"key\" can be really long as it includes selectors, we use hashes to reduce sizes of keys\n  // \".foo :hover\" => \"abcd\"\n  const hashedKey = hash(computedKey);\n\n  // As these hashes are used as object keys in build output we should avoid having numbers as a first character to\n  // avoid having quotes:\n  // {\n  //   \"1abc\": {}, // we don't want this\n  //   Aabc: {}, // no quotes\n  // }\n  const firstCharCode = hashedKey.charCodeAt(0);\n  const startsWithNumber = firstCharCode >= 48 && firstCharCode <= 57;\n\n  if (startsWithNumber) {\n    return String.fromCharCode(firstCharCode + 17) + hashedKey.slice(1);\n  }\n\n  return hashedKey;\n}\n"],"names":["hashPropertyKey","selector","container","media","support","property","computedKey","hashedKey","hash","firstCharCode","charCodeAt","startsWithNumber","String","fromCharCode","slice"],"mappings":";;;;;;;;;;SAGgBA,eAAeA,CAC7BC,QAAgB,EAChBC,SAAiB,EACjBC,KAAa,EACbC,OAAe,EACfC,QAAgB;;EAGhB,MAAMC,WAAW,GAAGL,QAAQ,GAAGC,SAAS,GAAGC,KAAK,GAAGC,OAAO,GAAGC,QAAQ;;;EAIrE,MAAME,SAAS,GAAGC,8BAAI,CAACF,WAAW,CAAC;;;;;;;EAQnC,MAAMG,aAAa,GAAGF,SAAS,CAACG,UAAU,CAAC,CAAC,CAAC;EAC7C,MAAMC,gBAAgB,GAAGF,aAAa,IAAI,EAAE,IAAIA,aAAa,IAAI,EAAE;EAEnE,IAAIE,gBAAgB,EAAE;IACpB,OAAOC,MAAM,CAACC,YAAY,CAACJ,aAAa,GAAG,EAAE,CAAC,GAAGF,SAAS,CAACO,KAAK,CAAC,CAAC,CAAC;;EAGrE,OAAOP,SAAS;AAClB;;;;"}