{"version":3,"file":"compileCSSRules.esm.js","sources":["../../../../packages/core/src/runtime/compileCSSRules.ts"],"sourcesContent":["import { compile, middleware, rulesheet, serialize, stringify } from 'stylis';\n\nimport { globalPlugin } from './stylis/globalPlugin';\nimport { prefixerPlugin } from './stylis/prefixerPlugin';\nimport { sortClassesInAtRulesPlugin } from './stylis/sortClassesInAtRulesPlugin';\n\n// eslint-disable-next-line @typescript-eslint/no-empty-function\nfunction noop() {}\n\nexport function compileCSSRules(cssRules: string, sortClassesInAtRules: boolean): string[] {\n  const rules: string[] = [];\n\n  serialize(\n    compile(cssRules),\n    middleware([\n      globalPlugin,\n      sortClassesInAtRules ? sortClassesInAtRulesPlugin : noop,\n      prefixerPlugin,\n      stringify,\n\n      // ðŸ’¡ we are using `.insertRule()` API for DOM operations, which does not support\n      // insertion of multiple CSS rules in a single call. `rulesheet` plugin extracts\n      // individual rules to be used with this API\n      rulesheet(rule => rules.push(rule)),\n    ]),\n  );\n\n  return rules;\n}\n"],"names":["noop","compileCSSRules","cssRules","sortClassesInAtRules","rules","serialize","compile","middleware","globalPlugin","sortClassesInAtRulesPlugin","prefixerPlugin","stringify","rulesheet","rule","push"],"mappings":";;;;;AAMA;AACA,SAASA,IAAIA;SAEGC,eAAeA,CAACC,QAAgB,EAAEC,oBAA6B;EAC7E,MAAMC,KAAK,GAAa,EAAE;EAE1BC,SAAS,CACPC,OAAO,CAACJ,QAAQ,CAAC,EACjBK,UAAU,CAAC,CACTC,YAAY,EACZL,oBAAoB,GAAGM,0BAA0B,GAAGT,IAAI,EACxDU,cAAc,EACdC,SAAS;;;;EAKTC,SAAS,CAACC,IAAI,IAAIT,KAAK,CAACU,IAAI,CAACD,IAAI,CAAC,CAAC,CACpC,CAAC,CACH;EAED,OAAOT,KAAK;AACd;;;;"}