{"version":3,"file":"__styles.cjs.js","sources":["../../../packages/core/src/__styles.ts"],"sourcesContent":["import { debugData, isDevToolsEnabled, getSourceURLfromError } from './devtools';\nimport { insertionFactory } from './insertionFactory';\nimport { reduceToClassNameForSlots } from './runtime/reduceToClassNameForSlots';\nimport type { CSSClassesMapBySlot, CSSRulesByBucket, GriffelInsertionFactory } from './types';\nimport type { MakeStylesOptions } from './makeStyles';\n\n/**\n * A version of makeStyles() that accepts build output as an input and skips all runtime transforms.\n *\n * @internal\n */\nexport function __styles<Slots extends string>(\n  classesMapBySlot: CSSClassesMapBySlot<Slots>,\n  cssRules: CSSRulesByBucket,\n  factory: GriffelInsertionFactory = insertionFactory,\n) {\n  const insertStyles = factory();\n\n  let ltrClassNamesForSlots: Record<Slots, string> | null = null;\n  let rtlClassNamesForSlots: Record<Slots, string> | null = null;\n\n  let sourceURL: string | undefined;\n  if (process.env.NODE_ENV !== 'production' && isDevToolsEnabled) {\n    sourceURL = getSourceURLfromError();\n  }\n\n  function computeClasses(options: Pick<MakeStylesOptions, 'dir' | 'renderer'>): Record<Slots, string> {\n    const { dir, renderer } = options;\n    const isLTR = dir === 'ltr';\n\n    if (isLTR) {\n      if (ltrClassNamesForSlots === null) {\n        ltrClassNamesForSlots = reduceToClassNameForSlots(classesMapBySlot, dir);\n      }\n    } else {\n      if (rtlClassNamesForSlots === null) {\n        rtlClassNamesForSlots = reduceToClassNameForSlots(classesMapBySlot, dir);\n      }\n    }\n\n    insertStyles(renderer, cssRules);\n\n    const classNamesForSlots = isLTR\n      ? (ltrClassNamesForSlots as Record<Slots, string>)\n      : (rtlClassNamesForSlots as Record<Slots, string>);\n\n    if (process.env.NODE_ENV !== 'production' && isDevToolsEnabled) {\n      debugData.addSequenceDetails(classNamesForSlots!, sourceURL);\n    }\n\n    return classNamesForSlots;\n  }\n\n  return computeClasses;\n}\n"],"names":["__styles","classesMapBySlot","cssRules","factory","insertionFactory","insertStyles","ltrClassNamesForSlots","rtlClassNamesForSlots","sourceURL","process","env","NODE_ENV","isDevToolsEnabled","getSourceURLfromError","computeClasses","options","dir","renderer","isLTR","reduceToClassNameForSlots","classNamesForSlots","debugData","addSequenceDetails"],"mappings":";;;;;;;;;;;AAMA;;;;;SAKgBA,QAAQA,CACtBC,gBAA4C,EAC5CC,QAA0B,EAC1BC,UAAmCC,iCAAgB;EAEnD,MAAMC,YAAY,GAAGF,OAAO,EAAE;EAE9B,IAAIG,qBAAqB,GAAiC,IAAI;EAC9D,IAAIC,qBAAqB,GAAiC,IAAI;EAE9D,IAAIC,SAA6B;EACjC,IAAIC,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,IAAIC,mCAAiB,EAAE;IAC9DJ,SAAS,GAAGK,2CAAqB,EAAE;;EAGrC,SAASC,cAAcA,CAACC,OAAoD;IAC1E,MAAM;MAAEC,GAAG;MAAEC;KAAU,GAAGF,OAAO;IACjC,MAAMG,KAAK,GAAGF,GAAG,KAAK,KAAK;IAE3B,IAAIE,KAAK,EAAE;MACT,IAAIZ,qBAAqB,KAAK,IAAI,EAAE;QAClCA,qBAAqB,GAAGa,mDAAyB,CAAClB,gBAAgB,EAAEe,GAAG,CAAC;;KAE3E,MAAM;MACL,IAAIT,qBAAqB,KAAK,IAAI,EAAE;QAClCA,qBAAqB,GAAGY,mDAAyB,CAAClB,gBAAgB,EAAEe,GAAG,CAAC;;;IAI5EX,YAAY,CAACY,QAAQ,EAAEf,QAAQ,CAAC;IAEhC,MAAMkB,kBAAkB,GAAGF,KAAK,GAC3BZ,qBAA+C,GAC/CC,qBAA+C;IAEpD,IAAIE,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,IAAIC,mCAAiB,EAAE;MAC9DS,eAAS,CAACC,kBAAkB,CAACF,kBAAmB,EAAEZ,SAAS,CAAC;;IAG9D,OAAOY,kBAAkB;;EAG3B,OAAON,cAAc;AACvB;;;;"}