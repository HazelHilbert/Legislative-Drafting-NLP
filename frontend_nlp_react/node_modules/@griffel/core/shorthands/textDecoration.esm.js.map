{"version":3,"file":"textDecoration.esm.js","sources":["../../../../packages/core/src/shorthands/textDecoration.ts"],"sourcesContent":["import type { GriffelStyle } from '@griffel/style-types';\nimport type {\n  TextDecorationColorInput,\n  TextDecorationLineInput,\n  TextDecorationStyleInput,\n  TextDecorationThicknessInput,\n} from './types';\n\ntype TextDecorationStyle = Pick<\n  GriffelStyle,\n  'textDecorationStyle' | 'textDecorationLine' | 'textDecorationColor' | 'textDecorationThickness'\n>;\n\nexport function textDecoration(style: TextDecorationStyleInput): TextDecorationStyle;\nexport function textDecoration(line: TextDecorationLineInput): TextDecorationStyle;\n\nexport function textDecoration(line: TextDecorationLineInput, style: TextDecorationStyleInput): TextDecorationStyle;\nexport function textDecoration(\n  line: TextDecorationLineInput,\n  style: TextDecorationStyleInput,\n  color: TextDecorationColorInput,\n): TextDecorationStyle;\nexport function textDecoration(\n  line: TextDecorationLineInput,\n  style: TextDecorationStyleInput,\n  color: TextDecorationColorInput,\n  thickness: TextDecorationThicknessInput,\n): TextDecorationStyle;\n\n/**\n * A function that implements expansion for \"textDecoration\" to all sides of an element, it's simplified - check usage examples.\n *\n * @example\n *  textDecoration('none')\n *  textDecoration('dotted')\n *  textDecoration('underline', 'dotted')\n *  textDecoration('underline', 'dotted', 'red')\n *  textDecoration('underline', 'dotted', 'red', '2px')\n *\n * See https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration\n */\nexport function textDecoration(\n  value: TextDecorationLineInput | TextDecorationStyleInput,\n  ...values: [TextDecorationStyleInput?, TextDecorationColorInput?, TextDecorationThicknessInput?]\n): TextDecorationStyle {\n  if (values.length === 0) {\n    return isTextDecorationStyleInput(value) ? { textDecorationStyle: value } : { textDecorationLine: value };\n  }\n\n  const [textDecorationStyle, textDecorationColor, textDecorationThickness] = values;\n\n  return {\n    textDecorationLine: value,\n    ...(textDecorationStyle && { textDecorationStyle }),\n    ...(textDecorationColor && { textDecorationColor }),\n    ...(textDecorationThickness && { textDecorationThickness }),\n  };\n}\n\nconst textDecorationStyleInputs: TextDecorationStyleInput[] = ['dashed', 'dotted', 'double', 'solid', 'wavy'];\n\nfunction isTextDecorationStyleInput(\n  value: TextDecorationLineInput | TextDecorationStyleInput,\n): value is TextDecorationStyleInput {\n  return textDecorationStyleInputs.includes(value as TextDecorationStyleInput);\n}\n"],"names":["textDecoration","value","values","length","isTextDecorationStyleInput","textDecorationStyle","textDecorationLine","textDecorationColor","textDecorationThickness","textDecorationStyleInputs","includes"],"mappings":"AA6BA;;;;;;;;;;;;SAYgBA,cAAcA,CAC5BC,KAAyD,EACzD,GAAGC,MAA6F;EAEhG,IAAIA,MAAM,CAACC,MAAM,KAAK,CAAC,EAAE;IACvB,OAAOC,0BAA0B,CAACH,KAAK,CAAC,GAAG;MAAEI,mBAAmB,EAAEJ;KAAO,GAAG;MAAEK,kBAAkB,EAAEL;KAAO;;EAG3G,MAAM,CAACI,mBAAmB,EAAEE,mBAAmB,EAAEC,uBAAuB,CAAC,GAAGN,MAAM;EAElF,OAAO;IACLI,kBAAkB,EAAEL,KAAK;IACzB,IAAII,mBAAmB,IAAI;MAAEA;KAAqB,CAAC;IACnD,IAAIE,mBAAmB,IAAI;MAAEA;KAAqB,CAAC;IACnD,IAAIC,uBAAuB,IAAI;MAAEA;KAAyB;GAC3D;AACH;AAEA,MAAMC,yBAAyB,GAA+B,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,OAAO,EAAE,MAAM,CAAC;AAE7G,SAASL,0BAA0BA,CACjCH,KAAyD;EAEzD,OAAOQ,yBAAyB,CAACC,QAAQ,CAACT,KAAiC,CAAC;AAC9E;;;;"}