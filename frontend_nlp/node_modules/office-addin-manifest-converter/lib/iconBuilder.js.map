{"version":3,"file":"iconBuilder.js","sourceRoot":"","sources":["../src/iconBuilder.ts"],"names":[],"mappings":"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","sourcesContent":["const fs = require('fs');\r\nconst http = require('http');\r\nconst https = require('https');\r\n\r\nimport * as util from \"util\";\r\nimport { Constants } from './constants';\r\nimport { Utilities } from './utilities';\r\n\r\nexport class IconBuilder {\r\n\r\n    private _icons: {};\r\n\r\n    constructor() {\r\n        this._icons = {};\r\n    }\r\n\r\n    addIconAndGetReference(url: string, getShortNameAndStore: boolean, forRootIcon: boolean = false): string {\r\n\r\n        Utilities.assert(getShortNameAndStore || !forRootIcon, \"Root icon must have getShortNameAndStore to be true\");\r\n\r\n        // We either return the icon url or a short name which will be icon reference to an image in the package\r\n        if (!getShortNameAndStore) {\r\n            return url;\r\n        }\r\n        else {\r\n            // if not download images, we need to preserve the root icon image file's folder path\r\n            let imageFile: string = decodeURIComponent(IconBuilder._getFolderPath(url));\r\n\r\n            if (!forRootIcon || Utilities._downloadImages) {\r\n                imageFile = decodeURIComponent(this._getLeafName(url).trim());\r\n                imageFile = imageFile.replace(Constants.InvalidCharacterInFileName, '-');  // replace characters invalid in file name with '-'\r\n                imageFile = this._getUniqueIconName(imageFile);\r\n            }\r\n\r\n            this._storeIcon(imageFile, url);\r\n            return imageFile;\r\n        }\r\n    }\r\n\r\n    private _storeIcon(iconName: string, url: string) {\r\n\r\n        this._icons[iconName] = url;\r\n    }\r\n\r\n    private static _getFolderPath(url: string): string {\r\n\r\n        try {\r\n            let realUrl: URL = new URL(url);\r\n            let path: string = realUrl.pathname;\r\n\r\n            if (!!path && path.charAt(0) == '/') {\r\n                path = path.substring(1);\r\n            }\r\n\r\n            if (!path){\r\n                path = realUrl.hostname;\r\n            }\r\n\r\n            return path;\r\n        }\r\n        catch (err) {\r\n            return url;\r\n        }\r\n    }\r\n\r\n    private _getLeafName(url: string): string {\r\n\r\n        let segments: string[] = url.split(\"/\");\r\n        Utilities.assert(segments.length > 2, \"valid url with segments\");\r\n\r\n        // If this is a url with a query string, then we strip off the query string and only keep the name\r\n        return segments[segments.length - 1].split(\"?\")[0];\r\n    }\r\n\r\n    private _getUniqueIconName(iconName: string): string {\r\n\r\n        // If this icon name isn't already taken then we just return it since it is unique\r\n        if (Utilities.isNullOrUndefined(this._icons[iconName])) {\r\n\r\n            return iconName;\r\n\r\n        } else {\r\n\r\n            for (var idx = 2; idx < 100; idx++) {\r\n                let suffix: string = \"\" + idx;\r\n                    \r\n                if (idx < 10) {\r\n                    suffix = \"0\" + idx;\r\n                }\r\n\r\n                suffix = \"_\" + suffix;\r\n\r\n                if (Utilities.isNullOrUndefined(this._icons[iconName + suffix])) {\r\n                    let fixedIconName: string = \"\";\r\n                    let nameSegments: string[] = iconName.split(\".\");\r\n                    if (nameSegments.length > 1) {\r\n                        // We will assume that the last segment is the file type so we will put the number before that like\r\n                        // \"foo\" + \"_4\" + \".\" + \"png\"  for foo_4.png etc.\r\n                        fixedIconName = iconName.substring(0, iconName.length - nameSegments[nameSegments.length - 1].length - 1) +\r\n                            suffix + \".\" + nameSegments[nameSegments.length - 1];\r\n                    }\r\n\r\n                    // If we found a unique name then return it otherwise continue to try in the loop\r\n                    if (Utilities.isNullOrUndefined(this._icons[fixedIconName])) {\r\n                        return fixedIconName;\r\n                    }\r\n                }\r\n            }\r\n\r\n            Utilities.logError(\"unable to find a non-conflicting icon name: \" + iconName);\r\n            Utilities.assert(false, \"unable to find a non-conflicting icon name: \" + iconName);\r\n            return null;\r\n        }\r\n    }\r\n\r\n    downloadAndStoreIcons(folderPath: string): Promise<void> {\r\n\r\n        return new Promise<void>(async (resolve, reject) => {\r\n            let promises = [];\r\n            for (var iconName in this._icons) {\r\n                if (Utilities._downloadImages) {\r\n                    promises.push(this._downloadAndStoreIcon(iconName, folderPath));\r\n                }\r\n                else {\r\n                    Utilities.log(util.format(\"File download skipped for file: %s    url: %s\", iconName, this._icons[iconName]));\r\n                }\r\n            }\r\n            \r\n            await Utilities.promiseAll(promises, resolve, reject, \"downloadAndStoreIcons: Failed\");\r\n        });\r\n    }\r\n\r\n    _downloadAndStoreIcon(iconName: string, folderPath: string): Promise<void> {\r\n\r\n        return new Promise<void>((resolve, reject) => {\r\n            let iconUrl: string = this._icons[iconName];\r\n            let filePath: string = folderPath + \"/\" + iconName;\r\n            try {\r\n                const url = new URL(iconUrl);\r\n                let protocol = (url.protocol == \"https:\") ? https : http;\r\n                protocol.get(iconUrl, (res) => {\r\n                    if (!res.headers['content-type'] || res.headers['content-type'].match(/image/)) {\r\n                        const file = fs.createWriteStream(filePath);\r\n                        res.pipe(file);\r\n\r\n                        file.on('finish', () => {\r\n                            file.close();\r\n                            Utilities.log(\"File downloaded: \", filePath + \", url: \" + iconUrl);\r\n                        });\r\n                        resolve();\r\n                    }\r\n                    else {\r\n                        this._createDefaultIconFile(filePath, \"Failed to get icon file \" + iconUrl + \" as image\", resolve, reject);\r\n                    }\r\n                }).on(\"error\", (err) => {\r\n                    this._createDefaultIconFile(filePath, \"Failed to get icon file \" + iconUrl + \". \" + err, resolve, reject);\r\n                });\r\n            } catch (ex) {\r\n                this._createDefaultIconFile(filePath, \"Failed to get icon file \" + iconUrl + \". Exception: \" +  ex, resolve, reject);\r\n            }\r\n        });\r\n    }\r\n\r\n    _createDefaultIconFile(filePath: string, message: string, resolve, reject): void {\r\n\r\n        Utilities.logError(message + \". Default icon will be used.\");\r\n        let defaultIconEncoded_32x32 = \"iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsIAAA7CARUoSoAAAAQ9SURBVFhHxVdfaFtVHP7uTdLaP2tdK7apBQNLU7SadtC1diyzuFXmgw8qY/qmDwrTPe5JQRF8EcSXISgTN6E+bEPFbaLYdesEpX90dEy7VZydoA2USWM7upE09/j7/e65aZrcJPcGYV/zu/fc73fO+b5z7jknjaEIuIsw9f2uoeoZuHxlGqtnnoKiv6anv0XvowM64w9VzcA6Rer0Xuza14vEvj6kvtpLNqpDVQYujL6Jx3d3Qd2m8a9ZVI7i3OhbOusPvg3cug00Jd8Hau8FLMsmqdyUfE9yfuHbwMRnL2JwdxwqTS/CMIRTGQuDu+KUe0me/cCXgeTiCmLpz2nk99CTLb6BOsTunMLS0qp+9gZfBqZGn0NsRx9UVk+9A9pIKrOO2EAffjz+jCa9wbOBa7/OYeiBWSATtAla9ryBZRPzhV8H5YY6ZjE/N2fX8QDPBq6e2Y+2WA+Uxar0IT0zHILZHrS3IHOUa+vqwdXT+6WNF3gyMHPxLJ58eA1Ib7x3sz0Eo+scjNg4zI5azRIywEj3LVz64awmysOTgdT3r6ChPUIzLWN1B3vjtUDroyEcwT/jL9t8BVQ0MPHFEezZ2UIj0+Ly4gsWIUN4ClkLCnuGtuLil0d0sjTKGqDZRGDhDZiN90vfOZHCLSg83Z1zgcpm430wr78ufZRDWQNjRw8jMdgtB01OXIuUh0UHlUKiP4rxY4c1546SBpZXgPDah0Bwi29xmQ2OUBPaUh9guczZVNLA1LED2P5YL9S6Hn2+OBeZK4IjThXow223D8Qx/ckBO+0CVwMLfy4huuUb6o+2F3/hFI7cTdwgLk88B1WDbfVf4wb16QZXA5dOPIvoI3Tk0vHqKl6kX0Kc1wLtiGhPHLOn3I/oIgNXJmcw/OB12gKUchUvUtfiFAXisLSh9QASHb/hl6kZO5WHIgPJ8RfQGonZR24+HHGvC9ERJ3Bf3Ofi2PM2kYdNBia/O4FEHxUyBSKu4iTiis3iNqgtHQiJeBaTYyc1ZyNnIEux+vMh1LV2khY1cOAmbliwFjNQ809IWMm0TpQQp+Au6lo6sTp9ULQc5AxMnHwXI4NhWTQ5uImzSF4VG1yntLiQ3Iz6HtnRJloOxMAdqtP8xztAfauQgnLitNrNcA2M7vMS/LVcSTyXq29B8+9viyZDDJw/+ir6Ew/ZRy6jgngRijipSFEgThxr9O+MkeZrwpg3V7KIZD+lSg1CVBTXNL93NT8MdW04bw0wSotLSKoRkfTHuLliwbhw/JAa7v6JnNVQkitQVBC3QYcMTztBrnKRivaDqzgROm0E05hYGIIZqE3RPBgwAiaRFKGAfQ/ynXm+U4R0XoJ4MwCTOI7NOapr6jL36fTL/ThlCpgKgdAyjOTfKXX5o23o3PovGdT/cArYsS5uQileQ49wA7pyXhuDftz9tdyM3oM3qv9x+v8A+A89FNxU0V8XUQAAAABJRU5ErkJggg==\";\r\n        let defaultIconDecoded = Buffer.from(defaultIconEncoded_32x32, 'base64');\r\n        try {\r\n            fs.writeFileSync(filePath, defaultIconDecoded, \"binary\");\r\n            resolve();\r\n        }\r\n        catch (err) {\r\n            Utilities.logError(\"Failed to create default icon file \" + filePath + \". Error is: \" +  err);\r\n            reject();\r\n        }\r\n    }\r\n}"]}