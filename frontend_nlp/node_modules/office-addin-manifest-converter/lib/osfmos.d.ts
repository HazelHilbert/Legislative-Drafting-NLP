/// <reference path="../../../shared_src/jscript/tsdeclarations/addinprovider.d.ts" />
/// <reference path="../../../shared_src/jscript/tsdeclarations/osf.d.ts" />
/// <reference path="../../../shared_src/jscript/tsdeclarations/msajax.d.ts" />
/// <reference path="../../../shared_src/jscript/tsdeclarations/addinCommands.d.ts" />
declare namespace OSF {
    enum XmlConstants {
        MaxXmlSize = 1048576,
        MaxElementDepth = 64
    }
    class Xpath3Provider {
        _defaultNamespace: any;
        _evaluator: any;
        _namespaceMapping: any;
        _resolver: any;
        _xmldoc: any;
        constructor(xml: any, xmlNamespaces: any);
        lookupNamespaceURI(prefix: any): any;
        addNamespaceMapping(namespacePrefix: any, namespaceUri: any): boolean;
        getNamespaceMapping(): any;
        selectSingleNode(name: any, contextNode: any): any;
        selectNodes(name: any, contextNode: any): any[];
        selectNodesByXPath(xpath: any, contextNode: any): any[];
        getDocumentElement(): any;
    }
    class IEXpathProvider {
        _xmldoc: any;
        constructor(xml: any, xmlNamespaces: any);
        selectSingleNode(name: any, contextNode: any): any;
        addNamespaceMapping(namespacePrefix: any, namespaceUri: any): boolean;
        getNamespaceMapping(): any;
        selectNodes(name: any, contextNode: any): any;
        selectNodesByXPath(xpath: any, contextNode: any): any;
        getDocumentElement(): any;
        getActiveXObject(): any;
    }
    class DomParserProvider {
        _defaultNamespace: any;
        _namespaceMapping: any;
        _xmldoc: any;
        constructor(xml: any, xmlNamespaces: any);
        addNamespaceMapping(namespacePrefix: any, namespaceUri: any): boolean;
        getNamespaceMapping(): any;
        selectSingleNode(name: any, contextNode: any): any;
        selectNodes(name: any, contextNode: any): any[];
        selectNodesByXPath(xpath: any, contextNode: any): any;
        _selectNodes(name: any, contextNode: any): any[];
        _removeNodePrefix(nodeName: any): any;
        getDocumentElement(): any;
    }
    class XmlProcessor {
        _provider: any;
        constructor(xml: any, xmlNamespaces: any);
        addNamespaceMapping(namespacePrefix: any, namespaceUri: any): any;
        getNamespaceMapping(): any;
        selectSingleNode(name: any, contextNode: any): any;
        selectNodes(name: any, contextNode: any): any;
        selectNodesByXPath(xpath: any, contextNode: any): any;
        getDocumentElement(): any;
        getNodeValue(node: any): any;
        getNodeText(node: any): any;
        setNodeText(node: any, text: any): boolean;
        getNodeXml(node: any): any;
        setNodeXml(node: any, xml: any): any;
        getNodeNamespaceURI(node: any): any;
        getNodePrefix(node: any): any;
        getNodeBaseName(node: any): any;
        getNodeType(node: any): any;
        appendChild(node: any, childXml: any): any;
        _getAttributeLocalName(attribute: any): any;
        readAttributes(node: any, attributesToRead: any, objectToFill: any): void;
        isValidXml(): boolean;
    }
}
declare namespace OSF {
    enum AppName {
        Unsupported = 0,
        Excel = 1,
        Word = 2,
        PowerPoint = 4,
        Outlook = 8,
        ExcelWebApp = 16,
        WordWebApp = 32,
        OutlookWebApp = 64,
        Project = 128,
        AccessWebApp = 256,
        PowerpointWebApp = 512,
        ExcelIOS = 1024,
        Sway = 2048,
        WordIOS = 4096,
        PowerPointIOS = 8192,
        Access = 16384,
        Lync = 32768,
        OutlookIOS = 65536,
        OneNoteWebApp = 131072,
        OneNote = 262144,
        ExcelWinRT = 524288,
        WordWinRT = 1048576,
        PowerpointWinRT = 2097152,
        OutlookAndroid = 4194304,
        OneNoteWinRT = 8388608,
        ExcelAndroid = 8388609,
        VisioWebApp = 8388610,
        OneNoteIOS = 8388611,
        WordAndroid = 8388613,
        PowerpointAndroid = 8388614,
        Visio = 8388615,
        OneNoteAndroid = 4194305
    }
}
declare var DEBUG: boolean;
declare namespace OSF {
    enum OsfNavigationMode {
        DefaultMode = 0,
        CategoryMode = 1,
        TrustPageMode = 2,
        QueryResultMode = 3
    }
    let ManifestNamespaces: {
        "1.0": string;
        "1.1": string;
    };
    let ManifestSchemaVersion: {
        "1.0": string;
        "1.1": string;
    };
    class RequirementsChecker {
        _filteringEnabled: any;
        _supportedCapabilities: any;
        _supportedControlTargets: any;
        _supportedHosts: any;
        _supportedMethods: any;
        _supportedOmexAppVersions: any;
        _supportedSets: any;
        defaultMinMaxVersion: string;
        constructor(supportedCapabilities: any, supportedHosts: any, supportedRequirements: any, supportedControlTargets: any, supportedOmexAppVersions: any);
        isManifestSupported(manifest: any): boolean;
        isEntitlementFromOmexSupported(entitlement: OfficeExt.AppDetail): boolean;
        isEntitlementFromCorpCatalogSupported(entitlement: any): boolean;
        setCapabilities(capabilities: any): void;
        setHosts(hosts: any): void;
        setRequirements(requirements: any): void;
        setSupportedControlTargets(controlTargets: any): void;
        setSupportedOmexAppVersions(appVersions: any): void;
        setFilteringEnabled(filteringEnabled: any): void;
        isFilteringEnabled(): any;
        _checkManifest1_0(manifest: any): boolean;
        _checkCapabilities(askedCapabilities: any): boolean;
        _checkManifest1_1(manifest: any): boolean;
        _checkHosts(askedHosts: any): boolean;
        _checkSets(askedSets: any): boolean;
        _checkMethods(askedMethods: any): boolean;
        _checkControlTarget(askedControlTarget: any): any;
        _checkOmexAppVersions(askedAppVersions: any): boolean;
        _scalarArrayToObject(array: any): {};
        _arrayToSetsObject(array: any): {};
        _getSupportedSet(): {};
        _getSupportedSetAsCapabilities(): {
            Name: any;
            Version: any;
        }[];
        _compareVersionStrings(leftVersion: any, rightVersion: any): number;
    }
}
declare var Diag: any;
declare module Telemetry {
    enum ULSTraceLevel {
        unexpected = 10,
        warning = 15,
        info = 50,
        verbose = 100,
        verboseEx = 200
    }
    enum ULSCat {
        msoulscat_Osf_Latency = 1401,
        msoulscat_Osf_Notification = 1402,
        msoulscat_Osf_Runtime = 1403,
        msoulscat_Osf_AppManagementMenu = 1404,
        msoulscat_Osf_InsertionDialogSession = 1405,
        msoulscat_Osf_UploadFileDevCatelog = 1406,
        msoulscat_Osf_UploadFileDevCatalogUsage = 1411
    }
    class LatencyStopwatch {
        private timeValue;
        private finishedMeasurement;
        constructor();
        Start(): void;
        Stop(): void;
        get Finished(): boolean;
        get ElapsedTime(): number;
    }
    class Context {
        LoadTime: OSFLog.AppLoadTimeUsageData;
        Timers: {
            [name: string]: LatencyStopwatch;
        };
        AppStatus: string;
        ActivationRuntimeType: number;
    }
    class Logger {
        private static s_externalLogger;
        static SetExternalLogger(extLogger: any): void;
        static SendULSTraceTag(category: number, level: number, data: string, tagId: number): void;
    }
    class NotificationLogger implements OSFLog.IUsageLogger {
        private static instance;
        private static category;
        private static level;
        constructor();
        static Instance(): NotificationLogger;
        LogData(data: OSFLog.IUsageData): void;
    }
    class AppManagementMenuLogger implements OSFLog.IUsageLogger {
        private static instance;
        private static category;
        private static level;
        constructor();
        static Instance(): NotificationLogger;
        LogData(data: OSFLog.IUsageData): void;
    }
    class UploadFileDevCatelogLogger implements OSFLog.IUsageLogger {
        private static instance;
        private static category;
        private static level;
        constructor();
        static Instance(): UploadFileDevCatelogLogger;
        LogData(data: OSFLog.IUsageData): void;
    }
    class UploadFileDevCatalogUsageLogger implements OSFLog.IUsageLogger {
        private static instance;
        private static category;
        private static level;
        constructor();
        static Instance(): UploadFileDevCatalogUsageLogger;
        LogData(data: OSFLog.IUsageData): void;
    }
    class LatencyLogger implements OSFLog.IUsageLogger {
        private static instance;
        private static category;
        private static level;
        constructor();
        static Instance(): LatencyLogger;
        LogData(data: OSFLog.IUsageData): void;
    }
    class InsertionDialogSessionLogger implements OSFLog.IUsageLogger {
        private static instance;
        private static category;
        private static level;
        constructor();
        static Instance(): InsertionDialogSessionLogger;
        LogData(data: OSFLog.IUsageData): void;
    }
    class AppNotificationHelper {
        static LogNotification(correlationId: string, errorResult: number, notificationClickInfo: number): void;
    }
    class AppManagementMenuHelper {
        static LogAppManagementMenuAction(assetId: string, operationMetadata: number, untrustedCount: number, isDialogClosed: boolean, isAnonymous: boolean, hrStatus: number): void;
    }
    class UploadFileDevCatelogHelper {
        static LogUploadFileDevCatelogAction(correlationId: string, operationMetadata: number, untrustedCount: number, isDialogClosed: boolean, isAnonymous: boolean, hrStatus: number): void;
    }
    class UploadFileDevCatalogUsageHelper {
        static LogUploadFileDevCatalogUsageAction(correlationId: string, storeType: string, id: string, appVersion: string, appTargetType: number, isAppCommand: string, appSizeWidth: number, appSizeHeight: number): void;
    }
    class AppLoadTimeHelper {
        private static activatingNumber;
        private static GenerateActivationMessage;
        static ActivationStart(context: Context, appInfo: number, assetId: number, correlationId: string, instanceId: string, runtimeType: number): void;
        static ActivationEnd(context: Context): void;
        static PageStart(context: Context): void;
        static PageLoaded(context: Context): void;
        static ServerCallStart(context: Context): void;
        static ServerCallEnd(context: Context): void;
        static AuthenticationStart(context: Context): void;
        static AuthenticationEnd(context: Context): void;
        static EntitlementCheckStart(context: Context): void;
        static EntitlementCheckEnd(context: Context): void;
        static KilledAppsCheckStart(context: Context): void;
        static KilledAppsCheckEnd(context: Context): void;
        static AppStateCheckStart(context: Context): void;
        static AppStateCheckEnd(context: Context): void;
        static ManifestRequestStart(context: Context): void;
        static ManifestRequestEnd(context: Context): void;
        static OfficeJSStartToLoad(context: Context): void;
        static OfficeJSLoaded(context: Context): void;
        static SetAnonymousFlag(context: Context, anonymousFlag: boolean): void;
        static SetRetryCount(context: Context, retryCount: number): void;
        static SetManifestTrustCachedFlag(context: Context, manifestTrustCachedFlag: boolean): void;
        static SetManifestDataCachedFlag(context: Context, manifestDataCachedFlag: boolean): void;
        static SetOmexHasEntitlementFlag(context: Context, omexHasEntitlementFlag: boolean): void;
        static SetManifestDataInvalidFlag(context: Context, manifestDataInvalidFlag: boolean): void;
        static SetAppStateDataCachedFlag(context: Context, appStateDataCachedFlag: boolean): void;
        static SetAppStateDataInvalidFlag(context: Context, appStateDataInvalidFlag: boolean): void;
        static SetActivationRuntimeType(context: Context, activationRuntimeType: number): void;
        static SetErrorResult(context: Context, result: number): void;
        static SetBit(context: Context, value: number, offset: number, length?: number): void;
        static StartStopwatch(context: Context, name: string): void;
        static StopStopwatch(context: Context, name: string): void;
        private static ConvertFlagToBit;
        private static SetActivationInfoField;
        private static SetBitField;
        private static UpdateActivatingNumber;
        private static ActivateEndInternal;
    }
    class RuntimeTelemetryHelper {
        private static category;
        static LogProxyFailure(appCorrelationId: string, methodName: string, errorInfo: {
            [id: string]: any;
        }): void;
        static LogExceptionTag(message: string, exception: any, appCorrelationId: string, tagId: number): void;
        static LogCommonMessageTag(message: string, appCorrelationId: string, tagId: number): void;
    }
    class InsertionDialogSessionHelper {
        static LogInsertionDialogSession(assetId: string, totalSessionTime: number, trustPageSessionTime: number, appInserted: boolean, lastActiveTab: number, lastActiveTabCount: number): void;
    }
    class PrivacyRules {
        private static readonly privateCompliantId;
        static IsPrivateAddin(storeType: string, assetId: string, exchangeExtensionProviderName?: string, exchangeExtensionType?: string, storeId?: string): boolean;
        static GetAssetId(storeType: string, storeId: string, assetId: string, exchangeExtensionProviderName?: string, exchangeExtensionType?: string): string;
        static GetPrivacyCompliantId(solutionId: string, storeType: string, assetId: string, exchangeExtensionProviderName?: string, exchangeExtensionType?: string, storeId?: string): string;
    }
}
declare module OSFLog {
    interface IUsageData {
        SerializeRow(): string;
        Fields: {
            [key: string]: any;
        };
    }
    interface IUsageLogger {
        LogData(data: IUsageData): void;
    }
    class BaseUsageData implements IUsageData {
        private _table;
        private _fields;
        private _serializedFields;
        constructor(table: string);
        get Fields(): {
            [key: string]: any;
        };
        get Table(): string;
        SerializeFields(): void;
        SetSerializedField(key: string, value: any): void;
        SerializeRow(): string;
    }
    class AppLoadTimeUsageData extends BaseUsageData {
        constructor();
        get CorrelationId(): string;
        set CorrelationId(value: string);
        get AppInfo(): number;
        set AppInfo(value: number);
        get ActivationInfo(): number;
        set ActivationInfo(value: number);
        get InstanceId(): string;
        set InstanceId(value: string);
        get AssetId(): number;
        set AssetId(value: number);
        get Stage1Time(): number;
        set Stage1Time(value: number);
        get Stage2Time(): number;
        set Stage2Time(value: number);
        get Stage3Time(): number;
        set Stage3Time(value: number);
        get Stage4Time(): number;
        set Stage4Time(value: number);
        get Stage5Time(): number;
        set Stage5Time(value: number);
        get Stage6Time(): number;
        set Stage6Time(value: number);
        get Stage7Time(): number;
        set Stage7Time(value: number);
        get Stage8Time(): number;
        set Stage8Time(value: number);
        get Stage9Time(): number;
        set Stage9Time(value: number);
        get Stage10Time(): number;
        set Stage10Time(value: number);
        get Stage11Time(): number;
        set Stage11Time(value: number);
        get ErrorResult(): number;
        set ErrorResult(value: number);
        SerializeFields(): void;
    }
    class AppNotificationUsageData extends BaseUsageData {
        constructor();
        get CorrelationId(): string;
        set CorrelationId(value: string);
        get ErrorResult(): number;
        set ErrorResult(value: number);
        get NotificationClickInfo(): number;
        set NotificationClickInfo(value: number);
        SerializeFields(): void;
    }
    class AppManagementMenuUsageData extends BaseUsageData {
        constructor();
        get AssetId(): number;
        set AssetId(value: number);
        get OperationMetadata(): number;
        set OperationMetadata(value: number);
        get ErrorResult(): number;
        set ErrorResult(value: number);
        SerializeFields(): void;
    }
    class InsertionDialogSessionUsageData extends BaseUsageData {
        constructor();
        get AssetId(): number;
        set AssetId(value: number);
        get TotalSessionTime(): number;
        set TotalSessionTime(value: number);
        get TrustPageSessionTime(): number;
        set TrustPageSessionTime(value: number);
        get DialogState(): number;
        set DialogState(value: number);
        get LastActiveTab(): number;
        set LastActiveTab(value: number);
        get LastActiveTabCount(): number;
        set LastActiveTabCount(value: number);
        SerializeFields(): void;
    }
    class UploadFileDevCatelogUsageData extends BaseUsageData {
        constructor();
        get CorrelationId(): string;
        set CorrelationId(value: string);
        get OperationMetadata(): number;
        set OperationMetadata(value: number);
        get ErrorResult(): number;
        set ErrorResult(value: number);
        SerializeFields(): void;
    }
    class UploadFileDevCatalogUsageUsageData extends BaseUsageData {
        constructor();
        get CorrelationId(): string;
        set CorrelationId(value: string);
        get StoreType(): string;
        set StoreType(value: string);
        get AppId(): string;
        set AppId(value: string);
        get AppVersion(): string;
        set AppVersion(value: string);
        get AppTargetType(): number;
        set AppTargetType(value: number);
        get IsAppCommand(): string;
        set IsAppCommand(value: string);
        get AppSizeWidth(): number;
        set AppSizeWidth(value: number);
        get AppSizeHeight(): number;
        set AppSizeHeight(value: number);
        SerializeFields(): void;
    }
}
declare module OfficeExt {
    enum DataServiceResultCode {
        Succeeded = 1,
        Failed = 0,
        ProxyNotReady = -1,
        PrxoyUrlEmpty = -2,
        ProxyUrlNotTrusted = -3,
        UnknownUserType = 2,
        Unauthenticated = 3,
        UserResolutionNoMailbox = 4
    }
}
declare var _omexXmlNamespaces: string;
declare function _getAppSubType(officeExtentionTarget: any): any;
declare function _getAppVersion(applicationName: any): any;
declare function _invokeCallbackTag(callback: any, status: any, result: any, errorMessage: any, executor: any, tagId: any): void;
declare namespace OSF {
    enum AppSubType {
        Taskpane = 1,
        Content = 2,
        Contextual = 3,
        Dictionary = 4
    }
    enum AppVersion {
        access = "ZAC150",
        excel = "ZXL150",
        excelwebapp = "WAE160",
        outlook = "ZOL150",
        outlookwebapp = "MOW150",
        powerpoint = "ZPP151",
        powerpointwebapp = "WAP160",
        project = "ZPJ150",
        word = "ZWD150",
        wordwebapp = "WAW160",
        onenotewebapp = "WAO160",
        visio = "ZVO161",
        visiowebapp = "WAV161"
    }
}
declare module OfficeExt {
    class MicrosoftAjaxFactory {
        private _msAjaxError;
        private _msAjaxString;
        private _msAjaxDebug;
        isMsAjaxLoaded(): boolean;
        loadMsAjaxFull(callback: Function): void;
        get msAjaxError(): IMsAjaxError;
        set msAjaxError(errorClass: IMsAjaxError);
        get msAjaxString(): IMsAjaxString;
        set msAjaxString(stringClass: IMsAjaxString);
        get msAjaxDebug(): IMsAjaxDebug;
        set msAjaxDebug(debugClass: IMsAjaxDebug);
    }
}
declare var OsfMsAjaxFactory: OfficeExt.MicrosoftAjaxFactory;
declare module OfficeExt {
    class MsAjaxTypeHelper {
        static isInstanceOfType(type: any, instance: any): boolean;
    }
    class MsAjaxError {
        static create(message: string, errorInfo?: any): Error;
        static parameterCount(message?: string): Error;
        static argument(paramName?: string, message?: string): Error;
        static argumentNull(paramName?: string, message?: string): Error;
        static argumentOutOfRange(paramName?: string, actualValue?: any, message?: string): Error;
        static argumentType(paramName?: string, actualType?: any, expectedType?: any, message?: string): Error;
        static argumentUndefined(paramName?: string, message?: string): Error;
        static invalidOperation(message: string): Error;
    }
    class MsAjaxString {
        static format(format: string, ...args: any[]): string;
        static startsWith(str: string, prefix: string): boolean;
    }
    class MsAjaxDebug {
        static trace(text: string): void;
    }
}
declare function XDM_DEBUG(x: any): void;
declare const URL_DELIM = "$";
declare var otel: any;
declare module OfficeExt {
    interface IBasicStorage {
        getItem(key: string): any;
        setItem(key: string, data: string): void;
        clear(): void;
        removeItem(key: string): void;
        getKeysWithPrefix(keyPrefix: string): Array<string>;
        isLocalStorageAvailable(): boolean;
    }
    class SafeStorage implements IBasicStorage {
        private _internalStorage;
        constructor(_internalStorage: Storage);
        getItem(key: string): any;
        setItem(key: string, data: string): void;
        clear(): void;
        removeItem(key: string): void;
        getKeysWithPrefix(keyPrefix: string): Array<string>;
        isLocalStorageAvailable(): boolean;
    }
}
declare namespace OSF {
    enum WindowNameItemKeys {
        BaseFrameName = "baseFrameName",
        HostInfo = "hostInfo",
        XdmInfo = "xdmInfo",
        SerializerVersion = "serializerVersion",
        AppContext = "appContext",
        Flights = "flights",
        DisabledChangeGates = "disabledChangeGates",
        OfficeJsUrl = "officeJsUrl"
    }
    enum XdmFieldName {
        ConversationUrl = "ConversationUrl",
        AppId = "AppId"
    }
    enum Settings {
    }
    enum FlightNames {
        UseOriginNotUrl = 0,
        AddinEnforceHttps = 2,
        FirstPartyAnonymousProxyReadyCheckTimeout = 6,
        AddinRibbonIdAllowUnknown = 9,
        ManifestParserDevConsoleLog = 15,
        AddinActionDefinitionHybridMode = 18,
        UseActionIdForUILessCommand = 20,
        SetFocusToTaskpaneIsEnabled = 22,
        ShortcutInfoArrayInUserPreferenceData = 23,
        OSFTestFlight1000,
        OSFTestFlight1001,
        OSFTestFlight1002,
        OSFTestFlight1003,
        OSFTestFlight1004,
        OSFTestFlight1005,
        OSFTestFlight1006,
        OSFTestFlight1007,
        OSFTestFlight1008,
        OSFTestFlight1009
    }
    enum TrustUXFlightValues {
        TrustUXExperimentA = 0,
        TrustUXExperimentB = 1,
        TrustUXExperimentC = 2
    }
    enum FlightTreatmentNames {
        CheckProxyIsReadyRetry = "Microsoft.Office.SharedOnline.OEP.CheckProxyIsReadyRetry",
        InsertionDialogFixesEnabled = "Microsoft.Office.SharedOnline.InsertionDialogFixesEnabled",
        WopiPreinstalledAddInsEnabled = "Microsoft.Office.SharedOnline.WopiPreinstalledAddInsEnabled",
        WopiUseNewActivate = "Microsoft.Office.SharedOnline.WopiUseNewActivate",
        EnsureStringsBeforeTrustErrorKill = "Microsoft.Office.SharedOnline.EnsureStringsBeforeTrustErrorKill",
        MosManifestEnabled = "Microsoft.Office.SharedOnline.OEP.MosManifest",
        MosForOmexEnabled = "Microsoft.Office.SharedOnline.MosForOmexEnabled",
        MosForPrivateCatalogEnabled = "Microsoft.Office.SharedOnline.MosForPrivateCatalogEnabled",
        ContextSlideShowEnvironmentEnabled = "Microsoft.Office.SharedOnline.ContextSlideShowEnvironmentEnabled",
        CheckRequiredGroupIconsEnabled = "Microsoft.Office.SharedOnline.OEP.CheckRequiredGroupIconsEnabled",
        OSFJSEUDB = "Microsoft.Office.SharedOnline.OSFJS.EUDB",
        HostTrustDialog = "Microsoft.Office.SharedOnline.HostTrustDialog",
        RequirementSetRibbonApiOnePointThreePrime = "Microsoft.Office.SharedOnline.RequirementSetRibbonApiOnePointThreePrime",
        AddinDetailsServiceSupportEnabled = "Microsoft.Office.SharedOnline.AddinDetailsServiceSupportEnabled",
        GetAddinFlyoutEnabled = "Microsoft.Office.SharedOnline.GetAddinFlyoutEnabled",
        BackstageEnabled = "Microsoft.Office.SharedOnline.NewBackstageEnabled",
        ProcessMultipleCommandsInDequeInvoker = "Microsoft.Office.SharedOnline.ProcessMultipleCommandsInDequeInvoker",
        EnablingWindowOpenUsageLogging = "Microsoft.Office.SharedOnline.EnablingWindowOpenUsageLogging"
    }
    let TestFlightEnd: number;
    let TestFlightStart: number;
    let Flights: any[];
    let DisabledChangeGates: any[];
    let IntFlights: {
        [key: string]: number;
    };
    class OUtilClass {
        _uniqueId: number;
        _xdmInfoKey: string;
        _serializerVersionKey: string;
        _flightsKey: string;
        _disabledChangeGatesKey: string;
        _disabledChangeGatesKeyPrefix: string;
        _xdmSessionKeyPrefix: string;
        _serializerVersionKeyPrefix: string;
        _flightsKeyPrefix: string;
        _fragmentSeparator: string;
        _fragmentInfoDelimiter: string;
        _classN: string;
        _loadedScripts: any;
        _defaultScriptLoadingTimeout: number;
        _safeSessionStorage: OfficeExt.IBasicStorage;
        _safeLocalStorage: OfficeExt.IBasicStorage;
        _rndentropy: number;
        Guid: {
            generateNewGuid: () => string;
        };
        _getSessionStorage: () => OfficeExt.IBasicStorage;
        _random: () => string;
        _reOrderTabbableElements: <T extends {
            tabIndex: number;
        }>(arr: T[]) => T[];
        constructor();
        isChangeGateEnabled(name: string): boolean;
        set_entropy(entropy: any): void;
        extend(child: any, parent: any): void;
        setNamespace(name: any, parent: any): void;
        unsetNamespace(name: any, parent: any): void;
        serializeSettings(settingsCollection: any): {};
        deserializeSettings(serializedSettings: any): {};
        loadScript(url: any, callback: any, timeoutInMs?: any): void;
        loadCSS(url: any): void;
        parseEnum(str: any, enumObject: any): any;
        delayExecutionAndCache(): () => any;
        getUniqueId(): string;
        formatString(...args: any[]): any;
        generateConversationId(): string;
        getFrameName(cacheKey: any): string;
        addXdmInfoAsHash(url: any, xdmInfoValue: any): string;
        addSerializerVersionAsHash(url: any, serializerVersion: any): string;
        addFlightsAsHash(url: any, flights: any): string;
        addDisabledChangeGatesAsHash(url: any, disabledChangeGates: any): string;
        addInfoAsHash(url: any, keyName: any, infoValue: any, encodeInfo: any): string;
        parseHostInfoFromWindowName(skipSessionStorage: any, windowName: any): any;
        parseXdmInfo(skipSessionStorage: any): any;
        parseXdmInfoFromWindowName(skipSessionStorage: any, windowName: any): any;
        parseXdmInfoWithGivenFragment(skipSessionStorage: any, fragment: any): any;
        parseSerializerVersion(skipSessionStorage: any): number;
        parseSerializerVersionFromWindowName(skipSessionStorage: any, windowName: any): number;
        parseSerializerVersionWithGivenFragment(skipSessionStorage: any, fragment: any): number;
        parseFlights(skipSessionStorage: any): any[];
        parseDisabledChangeGates(skipSessionStorage: any): any[];
        checkFlight(flight: any): boolean;
        pushFlight(flight: any): boolean;
        getBooleanSetting(settingName: any): boolean;
        getBooleanFromDictionary(settings: any, settingName: string): boolean;
        getIntFromDictionary(settings: any, settingName: string): number;
        pushIntFlight(flight: string, flightValue: number): boolean;
        getIntFlight(flight: any): number;
        parseFlightsFromWindowName(skipSessionStorage: any, windowName: any): any[];
        parseFlightsWithGivenFragment(skipSessionStorage: any, fragment: any): any[];
        parseDisabledChangeGatesFromWindowName(skipSessionStorage: any, windowName: any): any[];
        parseDisabledChangeGatesWithGivenFragment(skipSessionStorage: any, fragment: any): any[];
        parseArrayWithDefault(jsonString: any): any[];
        parseInfoFromWindowName(skipSessionStorage: any, windowName: any, infoKey: any): any;
        parseInfoWithGivenFragment(infoKey: any, infoKeyPrefix: any, decodeInfo: any, skipSessionStorage: any, fragment: any): any;
        getConversationId(): any;
        getInfoItems(strInfo: any): any;
        getXdmFieldValue(xdmFieldName: any, skipSessionStorage: any): string;
        validateParamObject(params: any, expectedProperties: any, callback: any): void;
        writeProfilerMark(text: any): void;
        outputDebug(text: any): void;
        defineNondefaultProperty(obj: any, prop: any, descriptor: any, attributes: any): any;
        defineNondefaultProperties(obj: any, descriptors: any, attributes: any): any;
        defineEnumerableProperty(obj: any, prop: any, descriptor: any): any;
        defineEnumerableProperties(obj: any, descriptors: any): any;
        defineMutableProperty(obj: any, prop: any, descriptor: any): any;
        defineMutableProperties(obj: any, descriptors: any): any;
        finalizeProperties(obj: any, descriptor: any): any;
        mapList(list: any, mapFunction: any): any[];
        listContainsKey(list: any, key: any): boolean;
        listContainsValue(list: any, value: any): boolean;
        augmentList(list: any, addenda: any): void;
        redefineList(oldList: any, newList: any): void;
        isArray(obj: any): boolean;
        isFunction(obj: any): boolean;
        isDate(obj: any): boolean;
        addEventListener(element: any, eventName: any, listener: any): void;
        removeEventListener(element: any, eventName: any, listener: any): void;
        xhrGet(url: any, onSuccess: any, onError: any): void;
        encodeBase64(input: any): any;
        getSessionStorage(): OfficeExt.IBasicStorage;
        getLocalStorage(): OfficeExt.IBasicStorage;
        convertIntToCssHexColor(val: any): string;
        attachClickHandler(element: any, handler: any): void;
        getQueryStringParamValue(queryString: any, paramName: any): string;
        getHostnamePortionForLogging(hostname: any): any;
        isiOS(): boolean;
        isChrome(): boolean;
        isEdge(): boolean;
        isIE(): boolean;
        isFirefox(): boolean;
        doesUrlHaveSupportedProtocol(url: string): boolean;
        startsWith(originalString: any, patternToCheck: any, browserIsIE: any): any;
        containsPort(url: any, protocol: any, hostname: any, portNumber: any): any;
        getRedundandPortString(url: any, parser: any): "" | ":443" | ":80";
        removeChar(url: any, indexOfCharToRemove: any): any;
        cleanUrlOfChar(url: any, charToClean: any): any;
        cleanUrl(url: any): any;
        parseUrl(url: any, enforceHttps?: boolean): {
            protocol: any;
            hostname: any;
            host: any;
            port: any;
            pathname: any;
            search: any;
            hash: any;
            isPortPartOfUrl: any;
        };
        shallowCopy(sourceObj: any): any;
        createObject(properties: any): any;
        addClass(elmt: HTMLElement, val: string): void;
        removeClass(elmt: HTMLElement, val: string): void;
        hasClass(elmt: HTMLElement, clsName: string): RegExpMatchArray;
        focusToFirstTabbable(all: any, backward: any): any;
        focusToNextTabbable(all: any, curr: any, shift: any): any;
        isNullOrUndefined(value: any): boolean;
        isArrayNullOrUndefinedOrEmpty(value: Array<any>): boolean;
        stringEndsWith(value: string, subString: string): boolean;
        hashCode(str: string): number;
        getValue(value: any, defaultValue: any): any;
        getBOMCodepointLength(data: string): number;
        externalNativeFunctionExists(type: string): boolean;
        sendTelemetryEvent(eventName: string, dataFieldsValue: any): boolean;
        sendActivityEvent(eventName: string, eventDuration: any, eventSucceeded: any, dataFieldsValue: any): boolean;
    }
    let OUtil: OUtilClass;
}
declare module OfficeExt {
    var appSpecificCheckOrigin: (allowed_domains: string[], eventObj: any, origin: string, checkOriginFunction: (allowed_domains: string[], origin: string) => boolean) => boolean;
}
declare namespace OSF {
    enum SerializerVersion {
        MsAjax = 0,
        Browser = 1
    }
}
declare namespace Microsoft {
    namespace Office {
        namespace Common {
            class ResponseSender {
                _actionName: any;
                _conversationId: any;
                _correlationId: any;
                _invokeResultCode: any;
                _requesterUrl: any;
                _requesterWindow: any;
                _responseType: any;
                _send: any;
                constructor(requesterWindow: any, requesterUrl: any, actionName: any, conversationId: any, correlationId: any, responseType: any, serializerVersion: any);
                getRequesterWindow(): any;
                getRequesterUrl(): any;
                getActionName(): any;
                getConversationId(): any;
                getCorrelationId(): any;
                getSend(): any;
                setResultCode(resultCode: any): void;
            }
            class InvokeCompleteCallback extends ResponseSender {
                static uber: any;
                _postCallbackHandler: any;
                _send: any;
                _invokeResultCode: any;
                _requesterWindow: any;
                _actionName: any;
                _conversationId: any;
                _correlationId: any;
                _responseType: any;
                _requesterUrl: any;
                constructor(requesterWindow: any, requesterUrl: any, actionName: any, conversationId: any, correlationId: any, postCallbackHandler: any, serializerVersion: any);
            }
            class MessagePackager {
                static envelope(messageObject: any, serializerVersion: any): string;
                static unenvelope(messageObject: any, serializerVersion: any): any;
            }
            enum HostTrustStatus {
                "unknown" = 0,
                "untrusted" = 1,
                "nothttps" = 2,
                "trusted" = 3
            }
            enum ResponseType {
                "forCalling" = 0,
                "forEventing" = 1
            }
            enum ActionType {
                "invoke" = 0,
                "registerEvent" = 1,
                "unregisterEvent" = 2
            }
            enum MessageType {
                "request" = 0,
                "response" = 1
            }
            enum InvokeResultCode {
                "noError" = 0,
                "errorInRequest" = -1,
                "errorHandlingRequest" = -2,
                "errorInResponse" = -3,
                "errorHandlingResponse" = -4,
                "errorHandlingRequestAccessDenied" = -5,
                "errorHandlingMethodCallTimedout" = -6
            }
            enum InvokeType {
                "async" = 0,
                "sync" = 1,
                "asyncRegisterEvent" = 2,
                "asyncUnregisterEvent" = 3,
                "syncRegisterEvent" = 4,
                "syncUnregisterEvent" = 5
            }
            let XdmCommunicationManager: {
                connect: (conversationId: any, targetWindow: any, targetUrl: any, serializerVersion: any) => any;
                getClientEndPoint: (conversationId: any) => any;
                createServiceEndPoint: (serviceEndPointId: any) => ServiceEndPoint;
                getServiceEndPoint: (serviceEndPointId: any) => any;
                deleteClientEndPoint: (conversationId: any) => void;
                deleteServiceEndPoint: (serviceEndPointId: any) => void;
                urlCompare: (url_parser1: any, url_parser2: any) => boolean;
                checkUrlWithAppDomains: (appDomains: any, origin: any) => boolean;
                isTargetSubdomainOfSourceLocation: (sourceLocation: any, messageOrigin: any) => boolean;
                _setMethodTimeout: (methodTimeout: any) => void;
                _startMethodTimeoutTimer: () => void;
                isHostNameValidWacDomain: (hostName: string) => boolean;
                _hasSamePort: (url_parser1: any, url_parser2: any) => boolean;
            };
            class MethodObject {
                _blockingOthers: any;
                _invokeType: any;
                _method: any;
                constructor(method: any, invokeType: any, blockingOthers: any);
                getMethod(): any;
                getInvokeType(): any;
                getBlockingFlag(): any;
            }
            class EventMethodObject {
                _registerMethodObject: any;
                _unregisterMethodObject: any;
                constructor(registerMethodObject: any, unregisterMethodObject: any);
                getRegisterMethodObject(): any;
                getUnregisterMethodObject(): any;
            }
            class ServiceEndPoint {
                _Id: any;
                _appDomains: any;
                _conversations: any;
                _eventHandlerProxyList: any;
                _methodObjectList: any;
                _onHandleRequestError: any;
                _policyManager: any;
                constructor(serviceEndPointId: any);
                registerMethod(methodName: any, method: any, invokeType: any, blockingOthers: any): void;
                unregisterMethod(methodName: any): void;
                registerEvent(eventName: any, registerMethod: any, unregisterMethod: any): void;
                registerEventEx(eventName: any, registerMethod: any, registerMethodInvokeType: any, unregisterMethod: any, unregisterMethodInvokeType: any): void;
                unregisterEvent(eventName: any): void;
                registerConversation(conversationId: any, conversationUrl: any, appDomains?: any, controlId?: any): void;
                unregisterConversation(conversationId: any): void;
                setPolicyManager(policyManager: any): void;
                getPolicyManager(): any;
                dispose(): void;
            }
            class ClientEndPoint {
                _callbackList: any;
                _callingIndex: any;
                _checkReceiverOriginAndRun: any;
                _checkStatusLogged: any;
                _conversationId: any;
                _eventHandlerList: any;
                _hostTrustCheckStatus: any;
                _serializerVersion: any;
                _targetUrl: any;
                _targetWindow: any;
                constructor(conversationId: any, targetWindow: any, targetUrl: any, serializerVersion: any);
                invoke(targetMethodName: any, callback: any, param: any, trustedParams?: any): void;
                registerForEvent(targetEventName: any, eventHandler: any, callback: any, data: any): void;
                unregisterForEvent(targetEventName: any, callback: any, data: any): void;
            }
            class Message {
                _actionName: any;
                _conversationId: any;
                _correlationId: any;
                _data: any;
                _messageType: any;
                _origin: any;
                constructor(messageType: any, actionName: any, conversationId: any, correlationId: any, data: any);
                getActionName(): any;
                getConversationId(): any;
                getCorrelationId(): any;
                getOrigin(): any;
                getData(): any;
                getMessageType(): any;
            }
            class Request extends Message {
                static uber: any;
                _actionType: any;
                constructor(actionName: any, actionType: any, conversationId: any, correlationId: any, data: any);
                getActionType(): any;
            }
            class Response extends Message {
                static uber: any;
                _errorCode: any;
                _responseType: any;
                constructor(actionName: any, conversationId: any, correlationId: any, errorCode: any, responseType: any, data: any);
                getErrorCode(): any;
                getResponseType(): any;
            }
            class Invoker {
                _callerId: any;
                _conversationId: any;
                _eventHandlerProxyList: any;
                _eventName: any;
                _invokeCompleteCallback: any;
                _methodObject: any;
                _param: any;
                _trustedParams: any;
                _serializerVersion: any;
                constructor(methodObject: any, paramValue: any, invokeCompleteCallback: any, eventHandlerProxyList: any, conversationId: any, eventName: any, serializerVersion: any, trustedParams?: any);
                invoke(): void;
                getInvokeBlockingFlag(): any;
                _createEventHandlerProxyObject(invokeCompleteObject: any): ResponseSender;
            }
        }
    }
}
declare module OfficeExt.WACUtils {
    function parseAppContextFromWindowName(skipSessionStorage: any, windowName: any): any;
    function serializeObjectToString(obj: any): string;
    function isHostTrusted(): boolean;
    function addHostInfoAsQueryParam(url: any, hostInfoValue: any): string;
    function getDomainForUrl(url: any): string;
    function shouldUseLocalStorageToPassMessage(): boolean;
    function isInternetExplorer(): boolean;
    function removeMatchesFromLocalStorage(regexPatterns: Array<RegExp>): void;
    function logExceptionToBrowserConsole(message: string, exception: any): void;
    function isTeamsWebView(): boolean;
    function getHostSecure(url: string): string;
    class CacheConstants {
        static GatedCacheKeyPrefix: string;
        static AnonymousCacheKeyPrefix: string;
        static UngatedCacheKeyPrefix: string;
        static ActivatedCacheKeyPrefix: string;
        static AppinstallAuthenticated: string;
        static Entitlement: string;
        static AppState: string;
        static AppDetails: string;
        static AppInstallInfo: string;
        static AuthenticatedAppInstallInfoCacheKey: string;
        static EntitlementsKey: string;
        static AppStateCacheKey: string;
        static AppDetailKey: string;
        static AppInstallInfoKey: string;
        static ActivatedCacheKey: string;
    }
}
declare namespace OSF {
    enum OmexRemoveAddinResultCode {
        Success = 0,
        ClientError = 400,
        ServerError = 500,
        UnknownError = 600
    }
    enum OmexRemoveAddinMessageKeys {
        RemoveAddinResultCode = "resultCode",
        RemoveAddinResultValue = "resultValue"
    }
    enum OmexMessageKeys {
        MessageType = "messageType",
        MessageValue = "messageValue"
    }
    enum AuthType {
        Anonymous = 0,
        MSA = 1,
        OrgId = 2,
        ADAL = 3
    }
    enum OmexPageParameterKeys {
        AppName = "client",
        AppVersion = "cv",
        AppUILocale = "ui",
        AppDomain = "appDomain",
        StoreLocator = "rs",
        AssetId = "assetid",
        NotificationType = "notificationType",
        AppCorrelationId = "corr",
        AuthType = "authType",
        AppId = "appid",
        Scopes = "scopes"
    }
    enum HostThemeButtonStyleKeys {
        ButtonBorderColor = "buttonBorderColor",
        ButtonBackgroundColor = "buttonBackgroundColor"
    }
    enum ShowWindowDialogParameterKeys {
        Url = "url",
        Width = "width",
        Height = "height",
        DisplayInIframe = "displayInIframe",
        HideTitle = "hideTitle",
        UseDeviceIndependentPixels = "useDeviceIndependentPixels",
        PromptBeforeOpen = "promptBeforeOpen",
        EnforceAppDomain = "enforceAppDomain",
        UrlNoHostInfo = "urlNoHostInfo"
    }
}
declare let stringResourceFileValue: string;
declare namespace OSF {
    let Constants: {
        FileVersion: string;
        ThreePartsFileVersion: string;
        OmexAnonymousServiceName: string;
        OmexAnonymousServiceExtension: string;
        OmexGatedServiceName: string;
        OmexGatedServiceExtension: string;
        OmexUnGatedServiceName: string;
        OmexUnGatedServiceExtension: string;
        OmexConsentNotificationPage: string;
        Http: string;
        Https: string;
        ProtocolSeparator: string;
        SignInRedirectUrl: string;
        ETokenParameterName: string;
        ActivatedCacheKey: string;
        ConsentedCacheKey: string;
        AuthenticatedConnectMaxTries: number;
        IgnoreSandBoxSupport: string;
        IEUpgradeUrl: string;
        OmexForceAnonymousParamName: string;
        OmexForceAnonymousParamValue: string;
        EndPointInternalSuffix: string;
        SPCatalogTrustedLocationsCacheKey: string;
        StringResourceFile: string;
    };
}
declare namespace OSF {
    enum ClientMode {
        ReadOnly = 0,
        ReadWrite = 1
    }
    enum OsfControlType {
        DocumentLevel = 0,
        ContainerLevel = 1
    }
    let OfficeAppContext: (id: any, appName: any, appVersion: any, appUILocale: any, dataLocale: any, docUrl: any, clientMode: any, settings: any, reason: any, osfControlType: any, eToken: any, correlationId: any, appInstanceId: any, touchEnabled: any, commerceAllowed: any, appMinorVersion: any, requirementMatrix: any, hostCustomMessage: any, hostFullVersion: any, clientWindowHeight: any, clientWindowWidth: any, addinName: any, appDomains: any, dialogRequirementMatrix: any, featureGates: any, officeTheme: any, initialDisplayMode: any, hostSettings: any) => void;
    enum DialogMessageType {
        DialogMessageReceived = 0,
        DialogParentMessageReceived = 1,
        DialogClosed = 12006
    }
    enum SharedConstants {
        "NotificationConversationIdSuffix" = "_ntf"
    }
    enum AgaveHostAction {
        "Select" = 0,
        "UnSelect" = 1,
        "CancelDialog" = 2,
        "InsertAgave" = 3,
        "CtrlF6In" = 4,
        "CtrlF6Exit" = 5,
        "CtrlF6ExitShift" = 6,
        "SelectWithError" = 7,
        "NotifyHostError" = 8,
        "RefreshAddinCommands" = 9,
        "PageIsReady" = 10,
        "TabIn" = 11,
        "TabInShift" = 12,
        "TabExit" = 13,
        "TabExitShift" = 14,
        "EscExit" = 15,
        "F2Exit" = 16,
        "ExitNoFocusable" = 17,
        "ExitNoFocusableShift" = 18,
        "MouseEnter" = 19,
        "MouseLeave" = 20,
        "UpdateTargetUrl" = 21,
        "InstallCustomFunctions" = 22,
        "SendTelemetryEvent" = 23,
        "UninstallCustomFunctions" = 24,
        "SendMessage" = 25,
        "LaunchExtensionComponent" = 26,
        "StopExtensionComponent" = 27,
        "RestartExtensionComponent" = 28,
        "EnableTaskPaneHeaderButton" = 29,
        "DisableTaskPaneHeaderButton" = 30,
        "TaskPaneHeaderButtonClicked" = 31,
        "RemoveAppCommandsAddin" = 32,
        "RefreshRibbonGallery" = 33,
        "GetOriginalControlId" = 34,
        "OfficeJsReady" = 35,
        "InsertDevManifest" = 36,
        "InsertDevManifestError" = 37,
        "SendCustomerContent" = 38,
        "KeyboardShortcuts" = 39,
        "OsfControlLoad" = 40,
        "ClickTrust" = 41,
        "CloseSDXDialog" = 42
    }
    enum HostCallPerfMarker {
        IssueCall = "Agave.HostCall.IssueCall",
        ReceiveResponse = "Agave.HostCall.ReceiveResponse",
        RuntimeExceptionRaised = "Agave.HostCall.RuntimeExecptionRaised"
    }
    enum InternalPerfMarker {
        DataCoercionBegin = "Agave.HostCall.CoerceDataStart",
        DataCoercionEnd = "Agave.HostCall.CoerceDataEnd"
    }
    namespace DDA {
        enum EventDispId {
            dispidEventMin = 0,
            dispidInitializeEvent = 0,
            dispidSettingsChangedEvent = 1,
            dispidDocumentSelectionChangedEvent = 2,
            dispidBindingSelectionChangedEvent = 3,
            dispidBindingDataChangedEvent = 4,
            dispidDocumentOpenEvent = 5,
            dispidDocumentCloseEvent = 6,
            dispidActiveViewChangedEvent = 7,
            dispidDocumentThemeChangedEvent = 8,
            dispidOfficeThemeChangedEvent = 9,
            dispidDialogMessageReceivedEvent = 10,
            dispidDialogNotificationShownInAddinEvent = 11,
            dispidDialogParentMessageReceivedEvent = 12,
            dispidObjectDeletedEvent = 13,
            dispidObjectSelectionChangedEvent = 14,
            dispidObjectDataChangedEvent = 15,
            dispidContentControlAddedEvent = 16,
            dispidLiveShareStateChangedEvent = 17,
            dispidActivationStatusChangedEvent = 32,
            dispidRichApiMessageEvent = 33,
            dispidAppCommandInvokedEvent = 39,
            dispidOlkItemSelectedChangedEvent = 46,
            dispidOlkRecipientsChangedEvent = 47,
            dispidOlkAppointmentTimeChangedEvent = 48,
            dispidOlkRecurrenceChangedEvent = 49,
            dispidOlkAttachmentsChangedEvent = 50,
            dispidOlkEnhancedLocationsChangedEvent = 51,
            dispidOlkInfobarClickedEvent = 52,
            dispidTaskSelectionChangedEvent = 56,
            dispidResourceSelectionChangedEvent = 57,
            dispidViewSelectionChangedEvent = 58,
            dispidDataNodeAddedEvent = 60,
            dispidDataNodeReplacedEvent = 61,
            dispidDataNodeDeletedEvent = 62,
            dispidEventMax = 63
        }
        enum MethodDispId {
            dispidMethodMin = 64,
            dispidGetSelectedDataMethod = 64,
            dispidSetSelectedDataMethod = 65,
            dispidAddBindingFromSelectionMethod = 66,
            dispidAddBindingFromPromptMethod = 67,
            dispidGetBindingMethod = 68,
            dispidReleaseBindingMethod = 69,
            dispidGetBindingDataMethod = 70,
            dispidSetBindingDataMethod = 71,
            dispidAddRowsMethod = 72,
            dispidClearAllRowsMethod = 73,
            dispidGetAllBindingsMethod = 74,
            dispidLoadSettingsMethod = 75,
            dispidSaveSettingsMethod = 76,
            dispidGetDocumentCopyMethod = 77,
            dispidAddBindingFromNamedItemMethod = 78,
            dispidAddColumnsMethod = 79,
            dispidGetDocumentCopyChunkMethod = 80,
            dispidReleaseDocumentCopyMethod = 81,
            dispidNavigateToMethod = 82,
            dispidGetActiveViewMethod = 83,
            dispidGetDocumentThemeMethod = 84,
            dispidGetOfficeThemeMethod = 85,
            dispidGetFilePropertiesMethod = 86,
            dispidClearFormatsMethod = 87,
            dispidSetTableOptionsMethod = 88,
            dispidSetFormatsMethod = 89,
            dispidGetUserIdentityInfoMethod = 92,
            dispidExecuteRichApiRequestMethod = 93,
            dispidAppCommandInvocationCompletedMethod = 94,
            dispidCloseContainerMethod = 97,
            dispidGetAccessTokenMethod = 98,
            dispidGetAuthContextMethod = 99,
            dispidGetLiveShareStateMethod = 100,
            dispidSetLiveShareStateMethod = 101,
            dispidOpenBrowserWindow = 102,
            dispidCreateDocumentMethod = 105,
            dispidInsertFormMethod = 106,
            dispidDisplayRibbonCalloutAsyncMethod = 109,
            dispidGetSelectedTaskMethod = 110,
            dispidGetSelectedResourceMethod = 111,
            dispidGetTaskMethod = 112,
            dispidGetResourceFieldMethod = 113,
            dispidGetWSSUrlMethod = 114,
            dispidGetTaskFieldMethod = 115,
            dispidGetProjectFieldMethod = 116,
            dispidGetSelectedViewMethod = 117,
            dispidGetTaskByIndexMethod = 118,
            dispidGetResourceByIndexMethod = 119,
            dispidSetTaskFieldMethod = 120,
            dispidSetResourceFieldMethod = 121,
            dispidGetMaxTaskIndexMethod = 122,
            dispidGetMaxResourceIndexMethod = 123,
            dispidCreateTaskMethod = 124,
            dispidAddDataPartMethod = 128,
            dispidGetDataPartByIdMethod = 129,
            dispidGetDataPartsByNamespaceMethod = 130,
            dispidGetDataPartXmlMethod = 131,
            dispidGetDataPartNodesMethod = 132,
            dispidDeleteDataPartMethod = 133,
            dispidGetDataNodeValueMethod = 134,
            dispidGetDataNodeXmlMethod = 135,
            dispidGetDataNodesMethod = 136,
            dispidSetDataNodeValueMethod = 137,
            dispidSetDataNodeXmlMethod = 138,
            dispidAddDataNamespaceMethod = 139,
            dispidGetDataUriByPrefixMethod = 140,
            dispidGetDataPrefixByUriMethod = 141,
            dispidGetDataNodeTextMethod = 142,
            dispidSetDataNodeTextMethod = 143,
            dispidMessageParentMethod = 144,
            dispidSendMessageMethod = 145,
            dispidExecuteFeature = 146,
            dispidQueryFeature = 147,
            dispidMethodMax = 147,
            dispidGetNestedAppAuthContextMethod = 205
        }
        let getXdmEventName: (id: any, eventType: any) => any;
        enum UI {
        }
        enum ListDescriptors {
        }
        enum EventDescriptors {
        }
        enum PropertyDescriptors {
            AsyncResultStatus = "AsyncResultStatus"
        }
        enum DocumentMode {
            ReadOnly = 1,
            ReadWrite = 0
        }
    }
}
declare namespace Microsoft {
    namespace Office {
        namespace WebExtension {
            enum Parameters {
                BindingType = "bindingType",
                CoercionType = "coercionType",
                ValueFormat = "valueFormat",
                FilterType = "filterType",
                Columns = "columns",
                SampleData = "sampleData",
                GoToType = "goToType",
                SelectionMode = "selectionMode",
                Id = "id",
                PromptText = "promptText",
                ItemName = "itemName",
                FailOnCollision = "failOnCollision",
                StartRow = "startRow",
                StartColumn = "startColumn",
                RowCount = "rowCount",
                ColumnCount = "columnCount",
                Callback = "callback",
                AsyncContext = "asyncContext",
                Data = "data",
                Rows = "rows",
                OverwriteIfStale = "overwriteIfStale",
                FileType = "fileType",
                EventType = "eventType",
                Handler = "handler",
                SliceSize = "sliceSize",
                SliceIndex = "sliceIndex",
                ActiveView = "activeView",
                Status = "status",
                PlatformType = "platformType",
                HostType = "hostType",
                Email = "email",
                ForceConsent = "forceConsent",
                ForceAddAccount = "forceAddAccount",
                AuthChallenge = "authChallenge",
                AllowConsentPrompt = "allowConsentPrompt",
                ForMSGraphAccess = "forMSGraphAccess",
                AllowSignInPrompt = "allowSignInPrompt",
                JsonPayload = "jsonPayload",
                EnableNewHosts = "enableNewHosts",
                AccountTypeFilter = "accountTypeFilter",
                AddinTrustId = "addinTrustId",
                Reserved = "reserved",
                Tcid = "tcid",
                Xml = "xml",
                Namespace = "namespace",
                Prefix = "prefix",
                XPath = "xPath",
                Text = "text",
                ImageLeft = "imageLeft",
                ImageTop = "imageTop",
                ImageWidth = "imageWidth",
                ImageHeight = "imageHeight",
                TaskId = "taskId",
                FieldId = "fieldId",
                FieldValue = "fieldValue",
                ServerUrl = "serverUrl",
                ListName = "listName",
                ResourceId = "resourceId",
                ViewType = "viewType",
                ViewName = "viewName",
                GetRawValue = "getRawValue",
                CellFormat = "cellFormat",
                TableOptions = "tableOptions",
                TaskIndex = "taskIndex",
                ResourceIndex = "resourceIndex",
                CustomFieldId = "customFieldId",
                Url = "url",
                MessageHandler = "messageHandler",
                Width = "width",
                Height = "height",
                RequireHTTPs = "requireHTTPS",
                MessageToParent = "messageToParent",
                DisplayInIframe = "displayInIframe",
                MessageContent = "messageContent",
                TargetOrigin = "targetOrigin",
                HideTitle = "hideTitle",
                UseDeviceIndependentPixels = "useDeviceIndependentPixels",
                PromptBeforeOpen = "promptBeforeOpen",
                EnforceAppDomain = "enforceAppDomain",
                UrlNoHostInfo = "urlNoHostInfo",
                Targetorigin = "targetOrigin",
                AppCommandInvocationCompletedData = "appCommandInvocationCompletedData",
                Base64 = "base64",
                FormId = "formId"
            }
            enum FilterType {
                All = "all"
            }
            enum ValueFormat {
                Unformatted = "unformatted",
                Formatted = "formatted"
            }
            enum InitializationReason {
                Inserted = "inserted",
                DocumentOpened = "documentOpened",
                ControlActivation = "controlActivation"
            }
        }
    }
}
declare var _serviceEndPoint: any;
declare var _defaultRefreshRate: number;
declare var _msPerDay: number;
declare var _defaultTimeout: number;
declare var _officeVersionHeader: string;
declare var _hourToDayConversionFactor: number;
declare var _buildParameter: string;
declare var _expectedVersionParameter: string;
declare var _queryStringParameters: {
    clientName: string;
    clientVersion: string;
};
declare var statusCode: {
    Succeeded: number;
    Failed: number;
};
declare var _spUpn: any;
declare function _sendWebRequest(url: any, verb: any, headers: any, onCompleted: any, context: any, body?: any): void;
declare function _onCompleted(executor: any, eventArgs: any): void;
declare function _isProxyReady(params: any, callback: any): void;
declare function _createQueryStringFragment(paramDictionary: any): string;
declare namespace Mos {
    class AcquisitionList implements IAcquisitionList {
        acquisitions: Acquisition[];
        syncKey: string;
        nextInterval: number;
        constructor(data?: IAcquisitionList);
        init(_data?: any): void;
        static fromJS(data: any): AcquisitionList;
        push(data: AcquisitionList): void;
        toJSON(data?: any): any;
    }
    interface IAcquisitionList {
        acquisitions: Acquisition[];
        syncKey: string;
        nextInterval: number;
    }
    class Acquisition implements IAcquisition {
        titleId: string;
        assetId: string;
        manifestId: string;
        titleDefinition: TitleDefinition;
        acquisitionState: string;
        acquisitionContext: string;
        canBeUnacquired: boolean;
        constructor(data?: IAcquisition);
        init(_data?: any): void;
        static fromJS(data: any): Acquisition;
        toJSON(data?: any): any;
    }
    interface IAcquisition {
        titleId: string;
        assetId: string;
        manifestId: string;
        titleDefinition: TitleDefinition;
        acquisitionState: string;
        acquisitionContext: string;
        canBeUnacquired?: boolean;
    }
    class TitleDefinition implements ITitleDefinition {
        name: string;
        iconSmall: IconSmall;
        version: string;
        elementDefinitions: ElementDefinitions;
        ingestionSource: string;
        scope: string;
        developerName: string;
        shortDescription: string;
        validDomains: string[];
        webApplicationInfo: WebApplicationInfo;
        authorization: Authorization;
        constructor(data?: ITitleDefinition);
        init(_data?: any): void;
        static fromJS(data: any): TitleDefinition;
        toJSON(data?: any): any;
    }
    interface ITitleDefinition {
        name: string;
        iconSmall: IconSmall;
        version: string;
        elementDefinitions: ElementDefinitions;
        ingestionSource: string;
        scope: string;
        developerName: string;
        shortDescription: string;
        validDomains: string[];
        webApplicationInfo: WebApplicationInfo;
        authorization: Authorization;
    }
    class IconSmall implements IIconSmall {
        uri: string;
        constructor(data?: IIconSmall);
        init(_data?: any): void;
        static fromJS(data: any): IconSmall;
        toJSON(data?: any): any;
    }
    interface IIconSmall {
        uri: string;
    }
    class ElementDefinitions implements IElementDefinitions {
        officeAddIns: OfficeAddIn[];
        extensions: Extension[];
        firstPartyPages: FirstPartyPages[];
        constructor(data?: IElementDefinitions);
        init(_data?: any): void;
        static fromJS(data: any): ElementDefinitions;
        toJSON(data?: any): any;
    }
    interface IElementDefinitions {
        officeAddIns: OfficeAddIn[];
        extensions: Extension[];
        firstPartyPages: FirstPartyPages[];
    }
    class WebApplicationInfo implements IWebApplicationInfo {
        id: string;
        resource: string;
        constructor(data?: IWebApplicationInfo);
        init(_data?: any): void;
        static fromJS(data: any): WebApplicationInfo;
        toJSON(data?: any): any;
    }
    interface IWebApplicationInfo {
        id: string;
        resource: string;
    }
    class Authorization implements IAuthorization {
        permissions: Permissions;
        constructor(data?: IAuthorization);
        init(_data?: any): void;
        static fromJS(data: any): Authorization;
        toJSON(data?: any): any;
    }
    interface IAuthorization {
        permissions: Permissions;
    }
    class OfficeAddIn implements IOfficeAddIn {
        xmlDefinition: string;
        name: string;
        constructor(data?: IOfficeAddIn);
        init(_data?: any): void;
        static fromJS(data: any): OfficeAddIn;
        toJSON(data?: any): any;
    }
    interface IOfficeAddIn {
        xmlDefinition: string;
        name: string;
    }
    class Extension implements IExtension {
        requirements: Requirements;
        getStartedMessages: GetStartedMessages[];
        runtimes: Runtimes[];
        ribbons: Ribbons[];
        shortcuts: Shortcuts[];
        autoRunEvents: AutoRunEvents[];
        contextMenus: ContextMenus[];
        alternatives: Alternatives[];
        constructor(data?: IExtension);
        init(_data?: any): void;
        static fromJS(data: any): Extension;
        toJSON(data?: any): any;
    }
    interface IExtension {
        requirements: Requirements;
        getStartedMessages: GetStartedMessages[];
        runtimes: Runtimes[];
        ribbons: Ribbons[];
        shortcuts: Shortcuts[];
        autoRunEvents: AutoRunEvents[];
        contextMenus: ContextMenus[];
        alternatives: Alternatives[];
    }
    class FirstPartyPages implements IFirstPartyPages {
        id: string;
        title: string;
        subtitle: Subtitle | undefined;
        alternateNames: AlternateNames | undefined;
        brandBarText: BrandBarText | undefined;
        ariaLabel: string;
        publisher: string;
        iconAnonymousUrl: string;
        targetWindow: TargetWindow | undefined;
        backgroundColor: string;
        launchFullUrl: string;
        name: string;
        constructor(data?: IFirstPartyPages);
        init(_data?: any): void;
        static fromJS(data: any): FirstPartyPages;
        toJSON(data?: any): any;
    }
    interface IFirstPartyPages {
        id: string;
        title: string;
        subtitle: Subtitle | undefined;
        alternateNames: AlternateNames | undefined;
        brandBarText: BrandBarText | undefined;
        ariaLabel: string;
        publisher: string;
        iconAnonymousUrl: string;
        targetWindow: TargetWindow | undefined;
        backgroundColor: string;
        launchFullUrl: string;
        name: string;
    }
    class Permissions implements IPermissions {
        orgWide: OrgWide[];
        resourceSpecific: ResourceSpecific[];
        constructor(data?: IPermissions);
        init(_data?: any): void;
        static fromJS(data: any): Permissions;
        toJSON(data?: any): any;
    }
    interface IPermissions {
        orgWide: OrgWide[];
        resourceSpecific: ResourceSpecific[];
    }
    class Requirements implements IRequirements {
        scopes: Scopes[];
        capabilities: Capabilities[];
        platforms: Platforms[];
        formFactors: FormFactors[];
        constructor(data?: IRequirements);
        init(_data?: any): void;
        static fromJS(data: any): Requirements;
        toJSON(data?: any): any;
    }
    interface IRequirements {
        scopes: Scopes[];
        capabilities: Capabilities[];
        platforms: Platforms[];
        formFactors: FormFactors[];
    }
    class GetStartedMessages implements IGetStartedMessages {
        requirements: Requirements;
        title: string;
        description: string;
        learnMoreUrl: string;
        constructor(data?: IGetStartedMessages);
        init(_data?: any): void;
        static fromJS(data: any): GetStartedMessages;
        toJSON(data?: any): any;
    }
    interface IGetStartedMessages {
        requirements: Requirements;
        title: string;
        description: string;
        learnMoreUrl: string;
    }
    class Runtimes implements IRuntimes {
        requirements: Requirements;
        id: string;
        type: string;
        code: Code;
        lifetime: string;
        actions: Actions[];
        functions: Functions[];
        functionSettings: FunctionSettings;
        constructor(data?: IRuntimes);
        init(_data?: any): void;
        static fromJS(data: any): Runtimes;
        toJSON(data?: any): any;
    }
    interface IRuntimes {
        requirements: Requirements;
        id: string;
        type: string;
        code: Code;
        lifetime: string;
        actions: Actions[];
        functions: Functions[];
        functionSettings: FunctionSettings;
    }
    class Ribbons implements IRibbons {
        requirements: Requirements;
        contexts: Contexts[];
        tabs: Tabs[];
        constructor(data?: IRibbons);
        init(_data?: any): void;
        static fromJS(data: any): Ribbons;
        toJSON(data?: any): any;
    }
    interface IRibbons {
        requirements: Requirements;
        contexts: Contexts[];
        tabs: Tabs[];
    }
    class Shortcuts implements IShortcuts {
        requirements: Requirements;
        keys: Keys[];
        constructor(data?: IShortcuts);
        init(_data?: any): void;
        static fromJS(data: any): Shortcuts;
        toJSON(data?: any): any;
    }
    interface IShortcuts {
        requirements: Requirements;
        keys: Keys[];
    }
    class AutoRunEvents implements IAutoRunEvents {
        requirements: Requirements;
        events: Events[];
        constructor(data?: IAutoRunEvents);
        init(_data?: any): void;
        static fromJS(data: any): AutoRunEvents;
        toJSON(data?: any): any;
    }
    interface IAutoRunEvents {
        requirements: Requirements;
        events: Events[];
    }
    class ContextMenus implements IContextMenus {
        requirements: Requirements;
        menus: Menus[];
        constructor(data?: IContextMenus);
        init(_data?: any): void;
        static fromJS(data: any): ContextMenus;
        toJSON(data?: any): any;
    }
    interface IContextMenus {
        requirements: Requirements;
        menus: Menus[];
    }
    class Alternatives implements IAlternatives {
        requirements: Requirements;
        prefer: any;
        hide: any;
        constructor(data?: IAlternatives);
        init(_data?: any): void;
        static fromJS(data: any): Alternatives;
        toJSON(data?: any): any;
    }
    interface IAlternatives {
        requirements: Requirements;
        prefer: any;
        hide: any;
    }
    class Subtitle implements ISubtitle {
        constructor(data?: ISubtitle);
        init(_data?: any): void;
        static fromJS(data: any): Subtitle;
        toJSON(data?: any): any;
    }
    interface ISubtitle {
    }
    class AlternateNames implements IAlternateNames {
        constructor(data?: IAlternateNames);
        init(_data?: any): void;
        static fromJS(data: any): AlternateNames;
        toJSON(data?: any): any;
    }
    interface IAlternateNames {
    }
    class BrandBarText implements IBrandBarText {
        constructor(data?: IBrandBarText);
        init(_data?: any): void;
        static fromJS(data: any): BrandBarText;
        toJSON(data?: any): any;
    }
    interface IBrandBarText {
    }
    class TargetWindow implements ITargetWindow {
        constructor(data?: ITargetWindow);
        init(_data?: any): void;
        static fromJS(data: any): TargetWindow;
        toJSON(data?: any): any;
    }
    interface ITargetWindow {
    }
    class OrgWide implements IOrgWide {
        name: string;
        type: OrgWideType;
        constructor(data?: IOrgWide);
        init(_data?: any): void;
        static fromJS(data: any): OrgWide;
        toJSON(data?: any): any;
    }
    interface IOrgWide {
        name: string;
        type: OrgWideType;
    }
    class ResourceSpecific implements IResourceSpecific {
        name: string;
        type: ResourceSpecificType;
        constructor(data?: IResourceSpecific);
        init(_data?: any): void;
        static fromJS(data: any): ResourceSpecific;
        toJSON(data?: any): any;
    }
    interface IResourceSpecific {
        name: string;
        type: ResourceSpecificType;
    }
    enum Scopes {
        Mail = "mail",
        Workbook = "workbook",
        Document = "document",
        Presentation = "presentation"
    }
    class Capabilities implements ICapabilities {
        name: string;
        minVersion: string;
        maxVersion: string;
        constructor(data?: ICapabilities);
        init(_data?: any): void;
        static fromJS(data: any): Capabilities;
        toJSON(data?: any): any;
    }
    interface ICapabilities {
        name: string;
        minVersion: string;
        maxVersion: string;
    }
    enum Platforms {
        Windows = "windows",
        Mac = "mac",
        Web = "web",
        Ios = "ios",
        Android = "android"
    }
    enum FormFactors {
        Desktop = "desktop",
        Tablet = "tablet",
        Phone = "phone"
    }
    class Code implements ICode {
        page: string;
        script: string;
        constructor(data?: ICode);
        init(_data?: any): void;
        static fromJS(data: any): Code;
        toJSON(data?: any): any;
    }
    interface ICode {
        page: string;
        script: string;
    }
    class Actions implements IActions {
        id: string;
        type: string;
        displayName: string;
        view: string;
        constructor(data?: IActions);
        init(_data?: any): void;
        static fromJS(data: any): Actions;
        toJSON(data?: any): any;
    }
    interface IActions {
        id: string;
        type: string;
        displayName: string;
        view: string;
    }
    class Functions implements IFunctions {
        id: string;
        name: string;
        description: string;
        parameters: Parameters[];
        result: Result;
        stream: boolean;
        volatile: boolean;
        cancelable: boolean;
        requiresAddress: boolean;
        requiresParameterAddress: boolean;
        constructor(data?: IFunctions);
        init(_data?: any): void;
        static fromJS(data: any): Functions;
        toJSON(data?: any): any;
    }
    interface IFunctions {
        id: string;
        name: string;
        description: string;
        parameters: IParameters[];
        result: IResult;
        stream: boolean;
        volatile: boolean;
        cancelable: boolean;
        requiresAddress: boolean;
        requiresParameterAddress: boolean;
    }
    class FunctionSettings implements IFunctionSettings {
        namespace: Namespace;
        allowErrorForDataTypeAny: boolean;
        allowRichDataForDataTypeAny: boolean;
        constructor(data?: IFunctionSettings);
        init(_data?: any): void;
        static fromJS(data: any): FunctionSettings;
        toJSON(data?: any): any;
    }
    interface IFunctionSettings {
        namespace: INamespace;
        allowErrorForDataTypeAny: boolean;
        allowRichDataForDataTypeAny: boolean;
    }
    enum Contexts {
        Default = "default",
        ReadMail = "readMail",
        ComposeMail = "composeMail",
        AppointmentOrganizer = "appointmentOrganizer",
        AppointmentAttendee = "appointmentAttendee"
    }
    class Tabs implements ITabs {
        builtInTabId: string;
        id: string;
        label: string;
        position: Position;
        groups: Groups[];
        constructor(data?: ITabs);
        init(_data?: any): void;
        static fromJS(data: any): Tabs;
        toJSON(data?: any): any;
    }
    interface ITabs {
        builtInTabId: string;
        id: string;
        label: string;
        position: Position;
        groups: Groups[];
    }
    class Keys implements IKeys {
        requirements: Requirements;
        key: Key;
        actionId: string;
        constructor(data?: IKeys);
        init(_data?: any): void;
        static fromJS(data: any): Keys;
        toJSON(data?: any): any;
    }
    interface IKeys {
        requirements: Requirements;
        key: Key;
        actionId: string;
    }
    class Key implements IKey {
        defaultKey: string;
        windows: string;
        mac: string;
        web: string;
        constructor(data?: IKey);
        init(_data?: any): void;
        static fromJS(data: any): Key;
        toJSON(data?: any): any;
    }
    interface IKey {
        defaultKey: string;
        windows: string;
        mac: string;
        web: string;
    }
    class Events implements IEvents {
        requirements: Requirements;
        id: string;
        actionId: string;
        options: Options;
        constructor(data?: IEvents);
        init(_data?: any): void;
        static fromJS(data: any): Events;
        toJSON(data?: any): any;
    }
    interface IEvents {
        requirements: Requirements;
        id: string;
        actionId: string;
        options: Options;
    }
    class Menus implements IMenus {
        type: MenusType;
        controls: any[];
        constructor(data?: IMenus);
        init(_data?: any): void;
        static fromJS(data: any): Menus;
        toJSON(data?: any): any;
    }
    interface IMenus {
        type: MenusType;
        controls: any[];
    }
    enum OrgWideType {
        Application = "Application",
        Delegated = "Delegated"
    }
    enum ResourceSpecificType {
        Application = "Application",
        Delegated = "Delegated"
    }
    class Namespace implements INamespace {
        id: string;
        name: string;
        constructor(data?: INamespace);
        init(_data?: any): void;
        static fromJS(data: any): Namespace;
        toJSON(data?: any): any;
    }
    interface INamespace {
        id: string;
        name: string;
    }
    class Position implements IPosition {
        builtInTabId: string;
        align: PositionAlign;
        constructor(data?: IPosition);
        init(_data?: any): void;
        static fromJS(data: any): Position;
        toJSON(data?: any): any;
    }
    interface IPosition {
        builtInTabId: string;
        align: PositionAlign;
    }
    class Groups implements IGroups {
        overriddenByRibbonApi: boolean;
        builtInGroupId: string;
        id: string;
        label: string;
        icons: Icons[];
        controls: Controls[];
        constructor(data?: IGroups);
        init(_data?: any): void;
        static fromJS(data: any): Groups;
        toJSON(data?: any): any;
    }
    interface IGroups {
        overriddenByRibbonApi: boolean;
        builtInGroupId: string;
        id: string;
        label: string;
        icons: Icons[];
        controls: Controls[];
    }
    class Options implements IOptions {
        sendMode: string;
        constructor(data?: IOptions);
        init(_data?: any): void;
        static fromJS(data: any): Options;
        toJSON(data?: any): any;
    }
    interface IOptions {
        sendMode: string;
    }
    enum MenusType {
        Cell = "cell",
        Text = "text"
    }
    class Parameters implements IParameters {
        name: string;
        description: string;
        type: string;
        dimensionality: string;
        constructor(data?: IParameters);
        init(_data?: any): void;
        static fromJS(data: any): Parameters;
        toJSON(data?: any): any;
    }
    interface IParameters {
        name: string;
        description: string;
        type: string;
        dimensionality: string;
    }
    class Result implements IResult {
        dimensionality: string;
        constructor(data?: IResult);
        init(_data?: any): void;
        static fromJS(data: any): Result;
        toJSON(data?: any): any;
    }
    interface IResult {
        dimensionality: string;
    }
    enum PositionAlign {
        After = "after",
        Before = "before"
    }
    class Icons implements IIcons {
        size: number;
        file: string;
        constructor(data?: IIcons);
        init(_data?: any): void;
        static fromJS(data: any): Icons;
        toJSON(data?: any): any;
    }
    interface IIcons {
        size: number;
        file: string;
    }
    class Controls implements IControls {
        overriddenByRibbonApi: boolean;
        builtInControlId: string;
        id: string;
        type: ControlsType;
        label: string;
        enabled: boolean;
        icons: Icons[];
        supertip: Supertip;
        actionId: string;
        items: Controls[];
        constructor(data?: IControls);
        init(_data?: any): void;
        static fromJS(data: any): Controls;
        toJSON(data?: any): any;
    }
    interface IControls {
        overriddenByRibbonApi: boolean;
        builtInControlId: string;
        id: string;
        type: ControlsType;
        label: string;
        enabled: boolean;
        icons: Icons[];
        supertip: Supertip;
        actionId: string;
        items: Controls[];
    }
    enum ControlsType {
        Button = "button",
        Menu = "menu"
    }
    class Supertip implements ISupertip {
        title: string;
        description: string;
        constructor(data?: ISupertip);
        init(_data?: any): void;
        static fromJS(data: any): Supertip;
        toJSON(data?: any): any;
    }
    interface ISupertip {
        title: string;
        description: string;
    }
}
declare namespace OSF {
    enum ExtendedManifestSupportTokens {
        Requirements = "RequirementsToken",
        Locale = "LocaleToken",
        TokenReplaceRegex = "\\$\\{token\\.(\\w+)\\}",
        ResourceTokenRegEx = "^\\$\\{resource\\.([A-Za-z0-9_-]+)\\}$",
        ExtendedManifestLoggingPrefix = "Extended Manifest",
        ExtendedManifestResourcesLoggingPrefix = "Extended Manifest Resources",
        ActionIdMaxLength = 32,
        ActionNameMaxLength = 125
    }
    enum SdxAssetIds {
        Ideas = "fa000000029",
        ExperimentationSdx = "fa000000059",
        CopilotChatExcel = "fa000000124",
        CopilotChatWord = "fa000000125",
        CopilotChatOneNote = "fa000000128",
        CopilotChatPpt = "fa000000129"
    }
    const DefaultAllowDisplayCaptureSdxIds: string;
    enum HostFeatureGateFlags {
        None = 0,
        Enable3rdPartySetAppContextInIFrameName = 2
    }
    let MaxAppContextLength: number;
    enum HostInfoFlags {
        None = 0,
        SharedApp = 1,
        CustomFunction = 2,
        ProtectedDocDisable = 4,
        ExperimentJsEnabled = 8,
        PublicAddin = 16,
        IsMos = 64,
        IsMonarch = 128
    }
    enum ManifestRequestTypes {
        Manifest = 1,
        Etoken = 2,
        Both = 3
    }
    enum ActivationTypes {
        V1Enabled = 0,
        V1S2SEnabled = 1,
        V2Enabled = 2,
        V2S2SEnabled = 3
    }
    enum InvokeResultCode {
        "S_OK" = 0,
        "E_REQUEST_TIME_OUT" = -2147471590,
        "E_USER_NOT_SIGNED_IN" = -2147208619,
        "E_CATALOG_ACCESS_DENIED" = -2147471591,
        "E_CATALOG_REQUEST_FAILED" = -2147471589,
        "E_OEM_NO_NETWORK_CONNECTION" = -2147208640,
        "E_PROVIDER_NOT_REGISTERED" = -2147208617,
        "E_OEM_CACHE_SHUTDOWN" = -2147208637,
        "E_OEM_REMOVED_FAILED" = -2147209421,
        "E_CATALOG_NO_APPS" = -1,
        "E_USER_NO_MAILBOX" = -2,
        "E_GENERIC_ERROR" = -1000,
        "S_HIDE_PROVIDER" = 10
    }
    enum ErrorStatusCodes {
        E_OEM_EXTENSION_NOT_ENTITLED = 2147758662,
        E_MANIFEST_SERVER_UNAVAILABLE = 2147758672,
        E_USER_NOT_SIGNED_IN = 2147758677,
        E_MANIFEST_DOES_NOT_EXIST = 2147758673,
        E_OEM_EXTENSION_KILLED = 2147758660,
        E_OEM_OMEX_EXTENSION_KILLED = 2147758686,
        E_MANIFEST_UPDATE_AVAILABLE = 2147758681,
        S_OEM_EXTENSION_TRIAL_MODE = 275013,
        E_OEM_EXTENSION_WITHDRAWN_FROM_SALE = 2147758690,
        E_TOKEN_EXPIRED = 2147758675,
        E_TRUSTCENTER_CATALOG_UNTRUSTED_ADMIN_CONTROLLED = 2147757992,
        E_MANIFEST_REFERENCE_INVALID = 2147758678,
        S_USER_CLICKED_BUY = 274205,
        E_MANIFEST_INVALID_VALUE_FORMAT = 2147758654,
        E_TRUSTCENTER_MOE_UNACTIVATED = 2147757996,
        S_OEM_EXTENSION_FLAGGED = 275040,
        S_OEM_EXTENSION_DEVELOPER_WITHDRAWN_FROM_SALE = 275041,
        E_BROWSER_VERSION = 2147758194,
        E_TRUSTCENTER_APP_BLOCKED_FOR_MINOR = -2147209295,
        E_PRIVACY_SERVICE_DISABLED_ADMIN = 2147758792,
        WAC_AgaveUnsupportedStoreType = 1041,
        WAC_AgaveActivationError = 1042,
        WAC_ActivateAttempLoading = 1043,
        WAC_HTML5IframeSandboxNotSupport = 1044,
        WAC_AgaveRequirementsErrorOmex = 1045,
        WAC_AgaveRequirementsError = 1046,
        WAC_AgaveOriginCheckError = 1047,
        WAC_AgavePermissionCheckError = 1048,
        WAC_AgaveHostHandleRequestError = 1049,
        WAC_AgaveUnknownClientAppStatus = 1050,
        WAC_AgaveAnonymousProxyCreationError = 1051,
        WAC_AgaveOsfControlActivationError = 1052,
        WAC_AgaveEntitlementRequestFailure = 1053,
        WAC_AgaveManifestRequestFailure = 1054,
        WAC_AgaveManifestAndEtokenRequestFailure = 1055,
        WAC_FirstPartyAddInListRequestFailure = 1056,
        WAC_SDX_DMSRequestFailed = 1058,
        WAC_SDX_AssetIdNotInDMSResponse = 1059,
        WAC_CustomFunctionsRegistrationError = 1060,
        WAC_WopiHostCheckStatusNotTrusted = 1061,
        WAC_WopiHostCheckStatusNotReady = 1062,
        WAC_AgaveIRMBlockError = 1063
    }
    enum BWsaConfig {
        defaultMaxStreamRows = 1000
    }
    enum BWsaStreamTypes {
        Static = 1
    }
    enum SQMDataPoints {
        DATAID_APPSFOROFFICEUSAGE = 10595,
        DATAID_APPSFOROFFICENOTIFICATIONS = 10942
    }
    enum ClientAppInfoReturnType {
        urlOnly = 0,
        etokenOnly = 1,
        both = 2
    }
    enum HostFrameTrustState {
        NotInitialized = 0,
        NotImplemented = 1,
        NotReady = 2,
        Exempted = 3,
        NotTrusted = 4,
        Trusted = 5
    }
    enum UpnCheckCode {
        NotSet = 0,
        Match = 1,
        NotMatch = 2
    }
    enum ProxyCallStatusCode {
        Succeeded = 1,
        Failed = 0,
        ProxyNotReady = -1
    }
    enum NotificationUxPerfMarker {
        RenderLoadingAnimationStart = "Agave.NotificationUx.RenderLoadingAnimationStart",
        RenderLoadingAnimationEnd = "Agave.NotificationUx.RenderLoadingAnimationEnd",
        RemoveLoadingAnimationStart = "Agave.NotificationUx.RemoveLoadingAnimationStart",
        RemoveLoadingAnimationEnd = "Agave.NotificationUx.RemoveLoadingAnimationEnd",
        RenderStage1Start = "Agave.NotificationUx.RenderStage1Start",
        RenderStage1End = "Agave.NotificationUx.RenderStage1End",
        RemoveStage1Start = "Agave.NotificationUx.RemoveStage1Start",
        RemoveStage1End = "Agave.NotificationUx.RemoveStage1End",
        RenderStage2Start = "Agave.NotificationUx.RenderStage2Start",
        RenderStage2End = "Agave.NotificationUx.RenderStage2End",
        RemoveStage2Start = "Agave.NotificationUx.RemoveStage2Start",
        RemoveStage2End = "Agave.NotificationUx.RemoveStage2End"
    }
    enum OsfControlActivationPerfMarker {
        ActivationStart = "Agave.AgaveActivationStart",
        ActivationEnd = "Agave.AgaveActivationEnd",
        DeactivationStart = "Agave.AgaveDeactivationStart",
        DeactivationEnd = "Agave.AgaveDeactivationEnd",
        SelectionTimeout = "Agave.AgaveSelectionTimeout"
    }
    enum OsfOfficeExtensionManagerPerfMarker {
        GetEntitlementStart = "Agave.OfficeExtensionManager.GetEntitlementStart",
        GetEntitlementEnd = "Agave.OfficeExtensionManager.GetEntitlementEnd"
    }
    enum FormFactor {
        Default = "DefaultSettings",
        Desktop = "DesktopSettings",
        Tablet = "TabletSettings",
        Phone = "PhoneSettings"
    }
    enum OsfControlTarget {
        Undefined = -1,
        InContent = 0,
        TaskPane = 1,
        Contextual = 2,
        SDXDialog = 3
    }
    enum OfficeAppType {
        ContentApp = 0,
        TaskPaneApp = 1,
        MailApp = 2,
        SDXDialogApp = 3
    }
    enum OmexRemoveAppStatus {
        Failed = 0,
        Success = 1
    }
    enum OmexAuthNStatus {
        NotAttempted = -1,
        CheckFailed = 0,
        Authenticated = 1,
        Anonymous = 2,
        Unknown = 3
    }
    enum OmexEntitlementType {
        Free = "free",
        Trial = "trial",
        Paid = "paid"
    }
    enum OmexTrialType {
        None = 0,
        Office = 1,
        External = 2
    }
    enum OmexState {
        Killed = 0,
        OK = 1,
        Withdrawn = 2,
        Flagged = 3,
        DeveloperWithdrawn = 4
    }
    enum OmexClientAppStatus {
        OK = 1,
        UnknownAssetId = 2,
        KilledAsset = 3,
        NoEntitlement = 4,
        DownloadsExceeded = 5,
        Expired = 6,
        Invalid = 7,
        Revoked = 8,
        ServerError = 9,
        BadRequest = 10,
        LimitedTrial = 11,
        TrialNotSupported = 12,
        EntitlementDeactivated = 13,
        VersionMismatch = 14,
        VersionNotSupported = 15,
        UserIsMinor = 16
    }
    enum ManifestIdIssuer {
        Microsoft = "Microsoft",
        Custom = "Custom"
    }
    enum StoreTypeEnum {
        MarketPlace = 0,
        Catalog = 1,
        SPApp = 2,
        Exchange = 3,
        FileSystem = 4,
        Registry = 5,
        PrivateCatalog = 10,
        HardCodedPreinstall = 11,
        FirstParty = 12,
        Sdx = 14,
        UploadFileDevCatalog = 15,
        WopiCatalog = 16
    }
    enum StoreType {
        OMEX = "omex",
        SPCatalog = "spcatalog",
        SPApp = "spapp",
        Exchange = "exchange",
        FileSystem = "filesystem",
        Registry = "registry",
        InMemory = "inmemory",
        PrivateCatalog = "excatalog",
        HardCodedPreinstall = "hardcodedpreinstall",
        FirstParty = "firstparty",
        UploadFileDevCatalog = "uploadfiledevcatalog",
        Sdx = "sdxcatalog",
        WopiCatalog = "wopicatalog"
    }
    enum OsfControlPageStatus {
        NotStarted = 1,
        Loading = 2,
        Ready = 3,
        FailedHandleRequest = 4,
        FailedOriginCheck = 5,
        FailedPermissionCheck = 6
    }
    enum OsfControlStatus {
        NotActivated = 1,
        Activated = 2,
        AppStoreNotReachable = 3,
        InvalidOsfControl = 4,
        UnsupportedStore = 5,
        UnknownStore = 6,
        ActivationFailed = 7,
        NotSandBoxSupported = 8
    }
    enum OsfControlPermission {
        Restricted = 1,
        ReadDocument = 2,
        WriteDocument = 4,
        ReadItem = 32,
        ReadWriteMailbox = 64,
        ReadAllDocument = 131,
        ReadWriteDocument = 135,
        ReadWriteItem = 256
    }
    enum Capability {
        Mailbox = "Mailbox",
        Document = "Document",
        Workbook = "Workbook",
        Project = "Project",
        Presentation = "Presentation",
        Database = "Database",
        Sway = "Sway",
        Notebook = "Notebook",
        Drawing = "Drawing"
    }
    enum HostCapability {
        Excel = "Workbook",
        Outlook = "Mailbox",
        Access = "Database",
        PowerPoint = "Presentation",
        Word = "Document",
        Sway = "Sway",
        OneNote = "Notebook",
        Visio = "Drawing"
    }
    let getManifestHostType: (hostType: any) => any;
    let getManifestHostTypeFromAppName: (appName: any) => any;
    let getModernAppVerCode: (appName: any) => any;
    let getAppVerCode: (appName: any) => any;
    enum HostPlatform {
        Web = "Web"
    }
    enum ManifestHostType {
        Workbook = "Workbook",
        Document = "Document",
        Presentation = "Presentation",
        Notebook = "Notebook",
        Mailbox = "Mailbox",
        Drawing = "Drawing"
    }
    enum HostType {
        Excel = "Excel",
        Outlook = "Outlook",
        Access = "Access",
        PowerPoint = "PowerPoint",
        Word = "Word",
        Sway = "Sway",
        OneNote = "OneNote",
        Visio = "Visio"
    }
    let OmexAppVersions: {};
    let OmexClientNames: {};
    enum HttpVerb {
        GET = "GET",
        POST = "POST",
        DELETE = "DELETE",
        PUT = "PUT"
    }
    enum PayloadType {
        OfficeAddin = 1,
        MosAcquisition = 2
    }
    enum TitleScope {
        Public = "Public",
        Tenant = "Tenant",
        User = "User"
    }
    enum AcquisitionAcquiredState {
        Acquired = "acquired",
        Unacquired = "unacquired",
        NeedsConsentForUpgrade = "needsconsentforupgrade"
    }
    type MosSupportedElements = "Activities" | "AAD" | "Bots" | "ComposeExtensions" | "ConfigurableTabs" | "Connectors" | "Dynamics" | "ExchangeAddIns" | "Extensions" | "FirstPartyPages" | "GraphConnector" | "LineOfBusiness" | "MeetingExtensionDefinition" | "OfficeAddIns" | "StaticTabs";
    enum VersionOverridesNumber {
        V1_0 = 100,
        V1_1 = 101,
        Max = 102
    }
    enum VersionOverridesNamespace {
        V1_0 = "http://schemas.microsoft.com/office/mailappversionoverrides",
        V1_1 = "http://schemas.microsoft.com/office/mailappversionoverrides/1.1"
    }
    enum ParserStrings {
        DesktopFormFactor = "DesktopFormFactor",
        Form = "Form",
        FormSettings = "FormSettings",
        MobileFormFactor = "MobileFormFactor",
        OOfficeApp = "o:OfficeApp",
        RequestedHeight = "RequestedHeight",
        Resources = "Resources",
        SourceLocation = "SourceLocation",
        VersionOverrides = "VersionOverrides",
        Mailappor = "mailappor:"
    }
    enum PowerPointSlideShowRole {
        Attendee = 0,
        Presenter = 1,
        PrivateViewing = 2
    }
    enum PowerPointSlideShowUIHostType {
        'UnifiedApp' = 0,
        'MSTeams' = 1,
        'TeamsiOS' = 2,
        'TeamsAndroid' = 3,
        'Unknown' = 4
    }
}
declare module OfficeExt {
    class ManifestUtil {
        static versionLessThan(version1: any, version2: any): boolean;
        static ParseManifest(para: any, uiLocale: any, correlation?: string): Manifest;
        static constructAddInId(solutionId: string, version: string, storeTypeName: string, storeLocation: string): string;
        private static GetStoreTypeId;
        static GetStoreTypeName(storeType: string): string;
    }
    class AsyncUtil {
        static Cache: {
            [key: string]: string;
        };
        static NextCheckExpiry: number;
        static failed<TResult, TComplete>(result: IAsyncResult<TResult>, onComplete: (asyncResult: IAsyncResult<TComplete>) => void, value?: TComplete): boolean;
        static retry<T>(operation: () => Promise<T>, options?: any): Promise<T>;
        static limitRate(func: Function, wait: number): Function;
        static withCache(cacheKey: string, options: {
            forceUpdateCache?: boolean;
            maxAgeInSecs?: number;
            useStaleCache?: boolean;
        }, operation: () => Promise<string>): Promise<{
            cacheType: string;
            value: string;
        }>;
        static fetch(url: string, options?: any): Promise<any>;
    }
}
declare namespace OSF {
    var RibbonControlIdMap: any;
    var RibbonGroupIdMap: any;
    var RibbonGroupIdMapMLR: any;
    var RibbonGroupIdMapCommonMLR: any;
    var RibbonGroupIdMapCommonSLR: any;
}
declare namespace OSF {
    function SelectSingleNode(xmlProcessor: OSF.XmlProcessor, node: any, path: Array<string>, isStrictPath?: boolean): any;
    function SelectChildNodes(xmlProcessor: OSF.XmlProcessor, name: string, node: any, path: Array<string>, isStrictPath?: boolean): any;
    function GetVersionOverridesString(versionOverridesNumber: OSF.VersionOverridesNumber): string;
    function GetVersionOverridesPath(xmlProcessor: OSF.XmlProcessor, namespace: string, versionOverridesNumber: OSF.VersionOverridesNumber): string[];
    function GetVersionOverridesNamespace(namespace: string, versionOverridesNumber?: OSF.VersionOverridesNumber): string;
    function GetNamespaceOrDefault(namespace: string): string;
}
declare var otel: any;
declare module OfficeExt {
    module Parser {
        export class ManifestResourceManager {
            Images: {};
            Urls: {};
            LongStrings: {};
            ShortStrings: {};
            AllLocaleImages: {};
            AllLocaleUrls: {};
            AllLocaleLongStrings: {};
            AllLocaleShortStrings: {};
            namespace: string;
            constructor(context: ParsingContext, namespace?: string, versionOverridesNumber?: OSF.VersionOverridesNumber);
            private parseCollection;
        }
        export class ParsingContext {
            hostType: string;
            formFactor: string;
            entitlement: AddinEntitlement;
            manifest: Manifest;
            resources: ManifestResourceManager;
            officeGroupCount: number;
            officeControlCount: number;
            insertBefore: string;
            insertAfter: string;
            namespace: string;
            constructor(hostType: string, formFactor: string, entitlement: AddinEntitlement, manifest: Manifest, namespace?: string, versionOverridesNumber?: OSF.VersionOverridesNumber);
            shouldParseNode(node: any): boolean;
            shouldParseNodeFromMos(node: any): boolean;
            parseIdRequired(node: any): string;
            parseIdRequiredFromMos(node: any): string;
            parseLabel(node: any): string;
            parseLabelRequired(node: any): string;
            parseLabelRequiredFromMos(node: Mos.Tabs | Mos.Groups | Mos.Controls): string;
            parseResId(node: any): string;
            parseType(node: any): string;
            parseRequiredSuperTip(node: any): SuperTip;
            parseRequiredSupertipFromMos(node: any): SuperTip;
            parseSuperTip(node: any): SuperTip;
            parseSupertipFromMos(control: Mos.Controls): SuperTip;
            parseRequiredIcon(node: any): {};
            parseRequiredIconFromMos(node: Mos.Groups | Mos.Controls): {};
            parseOptionalIcon(node: any): {};
            parseOptionalIconFromMos(node: Mos.Groups): {};
            parseIcon(node: any): {};
            parseIconFromMos(node: Mos.Groups | Mos.Controls): {};
            parseIconResId(node: any): {};
            AddResourceMapAndGetIdHelper(resourceValue: string, resourceMap: {}): void;
            checkRequiredGroupIcons(icons: any): void;
            parseMultipleChildControls(childNodeNames: string[], node: any, parser: (context: ParsingContext, node: any) => any): any[];
            parseMultipleChildControlsFromMos(childNodeNames: string[], node: any, parseControlFromMos: (context: ParsingContext, node: Mos.Groups | Mos.Controls) => any): any[];
            parseChildControls(childNodeName: string, node: any, parser: (context: ParsingContext, node: any) => any): any[];
            parseChildControlsFromMos(childNodeName: string, contextMenu: Mos.ContextMenus, parser: (context: ParsingContext, node: any) => any): any[];
            parseControls(nodes: any[], parser: (context: ParsingContext, node: any) => any): any[];
            parseControlsFromMos(nodes: any[], parseControlFromMos: (context: ParsingContext, node: any) => any): any[];
            parseGroupUnderTab(node: any): RibbonGroup | OfficeGroup;
            parseGroupUnderTabFromMos(group: Mos.Groups): RibbonGroup | OfficeGroup;
            parseControlInGroup(node: any): any;
            parseControlInGroupFromMos(control: Mos.Controls): UIControlNode;
            parseMenuItem(node: any): any;
            parseMenuItemFromMos(node: Mos.Controls): UIControlNode;
            parseLocaleAwareSettingsAndGetValue(node: any, allLocaleMap?: {}): any;
            selectSingleNode(node: any, path: Array<string>): any;
            selectChildNodes(name: string, node: any, path: Array<string>): any;
            getSingleNodeValue(nodeName: string, parentNode: any): string;
            getResourceByNode(resources: {}, resourceNode: any): any;
            getImageResource(resourceNode: any): any;
            getUrlResource(resourceNode: any): any;
            getLongString(resourceNode: any): any;
            getShortString(resourceNode: any): any;
            getContextMenuType(menu: Mos.Menus): string;
        }
        interface UIControlBuildingContext {
            functionFile: string;
            actionBuilder: ActionBuilder;
            controlBuilder: UIControlBuilder;
        }
        class AddinBuildingContext {
            functionFile: string;
            builder: AddinBuilder;
            multipleCustomTabsEnabled: boolean;
            constructor(functionFile: string, builder: AddinBuilder, multipleCustomTabsEnabled?: boolean);
        }
        interface NodeParser {
            parse(context: ParsingContext, node: any): void;
            parseFromMos(context: ParsingContext, node: any): void;
        }
        interface ExtensionPoint extends NodeParser {
            type: string;
            apply(context: AddinBuildingContext): void;
        }
        interface UIControlNode extends NodeParser {
            apply(context: UIControlBuildingContext): void;
        }
        class GetStartedNode implements NodeParser {
            title: string;
            description: string;
            learnMoreUrl: string;
            namespace: string;
            constructor(namespace?: string);
            parse(context: ParsingContext, node: any): void;
            parseFromMos(context: ParsingContext, getStartedMessage: Mos.GetStartedMessages): void;
        }
        class UIEntityBase implements UIEntity, NodeParser {
            id: string;
            label: string;
            parse(context: ParsingContext, node: any): void;
            parseFromMos(context: ParsingContext, node: Mos.Tabs | Mos.Groups | Mos.Controls): void;
        }
        export class MenuControl extends UIEntityBase implements UIControlNode, UIControl {
            controlType: string;
            children: UIControlNode[];
            icon: {};
            iconResId: {};
            superTip: SuperTip;
            namespace: string;
            labelResId: string;
            constructor(controlType?: string, namespace?: string);
            apply(context: UIControlBuildingContext): void;
            parse(context: ParsingContext, node: any): void;
            parseFromMos(context: ParsingContext, node: Mos.Controls): void;
        }
        class RibbonGroup extends UIEntityBase {
            icon: {};
            iconResId: {};
            children: UIControlNode[];
            groupType: string;
            hostType: string;
            labelResId: string;
            constructor(hostType: string);
            parse(context: ParsingContext, node: any): void;
            parseFromMos(context: ParsingContext, group: Mos.Groups): void;
            apply(context: AddinBuildingContext): void;
        }
        class OfficeGroup extends RibbonGroup {
            mlrId: string;
            constructor(hostType: string);
            parse(context: ParsingContext, node: any): void;
            parseFromMos(context: ParsingContext, group: Mos.Groups): void;
            apply(context: AddinBuildingContext): void;
        }
        export class CustomFunctionsExtensionPoint implements ExtensionPoint {
            type: string;
            namespaceResId: string;
            scriptResId: string;
            pageResId: string;
            metadataResId: string;
            constructor(type: string);
            apply(context: AddinBuildingContext): void;
            parse(context: ParsingContext, node: any): void;
            parseFromMos(context: ParsingContext, node: any): void;
            _parseSourceLocationResId(context: ParsingContext, node: any): string;
        }
        export class VersionOverrides implements Addin {
            private extensionManifest;
            private extensionEntitlement;
            type: string;
            description: string;
            getStartedNode: GetStartedNode;
            functionFile: string;
            functionFileResid: string;
            ExtensionPoints: ExtensionPoint[];
            cacheableUrls: Array<string>;
            resources: ManifestResourceManager;
            namespace: string;
            supportsSharedFolders: boolean;
            constructor(namespace?: string);
            cacheableResources(): Array<string>;
            apply(builder: AddinBuilder, errorManager: AddinCommandsErrorManager, multipleCustomTabsEnabled?: boolean): void;
            parse(context: ParsingContext, overridesNode: any): void;
            parseFromMos(context: ParsingContext): void;
        }
        export class AddinCommandsManifestParser {
            hostType: string;
            formFactor: string;
            namespace: string;
            constructor(hostType: any, formFactor: any, namespace?: string);
            parseExtensions(entitlement: AddinEntitlement, manifest: Manifest, errorManager: AddinCommandsErrorManager, versionOverridesNumber?: OSF.VersionOverridesNumber): Addin;
        }
        export {};
    }
}
declare enum RuntimeLifeTime {
    Short = 0,
    Long = 1
}
declare namespace OSF {
    namespace Manifest {
        class RuntimeOverride {
            Resid: string;
            Type: string;
        }
        let Runtime: () => void;
        class HostApp {
            _appName: any;
            _minVersion: any;
            constructor(appName: any);
            getAppName(): any;
            getMinVersion(): any;
            _setMinVersion(minVersion: any): void;
        }
        class ExtensionSettings {
            _defaultHeight: any;
            _defaultWidth: any;
            _sourceLocations: any;
            constructor();
            getDefaultHeight(): any;
            getDefaultWidth(): any;
            getSourceLocations(): any;
            _addSourceLocation(locale: any, value: any): void;
            _setDefaultWidth(defaultWidth: any): void;
            _setDefaultHeight(defaultHeight: any): void;
        }
        class WebAppInfoAuthorization {
            _resource: any;
            _scopes: any;
            constructor();
            getResource(): any;
            getScopes(): any;
        }
        class EquivalentAddins {
            _equivalentAddins: any;
            constructor();
            isXLLCompatible(): boolean;
            add(equivalentAddin: any): void;
            getEquivalentAddins(): any;
        }
        class EquivalentAddin {
            _progId: any;
            _displayName: any;
            _fileName: any;
            _type: any;
            constructor();
            getProgId(): any;
            getDisplayName(): any;
            getFileName(): any;
            getType(): any;
            isXLLCompatible(): boolean;
            isComAddin(): boolean;
        }
        class Runtimes {
            _runtimes: any;
            constructor();
            getSharedRuntime(resid: any): any;
            add(runtime: any): void;
            getRuntimes(): any;
        }
        class Manifest {
            _UILocale: any;
            _allowSnapshot: any;
            _alternateId: any;
            _appDomains: any;
            _capabilities: any;
            _defaultLocale: any;
            _descriptions: any;
            _displayNames: any;
            _equivalentAddins: any;
            _extendedOverrides: any;
            _extendedOverridesTokens: any;
            _extensionSettings: any;
            _highResolutionIconUrls: any;
            _hosts: any;
            _hostsXml: any;
            _iconUrls: any;
            _supportUrls: any;
            _id: any;
            _idIssuer: any;
            _inMemoryEToken: any;
            _manifestSchemaVersion: any;
            _manifestSourceLocationOverrides: any;
            _permissions: any;
            _providerName: any;
            _requirements: any;
            _requirementsXml: any;
            _ribbonExtensionControls: any;
            _signature: any;
            _target: any;
            _version: any;
            _versionOverrides: any;
            _webApplicationAuthorizations: any;
            _webApplicationId: any;
            _webApplicationMsaId: any;
            _webApplicationResource: any;
            _webApplicationScopes: any;
            _xmlProcessor: any;
            _localesSeen: any;
            _payloadType: OSF.PayloadType;
            _solutionRef?: OfficeExt.OsfSolutionReference;
            constructor(para: any, uiLocale: any, payloadType?: any, solutionReference?: any);
            getNodeXsiType(node: any): string;
            getSourceLocationOverrideByResourceId(resourceId: any): any;
            getManifestSchemaVersion(): any;
            getMarketplaceID(): any;
            getMarketplaceVersion(): any;
            getDefaultLocale(): any;
            getLocale(): any;
            getProviderName(): any;
            getIdIssuer(): any;
            getAlternateId(): any;
            getSignature(): any;
            getCapabilities(): any;
            getDisplayName(locale: any): any;
            getDefaultDisplayName(): any;
            getDescription(locale: any): any;
            getDefaultDescription(): any;
            getIconUrl(locale: any): any;
            getDefaultIconUrl(): any;
            getSupportUrl(locale: any): any;
            getDefaultSupportUrl(): any;
            getSourceLocation(locale: any, formFactor: any): any;
            getDefaultSourceLocation(formFactor: any): any;
            getDefaultWidth(formFactor?: any): any;
            getDefaultHeight(formFactor?: any): any;
            getTarget(): any;
            getOmexTargetCode(): 1 | 0 | 2 | 3;
            getPermission(): any;
            hasPermission(permissionNeeded: any): boolean;
            getHosts(): any;
            getHostsXml(): any;
            getPayloadType(): PayloadType;
            getRequirements(): any;
            getRequirementsXml(): any;
            getHighResolutionIconUrl(locale: any): any;
            getDefaultHighResolutionIconUrl(): any;
            getAppDomains(): any;
            getInMemoryEToken(): any;
            isAllowSnapshot(): any;
            addManifestUrl(manifestUrl: any): void;
            getWebApplicationResource(): any;
            getWebApplicationId(): any;
            getWebApplicationMsaId(): any;
            getWebApplicationScopes(): any;
            getWebApplicationAuthorizations(): any;
            getEquivalentAddins(): any;
            isXLLCompatible(): any;
            isSSOAddin(): boolean;
            containsAddinCommands(manifestHostType: any): boolean;
            getRibbonExtensionControlMap(): any;
            getExtendedOverrides(): any;
            getExtendedOverridesTokens(): any;
            containsCustomFunctions(manifestHostType: any): boolean;
            containsCustomFunctionsForAppHost(appHostType: any): boolean;
            getSharedRuntimeForCustomFunctions(manifestHostType: any): any;
            getSharedRuntimeForTaskpane(manifestHostType: any, controlId: any): any;
            getTaskpaneIdByRuntimeId(manifestHostType: any, runtimeId: any): any;
            getSharedRuntimeById(manifestHostType: any, runtimeId: any): any;
            getSharedRuntimeForAppCmdsExecuteFunction(manifestHostType: any): any;
            getSharedRuntimeId(manifestHostType: any, isForUiLess: any, controlId: any): any;
            sharedRuntimeHasShortLifeTime(manifestHostType: any, resid: any): boolean;
            complementVersion(version: string): string;
            isForOfficeAppManifest(): boolean;
            converterLogging(): boolean;
            getSolutionReference(): OfficeExt.OsfSolutionReference;
            addLocaleSeen(locale: string): void;
            _iterateAppCommandShowTaskpaneControls(showTaskpaneControls: any, callback: any): void;
            _generateRibbonExtensionControlMap(manifestHostType: any): any;
            _addRibbonControlsToMap(parentControl: any): void;
            _retrieveAppCommandShowTaskpaneControls(manifestHostType: any): any[];
            _getShowTaskpaneControlsFromControlsParent(controlsParent: any, appCommandShowTaskpaneControls: any): void;
            _validateShowTaskpaneSharedRuntime(manifestHostType: any): void;
            _getDefaultValue(obj: any): any;
            _getExtensionSetting(formFactor: any): any;
            _addDisplayName(locale: any, value: any): void;
            _addDescription(locale: any, value: any): void;
            _addIconUrl(locale: any, value: any): void;
            _addSupportUrl(locale: any, value: any): void;
            _fixLocaleCasing(locale: string): string;
            _parseLocaleAwareSettings(localeAwareNode: any, addCallback: any): void;
            _parseBooleanNode(node: any): boolean;
            _parseIdIssuer(node: any): any;
            _parseCapabilities(nodes: any): any[];
            _parsePermission(capabilityNode: any): any;
            _parseExtensionSettings(): void;
            _parseHosts(hostsNode: any): any[];
            _parseWebApplicationInfo(obj: any, parentNode: any, nodeNamespace: string): void;
            _parseWebApplicationScopes(webApplicationScopesNode: any, nodeNamespace: any): any[];
            _parseWebAppInfoAuthorizations(webAppInfoAuthsNode: any, nodeNamespace: any): any[];
            _parseRequirements(requirementsNode: any, nodeNamespace?: string): {
                sets: any[];
                methods: any[];
            };
            _parseSets(setsNode: any, nodeNamespace?: string): any[];
            _parseMethods(methodsNode: any, nodeNamespace?: string): any[];
            _parseSourceLocationOverrides(versionOverridesNode: any): {};
            _parseAppDomains(appDomainsNode: any): any[];
            _parseRuntimes(runtimesNode: any): Runtimes;
            _parseRuntime(runtimeNode: any): any;
            _parseEquivalentAddins(equivalentAddinsNode: any, nodeNamespace: any): EquivalentAddins;
            _parseEquivalentAddin(equivalentAddinNode: any, nodeNamespace: any): EquivalentAddin;
            _parseExtendedOverrides(extendedOverridesNode: any): void;
            _addHighResolutionIconUrl(locale: any, url: any): void;
            _isAddinCommandsManifest(manifestHostType: any): boolean;
            _getCurrentHostTypeNode(manifestHostType: any): any;
            _getEntitlement(solRef: OfficeExt.OsfSolutionReference): OfficeExt.AddinEntitlement;
        }
    }
}
declare namespace OSF {
    namespace Manifest {
        class FormSetting {
            SourceLocation: string[];
            RequestedHeight: number;
        }
        class OfficeAppManifest extends OSF.Manifest.Manifest {
            _namespace: string;
            _hostType: string;
            _formSettings: FormSetting[][];
            _disableEntityHighlighting?: boolean;
            _converterLogging?: boolean;
            constructor(payload: string, uiLocale: string, converterLogging?: boolean, solRef?: OfficeExt.OsfSolutionReference);
            isForOfficeAppManifest(): boolean;
            converterLogging(): boolean;
            _parseExtensionSettings(): void;
            _parseFormSettings(): void;
            _parseDisableEntityHighlighting(): void;
            _parseOverrideCore(): void;
            _parseRuntimesAndVersionOverrides(versionOverridesNode: any, versionOverridesNumber: OSF.VersionOverridesNumber): void;
            _parseExtendedPermissions(extendedPermissionsNode: any, nodeNamespace: string): string[];
            _parseRuntimes(runtimesNode: any, nodeNamespace?: string): OSF.Manifest.Runtimes;
            _parseRuntime(runtimeNode: any, nodeNamespace?: string): any;
            _parseVersionOverridesFormFactor(hostType: string, versionOverridesNumber: OSF.VersionOverridesNumber, formFactor: string): any;
            _getVersionOverrides(versionOverridesNumber: OSF.VersionOverridesNumber): any;
            getLocalesSeen(): any;
            getFormSettings(): FormSetting[][];
            getDisableEntityHighlighting(): boolean | undefined;
            getVersionOverridesDescription(versionOverridesNumber: OSF.VersionOverridesNumber): string | undefined;
            getVersionOverridesRequirements(versionOverridesNumber: OSF.VersionOverridesNumber): any;
            getWebApplicationInfo(versionOverridesNumber: OSF.VersionOverridesNumber): any;
            getConnectedServiceControlsScopes(versionOverridesNumber: OSF.VersionOverridesNumber): string[] | undefined;
            getExtendedPermissions(versionOverridesNumber: OSF.VersionOverridesNumber): string[] | undefined;
            getRuntimes(versionOverridesNumber: OSF.VersionOverridesNumber): any;
            getExtensionPoints(versionOverridesNumber: OSF.VersionOverridesNumber, formFactor: string): any;
            getFunctionFileResid(versionOverridesNumber: OSF.VersionOverridesNumber, formFactor: string): string;
            getResources(versionOverridesNumber: OSF.VersionOverridesNumber): object;
            getSupportsSharedFolders(versionOverridesNumber: OSF.VersionOverridesNumber, formFactor: string): boolean;
        }
    }
}
declare namespace Mos {
    class AppMetadata extends OSF.Manifest.Manifest {
        _acquisition: Mos.Acquisition;
        _actualPayload: OSF.PayloadType;
        _hostType: string;
        _hostInfo: OfficeExt.IHostContextInfo;
        static fromString(payload: string, payloadType: OSF.PayloadType, locale: string, solutionRef?: OfficeExt.OsfSolutionReference): AppMetadata;
        static fromAcquisition(acquisition: Mos.Acquisition, locale: string, solutionRef?: OfficeExt.OsfSolutionReference): AppMetadata;
        constructor(acquisition: Mos.Acquisition, payloadType: OSF.PayloadType, locale: string, solutionRef?: OfficeExt.OsfSolutionReference);
        private _populateManifest;
        private _initPopulator;
        private _populateBaseProperties;
        private _populateBaseOfficeAppType;
        private _populateBaseVersion;
        private _populateBasePermissions;
        private getControlPermissionsFromMosPermissions;
        private _populateBaseDomains;
        private _populateExtensionSettings;
        private _populateAddinCommands;
        private _populateWebApplicationInfo;
        private _populateRuntimes;
        containsAddinCommands(manifestHostType: any): boolean;
        containsCustomFunctions(manifestHostType: any): boolean;
        getAcquisition(): Mos.Acquisition;
        getExtensionRuntimes(): Mos.Runtimes[];
        getLegacyExtensionRuntime(): Mos.Runtimes;
        getAddinCommandRuntimes(): Mos.Runtimes[];
        getExtensionGetStartedMessage(): Mos.GetStartedMessages;
        getExtensionShortcut(): Mos.Shortcuts;
        getExtensionRibbon(): Mos.Ribbons;
        getExtensionContextMenu(): Mos.ContextMenus;
        getExtensionAlternatives(): Mos.Alternatives;
        getExtensionPermissions(): Mos.Permissions;
        getExtensionActionById(id: string): Mos.Actions;
        getExtensionRuntimeByActionId(id: string): Mos.Runtimes;
        getSource(): string;
        getState(): string;
        getTitleId(): string;
        getAssetId(): string;
        getManifestId(): string;
        getScope(): string;
        getVersion(): string;
        toJSON(): any;
        private getWebApplicationInfo;
        static checkRequirements(requirements: Mos.Requirements): boolean;
        static isLegacyRuntime(runtime: Mos.Runtimes): boolean;
        containsExtension(): boolean;
        containsOfficeAddin(): boolean;
    }
}
declare namespace OSF {
    let AddinIdInfo: (addinIdString: string) => {
        getSolutionId: () => string;
        getSolutionVersion: () => string;
        getFormatVersion: () => string;
        getStoreTypeId: () => string;
        getStoreLocation: () => string;
        getPrivacyCompliantSolutionId: () => any;
        needToRestoreManifest: () => boolean;
    };
    let OsfManifestManager: {
        getManifestAsync: (context: any, onCompleted: any) => void;
        manifestContainsDownloadResources: (manifest: any) => any;
        manifestContainsExtendedOverrides: (manifest: any) => boolean;
        downloadResourcesAsync: (context: any, onCompleted: any, manifest: any, cacheKey: any) => void;
        downloadExtendedOverridesAsync: (context: any, onCompleted: any, manifest: any, cacheKey: any) => void;
        getAppInstanceInfoByIdAsync: (context: any, onCompleted: any) => void;
        getSPTokenByProductIdAsync: (context: any, onCompleted: any) => void;
        getSPAppEntitlementsAsync: (context: any, onCompleted: any) => void;
        getCorporateCatalogEntitlementsAsync: (context: any, onCompleted: any) => void;
        _invokeProxyMethodAsync: (context: any, methodName: any, onCompleted: any, params: any) => void;
        removeOmexCacheAsync: (context: any, onCompleted: any) => void;
        purgeManifest: (marketplaceID: any, marketplaceVersion: any) => void;
        cacheManifestFromXml: (marketplaceID: any, marketplaceVersion: any, manifestXml: any, uiLocale: any) => void;
        cacheManifest: (marketplaceID: any, marketplaceVersion: any, manifest: any) => void;
        hasManifest: (marketplaceID: any, marketplaceVersion: any) => boolean;
        hasManifestForControl: (context: any) => any;
        getCachedManifest: (marketplaceID: any, marketplaceVersion: any) => any;
        getSharedRuntimeManifestCacheKey: (marketplaceID: any, sharedRuntimeId: any) => any;
        versionLessThan: (version1: any, version2: any) => boolean;
        _setUILocale: (UILocale: any) => void;
    };
}
declare module OfficeExt {
    interface ShortcutKeyPlatformAvailability {
        "web"?: string;
        "default"?: string;
    }
    interface ExtendedManifestShortcut {
        action: string;
        key: ShortcutKeyPlatformAvailability;
    }
    interface ExtendedManifestAction {
        id: string;
        type?: string;
        name: string;
    }
    interface ExtendedManifestResources {
        [id: string]: {
            value: string;
            comment: string;
        };
    }
    interface ExtendedManifest {
        shortcuts?: ExtendedManifestShortcut[];
        actions?: ExtendedManifestAction[];
        resources?: {
            "default": ExtendedManifestResources;
        };
    }
}
declare module OfficeExt {
    interface ExtendedManifestCacheEntry {
        addinId: string;
        extendedManifest: ExtendedManifest;
    }
}
declare module OfficeExt {
    interface ExtendedOverridesTokenOverride {
        value: string;
        data: any;
    }
    interface ExtendedOverridesToken {
        name: string;
        defaultValue: string;
        type: string;
        overrides: ExtendedOverridesTokenOverride[];
    }
    interface ExtendedOverridesComputedTokens {
        [name: string]: string;
    }
}

export {OSF, OfficeExt};
