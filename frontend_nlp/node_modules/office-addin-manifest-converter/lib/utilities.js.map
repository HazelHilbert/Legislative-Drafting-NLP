{"version":3,"file":"utilities.js","sourceRoot":"","sources":["../src/utilities.ts"],"names":[],"mappings":"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","sourcesContent":["import { OSF } from '../lib/osfmos';\r\nimport { OfficeExt } from '../lib/osfmos';\r\nimport { Constants } from './constants';\r\nimport * as fs from 'fs';\r\nimport { assert } from \"console\";\r\n\r\n\r\nexport class Utilities {\r\n\r\n    static isNullOrUndefined(value: any): boolean {\r\n        return value === null || value === undefined;\r\n    }\r\n\r\n    static writeFile(path: string, contents: string, errorText: string, successText: string): Promise<void> {\r\n        return new Promise<void>((resolve, reject) => {\r\n            fs.writeFile(path, contents, err => {\r\n                if (err) {\r\n                    Utilities.logError(errorText, err);\r\n                    reject(err);\r\n                } else {\r\n                    Utilities.log(successText);\r\n                    resolve();\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    static async writeFileSync(path: string, contents: string, successText: string) {\r\n        await fs.writeFileSync(path, contents);\r\n\r\n        Utilities.log(successText);\r\n    }\r\n\r\n    static ensureFolder(folderPath: string) {\r\n        if (!fs.existsSync(folderPath)) {\r\n            fs.mkdirSync(folderPath, {recursive: true});\r\n        }\r\n    }\r\n\r\n    static _inputXmlFilePath: string = \"\";\r\n    static setInputXmlFilePath(inputXmlFilePath: string)\r\n    {\r\n        Utilities._inputXmlFilePath = inputXmlFilePath;\r\n    }\r\n\r\n    static _showDebugInfo: boolean = false;\r\n    static setShowDebugInfo(showDebugInfo: boolean)\r\n    {\r\n        Utilities._showDebugInfo = showDebugInfo;\r\n    }\r\n\r\n    static _verboseLogging: boolean = false;\r\n    static setVerbosity(verbose: boolean)\r\n    {\r\n        Utilities._verboseLogging = verbose;\r\n    }\r\n    static getVerbosity(): boolean\r\n    {\r\n        return Utilities._verboseLogging;\r\n    }\r\n\r\n    static _downloadImages: boolean = false;\r\n    static setDownloadImages(downloadImages: boolean)\r\n    {\r\n        Utilities._downloadImages = downloadImages;\r\n    }\r\n\r\n    static _writeImageUrls: boolean = false;\r\n    static setWriteImageUrls(writeImageUrls: boolean)\r\n    {\r\n        Utilities._writeImageUrls = writeImageUrls;\r\n    }\r\n\r\n    static log(message?: any, ...optionalParams): void\r\n    {\r\n        if (Utilities._verboseLogging) {\r\n            console.log(Constants.LoggingPrefix + message, ...optionalParams);\r\n        }\r\n    }\r\n\r\n    static logWarning(message?: any, ...optionalParams): void\r\n    {\r\n        if (Utilities._verboseLogging) {\r\n            console.error(Constants.LoggingPrefixWarning + message, ...optionalParams);\r\n        }\r\n    }\r\n\r\n    static logError(message?: any, ...optionalParams): void\r\n    {\r\n        if (Utilities._verboseLogging) {\r\n            console.error(Constants.LoggingPrefixError + message, ...optionalParams);\r\n        }\r\n    }\r\n\r\n    static logDebug(message?: any, ...optionalParams): void\r\n    {\r\n        if (Utilities._showDebugInfo) {\r\n            console.log(Constants.LoggingPrefix + message, ...optionalParams);\r\n        }\r\n    }\r\n\r\n    static assert(condition: boolean, message?: any, ...optionalParams): void\r\n    {\r\n        if (Utilities._showDebugInfo)\r\n        {\r\n            assert(condition, message, ...optionalParams);\r\n        }\r\n    }\r\n\r\n    static createLocaleFileName(locale: string): string {\r\n        return locale + Constants.JSONFileSuffix;\r\n    }\r\n\r\n    static truncateString(value: string, maxLength: number): string {\r\n\r\n        if (value.length <= maxLength) {\r\n            return value;\r\n        }\r\n\r\n        const insertLengths: number = Constants.TruncationText.length + Constants.EllipsisText.length;\r\n\r\n        if (maxLength <= insertLengths) {\r\n\r\n            if (maxLength <= Constants.EllipsisText.length) {\r\n                // Unable to truncate so we just return the value\r\n                return value;\r\n            }\r\n\r\n            // Return truncation with only ellipsis without <TRUNCATION> prefix\r\n            return value.substring(0, maxLength - Constants.EllipsisText.length) + Constants.EllipsisText;\r\n        }\r\n\r\n        return Constants.TruncationText + value.substring(0, maxLength - insertLengths) + Constants.EllipsisText;\r\n    }\r\n\r\n    static getLimitedString(value: string, maxLength: number, message: string) {\r\n\r\n        if (value.length > maxLength) {\r\n            Utilities.logWarning(message, maxLength);\r\n            return Utilities.truncateString(value, maxLength);\r\n        }\r\n        else {\r\n            return value;\r\n        }\r\n    }\r\n\r\n    // There are locations in the OSF code where messages are logged using this AppTelemetry that may be relevant to the converter\r\n    // This defines it so that we will get those messages.\r\n    static setUpOSFAppTelemetry(): void {\r\n\r\n        if (Utilities.isNullOrUndefined(OSF[\"AppTelemetry\"])) {\r\n            OSF[\"AppTelemetry\"] = {};\r\n            OSF[\"AppTelemetry\"][\"logAppCommonMessage\"] = function (message: string) {\r\n                Utilities.log(message);\r\n            }\r\n        }\r\n    }\r\n\r\n    static async promiseAll(promises: Promise<void>[], resolve: any, reject: any, message: string) {\r\n        let failedPromises: Error[] = []\r\n        await Promise.all(promises.map(p => p.catch(e => {\r\n            failedPromises.push(e);\r\n        })));\r\n\r\n        if (failedPromises.length > 0) {\r\n            reject(new Error(message)); //rejecting with first error\r\n        }\r\n        else {\r\n            resolve();\r\n        }\r\n    }\r\n}"]}