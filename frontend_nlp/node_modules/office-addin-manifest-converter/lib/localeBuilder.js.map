{"version":3,"file":"localeBuilder.js","sourceRoot":"","sources":["../src/localeBuilder.ts"],"names":[],"mappings":";;;AAAA,6CAA0C;AAC1C,2CAAwC;AAExC,MAAa,aAAa;IAGtB;QACI,IAAI,CAAC,QAAQ,GAAG,EAAE,CAAC;IACvB,CAAC;IAED,eAAe,CAAC,MAAc,EAAE,GAAW,EAAE,KAAa;QACtD,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC,WAAW,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;IACvD,CAAC;IAED,sBAAsB,CAAC,MAAc;QACjC,MAAM,GAAG,aAAa,CAAC,eAAe,CAAC,MAAM,CAAC,CAAC;QAC/C,qBAAS,CAAC,MAAM,CAAC,CAAC,qBAAS,CAAC,iBAAiB,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,EAAE,iDAAiD,GAAG,MAAM,CAAC,CAAC;QAClI,OAAO,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC,YAAY,EAAE,CAAC;IACrD,CAAC;IAED,UAAU;QACN,OAAO,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;IACtC,CAAC;IAEO,aAAa,CAAC,MAAc;QAGhC,MAAM,GAAG,aAAa,CAAC,eAAe,CAAC,MAAM,CAAC,CAAC;QAC/C,IAAI,UAAU,GAAe,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;QAEnD,IAAI,qBAAS,CAAC,iBAAiB,CAAC,UAAU,CAAC,EAAE;YACzC,UAAU,GAAG,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,GAAG,IAAI,uBAAU,EAAE,CAAC;SACzD;QAED,OAAO,UAAU,CAAC;IACtB,CAAC;IAED,MAAM,CAAC,eAAe,CAAC,MAAc;QACjC,IAAI,CAAC,qBAAS,CAAC,iBAAiB,CAAC,MAAM,CAAC,EAAE;YACtC,OAAO,MAAM,CAAC,WAAW,EAAE,CAAC;SAC/B;QAED,OAAO,MAAM,CAAC;IAClB,CAAC;CACJ;AAzCD,sCAyCC","sourcesContent":["import { LocaleFile } from './localeFile';\r\nimport { Utilities } from './utilities';\r\n\r\nexport class LocaleBuilder {\r\n    _locales: any;\r\n\r\n    constructor() {\r\n        this._locales = {};\r\n    }\r\n\r\n    addLocaleString(locale: string, key: string, value: string): void {\r\n        this.getLocaleFile(locale).addResource(key, value);\r\n    }\r\n\r\n    getLocaleFileResources(locale: string): object {\r\n        locale = LocaleBuilder.fixLocaleCasing(locale);\r\n        Utilities.assert(!Utilities.isNullOrUndefined(this._locales[locale]), \"requested locale should exist in the manifest: \" + locale);\r\n        return this.getLocaleFile(locale).getResources();\r\n    }\r\n\r\n    getLocales(): Array<string> {\r\n        return Object.keys(this._locales);\r\n    }\r\n\r\n    private getLocaleFile(locale: string): LocaleFile\r\n    {\r\n        // Locales are case insensisive so we make sure that we store them that way\r\n        locale = LocaleBuilder.fixLocaleCasing(locale);\r\n        let localeFile: LocaleFile = this._locales[locale];\r\n\r\n        if (Utilities.isNullOrUndefined(localeFile)) {\r\n            localeFile = this._locales[locale] = new LocaleFile();\r\n        }\r\n\r\n        return localeFile;\r\n    }\r\n\r\n    static fixLocaleCasing(locale: string): string {\r\n        if (!Utilities.isNullOrUndefined(locale)) {\r\n            return locale.toLowerCase();\r\n        }\r\n\r\n        return locale;\r\n    }\r\n}"]}