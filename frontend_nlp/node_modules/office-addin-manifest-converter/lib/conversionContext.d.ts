import { OSF } from '../lib/osfmos';
import { CommandSurfaceType } from './converter';
import * as MOS from './mosManifest';
export declare class ConversionContext {
    private _formFactor;
    private _hostType;
    private _currentFunctionFileResid;
    private _currentVersionOverrideNumber;
    private _currentVersionOverrideCapabilities;
    private _currentRibbonIndex;
    private _currentMenuIndex;
    private _currentTabIndex;
    private _currentGroupIndex;
    private _currentControlIndex;
    private _currentMenuItemIndex;
    private _currentIconIndex;
    private _currentContextMenuIndex;
    private _currentContextMenuMenuIndex;
    private _currentContextMenuMenuButtonIndex;
    private _currentContextMenuMenuControlIndex;
    private _currentContextMenuMenuControlMenuItemIndex;
    private _currentCommandSurfaceType;
    static UnsetIndex: number;
    constructor();
    getFormFactor(): OSF.FormFactor;
    setFormFactor(formFactor: OSF.FormFactor): void;
    getManifestHostType(): OSF.ManifestHostType;
    setManifestHostType(hostType: OSF.ManifestHostType): void;
    getCurrentFunctionFileResid(): string;
    setCurrentFunctionFileResid(currentFunctionFileResid: string): void;
    getCurrentVersionOverrideCapabilities(): MOS.Capabilities[];
    getCurrentVersionOverrideNumber(): OSF.VersionOverridesNumber;
    setCurrentVersionOverrideAndCapabilities(versionOverrideNumber: OSF.VersionOverridesNumber, versionOverrideCapabilities: MOS.Capabilities[]): void;
    getCurrentRibbonIndex(): number;
    setCurrentRibbonIndex(ribbonIndex: number): void;
    getCurrentMenuIndex(): number;
    setCurrentMenuIndex(menuIndex: number): void;
    getCurrentTabIndex(): number;
    setCurrentTabIndex(tabIndex: number): void;
    getCurrentGroupIndex(): number;
    setCurrentGroupIndex(groupIndex: number): void;
    getCurrentControlIndex(): number;
    setCurrentControlIndex(controlIndex: number): void;
    getCurrentMenuItemIndex(): number;
    setCurrentMenuItemIndex(menuItemIndex: number): void;
    setCurrentCommandSurfaceType(commandSurfaceType: CommandSurfaceType): void;
    getCurrentContextMenuIndex(): number;
    setCurrentContextMenuIndex(contextMenuIndex: number): void;
    getCurrentContextMenuMenuIndex(): number;
    setCurrentContextMenuMenuIndex(contextMenuMenuIndex: number): void;
    getCurrentContextMenuMenuButtonIndex(): number;
    setCurrentContextMenuMenuButtonIndex(contextMenuMenuButtonIndex: number): void;
    getCurrentContextMenuMenuControlIndex(): number;
    setCurrentContextMenuMenuControlIndex(contextMenuMenuControlIndex: number): void;
    getCurrentContextMenuMenuControlMenuItemIndex(): number;
    setCurrentContextMenuMenuControlMenuItemIndex(contextMenuMenuControlMenuItemIndex: number): void;
    getCurrentIconIndex(): number;
    setCurrentIconIndex(iconIndex: number): void;
    isInRibbon(): boolean;
}
//# sourceMappingURL=conversionContext.d.ts.map