{"version":3,"file":"converter.js","sourceRoot":"","sources":["../src/converter.ts"],"names":[],"mappings":"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","sourcesContent":["import { OSF } from '../lib/osfmos';\nimport { Constants } from './constants';\nimport { ConversionContext } from './conversionContext';\nimport { IconBuilder } from './iconBuilder';\nimport { LocaleBuilder } from './localeBuilder';\nimport * as MOS from './mosManifest';\nimport { MosManifest } from './mosManifest';\nimport { Utilities } from './utilities';\n\n\nimport * as util from \"util\";\nconst { Utils } = require('./osfUtils');\n\n\nUtils.OverrideMethods();\n\nexport enum RuntimeSource {\n    DefaultSettingSourceLocations = \"DefaultSettingsSourceLocations\",\n    ExecuteFunction = \"ExecuteFunction\",\n    SharedRuntimes = \"SharedRuntimes\",\n    ShowTaskpane = \"ShowTaskpane\",\n    LaunchEvent = \"LaunchEvent\"\n}\n\n// Should be synced with the RuntimeLifeTime enum in shared_src\\runtime\\Utilities\\WAC\\OSFManifest.ts\nexport enum InputRuntimeLifeTime {\n    Short = 0,\n    Long\n}\n\nexport enum ResourceType {\n    AllLocaleImages = \"AllLocaleImages\",\n    AllLocaleUrls = \"AllLocaleUrls\",\n    AllLocaleLongStrings = \"AllLocaleLongStrings\",\n    AllLocaleShortStrings = \"AllLocaleShortStrings\"\n}\n\nexport enum CommandSurfaceType {\n    None = \"None\",\n    Ribbon = \"Ribbon\",\n    ContextMenu = \"ContextMenu\"\n}\n\n// The legacy manifest contains Actions in different places.  The actions operate within the context of a webpage.  In\n// the new meta os manifest, these different urls are broken up into different \"runtimes\".  In order to implement this\n// translation, we make two passes over the manifest:  One pass to collect all the different possible runtimes.  Such an\n// occurence is stored as a \"RuntimeRecords\".  These records are later consolidated into a set of runtimes in the new manifest.\nexport class RuntimeRecord {\n\n    _resource: string;\n    _localeResources: {};\n    _lifetime: MOS.RuntimesLifetime = MOS.RuntimesLifetime.Short;\n    _isResId: boolean;\n    _isCapabilitiesSorted: boolean = false;\n    _requirements: MOS.RequirementsExtensionElement;\n    _source: RuntimeSource;\n    _manifestHostType: OSF.ManifestHostType; // workbook, presentation, document etc.\n    _versionOverrideCapabilities: MOS.Capabilities[];\n    _versionOverridesNumber: OSF.VersionOverridesNumber; // the version override that this runtime record came from.  If it came from the main <OfficeApp> then it is null.\n    _scriptResId: string = null;\n\n    constructor() {\n    }\n\n    sortCapabilities() {\n        if (!this._isCapabilitiesSorted && !Utilities.isNullOrUndefined(this._versionOverrideCapabilities)) {\n            Converter._sortCapabilitiesAlphabatically(this._versionOverrideCapabilities);\n            this._isCapabilitiesSorted = true;\n        }\n    }\n\n    getKey() {\n        return Converter._generateRuntimeLookupKey(this._resource, this._lifetime, this._versionOverrideCapabilities);\n    }\n}\n\nexport class Converter {\n\n    private _addedExecuteFunctions: Object;\n    private _mosManifest: MosManifest;\n    private _xmlManifest: OSF.Manifest.OfficeAppManifest;\n    private _localeBuilder: LocaleBuilder;\n    private _iconBuilder: IconBuilder;\n    private _runtimeLookup: Object;\n    private _uniqueSuffix: number;\n    private _uniqueRuntimeSuffix: number;\n    private _uniqueActionSuffix: number;\n    private _uniqueViewSuffix: number;\n\n    constructor(inputXml: string, locale: string) {\n\n        this._mosManifest = new MosManifest();\n        this._xmlManifest = new OSF.Manifest.OfficeAppManifest(inputXml, locale, Utilities.getVerbosity());\n        this._localeBuilder = new LocaleBuilder();\n        this._iconBuilder = new IconBuilder();\n        this._uniqueSuffix = 0;\n        this._uniqueRuntimeSuffix = 0;\n        this._uniqueActionSuffix = 0;\n        this._uniqueViewSuffix = 0;\n        this._runtimeLookup = {};\n        this._addedExecuteFunctions = {};\n    }\n\n    getMosManifest(): MosManifest {\n\n        return this._mosManifest;\n    }\n\n    getLocaleBuilder(): LocaleBuilder {\n\n        return this._localeBuilder;\n    }\n\n    convert(): void {\n\n        let context: ConversionContext = new ConversionContext();\n        this._populateRoot(context);\n    }\n\n    async downloadAndStoreIcons(folderPath: string) {\n\n        // Now download all the icons and store them in the package directory\n        await this._iconBuilder.downloadAndStoreIcons(folderPath);\n    }\n\n    private getNextUniqueSuffix(): number {\n\n        return ++this._uniqueSuffix;\n    }\n\n    private getNextRuntimeSuffix(): number {\n        return ++this._uniqueRuntimeSuffix;\n    }\n\n    private getNextActionSuffix(): number {\n        return ++this._uniqueActionSuffix;\n    }\n\n    private getNextViewSuffix(): number {\n        return ++this._uniqueViewSuffix;\n    }\n\n    private _populateRoot(context: ConversionContext): void {\n\n        // Parts relevant to the legacy Office manifest\n        this._mosManifest.$schema = Constants.MosManifestSchemaVersionDevPreview;\n        this._mosManifest.id = this._xmlManifest.getMarketplaceID();\n        this._mosManifest.version = this._xmlManifest.getMarketplaceVersion();\n        this._mosManifest.manifestVersion = MOS.MosManifestManifestVersion.DevPreview;\n        this._populateRootName();\n        this._populateRootDescription();\n        this._populateRootIcons();\n        this._mosManifest.accentColor = Constants.DefaultAccessColor;  // there is no accent color in the legacy manifest\n        this._populateDeveloper();\n        this._populateLocalizationInfo();\n        this._populateRootPermissions();\n        this._populateRootDevicePermissions();\n        this._populateAuthorization();\n        this._populateWebApplicationInfos();\n        this._populateExtension(context);\n        this._populateRootRequirements();\n        this._populateValidDomains();\n\n        // Not present in legacy Office manifest\n        this._populateStaticTabs();\n        this._populateComposeExtensions();\n        this._populateGraphConnector();\n        this._populateConfigurableTabs();\n        this._populateBots();\n        this._populateConnectors();\n        this._populateActivities();\n        this._populateMeetingExtensionDefinition();\n        this._populateSubscriptionOffer();\n        this._populateShowLoadingIndicator();\n        this._populateIsFullScreen();\n        this._populateConfigurableProperties();\n        this._populateDefaultBlockUntilAdminAction();\n        this._populatePublisherDocsUrl();\n        this._populateDefaultInstallScope();\n        this._populateDefaultGroupCapability();\n    }\n\n    private _populateRootName(): void {\n\n        let name: MOS.Name = new MOS.Name();\n\n        // Populate the default language display name in the body of the manifest\n        name.short = Utilities.getLimitedString(this._xmlManifest.getDefaultDisplayName(),\n            Constants.MaxResourceStringLength30,\n            \"name.short truncated to %d characters\");\n\n        name.full = Utilities.getLimitedString(this._xmlManifest.getDefaultDisplayName(),\n            Constants.MaxResourceStringLength100,\n            \"name.full truncated to %d characters\"); // no long name in legacy manifest\n\n        // Populate resources for other languages of display names\n        // The \"seen locales\" are all the different locales that were seen during parsing of the xml manifest but there is not necessarily\n        // a resource for every language for every property.\n        this._populateLocaleSensitiveProperty(this._xmlManifest.getDisplayName, Constants.MosNameShort, null);\n        this._populateLocaleSensitiveProperty(this._xmlManifest.getDisplayName, Constants.MosNameFull, null);\n\n        this._mosManifest.name = name;\n    }\n\n    private _populateRootDescription(): void {\n\n        let description: MOS.Description = new MOS.Description();\n\n        let legacyDescription: string = this._xmlManifest.getDefaultDescription();\n\n        if (!Utilities.isNullOrUndefined(legacyDescription)) {\n\n            description.short = Utilities.getLimitedString(legacyDescription,\n                Constants.MaxResourceStringLength80,\n                \"description.short truncated to %d characters\");\n\n            description.full = legacyDescription; // no full description in legacy manifest\n        }\n\n        this._populateLocaleSensitiveProperty(this._xmlManifest.getDescription, Constants.MosDescriptionShort, Constants.MaxResourceStringLength80);\n        this._populateLocaleSensitiveProperty(this._xmlManifest.getDescription, Constants.MosDescriptionFull, Constants.MaxResourceStringLength4000);\n        this._mosManifest.description = description;\n    }\n\n    private _populateRootIcons(): void {\n\n        let icons: MOS.Icons = new MOS.Icons();\n\n        const defaultLocale: string = this._xmlManifest.getDefaultLocale();\n\n        let defaultIconUrl: string = this._xmlManifest.getIconUrl(defaultLocale);\n        if (Utilities.isNullOrUndefined(defaultIconUrl)) {\n            defaultIconUrl = this._xmlManifest.getDefaultIconUrl();\n        }\n\n        if (Utilities.isNullOrUndefined(defaultIconUrl)) {\n            defaultIconUrl = Constants.IconsOutline + \".png\";\n        }\n\n        icons.outline = this._iconBuilder.addIconAndGetReference(defaultIconUrl, true /* getShortNameAndStore */, true /* forRootIcon */);\n\n        let defaultHighResolutionIconUrl: string = this._xmlManifest.getHighResolutionIconUrl(defaultLocale);\n\n        if (Utilities.isNullOrUndefined(defaultHighResolutionIconUrl)) {\n            defaultHighResolutionIconUrl = this._xmlManifest.getDefaultHighResolutionIconUrl();\n        }\n\n        if (Utilities.isNullOrUndefined(defaultHighResolutionIconUrl)) {\n            defaultHighResolutionIconUrl = Constants.IconsColor + \".png\";\n        }\n\n        icons.color = this._iconBuilder.addIconAndGetReference(defaultHighResolutionIconUrl, true /* getShortNameAndStore */, true /* forRootIcon */);\n\n        this._mosManifest.icons = icons;\n\n        for (let seenLocale in this._xmlManifest.getLocalesSeen()) {\n\n            // The default locale is written right into the main manifest so we don't need it in a separate file\n            if (seenLocale != defaultLocale) {\n\n                const iconUrl: string = this._xmlManifest.getIconUrl(seenLocale);\n                if (!Utilities.isNullOrUndefined(iconUrl)) {\n                    const iconPath: string = this._iconBuilder.addIconAndGetReference(iconUrl, true /* getShortNameAndStore */, true /* forRootIcon */);\n                    this._localeBuilder.addLocaleString(seenLocale, Constants.IconsOutline, iconPath);\n                }\n\n                const highResolutionIconUrl: string = this._xmlManifest.getHighResolutionIconUrl(seenLocale);\n                if (!Utilities.isNullOrUndefined(highResolutionIconUrl)) {\n                    const highResolutionIconPath: string = this._iconBuilder.addIconAndGetReference(highResolutionIconUrl, true /* getShortNameAndStore */, true /* forRootIcon */);\n                    this._localeBuilder.addLocaleString(seenLocale, Constants.IconsColor, highResolutionIconPath);\n                }\n            }\n        }\n    }\n\n    private _populateDeveloper(): void {\n\n        let developer: MOS.Developer = new MOS.Developer();\n\n        developer.name = Utilities.getLimitedString(this._xmlManifest.getProviderName(),\n            Constants.MaxResourceStringLength32,\n            \"developer.name truncated to %d characters\");\n\n        developer.mpnId = undefined; // Not present in legacy manifest\n        let supportUrl: string = this._xmlManifest.getSupportUrl(this._xmlManifest.getDefaultLocale()) || Constants.DefaultDeveloperUrl;\n\n        // The legacy xml manifest only has <SupportUrl> while the metaos manifest has these three urls in the developer section.\n        // We currently use the support url for all three since there is no exact mapping.\n        Utilities.log(\"Using <SupportUrl> from legacy manifest to populate developer.privacyUrl, developer.termsOfUseUrl and developer.websiteUrl in metaos manifest.\");\n        developer.privacyUrl = supportUrl;\n        developer.termsOfUseUrl = supportUrl;\n        developer.websiteUrl = supportUrl;\n\n        for (let seenLocale in this._xmlManifest.getLocalesSeen()) {\n\n            // The default locale is written right into the main manifest so we don't need it in a separate file\n            if (seenLocale != this._xmlManifest.getDefaultLocale()) {\n\n                let localizedSupportUrl: string = this._xmlManifest.getSupportUrl(seenLocale);\n                if (!Utilities.isNullOrUndefined(localizedSupportUrl)) {\n                    this._localeBuilder.addLocaleString(seenLocale, Constants.DeveloperPrivacyUrl, localizedSupportUrl);\n                    this._localeBuilder.addLocaleString(seenLocale, Constants.DeveloperTermsOfUseUrl, localizedSupportUrl);\n                    this._localeBuilder.addLocaleString(seenLocale, Constants.DeveloperWebSiteUrl, localizedSupportUrl);\n                }\n            }\n        }\n\n        this._mosManifest.developer = developer;\n    }\n\n    private _populateLocalizationInfo(): void {\n\n        let localizationInfo: MOS.LocalizationInfo = new MOS.LocalizationInfo();\n        localizationInfo.defaultLanguageTag = LocaleBuilder.fixLocaleCasing(this._xmlManifest.getDefaultLocale());\n\n        for (let seenLocale in this._xmlManifest.getLocalesSeen()) {\n\n            if (seenLocale != localizationInfo.defaultLanguageTag) {\n\n                let additionalLanguages: MOS.AdditionalLanguages = new MOS.AdditionalLanguages();\n                additionalLanguages.languageTag = seenLocale;\n                additionalLanguages.file = Utilities.createLocaleFileName(seenLocale);\n\n                if (Utilities.isNullOrUndefined(localizationInfo.additionalLanguages)) {\n                    localizationInfo.additionalLanguages = [];\n                }\n\n                localizationInfo.additionalLanguages.push(additionalLanguages);\n            }\n        }\n\n        this._mosManifest.localizationInfo = localizationInfo;\n    }\n\n    private _populateWebApplicationInfos(): void {\n        this._populateWebApplicationInfoFromContentAndTaskpane();\n        this._populateWebApplicationInfoFromMailbox();\n    }\n\n    // Handles getting the webapplicationinfo from the MailHost manifests\n    private _populateWebApplicationInfoFromMailbox(): void {\n\n        let overrideIndexes: string[] = this._getMailHostOverrides();\n\n        let mosWebApplicationInfo: MOS.WebApplicationInfo = new MOS.WebApplicationInfo();\n\n        for (let overrideIndex of overrideIndexes) {\n            let webApplicationInfo: Object = this._xmlManifest._versionOverrides[Constants.InputMailHost]?.[overrideIndex]?._webApplicationInfo;\n\n            // If there is no information in the webApplicationInfo then there is nothing to convert\n            if (Utilities.isNullOrUndefined(webApplicationInfo) ||\n                (Utilities.isNullOrUndefined(webApplicationInfo[\"_webApplicationId\"]) && Utilities.isNullOrUndefined(webApplicationInfo[\"_webApplicationResource\"]))) {\n                continue;\n            }\n\n            mosWebApplicationInfo.id = webApplicationInfo[\"_webApplicationId\"];\n            mosWebApplicationInfo.resource = webApplicationInfo[\"_webApplicationResource\"];\n\n            if (Utilities.isNullOrUndefined(this._mosManifest.webApplicationInfo)) {\n                this._mosManifest.webApplicationInfo = mosWebApplicationInfo;\n            }\n            else {\n                // If this._mosManifest.webApplicationInfo has been set before then it could have been set by another\n                // MailHost version override or it could have been set by a TaskPane app processed before these.\n                // Currently the metaos schema only supports one single webapplicationinfo but the legacy\n                // schema can have different ones for different override versions.\n                // TODO: https://office.visualstudio.com/OC/_workitems/edit/6224818/\n                Utilities.logError(\"MetaOS schema currently only supports one webapplicationInfo but we have found more than one in this manifest MailHost override: \" + overrideIndex + \". \" + \" app: \" + this._xmlManifest.getDisplayName(this._xmlManifest.getDefaultLocale()) + \" WI:6224818\");\n                return;\n            }\n        }\n    }\n\n    // handles getting the webapplicationinfo from Content and Taskpane manifests\n    private _populateWebApplicationInfoFromContentAndTaskpane(): void {\n\n        // Currently the metaos schema only supports one single webapplicationinfo but the legacy\n        // schema can have different ones for different override versions.\n        // TODO: https://office.visualstudio.com/OC/_workitems/edit/6224818/\n        let mosWebApplicationInfo: MOS.WebApplicationInfo = new MOS.WebApplicationInfo();\n        let shouldBeAdded: boolean = false;\n\n        if (!Utilities.isNullOrUndefined(this._xmlManifest.getWebApplicationId())) {\n            mosWebApplicationInfo.id = this._xmlManifest.getWebApplicationId();\n            shouldBeAdded = true;\n        }\n\n        if (!Utilities.isNullOrUndefined(this._xmlManifest.getWebApplicationResource())) {\n            mosWebApplicationInfo.resource = this._xmlManifest.getWebApplicationResource();\n            shouldBeAdded = true;\n        }\n\n        if (shouldBeAdded) {\n            this._mosManifest.webApplicationInfo = mosWebApplicationInfo;\n        }\n    }\n\n    private _populateRootPermissions(): void {\n        // TODO: Not present in legacy manifest\n    }\n\n    private _populateRootDevicePermissions(): void {\n        // TODO: Not present in legacy manifest\n    }\n\n    private _populateAuthorization(): void {\n\n        // Currently the metaos schema only supports one single authorization but the legacy\n        // schema can have different ones for different override versions.\n        // TODO: https://office.visualstudio.com/OC/_workitems/edit/6224818/\n        let mosAuthorization: MOS.Authorization = new MOS.Authorization();\n\n        let permissions: any = this._xmlManifest.getPermission();\n\n        let mosPermissions: MOS.Permissions2 = null;\n\n        if (!Utilities.isNullOrUndefined(permissions)) {\n            mosPermissions = new MOS.Permissions2();\n            mosPermissions.resourceSpecific = [];\n            let mosResourceSpecific: MOS.ResourceSpecific = new MOS.ResourceSpecific();\n            mosResourceSpecific.name = Converter._mosPermissionfromXmlPermission(permissions, this._xmlManifest._target);\n            mosResourceSpecific.type = MOS.ResourceSpecificType.Delegated;\n            mosPermissions.resourceSpecific.push(mosResourceSpecific);\n            mosAuthorization.permissions = mosPermissions;\n        }\n\n        // Now also handle the <ExtendedPermissions> if present\n        // These only apply to VersionOverride 1.1 for Mail/Outlook Apps\n        let extendedPermissions: string[] = this._xmlManifest.getExtendedPermissions(OSF.VersionOverridesNumber.V1_1);\n\n        if (!Utilities.isNullOrUndefined(extendedPermissions) && extendedPermissions.length > 0) {\n\n            for (let perm of extendedPermissions) {\n\n                if (perm === Constants.InputAppendOnSend) {\n\n                    if (Utilities.isNullOrUndefined(mosPermissions)) {\n                        mosPermissions = new MOS.Permissions2();\n                        mosPermissions.resourceSpecific = [];\n                    }\n\n                    // Now create the permission for MailboxItem.AppendOnSend.User in the metaos manifest and add it\n                    let mosResourceSpecific: MOS.ResourceSpecific = new MOS.ResourceSpecific();\n                    mosResourceSpecific.name = Constants.MailboxItemAppendOnSendUser;\n                    mosResourceSpecific.type = MOS.ResourceSpecificType.Delegated;\n                    mosPermissions.resourceSpecific.push(mosResourceSpecific);\n                    mosAuthorization.permissions = mosPermissions;\n                }\n                else {\n\n                    Utilities.logWarning(\"Ignoring unsupported ExtendedPermission: %s\", perm);\n                }\n            }\n        }\n\n        // Now look for SupportsSharedFolders\n        // SupportsSharedFolders is only supported in VersionOverride 1.1\n        let supportsSharedFolders: boolean = this._xmlManifest.getSupportsSharedFolders(OSF.VersionOverridesNumber.V1_1, Constants.InputDesktopFormFactor);\n\n        if (supportsSharedFolders) {\n            if (Utilities.isNullOrUndefined(mosPermissions)) {\n                mosPermissions = new MOS.Permissions2();\n                mosPermissions.resourceSpecific = [];\n            }\n\n            // Now create the permission for Mailbox.AccessSharedFolders.User in the metaos manifest and add it\n            let mosResourceSpecific: MOS.ResourceSpecific = new MOS.ResourceSpecific();\n            mosResourceSpecific.name = Constants.MailboxAccessSharedFoldersUser;\n            mosResourceSpecific.type = MOS.ResourceSpecificType.Delegated;\n            mosPermissions.resourceSpecific.push(mosResourceSpecific);\n            mosAuthorization.permissions = mosPermissions;\n        }\n\n        if (!Utilities.isNullOrUndefined(mosPermissions)) {\n            this._mosManifest.authorization = mosAuthorization;\n        }\n    }\n\n    private _populateExtension(context: ConversionContext): void {\n        let extension: MOS.Extensions = new MOS.Extensions();\n\n        this._populateAlternates(extension);\n        this._populateContextMenus(extension);\n        this._populateGetStartedMessages(context, extension);\n        this._populateKeyboards(extension);\n        this._populateExtensionRequirements(extension);\n        this._populateRuntimes(context, extension);\n        this._populateRibbonsAndContextMenus(context, extension);\n        this._populateAutoRunEvents(context, extension);\n        this._populateFormSettings(extension);\n\n        if (Utilities.isNullOrUndefined(this._mosManifest.extensions)) {\n            this._mosManifest.extensions = [];\n        }\n\n        this._addRuntimeActionLocalizedDisplayNames(extension.runtimes);\n        this._mosManifest.extensions.push(extension);\n    }\n\n    private _populateAlternates(extension: MOS.Extensions): void {\n\n        let equivalentAddins: OSF.Manifest.EquivalentAddin[] = this._xmlManifest.getEquivalentAddins();\n        if (Utilities.isNullOrUndefined(equivalentAddins) || equivalentAddins.length == 0) {\n            return;\n        }\n\n        let alternates: MOS.Alternates[] = [];\n        for (const equivalentAddin of equivalentAddins) {\n            let alternate: MOS.Alternates = new MOS.Alternates();\n            alternate.prefer = new MOS.Prefer();\n            if (equivalentAddin.isComAddin()) {\n                alternate.prefer.comAddin = new MOS.ComAddin();\n                alternate.prefer.comAddin.progId = equivalentAddin.getProgId() as string;\n            }\n            else if (equivalentAddin.isXLLCompatible()) {\n                alternate.prefer.xllCustomFunctions = new MOS.XllCustomFunctions();\n                alternate.prefer.xllCustomFunctions.fileName = equivalentAddin.getFileName() as string;\n            }\n            else {\n                Utilities.logWarning(\"Unknown equivalent add-in type encountered.\")\n                continue;  // skip equivalent addin of unknown type\n            }\n\n            alternates.push(alternate);\n        }\n\n        if (alternates.length > 0) {\n            extension.alternates = alternates;\n        }\n    }\n\n    private _populateAutoRunEvents(context: ConversionContext, extension: MOS.Extensions): void {\n\n        // Only outlook has autoruns\n        if (Utilities.isNullOrUndefined(this._xmlManifest._versionOverrides[Constants.InputMailHost])) {\n            return;\n        }\n\n        // If neither of the two outlook overrides are present then there are no launchevents/autoruns to process\n        let overrides: string[] = this._getMailHostOverrides();\n\n        // If there are no outlook overrides then there are no autoruns\n        if (overrides.length == 0) {\n            return;\n        }\n\n        let autoRunEvents: MOS.AutoRunEvents[] = [];\n\n        for (let overrideId of overrides) {\n\n            let addinCommandsExtensionPoints: Object[] = Converter._getAddinCommandsExtensionPoints(Constants.InputMailHost, overrideId, Constants.InputDesktopFormFactor, this._xmlManifest);\n\n            Converter._setVersionOverrideNumberAndCapabilitiesInContext(context, this._xmlManifest, Constants.InputMailHost, overrideId);\n\n            // If this override has a desktop form factor then look for an autorun extension point in it\n            if (!Utilities.isNullOrUndefined(addinCommandsExtensionPoints)) {\n\n                for (let extensionPoint of addinCommandsExtensionPoints) {\n\n                    if (extensionPoint[Constants.InputType] === Constants.InputLaunchEvent &&\n                        !Utilities.isNullOrUndefined(extensionPoint[Constants.InputEvents])) {\n\n                        let autoRunEvent: MOS.AutoRunEvents = null;\n\n                        // Now loop over each autorun event\n                        for (let innerEvent of extensionPoint[Constants.InputEvents]) {\n\n                            if (Utilities.isNullOrUndefined(autoRunEvent)) {\n                                autoRunEvent = new MOS.AutoRunEvents();\n                                autoRunEvent.events = [];\n                                autoRunEvent.requirements = new MOS.RequirementsExtensionElement();\n                                autoRunEvent.requirements.capabilities = [];\n                                autoRunEvent.requirements.scopes = [];\n                                autoRunEvent.requirements.scopes.push(MOS.Scopes.Mail);\n\n                                // Merge in any capabilities that come from the requirement sets at the version override scope of the legacy manifest\n                                Converter._mergeInVersionOverrideRequirements(context.getCurrentVersionOverrideCapabilities(), autoRunEvent.requirements);\n\n                                autoRunEvents.push(autoRunEvent);\n                            }\n\n                            let mosEvent: MOS.Events = new MOS.Events();\n\n                            // Now add the corresponding action to a runtime\n                            let runtime: MOS.Runtimes = null;\n\n                            const runtimeUrl: string = extensionPoint[Constants.InputResid];\n                            const runtimeKey: string = Converter._generateRuntimeLookupKey(runtimeUrl, MOS.RuntimesLifetime.Short, context.getCurrentVersionOverrideCapabilities());\n\n                            if (!Utilities.isNullOrUndefined(runtimeKey)) {\n                                runtime = this._runtimeLookup[runtimeKey];\n                            }\n\n                            if (!Utilities.isNullOrUndefined(runtime)) {\n\n                                // For LaunchEvents, the function name should be the action id.\n                                let actionId: string = innerEvent[Constants.InputFunctionName];\n\n                                // Even if we don't find a function name, we try to to generate a unique action\n                                // name like \"action_3\"\n                                if (Utilities.isNullOrUndefined(actionId)) {\n                                    actionId = innerEvent[Constants.InputAction];\n                                    actionId = this._createUniqueActionId(actionId);\n                                    Utilities.logError(\"Unable to get functionName from LaunchEvent.  Using %s instead.\", actionId);\n                                }\n\n                                if (Utilities.isNullOrUndefined(runtime.actions)) {\n                                    runtime.actions = [];\n                                }\n\n                                let action: MOS.ExtensionRuntimesActionsItem = new MOS.ExtensionRuntimesActionsItem();\n                                action.id = actionId;\n                                action.displayName = actionId;\n                                mosEvent.actionId = actionId;\n                                action.type = MOS.ExtensionRuntimesActionsItemType.ExecuteFunction;\n\n                                this._addRuntimeExecuteAction(runtime, action, runtimeKey);\n                            }\n                            else {\n                                Utilities.assert(!Utilities.isNullOrUndefined(runtime), \"Expected runtime to be cached.\");\n                                Utilities.logError(\"Did not find runtime %s for autorunevent.\", runtimeKey);\n                            }\n\n                            // Now add the event to the autoruns\n                            const sendMode: string = innerEvent[Constants.InputSendMode];\n\n                            if (!Utilities.isNullOrUndefined(sendMode) && sendMode.length > 0) {\n                                mosEvent.options = new MOS.Options();\n                                mosEvent.options.sendMode = Converter._mosSendModeFromXmlSendMode(sendMode);\n                            }\n\n                            mosEvent.type = Converter._legacyLaunchEventToMosEventType(innerEvent[Constants.InputType]);\n                            autoRunEvent.events.push(mosEvent);\n                        }\n                    }\n                }\n            }\n\n            // Clear this in the context since we are done creating the autorun events\n            Converter._clearVersionOverrideNumberAndCapabilitiesInContext(context);\n        }\n\n        if (autoRunEvents.length > 0) {\n            extension.autoRunEvents = autoRunEvents;\n        }\n    }\n\n    private _populateContextMenus(extension: MOS.Extensions): void {\n\n    }\n\n    private _populateGetStartedMessages(context: ConversionContext, extension: MOS.Extensions): void {\n\n        // Get started messages apply to WXP and TaskPaneApp\n        if (!Utilities.isNullOrUndefined(this._xmlManifest._versionOverrides[Constants.InputWorkbook])) {\n            this._fillGetStartedMessagesFromVersionOverrides(context, extension, OSF.ManifestHostType.Workbook);\n        }\n        else if (!Utilities.isNullOrUndefined(this._xmlManifest._versionOverrides[Constants.InputDocument])) {\n            this._fillGetStartedMessagesFromVersionOverrides(context, extension, OSF.ManifestHostType.Document);\n        }\n        else if (!Utilities.isNullOrUndefined(this._xmlManifest._versionOverrides[Constants.InputPresentation])) {\n            this._fillGetStartedMessagesFromVersionOverrides(context, extension, OSF.ManifestHostType.Presentation);\n        }\n    }\n\n    private _fillGetStartedMessagesFromVersionOverrides(context: ConversionContext, extension: MOS.Extensions, manifestHostType: OSF.ManifestHostType): void {\n\n        var hostType: string = Converter._getVersionOverrideHostTypeFromOsfManifestHostType(manifestHostType);\n        var versionOverride: object = this._xmlManifest._versionOverrides[hostType];\n\n        if (Utilities.isNullOrUndefined(versionOverride)) {\n            return;\n        }\n\n        var getStartedNode: object = versionOverride[Constants.InputGetStartedNode];\n\n        if (!Utilities.isNullOrUndefined(getStartedNode)) {\n\n            Converter._setVersionOverrideNumberAndCapabilitiesInContext(context, this._xmlManifest, hostType, null);\n            let getStartedMessage: MOS.GetStartedMessages = new MOS.GetStartedMessages();\n            getStartedMessage.title = getStartedNode[Constants.InputTitle];\n            getStartedMessage.description = getStartedNode[Constants.InputDescription];\n            getStartedMessage.learnMoreUrl = getStartedNode[Constants.InputLearnMoreUrl];\n\n            // Set the requirements based on the context of what we have in the versionOverride\n            getStartedMessage.requirements = new MOS.RequirementsExtensionElement();\n            getStartedMessage.requirements.capabilities = Converter._cloneCapabilities(context.getCurrentVersionOverrideCapabilities());\n\n            extension.getStartedMessages = [];\n            extension.getStartedMessages.push(getStartedMessage);\n            Converter._clearVersionOverrideNumberAndCapabilitiesInContext(context);\n        }\n\n        return;\n    }\n\n    private _populateKeyboards(extension: MOS.Extensions): void {\n        this._xmlManifest.getExtendedOverrides();\n    }\n\n    private _populateFormSettings(extension: MOS.Extensions): void {\n\n        // Only outlook has formSettings\n        if (Utilities.isNullOrUndefined(this._xmlManifest._versionOverrides[Constants.InputMailHost])) {\n            return;\n        }\n\n        const formSettings: OSF.Manifest.FormSetting[][] = this._xmlManifest.getFormSettings();\n        const defaultLocale: string = this._xmlManifest.getDefaultLocale();\n        // Make sure to get the \"first\" DesktopSettings either for ItemRead or ItemEdit\n        for (let item in formSettings) {\n            const formSetting: OSF.Manifest.FormSetting = formSettings[item][Constants.InputDesktopSettings];\n            const sourceLocation: string = formSetting?.SourceLocation?.[defaultLocale];\n            if (!Utilities.isNullOrUndefined(sourceLocation)) {\n                extension.audienceClaimUrl = sourceLocation;\n\n                // Now set the corresponding localized strings\n                const defaultLocale: string = this._xmlManifest.getDefaultLocale().toLocaleLowerCase();\n\n                for (let seenLocale in this._xmlManifest.getLocalesSeen()) {\n                    // skip the defaule since it is set in the main body of the manifest\n                    if (seenLocale !== defaultLocale) {\n                        const locFormSetting: string = formSetting?.SourceLocation?.[seenLocale];\n                        this._localeBuilder.addLocaleString(seenLocale, Constants.ExtensionAudienceClaimUrl, locFormSetting);\n                    }\n                }\n                break;\n            }\n        }\n    }\n\n    private _populateExtensionRequirements(extension: MOS.Extensions): void {\n\n        let requirements: MOS.RequirementsExtensionElement = new MOS.RequirementsExtensionElement();\n\n        // TODO: Needs review.  Currently no mapping for <Requirements><Method> from legacy manifest\n        if (!Utilities.isNullOrUndefined(this._xmlManifest.getRequirements()?.sets)) {\n\n            requirements.capabilities = Converter._getCapabilitiesFromLegacyRequirementSets(this._xmlManifest.getRequirements().sets);\n        }\n\n        this._addScopesFromHosts(requirements);\n\n        extension.requirements = requirements;\n    }\n\n    private static _getCapabilitiesFromLegacyRequirementSets(sets: any[]): MOS.Capabilities[] {\n\n        let capabilities: MOS.Capabilities[] = null;\n\n        for (let i: number = 0; i < sets.length; i++) {\n            let requirementSet = sets[i];\n            let capability: MOS.Capabilities = new MOS.Capabilities();\n\n            capability.name = requirementSet.name;\n            capability.minVersion = requirementSet.version;\n\n            if (Utilities.isNullOrUndefined(capabilities)) {\n                capabilities = [] as MOS.Capabilities[];\n            }\n\n            capabilities!.push(capability);\n        }\n\n        return capabilities;\n    }\n\n    private _populateRibbonsAndContextMenus(context: ConversionContext, extension: MOS.Extensions): void {\n\n        let ribbons: MOS.Ribbons[] = [];\n        let contextMenus: MOS.ContextMenus[] = [];\n\n        // Unlike the MOS manifest, in the legacy manifest, each host type must have its own ribbon\n        // Therefore, we create one ribbon for each host type if one exists in the legacy manifest\n        this._addRibbonOrContextMenuForHostType(context, OSF.ManifestHostType.Mailbox, ribbons, contextMenus);\n        this._addRibbonOrContextMenuForHostType(context, OSF.ManifestHostType.Workbook, ribbons, contextMenus);\n        this._addRibbonOrContextMenuForHostType(context, OSF.ManifestHostType.Document, ribbons, contextMenus);\n        this._addRibbonOrContextMenuForHostType(context, OSF.ManifestHostType.Presentation, ribbons, contextMenus);\n\n        if (ribbons.length > 0) {\n            extension.ribbons = ribbons;\n        }\n\n        if (contextMenus.length > 0) {\n            extension.contextMenus = contextMenus;\n        }\n\n        // Unset the ribbon and context menu indexes since we know that we are done with processing\n        // all context menus and ribbons.\n        context.setCurrentRibbonIndex(ConversionContext.UnsetIndex);\n        context.setCurrentContextMenuIndex(ConversionContext.UnsetIndex);\n    }\n\n    private _addRuntimeActionLocalizedDisplayNames(runtimes: MOS.Runtimes[]): void {\n\n        if (Utilities.isNullOrUndefined(runtimes)) {\n            return;\n        }\n\n        for (var runtimeIdx = 0; runtimeIdx < runtimes.length; runtimeIdx++) {\n            var runtime: MOS.Runtimes = runtimes[runtimeIdx];\n\n            if (!Utilities.isNullOrUndefined(runtime) && !Utilities.isNullOrUndefined(runtime.actions)) {\n                for (var actionIdx = 0; actionIdx < runtime.actions.length; actionIdx++) {\n                    var action: MOS.ExtensionRuntimesActionsItem = runtime.actions[actionIdx];\n                    this._addConstantResourceForAllSeenLocales(\n                        action.displayName,\n                        Constants.RuntimesActionsDisplayName,\n                        runtimeIdx,\n                        actionIdx,\n                        null,\n                        null,\n                        null,\n                        null);\n                }\n            }\n        }\n    }\n\n    private _addRibbonOrContextMenuForHostType(context: ConversionContext, manifestHostType: OSF.ManifestHostType, ribbons: MOS.Ribbons[], contextMenus: MOS.ContextMenus[]): void {\n\n        // If this host does not have any content in the manifest then we can skip the logic below\n        if (!this._doesHostHaveContentInManifest(manifestHostType)) {\n            return;\n        }\n\n        context.setManifestHostType(manifestHostType);\n        let hostType: string = Converter._getVersionOverrideHostTypeFromOsfManifestHostType(manifestHostType);\n\n        if (Converter._isWXP(hostType)) {\n\n            Converter._setVersionOverrideNumberAndCapabilitiesInContext(context, this._xmlManifest, hostType, OSF.VersionOverridesNumber.V1_0.toString());\n            let functionFileResid: Object = Converter._getFunctionFileResid(hostType, null, this._xmlManifest);\n            if (!Utilities.isNullOrUndefined(functionFileResid) && !Utilities.isNullOrUndefined(functionFileResid[Constants.InputDesktopFormFactor])) {\n                context.setCurrentFunctionFileResid(functionFileResid[Constants.InputDesktopFormFactor]);\n            }\n\n            // First look for information under the main manifest\n            // Using DesktopFormFactor here because it is the only place that supports ribbon command surfaces\n            // MobileFormFactor uses: MobileMessageReadCommandSurface, MobileOnlineMetingCommandSurface\n            let addinCommandsExtensionPoints: [] = Converter._getAddinCommandsExtensionPoints(hostType, null, Constants.InputDesktopFormFactor, this._xmlManifest);\n\n            if (!Utilities.isNullOrUndefined(addinCommandsExtensionPoints)) {\n                this._addRibbonOrContextMenuForManifestSection(context, hostType, null, addinCommandsExtensionPoints, ribbons, contextMenus);\n            }\n\n            context.setCurrentFunctionFileResid(null);\n\n            // Clear the override version requirements from the context\n            Converter._clearVersionOverrideNumberAndCapabilitiesInContext(context);\n        }\n        else if (hostType === Constants.InputMailHost) {\n\n            // Now look for extension points in each override\n            let supportedVersionOverrides = Converter._getMailHostVersionOVerrides();\n            for (let vo of supportedVersionOverrides) {\n                // Now look for extension points under each of the overrides\n\n                // Using DesktopFormFactor here because it is the only place that supports ribbon command surfaces\n                // MobileFormFactor uses: MobileMessageReadCommandSurface, MobileOnlineMetingCommandSurface\n                let addinCommandsExtensionPoints: [] = Converter._getAddinCommandsExtensionPoints(hostType, vo, Constants.InputDesktopFormFactor, this._xmlManifest);\n\n                Converter._setVersionOverrideNumberAndCapabilitiesInContext(context, this._xmlManifest, hostType, vo);\n\n                if (!Utilities.isNullOrUndefined(addinCommandsExtensionPoints)) {\n\n                    let functionFileResidVersion: Object = Converter._getFunctionFileResid(hostType, vo, this._xmlManifest);\n                    if (!Utilities.isNullOrUndefined(functionFileResidVersion) && !Utilities.isNullOrUndefined(functionFileResidVersion[Constants.InputDesktopFormFactor])) {\n                        context.setCurrentFunctionFileResid(functionFileResidVersion[Constants.InputDesktopFormFactor]);\n                    }\n\n                    this._addRibbonOrContextMenuForManifestSection(context, hostType, vo, addinCommandsExtensionPoints, ribbons, contextMenus);\n                    context.setCurrentFunctionFileResid(null);\n                }\n\n                // Clear the override version requirements from the context\n                Converter._clearVersionOverrideNumberAndCapabilitiesInContext(context);\n            }\n        }\n        else {\n            Utilities.logError(\"Unsupported host skipping processing for host type: %s\", hostType);\n        }\n\n        context.setManifestHostType(null);\n    }\n\n    private _addRibbonOrContextMenuForManifestSection(context: ConversionContext, versionOverrideHostIndex: string, versionOverrideIndex: string, addinCommandsExtensionPoints: [], ribbons: MOS.Ribbons[], contextMenus: MOS.ContextMenus[]) {\n\n        let len: number = addinCommandsExtensionPoints.length;\n\n        for (let idx: number = 0; idx < len; idx++) {\n            let extPoint: Object = addinCommandsExtensionPoints[idx];\n            // Only look for the ribbon since we are populating the ribbon now\n            if (Converter._isRibbonCommandSurface(extPoint[Constants.InputType])) {\n\n                context.setCurrentCommandSurfaceType(CommandSurfaceType.Ribbon);\n                let ribbon: MOS.Ribbons = new MOS.Ribbons();\n\n                // Keep track of a count of the ribbon index for purposes of the localization indexed strings\n                if (context.getCurrentRibbonIndex() === ConversionContext.UnsetIndex) {\n                    context.setCurrentRibbonIndex(0);\n                }\n                else {\n                    context.setCurrentRibbonIndex(context.getCurrentRibbonIndex() + 1);\n                }\n\n                ribbon.tabs = [];\n\n                // Now populate all the tabs\n                if (!Utilities.isNullOrUndefined(extPoint[Constants.InputTabs])) {\n                    for (let tabIdx: number = 0; tabIdx < extPoint[Constants.InputTabs].length; tabIdx++) {\n                        const tab: any = extPoint[Constants.InputTabs][tabIdx];\n                        context.setCurrentTabIndex(tabIdx);\n                        const mosTab: any = this._populateTab(context, tab);\n                        context.setCurrentTabIndex(ConversionContext.UnsetIndex);\n                        ribbon.tabs.push(mosTab);\n                    }\n                }\n\n                ribbon.contexts = [];\n                ribbon.contexts.push(Converter._getRibbonContextFromCommandSurface(extPoint[Constants.InputType]));\n\n                ribbon.requirements = new MOS.RequirementsExtensionElement();\n\n                this._populateRibbonAndContextMenuRequirements(context, ribbon.requirements);\n\n                Utilities.log(\"Adding ribbon for: %s and vo: %s\", versionOverrideHostIndex, versionOverrideIndex);\n                ribbons.push(ribbon);\n                context.setCurrentCommandSurfaceType(CommandSurfaceType.None);\n            }\n            else if (Converter._isContextMenuCommandSurface(extPoint[Constants.InputType])) {\n\n                context.setCurrentCommandSurfaceType(CommandSurfaceType.ContextMenu);\n                let contextMenu: MOS.ContextMenus = new MOS.ContextMenus;\n\n                // Keep track of a count of the context menu index for purposes of the localization indexed strings\n                if (context.getCurrentContextMenuIndex() === ConversionContext.UnsetIndex) {\n                    context.setCurrentContextMenuIndex(0);\n                }\n                else {\n                    context.setCurrentContextMenuIndex(context.getCurrentContextMenuIndex() + 1);\n                }\n\n                // Now populate all the menu\n                if (!Utilities.isNullOrUndefined(extPoint[Constants.InputChildren])) {\n\n                    // Map OfficeMenuNode => extension.contextMenus[x].menus[x]\n                    for (let menuNodeIdx: number = 0; menuNodeIdx < extPoint[Constants.InputChildren].length; menuNodeIdx++) {\n                        const menuNode: any = extPoint[Constants.InputChildren][menuNodeIdx];\n                        const mosMenu: MOS.ExtensionCommonCustomControlMenu = new MOS.ExtensionCommonCustomControlMenu();\n\n                        context.setCurrentContextMenuMenuIndex(menuNodeIdx);\n\n                        // Map \"menuControl\" => extension.contextMenus[x].menus[x].controls[x]\n                        for (let menuControlIdx: number = 0; menuControlIdx < menuNode[Constants.InputChildren].length; menuControlIdx++) {\n                            const menuControl: any = menuNode[Constants.InputChildren][menuControlIdx];\n\n                            context.setCurrentContextMenuMenuControlIndex(menuControlIdx);\n\n                            // Use existing code that parses ribbon menus to also parse this contextual menu\n                            this._populateMenuControl(context, mosMenu, menuControl);\n                            const mosContextMenuMenu: MOS.Menus = new MOS.Menus();\n\n                            mosContextMenuMenu.type = menuNode[Constants.InputType] === Constants.InputContextMenuCell ?\n                                MOS.MenusType.Cell : MOS.MenusType.Text;\n\n                            // The items of ribbon menus are ExtensionCommonCustomMenuItem but they are identical to ExtensionCommonCustomControlButton\n                            // So we can cast them and use them in the context menu.\n                            for (let ctxmnIdx: number = 0; ctxmnIdx < mosMenu.items.length; ctxmnIdx++) {\n                                mosContextMenuMenu.controls.push(<MOS.ExtensionCommonCustomControlMenuItem>(<unknown>(mosMenu.items[ctxmnIdx])));\n                            }\n\n                            if (Utilities.isNullOrUndefined(contextMenu.menus)) {\n                                contextMenu.menus = [];\n                            }\n\n                            contextMenu.menus.push(mosContextMenuMenu);\n                        }\n\n                        // Unset the menuControl index\n                        context.setCurrentContextMenuMenuControlIndex(ConversionContext.UnsetIndex);\n                    }\n\n                    // Unset the menu index\n                    context.setCurrentContextMenuMenuIndex(ConversionContext.UnsetIndex);\n                }\n\n                contextMenu.requirements = new MOS.RequirementsExtensionElement()\n\n                this._populateRibbonAndContextMenuRequirements(context, contextMenu.requirements);\n\n                Utilities.log(\"Adding contextMenu for: %s and vo: %s\", versionOverrideHostIndex, versionOverrideIndex);\n\n                contextMenus.push(contextMenu);\n                context.setCurrentCommandSurfaceType(CommandSurfaceType.None);\n            }\n        }\n    }\n\n    private _populateRibbonAndContextMenuRequirements(context: ConversionContext, requirements: MOS.RequirementsExtensionElement): void {\n\n        this._addRequirementSubelementScopesFromHost(context, requirements);\n\n        // Currently only DesktopFormFactor can have ribbons\n        requirements.formFactors.push(MOS.FormFactors.Desktop);\n    }\n\n    private _addRequirementSubelementScopesFromHost(context: ConversionContext, requirements: MOS.RequirementsExtensionElement): void {\n\n        if (Utilities.isNullOrUndefined(requirements.scopes)) {\n            requirements.scopes = [];\n        }\n\n        let scope: MOS.Scopes = Converter._getRequirementsScopeFromManifestHostType(context.getManifestHostType());\n\n        if (!Utilities.isNullOrUndefined(scope)) {\n            requirements.scopes.push(scope);\n        }\n\n        if (Utilities.isNullOrUndefined(requirements.formFactors)) {\n            requirements.formFactors = [];\n        }\n\n        Converter._mergeInVersionOverrideRequirements(context.getCurrentVersionOverrideCapabilities(), requirements);\n    }\n\n    private static _mergeInVersionOverrideRequirements(versionOverrideCapabilities: MOS.Capabilities[], requirements: MOS.RequirementsExtensionElement): void {\n\n        if (Utilities.isNullOrUndefined(versionOverrideCapabilities)) {\n            return;\n        }\n\n        // We add the capabilities from the version override if they haven't already been added\n        for (let capability of versionOverrideCapabilities) {\n\n            let matchingCapability: MOS.Capabilities = null;\n\n            if (Utilities.isNullOrUndefined(requirements.capabilities)) {\n                requirements.capabilities = [];\n            }\n            else {\n                matchingCapability = Converter._getMatchingCapability(requirements.capabilities, capability);\n            }\n\n            if (Utilities.isNullOrUndefined(matchingCapability)) {\n                // If the capability is like \"Mailbox\" is not already in the collection then we simply add it\n                requirements.capabilities.push(capability);\n            }\n            else {\n                // If the capability is already in the collection then we want to merge in the current capability\n                // min/max versions with the existing ones.\n\n                // Convert string versions (ie \"1.3\") to numbers\n                let incomingMin: number = Utilities.isNullOrUndefined(capability.minVersion) ? null : +capability.minVersion;\n                let existingMin: number = Utilities.isNullOrUndefined(matchingCapability.minVersion) ? null : +matchingCapability.minVersion;\n\n                // We should update the minVersion to the maximum minVersion between existingMin and, incomingMin as the maximum of the minVersion is what the Add-in supports.\n                // Like between \"mailbox\": \"1.2\" and \"mailbox\": \"1.5\" we should keep \"mailbox\" \"1.5\" as it is minimum version which is supported\n                if (!Utilities.isNullOrUndefined(existingMin) && !Number.isNaN(existingMin) && !Number.isNaN(incomingMin)) {\n                    if (incomingMin > existingMin) {\n                        matchingCapability.minVersion = incomingMin.toString();\n                    }\n                }\n            }\n        }\n    }\n\n    private static _getMatchingCapability(capabilities: MOS.Capabilities[], capability: MOS.Capabilities): MOS.Capabilities {\n\n        for (let cap of capabilities) {\n            if (cap.name === capability.name) {\n                return cap;\n            }\n        }\n\n        return null;\n    }\n\n    private static _capabilitiesContainCapability(capabilities: MOS.Capabilities[], capability: MOS.Capabilities): boolean {\n\n        for (let cap of capabilities) {\n            if (cap.name === capability.name &&\n                cap.maxVersion === capability.maxVersion &&\n                cap.minVersion === capability.minVersion) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    private _populateTab(context: ConversionContext, tab: Object): any {\n\n        let mosTab: any;\n        let mosGroups: MOS.ExtensionCommonCustomGroup[] = [];\n\n        if (Utilities.isNullOrUndefined(tab[Constants.InputLabel])) {\n            mosTab = new MOS.ExtensionRibbonsArrayTabsItem();\n            mosTab.builtInTabId = tab[Constants.InputId];\n        }\n        else {\n            mosTab = new MOS.ExtensionRibbonsArrayTabsItem();\n            mosTab.id = tab[Constants.InputId];\n            mosTab.label = tab[Constants.InputLabel];\n        }\n\n        this._populateGroups(context, mosGroups, tab[Constants.InputChildren]);\n        mosTab.groups = mosGroups;\n\n        return mosTab;\n    }\n\n    private _populateGroups(context: ConversionContext, mosGroups: MOS.ExtensionCommonCustomGroup[], groups: []): void {\n\n        for (let idx: number = 0; idx < groups.length; idx++) {\n            let group = groups[idx];\n            let mosGroup: MOS.ExtensionCommonCustomGroup = new MOS.ExtensionCommonCustomGroup();\n\n            context.setCurrentGroupIndex(idx);\n            this._populateGroup(context, mosGroup, group);\n            context.setCurrentGroupIndex(-1);\n            mosGroups.push(mosGroup);\n        }\n    }\n\n    private _populateGroup(context: ConversionContext, mosGroup: MOS.ExtensionCommonCustomGroup, group: Object): void {\n\n        mosGroup.id = group[Constants.InputId];\n        mosGroup.label = this._getResourceAndWriteLocalizedValues(\n            group[Constants.InputLabelResId],\n            group[Constants.InputLabel],\n            Constants.MaxResourceStringLength64,\n            context.getCurrentVersionOverrideNumber(),\n            Constants.RibbonsTabsGroupsLabel,\n            ResourceType.AllLocaleShortStrings,\n            context.getCurrentRibbonIndex(),\n            context.getCurrentTabIndex(),\n            context.getCurrentGroupIndex());\n\n        // TODO:  This property is currently not parsed by WAC legacy parser\n/* Devpreview does not have overridenbyribbonapi\n        if (!Utilities.isNullOrUndefined(group[Constants.InputOverridenByRibbonApi])) {\n            mosGroup.overriddenByRibbonApi = group[Constants.InputOverridenByRibbonApi];\n        }\n*/\n\n        // Populate Group icons\n        this._populateGroupIcons(context, mosGroup, group[Constants.InputIcon], group[Constants.InputIconResId]);\n\n        // Populate Group controls\n        mosGroup.controls = [];\n        this._populateGroupControls(context, mosGroup.controls, group[Constants.InputChildren]);\n    }\n\n    private _populateGroupIcons(context: ConversionContext, group: MOS.ExtensionCommonCustomGroup, groupIcons: [], groupIconResIds: []): void {\n\n        if (Utilities.isNullOrUndefined(groupIcons)) {\n            return;\n        }\n\n        let iconIdx: number = 0;\n\n        for (let size in groupIcons) {\n            const url: string = groupIcons[size];\n            const mosIcon: MOS.ExtensionCommonIcon = new MOS.ExtensionCommonIcon();\n\n            context.setCurrentIconIndex(iconIdx);\n\n            let fileShortName: string = this._iconBuilder.addIconAndGetReference(url, !Utilities._writeImageUrls);\n\n            if (Utilities._writeImageUrls) {\n                mosIcon.url = fileShortName;\n            } else {\n                mosIcon.file = fileShortName;\n            }\n\n            mosIcon.size = +size;\n\n            this._populateLocaleSensitiveProperty\n\n            this._getResourceAndWriteLocalizedValues(\n                groupIconResIds[size],\n                fileShortName,\n                Constants.MaxResourceStringLength2048,\n                context.getCurrentVersionOverrideNumber(),\n                Utilities._writeImageUrls ? Constants.RibbonsTabsGroupsIconsUrl : Constants.RibbonsTabsGroupsIconsFile,\n                ResourceType.AllLocaleImages,\n                context.getCurrentRibbonIndex(),\n                context.getCurrentTabIndex(),\n                context.getCurrentGroupIndex(),\n                context.getCurrentIconIndex(),\n                ConversionContext.UnsetIndex);\n\n            if (Utilities.isNullOrUndefined(group.icons)) {\n                group.icons = [];\n            }\n\n            group.icons.push(mosIcon);\n\n            iconIdx++;\n        }\n    }\n\n    private _createUniqueId(legacyId: string): string {\n        let uniqueSuffix: number = this.getNextUniqueSuffix();\n        return legacyId + \"_\" + uniqueSuffix;\n    }\n\n    private _createUniqueActionId(id: string): string {\n        let uniqueSuffix: number = this.getNextActionSuffix();\n        return id + \"_\" + uniqueSuffix;\n    }\n\n    private _createUniqueViewId(id: string): string {\n        let uniqueSuffix: number = this.getNextViewSuffix();\n        return id + \"_\" + uniqueSuffix;\n    }\n\n    private _populateGroupControls(context: ConversionContext, mosControls: any[], controls: []): void {\n\n        for (let idx: number = 0; idx < controls.length; idx++) {\n            let control: Object = controls[idx];\n            context.setCurrentControlIndex(idx);\n\n            switch (control[Constants.InputControlType]) {\n                case Constants.InputButton:\n                    let buttonControl: MOS.ExtensionCommonCustomGroupControlsItem = new MOS.ExtensionCommonCustomGroupControlsItem();\n                    this._populateButtonControl(context, buttonControl, control);\n                    mosControls.push(buttonControl);\n                    break;\n                case Constants.InputMenu:\n                    let menuControl: MOS.ExtensionCommonCustomControlMenu = new MOS.ExtensionCommonCustomControlMenu();\n                    this._populateMenuControl(context, menuControl, control);\n                    mosControls.push(menuControl);\n                    break;\n                default:\n                    throw \"need to handle legacy control type: \" + control[Constants.InputControlType];\n            }\n        }\n\n        context.setCurrentControlIndex(ConversionContext.UnsetIndex);\n    }\n\n    private _populateMenuControl(context: ConversionContext, menuControl: MOS.ExtensionCommonCustomControlMenu, control: Object): void {\n\n        if (Utilities.isNullOrUndefined(control?.[Constants.InputChildren]) || control[Constants.InputChildren].length == 0) {\n            return;\n        }\n\n        this._populateControlProperties(context, menuControl, control);\n\n        // populate each menu item\n        for (let idx: number = 0; idx < control[Constants.InputChildren].length; idx++) {\n\n            let menuItemObject: Object = control[Constants.InputChildren][idx];\n            let menuItem: MOS.ExtensionCommonCustomControlMenuItem = new MOS.ExtensionCommonCustomControlMenuItem();\n\n            context.setCurrentMenuItemIndex(idx); // used for ribbons\n            context.setCurrentContextMenuMenuControlMenuItemIndex(idx); // used for context menus\n            this._populateMenuItem(context, menuItem, menuItemObject);\n\n            if (Utilities.isNullOrUndefined(menuControl.items)) {\n                menuControl.items = [];\n            }\n\n            menuControl.items.push(menuItem);\n        }\n\n        context.setCurrentMenuItemIndex(ConversionContext.UnsetIndex);\n        context.setCurrentContextMenuMenuControlIndex(ConversionContext.UnsetIndex);\n    }\n\n    private _populateMenuItem(context: ConversionContext, menuItemControl: MOS.ExtensionCommonCustomControlMenuItem, control: Object): void {\n\n        let menuItemObject: Object = control[Constants.InputMenuItem];\n        this._populateControlProperties(context, menuItemControl, control);\n    }\n\n    private _populateControlProperties(context: ConversionContext, mosControl: Object, control: Object): void {\n\n        let isRibbon: boolean = context.isInRibbon();\n        let isMenuItem: boolean = false;\n        if (control[Constants.InputControlType] === Constants.InputButton) {\n\n            let mosButton: MOS.ExtensionCommonCustomGroupControlsItem = <MOS.ExtensionCommonCustomGroupControlsItem>mosControl;\n\n            mosButton.enabled = control[Constants.InputEnabled];\n            mosButton.id = control[Constants.InputId];\n            mosButton.label = this._populateControlLocalizedField(\n                context,\n                control[Constants.InputLabelResId],\n                control[Constants.InputLabel],\n                Constants.MaxResourceStringLength64,\n                ResourceType.AllLocaleShortStrings,\n                isRibbon ? Constants.RibbonsTabsGroupsControlsLabel : Constants.ContextMenusMenusControlsLabel);\n            mosButton.type = MOS.ExtensionCommonCustomGroupControlsItemType.Button;\n            mosButton.overriddenByRibbonApi = Utilities.isNullOrUndefined(control[Constants.InputOverridenByRibbonApi]) ? false :\n                control[Constants.InputOverridenByRibbonApi];\n        }\n        else if (control[Constants.InputControlType] === Constants.InputMenuItem) {\n\n            let mosMenuItem: MOS.ExtensionCommonCustomControlMenuItem = <MOS.ExtensionCommonCustomControlMenuItem>mosControl;\n\n            mosMenuItem.enabled = control[Constants.InputEnabled];\n            mosMenuItem.id = control[Constants.InputId];\n            mosMenuItem.label = this._populateControlLocalizedField(\n                context,\n                control[Constants.InputLabelResId],\n                control[Constants.InputLabel],\n                Constants.MaxResourceStringLength64,\n                ResourceType.AllLocaleShortStrings,\n                isRibbon ? Constants.RibbonsTabsGroupsControlsItemsLabel : Constants.ContextMenusMenusControlsItemsLabel);\n            mosMenuItem.type = MOS.ExtensionCommonCustomControlMenuItemType.MenuItem;\n            mosMenuItem.overriddenByRibbonApi = Utilities.isNullOrUndefined(control[Constants.InputOverridenByRibbonApi]) ? false :\n                control[Constants.InputOverridenByRibbonApi];\n\n            isMenuItem = true;\n        }\n        else if (control[Constants.InputControlType] === Constants.InputMenu) {\n\n            let mosMenu: MOS.ExtensionCommonCustomControlMenu = <MOS.ExtensionCommonCustomControlMenu>mosControl;\n\n            mosMenu.id = control[Constants.InputId];\n            mosMenu.label = this._populateControlLocalizedField(\n                context,\n                control[Constants.InputLabelResId],\n                control[Constants.InputLabel],\n                Constants.MaxResourceStringLength64,\n                ResourceType.AllLocaleShortStrings,\n                isRibbon ? Constants.RibbonsTabsGroupsControlsLabel : Constants.ContextMenusMenusControlsLabel);\n            mosMenu.type = MOS.ExtensionCommonCustomControlMenuType.Menu;\n            mosMenu.overriddenByRibbonApi = Utilities.isNullOrUndefined(control[Constants.InputOverridenByRibbonApi]) ? false :\n                control[Constants.InputOverridenByRibbonApi];\n        }\n        else {\n            Utilities.logError(\"Unrecognized control: \" + control[Constants.InputControlType]);\n            return;\n        }\n\n        // Menus have no action.  Only Buttons and MenuItems do.\n        if (control[Constants.InputControlType] !== Constants.InputMenu) {\n            this._populateControlAction(context, mosControl, control);\n        }\n        this._populateControlSupertip(context, mosControl, control);\n\n        if (!Utilities.isNullOrUndefined(control[Constants.InputIcon])) {\n            mosControl[Constants.MosIcons] = [];\n            this._populateControlIcons(context, mosControl[Constants.MosIcons], control[Constants.InputIcon], control[Constants.InputIconResId], isMenuItem);\n        }\n    }\n\n    private _populateControlLocalizedField(\n        context: ConversionContext,\n        labelResId: string,\n        defaultValue: string,\n        maxLength: number,\n        resourceType: ResourceType,\n        resourceString: string): string {\n\n        if (context.isInRibbon()) {\n            return this._getResourceAndWriteLocalizedValues(\n                labelResId,\n                defaultValue,\n                maxLength,\n                context.getCurrentVersionOverrideNumber(),\n                resourceString,\n                resourceType,\n                context.getCurrentRibbonIndex(),\n                context.getCurrentTabIndex(),\n                context.getCurrentGroupIndex(),\n                context.getCurrentControlIndex(),\n                context.getCurrentMenuItemIndex());\n        }\n        else {\n            // If we are not populating the ribbon then we are populating a context menu\n            return this._getResourceAndWriteLocalizedValues(\n                labelResId,\n                defaultValue,\n                maxLength,\n                context.getCurrentVersionOverrideNumber(),\n                resourceString,\n                resourceType,\n                context.getCurrentContextMenuIndex(),\n                context.getCurrentContextMenuMenuIndex(),\n                context.getCurrentContextMenuMenuControlIndex(),\n                context.getCurrentContextMenuMenuControlMenuItemIndex(),\n                ConversionContext.UnsetIndex);\n        }\n    }\n\n    private _populateButtonControl(\n        context: ConversionContext,\n        buttonControl: MOS.ExtensionCommonCustomGroupControlsItem,\n        control: Object): void {\n\n        this._populateControlProperties(context, buttonControl, control);\n    }\n\n    private _populateControlAction(context: ConversionContext, mosControl: Object, control: Object): void {\n\n        // Handle the action within the button\n        if (!Utilities.isNullOrUndefined(control) &&\n            !Utilities.isNullOrUndefined(control[Constants.InputAction])) {\n\n            // WI: 6080838 - Currently we are only supporting general runtimes and will add content runtimes later\n            let runtimeUrl: string = null;\n\n            let functionName: string = control[Constants.InputAction][Constants.InputFunctionName];\n\n            if (!Utilities.isNullOrUndefined(control[Constants.InputAction][Constants.InputSourceLocation])) {\n                runtimeUrl = control[Constants.InputAction][Constants.InputSourceLocation];\n            }\n            else if (!Utilities.isNullOrUndefined(functionName)) {\n                runtimeUrl = context.getCurrentFunctionFileResid();\n            }\n\n            let runtime: MOS.Runtimes = null;\n            // We need more implementation to look if the Id is available in the SharedRuntime array and check the Lifetime of it. \n            let runtimeLookupKey: string = Converter._generateRuntimeLookupKey(runtimeUrl, MOS.RuntimesLifetime.Short, context.getCurrentVersionOverrideCapabilities());\n            if (!Utilities.isNullOrUndefined(runtimeLookupKey)) {\n                runtime = this._runtimeLookup[runtimeLookupKey];\n            }\n\n            if (Utilities.isNullOrUndefined(runtime)) {\n                Utilities.assert(!Utilities.isNullOrUndefined(runtime), \"Expected runtime to be cached.\");\n                Utilities.logError(\"Did not find runtime. \" + runtimeLookupKey);\n                return;\n            }\n\n            let actionId: string = Constants.InputAction;\n\n            // If this is an ExecuteFunction type with a function name then we use the function name as the action id\n            if (!Utilities.isNullOrUndefined(functionName)) {\n                actionId = functionName;\n            }\n            else {\n                // If there is a taskpane id then we use it as a base so it is easier to identify the action\n                // however we always append a unique integer to make sure that the action ids won't collide.\n                if (!Utilities.isNullOrUndefined(control[Constants.InputAction][Constants.InputTaskpaneId])) {\n                    actionId = control[Constants.InputAction][Constants.InputTaskpaneId];\n                }\n\n                actionId = this._createUniqueActionId(actionId);\n            }\n\n            if (Utilities.isNullOrUndefined(runtime.actions)) {\n                runtime.actions = [];\n            }\n\n            if (!Utilities.isNullOrUndefined(control[Constants.InputAction][Constants.InputSourceLocation])) {\n                let action: MOS.ExtensionRuntimesActionsItem = new MOS.ExtensionRuntimesActionsItem();\n\n                action.id = actionId;\n                action.pinnable = control[Constants.InputAction][Constants.InputPinnable];\n                if (Utilities.isNullOrUndefined(control[Constants.InputAction][Constants.InputTaskpaneId])) {\n                    action.view = this._createUniqueViewId(Constants.MosView);\n                }\n                else {\n                    action.view = control[Constants.InputAction][Constants.InputTaskpaneId];\n                }\n\n                action.displayName = actionId;\n                action.type = MOS.ExtensionRuntimesActionsItemType.OpenPage;\n\n                // TODO: Currently casting these and they still show up as \"type=executeFunction\" but the schema\n                // currently doesn't allow the two types to be in the same runtime.  This is something that needs to be resolved.\n                runtime.actions.push(action);\n            }\n            else if (!Utilities.isNullOrUndefined(control[Constants.InputAction][Constants.InputFunctionName])) {\n                let action: MOS.ExtensionRuntimesActionsItem = new MOS.ExtensionRuntimesActionsItem();\n                action.id = actionId;\n                action.displayName = actionId;\n                action.type = MOS.ExtensionRuntimesActionsItemType.ExecuteFunction;\n                runtime.actions.push(action);\n            }\n\n            // Finally link the control in the ribbon with the action inside of the runtime\n            mosControl[Constants.MosActionId] = actionId;\n        }\n        else {\n            Utilities.logError(\"Expected action and sourceLocation in button or menu control.\")\n        }\n    }\n\n    private _controlTypeFromString(controlType: string): MOS.ExtensionCommonCustomGroupControlsItemType {\n\n        if (!Utilities.isNullOrUndefined(controlType)) {\n            switch (controlType) {\n                case Constants.InputButton:\n                    return MOS.ExtensionCommonCustomGroupControlsItemType.Button;\n            }\n        }\n        throw \"unable to find control type:\" + controlType;\n    }\n\n    private _populateControlIcons(context: ConversionContext, mosControlIcons: MOS.ExtensionCommonIcon[], icons: [], iconResIds: [], isMenuItem: boolean): void {\n\n        if (Utilities.isNullOrUndefined(icons)) {\n            return;\n        }\n\n        let iconIdx: number = 0;\n\n        for (let size in icons) {\n\n            const url: string = icons[size];\n            const resId: string = iconResIds[size];\n\n            context.setCurrentIconIndex(iconIdx);\n\n            const mosIcon: MOS.ExtensionCommonIcon = new MOS.ExtensionCommonIcon();\n\n            let fileShortName: string = this._iconBuilder.addIconAndGetReference(url, !Utilities._writeImageUrls);\n\n            if (context.isInRibbon()) {\n\n                if (isMenuItem) {\n\n                    this._getResourceAndWriteLocalizedValues(\n                        resId,\n                        fileShortName,\n                        Constants.MaxResourceStringLength2048,\n                        context.getCurrentVersionOverrideNumber(),\n                        Utilities._writeImageUrls ? Constants.RibbonsTabsGroupsControlsItemsIconsUrl : Constants.RibbonsTabsGroupsControlsItemsIconsFile,\n                        ResourceType.AllLocaleImages,\n                        context.getCurrentRibbonIndex(),\n                        context.getCurrentTabIndex(),\n                        context.getCurrentGroupIndex(),\n                        context.getCurrentControlIndex(),\n                        context.getCurrentMenuItemIndex(),\n                        context.getCurrentIconIndex());\n                }\n                else {\n\n                    this._getResourceAndWriteLocalizedValues(\n                        resId,\n                        fileShortName,\n                        Constants.MaxResourceStringLength2048,\n                        context.getCurrentVersionOverrideNumber(),\n                        Utilities._writeImageUrls ? Constants.RibbonsTabsGroupsControlsIconsUrl : Constants.RibbonsTabsGroupsControlsIconsFile,\n                        ResourceType.AllLocaleImages,\n                        context.getCurrentRibbonIndex(),\n                        context.getCurrentTabIndex(),\n                        context.getCurrentGroupIndex(),\n                        context.getCurrentControlIndex(),\n                        context.getCurrentIconIndex());\n                }\n            }\n            else { // If we are populating a context menu\n\n                if (isMenuItem) {\n                    this._getResourceAndWriteLocalizedValues(\n                        resId,\n                        fileShortName,\n                        Constants.MaxResourceStringLength2048,\n                        context.getCurrentVersionOverrideNumber(),\n                        Utilities._writeImageUrls ? Constants.ContextMenusMenusControlsItemsIconsUrl : Constants.ContextMenusMenusControlsItemsIconsFile,\n                        ResourceType.AllLocaleImages,\n                        context.getCurrentContextMenuIndex(),\n                        context.getCurrentContextMenuMenuIndex(),\n                        context.getCurrentContextMenuMenuControlIndex(),\n                        context.getCurrentContextMenuMenuControlMenuItemIndex(),\n                        context.getCurrentIconIndex(),\n                        ConversionContext.UnsetIndex);\n                }\n                else {\n                    this._getResourceAndWriteLocalizedValues(\n                        resId,\n                        fileShortName,\n                        Constants.MaxResourceStringLength2048,\n                        context.getCurrentVersionOverrideNumber(),\n                        Utilities._writeImageUrls ? Constants.ContextMenusMenusControlsIconsUrl : Constants.ContextMenusMenusControlsIconsFile,\n                        ResourceType.AllLocaleImages,\n                        context.getCurrentContextMenuIndex(),\n                        context.getCurrentContextMenuMenuIndex(),\n                        context.getCurrentContextMenuMenuControlIndex(),\n                        context.getCurrentIconIndex(),\n                        ConversionContext.UnsetIndex);\n                }\n            }\n\n            if (Utilities._writeImageUrls) {\n                mosIcon.url = fileShortName;\n            } else {\n                mosIcon.file = fileShortName;\n            }\n\n            mosIcon.size = +size;\n            mosControlIcons.push(mosIcon);\n\n            iconIdx++;\n        }\n    }\n\n    private _populateControlSupertip(context: ConversionContext, mosControl: Object, control: Object): void {\n\n        let supertip: Object = control[Constants.InputSupertip];\n        // Only create the supertip if the legacy control has one\n        if (Utilities.isNullOrUndefined(supertip)) {\n            return;\n        }\n\n        let isRibbon: boolean = context.isInRibbon();\n\n        if (mosControl[Constants.MosType] === MOS.ExtensionCommonCustomGroupControlsItemType.Button) {\n\n            let mosButton: MOS.ExtensionCommonCustomGroupControlsItem = <MOS.ExtensionCommonCustomGroupControlsItem>mosControl;\n            mosButton.supertip = new MOS.ExtensionCommonSuperToolTip();\n            mosButton.supertip.description = this._populateControlLocalizedField(\n                context,\n                supertip[Constants.InputDescriptionResId],\n                supertip[Constants.InputDescription],\n                Constants.MaxResourceStringLength128,\n                ResourceType.AllLocaleLongStrings,\n                isRibbon ? Constants.RibbonsTabsGroupsControlsSupertipDescription : Constants.ContextMenusMenusControlsSupertipDescription);\n            mosButton.supertip.title = this._populateControlLocalizedField(\n                context,\n                supertip[Constants.InputTitleResId],\n                supertip[Constants.InputTitle],\n                Constants.MaxResourceStringLength64,\n                ResourceType.AllLocaleShortStrings,\n                isRibbon ? Constants.RibbonsTabsGroupsControlsSupertipTitle : Constants.ContextMenusMenusControlsSupertipTitle);\n        }\n        else if (mosControl[Constants.MosType] === MOS.ExtensionCommonCustomControlMenuItemType.MenuItem) {\n\n            let mosMenuItem: MOS.ExtensionCommonCustomControlMenuItem = <MOS.ExtensionCommonCustomControlMenuItem>mosControl;\n            mosMenuItem.supertip = new MOS.ExtensionCommonSuperToolTip();\n\n            mosMenuItem.supertip.description = this._populateControlLocalizedField(\n                context,\n                supertip[Constants.InputDescriptionResId],\n                supertip[Constants.InputDescription],\n                Constants.MaxResourceStringLength128,\n                ResourceType.AllLocaleLongStrings,\n                isRibbon ? Constants.RibbonsTabsGroupsControlsItemsSupertipDescription : Constants.ContextMenusMenusControlsItemsSupertipDescription);\n            mosMenuItem.supertip.title = this._populateControlLocalizedField(\n                context,\n                supertip[Constants.InputTitleResId],\n                supertip[Constants.InputTitle],\n                Constants.MaxResourceStringLength64,\n                ResourceType.AllLocaleShortStrings,\n                isRibbon ? Constants.RibbonsTabsGroupsControlsItemsSupertipTitle : Constants.ContextMenusMenusControlsItemsSupertipTitle);\n        }\n        else if (mosControl[Constants.MosType] === MOS.ExtensionCommonCustomControlMenuType.Menu) {\n\n            let mosMenu: MOS.ExtensionCommonCustomControlMenu = <MOS.ExtensionCommonCustomControlMenu>mosControl;\n            mosMenu.supertip = new MOS.ExtensionCommonSuperToolTip();\n\n            mosMenu.supertip.description = this._populateControlLocalizedField(\n                context,\n                supertip[Constants.InputDescriptionResId],\n                supertip[Constants.InputDescription],\n                Constants.MaxResourceStringLength128,\n                ResourceType.AllLocaleLongStrings,\n                isRibbon ? Constants.RibbonsTabsGroupsControlsSupertipDescription : Constants.ContextMenusMenusControlsSupertipDescription);\n            mosMenu.supertip.title = this._populateControlLocalizedField(\n                context,\n                supertip[Constants.InputTitleResId],\n                supertip[Constants.InputTitle],\n                Constants.MaxResourceStringLength64,\n                ResourceType.AllLocaleShortStrings,\n                isRibbon ? Constants.RibbonsTabsGroupsControlsSupertipTitle : Constants.ContextMenusMenusControlsSupertipTitle);\n        }\n        else {\n            Utilities.logError(\"Unexpected control: \" + control[Constants.InputControlType]);\n        }\n    }\n\n    private _addScopesFromHosts(requirements: MOS.RequirementsExtensionElement): void {\n\n        requirements.scopes = [];\n        // Get the different hosts specified in the top level <Hosts> node and\n        // add the corresponding hosts on the runtime.\n        for (let host in this._xmlManifest.getHosts()) {\n            switch (this._xmlManifest.getHosts()[host]) {\n                case OSF.ManifestHostType.Workbook:\n                    requirements.scopes.push(MOS.Scopes.Workbook);\n                    break;\n                case OSF.ManifestHostType.Document:\n                    requirements.scopes.push(MOS.Scopes.Document);\n                    break;\n                case OSF.ManifestHostType.Presentation:\n                    requirements.scopes.push(MOS.Scopes.Presentation);\n                    break;\n                case OSF.ManifestHostType.Notebook:\n                    // TODO: currently don't have notebook scope in mos manifest\n                    Utilities.assert(false, \"need to implement notebook scope\");\n                    break;\n                case OSF.ManifestHostType.Mailbox:\n                    requirements.scopes.push(MOS.Scopes.Mail);\n                    break;\n                case OSF.ManifestHostType.Drawing:\n                    // TODO: currently don't have notebook scope in mos manifest\n                    Utilities.assert(false, \"need to implement drawing scope\");\n                    break;\n            }\n        }\n\n        if (requirements.scopes.length == 0) {\n\n            // If there is no <Hosts> node that tells us what hosts this addin is for, for Outlook/Mailapp, we can try to fall back\n            // on the manifest type which is on the <OfficeApp type=\"\"> node.  This will not work for WXP but will for outlook because \n            // there is a one to one mapping from MailApp to the host Outlook that it works in and applies to.\n            if (!Utilities.isNullOrUndefined(this._xmlManifest._hostType) && this._xmlManifest.getTarget() == OSF.OfficeAppType.MailApp) {\n                requirements.scopes.push(MOS.Scopes.Mail);\n            }\n        }\n    }\n\n    private _populateRuntimes(context: ConversionContext, extension: MOS.Extensions): void {\n        let runtimes: MOS.Runtimes[] = [];\n\n        // Go through and collect all the different runtimes that are in the manifest\n        // in default settings, runtimes nodes, actions etc. There will be one runtime for each unique url\n\n        let collectedRuntimeRecords = [];\n        this._collectRuntimes(context, collectedRuntimeRecords);\n\n        this._runtimeLookup = {};\n        this._createMosRuntimesFromRuntimeRecords(collectedRuntimeRecords, /*out*/ runtimes, this._runtimeLookup);\n\n        extension.runtimes = runtimes;\n    }\n\n    // The purpose of this method is to coalesce the runtime records from the possible runtimes that we've found into a set of\n    // runtimes that will be used for the remainder of the parsing and where things like actions and functions can be added.\n    private _createMosRuntimesFromRuntimeRecords(runtimeRecords: RuntimeRecord[], runtimes: MOS.Runtimes[], runtimeLookup: Object): void {\n\n        // ContentApps are not supported currently for runtimes\n        if (this._xmlManifest.getTarget() != OSF.OfficeAppType.TaskPaneApp && this._xmlManifest.getTarget() != OSF.OfficeAppType.MailApp) {\n            return;\n        }\n\n        if (runtimeRecords.length == 0) {     // no runtime detected. log an error\n            console.error('\\x1b[31m%s\\x1b[0m', 'No supported runtime found in \"' + Utilities._inputXmlFilePath + '\", so the converted manifest is invalid. ' +\n                'Please note that some elements such as ContentPane and DetectedEntity are not supported by metaOS manifest.');\n            process.exitCode = 1;\n        }\n\n        // The index of the runtimes that are created. Used to properly create the localization strings like: \"extension[0].runtimes[3]\"\n        let idxRuntime: number = -1;\n\n        // We loop through these runtimes and create unique mosruntimes for each unique sourceLocation/Resid\n        for (let idxRuntimeRecord: number = 0; idxRuntimeRecord < runtimeRecords.length; idxRuntimeRecord++) {\n            let runtimeRecord: RuntimeRecord = runtimeRecords[idxRuntimeRecord];\n            // Create runtime lookup key\n            let key: string = runtimeRecord.getKey();\n\n            // Based on the key we lookup the Runtime in the table if it is not added that means we need to create the corrosponding Runtime object in the MOS manifest\n            // If it is already present then we should skip it and continue iterating the loop\n            let runtime: MOS.Runtimes = runtimeLookup[key];\n\n            if (Utilities.isNullOrUndefined(runtime)) {\n                runtime = new MOS.Runtimes();\n                idxRuntime++;\n\n                runtime.id = \"runtime_\" + this.getNextRuntimeSuffix();\n\n                runtime.requirements = Converter._cloneRequirements(runtimeRecord._requirements);\n                runtime.requirements.capabilities = runtimeRecord._versionOverrideCapabilities;\n\n                // Currently we call everything a General runtime.\n                // TODO: WI: 6080838 - need to enable content runtimes\n                runtime.type = MOS.RuntimesType.General;\n                runtime.lifetime = runtimeRecord._lifetime;\n\n                if (runtimeRecord._source == RuntimeSource.ShowTaskpane ||\n                    runtimeRecord._source == RuntimeSource.ExecuteFunction ||\n                    runtimeRecord._source == RuntimeSource.SharedRuntimes ||\n                    runtimeRecord._source == RuntimeSource.LaunchEvent) {\n                    runtime.code.page = this._getResourceAndWriteLocalizedValues(\n                        runtimeRecord._resource,\n                        null,\n                        Constants.MaxResourceStringLength2048,\n                        runtimeRecord._versionOverridesNumber,\n                        Constants.RuntimesPage,\n                        ResourceType.AllLocaleUrls, idxRuntime);\n                    if (!Utilities.isNullOrUndefined(runtimeRecord._scriptResId)) {\n                        runtime.code.script = this._getResourceAndWriteLocalizedValues(\n                            runtimeRecord._scriptResId,\n                            null,\n                            Constants.MaxResourceStringLength2048,\n                            runtimeRecord._versionOverridesNumber,\n                            Constants.RuntimesScript,\n                            ResourceType.AllLocaleUrls,\n                            idxRuntime);\n                    }\n                }\n                else if (runtimeRecord._source == RuntimeSource.DefaultSettingSourceLocations) {\n                    // DefaultSettings are outside of VersionOverrides so they have the translations in <Override> nodes and these\n                    // are stored in the runtimeRecord._localResources property.  Therefore we don't do a resId lookup here (which is VersionOverride mechanism)\n                    // but instead look up the proper language string in runtimeRecord._localeResources.\n                    runtime.code.page = runtimeRecord._localeResources[this._xmlManifest.getDefaultLocale()];\n                }\n                else {\n                    Utilities.logError(\"Unrecognized runtimerecord._source: \" + runtimeRecord._source + \"runtime.source: \" + runtimeRecord._source);\n                }\n\n                Utilities.assert(!Utilities.isNullOrUndefined(runtime.code.page), \"runtime.code.page should not be null\");\n                // add this runtime to the MOS manifest\n                runtimes.push(runtime);\n\n                // Add a lookup to this runtime so that it can easily be found later when parsing the rest of the manifest\n                // And finding things like Actions that need to be assigned to a particular runtime that matches their source location url.\n                runtimeLookup[key] = runtime;\n\n                // Now create the localized strings for this runtime\n                if (!Utilities.isNullOrUndefined(runtimeRecord._localeResources)) {\n\n                    for (let locale in runtimeRecord._localeResources) {\n\n                        // The default locale values are written into the main manifest file and do not need separate localized resources in another file\n                        if (locale == this._xmlManifest.getDefaultLocale()) {\n                            continue;\n                        }\n\n                        let resourceTemplate = \"\";\n\n                        if (!Utilities.isNullOrUndefined(runtime.code.page)) {\n                            resourceTemplate = Constants.RuntimesPage;\n                            // Now add a localized resource like runtimes[1].code.page\n                            let resourceName: string = util.format(resourceTemplate, idxRuntime);\n                            this._localeBuilder.addLocaleString(locale, resourceName, runtimeRecord._localeResources[locale]);\n                        }\n\n                        if (!Utilities.isNullOrUndefined(runtime.code.script)) {\n                            resourceTemplate = Constants.RuntimesScript;\n                            // Now add a localized resource like runtimes[1].code.script\n                            let resourceName: string = util.format(resourceTemplate, idxRuntime);\n                            this._localeBuilder.addLocaleString(locale, resourceName, runtimeRecord._localeResources[locale]);\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    private _collectRuntimes(context: ConversionContext, collectedRuntimes: RuntimeRecord[]): void {\n\n        // Get runtimes from default settings\n        // Loop over form factors and add runtime for each:  \"mobile\", \"desktop\", \"tablet\" etc.\n        for (let formFactor in OSF.FormFactor) {\n\n            try {\n                let formFactorsSourceLocation: string = this._xmlManifest.getDefaultSourceLocation(formFactor);\n\n                // If there is a source location for this form factor then we create a runtime for it\n                if (!Utilities.isNullOrUndefined(formFactorsSourceLocation)) {\n                    this._addRuntimeForFormFactor(collectedRuntimes, formFactor, formFactorsSourceLocation);\n                }\n            }\n            catch {\n                // xmlManifest throws when there are no default settings at all\n                continue;\n            }\n        }\n\n        // Get runtime records from <Runtimes> for each type of app (in the legacy manifest, app like document, workbook etc. is also\n        // referred to as \"capability\" but this is not to be confused with \"capability\" in the new mos manifest which is part of the\n        // requirements and is essentially means what features are supported on the host.\n        for (let manifestHostType in OSF.ManifestHostType) {\n\n            if (manifestHostType === OSF.ManifestHostType.Mailbox ||\n                manifestHostType === OSF.ManifestHostType.Document ||\n                manifestHostType === OSF.ManifestHostType.Presentation ||\n                manifestHostType === OSF.ManifestHostType.Workbook) {\n\n                // By default the cabability string is also the overrides lookup property\n                let hostType: string = Converter._getVersionOverrideHostTypeFromOsfManifestHostType(manifestHostType);\n\n                if (!Utilities.isNullOrUndefined(this._xmlManifest._versionOverrides[hostType])) {\n                    // Handle WXP VersionOverride\n                    if (Converter._isWXP(hostType)) {\n\n                        // Set the capabilities (legacy requirement sets) in the context so that this can be set propertly in the runtime records\n                        Converter._setVersionOverrideNumberAndCapabilitiesInContext(context, this._xmlManifest, hostType, OSF.VersionOverridesNumber.V1_0.toString());\n\n                        if (!Utilities.isNullOrUndefined(this._xmlManifest._versionOverrides[hostType]._runtimes)) {\n                            this._collectRuntimeRecordsFromRuntimes(context, collectedRuntimes, this._xmlManifest._versionOverrides[hostType]._runtimes,\n                                manifestHostType,\n                                RuntimeSource.SharedRuntimes);\n                        }\n                        // First look for information under the override\n                        let addinCommandsExtensionPoints: [] = Converter._getAddinCommandsExtensionPoints(hostType, null, Constants.InputDesktopFormFactor, this._xmlManifest);\n\n                        let functionFileResid: Object = Converter._getFunctionFileResid(hostType, null, this._xmlManifest);\n\n                        if (!Utilities.isNullOrUndefined(functionFileResid)) {\n                            this._collectRuntimesFromFunctionFiles(context, functionFileResid, collectedRuntimes, manifestHostType);\n                        }\n\n                        if (!Utilities.isNullOrUndefined(addinCommandsExtensionPoints)) {\n                            this._collectRuntimeRecordsFromExtensionPoints(context, addinCommandsExtensionPoints, collectedRuntimes, manifestHostType);\n                        }\n\n                        // Reset this in the context since we are done loading these from the overrides\n                        Converter._clearVersionOverrideNumberAndCapabilitiesInContext(context);\n                    }\n                    // Outlook VersionOverride case\n                    else if (hostType === Constants.InputMailHost) {\n\n                        let supportedVersionOverrides = Converter._getMailHostVersionOVerrides();\n\n                        // Now look for extension points in each override\n                        for (let vo of supportedVersionOverrides) {\n                            // Set the capabilities (legacy requirement sets) in the context so that this can be set propertly in the runtime records\n                            Converter._setVersionOverrideNumberAndCapabilitiesInContext(context, this._xmlManifest, hostType, vo);\n\n                            if (!Utilities.isNullOrUndefined(this._xmlManifest._versionOverrides[hostType][vo])) {\n                                // Get runtimes from <Runtime> nodes\n                                if (!Utilities.isNullOrUndefined(this._xmlManifest._versionOverrides[hostType][vo]._runtimes)) {\n                                    this._collectRuntimeRecordsFromRuntimes(context,\n                                        collectedRuntimes,\n                                        this._xmlManifest._versionOverrides[hostType][vo]._runtimes,\n                                        manifestHostType,\n                                        RuntimeSource.SharedRuntimes);\n                                }\n\n                                let addinCommandsExtensionPointsVersions: [] = Converter._getAddinCommandsExtensionPoints(hostType, vo, Constants.InputDesktopFormFactor, this._xmlManifest);\n\n                                let functionFileResidVersion: Object = Converter._getFunctionFileResid(hostType, vo, this._xmlManifest);\n\n                                if (!Utilities.isNullOrUndefined(functionFileResidVersion)) {\n                                    this._collectRuntimesFromFunctionFiles(context, functionFileResidVersion, collectedRuntimes, manifestHostType);\n                                }\n\n                                if (!Utilities.isNullOrUndefined(addinCommandsExtensionPointsVersions)) {\n                                    this._collectRuntimeRecordsFromExtensionPoints(context, addinCommandsExtensionPointsVersions, collectedRuntimes, manifestHostType);\n                                }\n\n                                // Reset this in the context since we are done loading these from the overrides\n                                Converter._clearVersionOverrideNumberAndCapabilitiesInContext(context);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    private _collectRuntimeRecordsFromExtensionPoints(context: ConversionContext, addinCommandsExtensionPoints: [], collectedRuntimes: RuntimeRecord[], manifestHostType: OSF.ManifestHostType): void {\n\n        for (let extensionPointIdx: number = 0; extensionPointIdx < addinCommandsExtensionPoints.length; extensionPointIdx++) {\n            let extensionPoint: Object = addinCommandsExtensionPoints[extensionPointIdx];\n            if (Converter._isRibbonCommandSurface(extensionPoint[Constants.InputType])) {\n\n                if (!Utilities.isNullOrUndefined(extensionPoint[Constants.InputTabs])) {\n\n                    for (let tabIdx: number = 0; tabIdx < extensionPoint[Constants.InputTabs].length; tabIdx++) {\n\n                        var tab: Object = extensionPoint[Constants.InputTabs][tabIdx];\n                        if (!Utilities.isNullOrUndefined(tab[Constants.InputChildren])) {\n\n                            for (let groupIdx: number = 0; groupIdx < tab[Constants.InputChildren].length; groupIdx++) {\n\n                                var group: Object = tab[Constants.InputChildren][groupIdx];\n\n                                if (!Utilities.isNullOrUndefined(group) && !Utilities.isNullOrUndefined(group[Constants.InputChildren])) {\n\n                                    this._collectRuntimeRecordsFromActions(context, collectedRuntimes, group[Constants.InputChildren], manifestHostType);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n            else if (Converter._isContextMenuCommandSurface(extensionPoint[Constants.InputType])) {\n\n                if (!Utilities.isNullOrUndefined(extensionPoint[Constants.InputChildren])) {\n\n                    for (let menuNodeIdx: number = 0; menuNodeIdx < extensionPoint[Constants.InputChildren].length; menuNodeIdx++) {\n                        const menuNode: any = extensionPoint[Constants.InputChildren][menuNodeIdx];\n\n                        for (let menuControlIdx: number = 0; menuControlIdx < menuNode[Constants.InputChildren].length; menuControlIdx++) {\n                            const menuControl: any = menuNode[Constants.InputChildren][menuControlIdx];\n                            this._collectRuntimeRecordsFromActions(context, collectedRuntimes, menuControl[Constants.InputChildren], manifestHostType);\n                        }\n                    }\n                }\n            }\n            else if (extensionPoint[Constants.InputType] === Constants.InputLaunchEvent) {\n                if (!Utilities.isNullOrUndefined(extensionPoint[Constants.InputResid])) {\n                    let requirements: MOS.RequirementsExtensionElement = new MOS.RequirementsExtensionElement();\n                    // TODO: We should set FormFactor\n                    requirements.capabilities = context.getCurrentVersionOverrideCapabilities();\n                    let runtimeRecord: RuntimeRecord = this._createRuntimeRecord(context,\n                        extensionPoint[Constants.InputResid],\n                        requirements,\n                        RuntimeSource.LaunchEvent,\n                        manifestHostType);\n                    this._addRuntimeRecord(runtimeRecord, collectedRuntimes);\n                }\n                else {\n                    Utilities.logWarning(\"LaunchEvent extension point does not have SourceLocation with resid.\");\n                }\n            }\n            else {\n                Utilities.log(\"Skipping extension point %s for runtime collection.\", extensionPoint[Constants.InputType]);\n            }\n        }\n    }\n\n    private _collectRuntimesFromFunctionFiles(context: ConversionContext, functionFileResid: Object, collectedRuntimes: RuntimeRecord[], manifestHostType: OSF.ManifestHostType): void {\n\n        if (!Utilities.isNullOrUndefined(functionFileResid)) {\n\n            if (!Utilities.isNullOrUndefined(functionFileResid[Constants.InputDesktopFormFactor])) {\n                this._addRuntimeRecordForFunctionFileFormFactor(context, functionFileResid[Constants.InputDesktopFormFactor],\n                    Constants.InputDesktopFormFactor, collectedRuntimes, manifestHostType);\n            }\n\n            if (!Utilities.isNullOrUndefined(functionFileResid[Constants.InputMobileFormFactor])) {\n                this._addRuntimeRecordForFunctionFileFormFactor(context, functionFileResid[Constants.InputMobileFormFactor],\n                    Constants.InputMobileFormFactor, collectedRuntimes, manifestHostType);\n            }\n        }\n    }\n\n    private _addRuntimeRecordForFunctionFileFormFactor(context: ConversionContext, resid: string, formFactor: string, collectedRuntimes: RuntimeRecord[], manifestHostType: OSF.ManifestHostType): void {\n\n        let requirements: MOS.RequirementsExtensionElement = new MOS.RequirementsExtensionElement();\n        requirements.formFactors = [];\n        requirements.formFactors.push(Converter._legacyFormFactorToMOSFormFactor(formFactor));\n        requirements.capabilities = context.getCurrentVersionOverrideCapabilities();\n\n        let runtimeRecord: RuntimeRecord = this._createRuntimeRecord(\n            context,\n            resid,\n            requirements,\n            RuntimeSource.ExecuteFunction,\n            manifestHostType);\n\n        // TODO: Need to set lifetime.long for WXP if the same resID found in Runtimes element\n\n        this._addRuntimeRecord(runtimeRecord, collectedRuntimes);\n    }\n\n    private static _legacyFormFactorToMOSFormFactor(formFactor: string): MOS.FormFactors {\n\n        switch (formFactor) {\n            case Constants.InputDesktopFormFactor:\n                return MOS.FormFactors.Desktop;\n            case Constants.InputMobileFormFactor:\n                return MOS.FormFactors.Mobile;\n            default:\n                Utilities.logError(\"Unrecognized formfactor: \" + formFactor);\n                return null;\n        }\n    }\n\n    private static _isRibbonCommandSurface(commandSurface: string): boolean {\n\n        // The commandSurfaces that we currently look for and convert in runtimes and ribbons\n        return commandSurface === Constants.InputPrimaryCommandSurface ||\n            commandSurface === Constants.InputMessageComposeCommandSurface ||\n            commandSurface === Constants.InputMessageReadCommandSurface ||\n            commandSurface === Constants.InputAppointmentOrganizerCommandSurface ||\n            commandSurface === Constants.InputAppointmentAttendeeCommandSurface;\n    }\n\n    private static _isContextMenuCommandSurface(commandSurface: string): boolean {\n\n        // The commandSurfaces that we currently look for and convert in runtimes and ribbons\n        return commandSurface === Constants.InputContextMenuCommandSurface;\n    }\n\n    private static _getRibbonContextFromCommandSurface(commandSurface: string): MOS.Contexts {\n\n        switch (commandSurface) {\n            case Constants.InputPrimaryCommandSurface:\n                return MOS.Contexts.Default;\n            case Constants.InputMessageComposeCommandSurface:\n                return MOS.Contexts.MailCompose;\n            case Constants.InputMessageReadCommandSurface:\n                return MOS.Contexts.MailRead;\n            case Constants.InputAppointmentOrganizerCommandSurface:\n                return MOS.Contexts.MeetingDetailsOrganizer;\n            case Constants.InputAppointmentAttendeeCommandSurface:\n                return MOS.Contexts.MeetingDetailsAttendee;\n            default:\n                Utilities.logError(\"Unsupported command surface: \" + commandSurface);\n                return MOS.Contexts.Default;\n        }\n    }\n\n    private static _getFunctionFileResid(versionOverrideHostIndex: string, versionOverrideIndex: string, xmlManifest: OSF.Manifest.Manifest): Object {\n\n        let functionFileResid: string = null;\n\n        if (!Utilities.isNullOrUndefined(xmlManifest._versionOverrides[versionOverrideHostIndex])) {\n\n            if (Utilities.isNullOrUndefined(versionOverrideIndex) && !Utilities.isNullOrUndefined(xmlManifest._versionOverrides[versionOverrideHostIndex][Constants.InputFunctionFileResid])) {\n                functionFileResid = xmlManifest._versionOverrides[versionOverrideHostIndex][Constants.InputFunctionFileResid];\n            }\n            else if (!Utilities.isNullOrUndefined(versionOverrideIndex) &&\n                !Utilities.isNullOrUndefined(xmlManifest._versionOverrides[versionOverrideHostIndex][versionOverrideIndex]) &&\n                !Utilities.isNullOrUndefined(xmlManifest._versionOverrides[versionOverrideHostIndex][versionOverrideIndex][Constants.InputFunctionFileResid])) {\n                functionFileResid = xmlManifest._versionOverrides[versionOverrideHostIndex][versionOverrideIndex][Constants.InputFunctionFileResid];\n            }\n        }\n\n        return functionFileResid;\n    }\n\n    private static _getAddinCommandsExtensionPoints(versionOverrideHostIndex: string, versionOverrideIndex: string, formFactor: string, xmlManifest: OSF.Manifest.Manifest): [] {\n\n        let addinCommandsExtensionPoints: [] = null;\n\n        if (!Utilities.isNullOrUndefined(xmlManifest._versionOverrides[versionOverrideHostIndex])) {\n\n            // If versionOverrideIndex is null then we are just looking in the main section:  [\"MailHost\"]\n            // If it is not null then we are looking under a specific override under the main host index:  [\"MailHost\"][\"100\"] for version override 1.0 etc.\n            if (Utilities.isNullOrUndefined(versionOverrideIndex) && !Utilities.isNullOrUndefined(xmlManifest._versionOverrides[versionOverrideHostIndex][Constants.InputAddinCommandsExtensionPoints])) {\n                addinCommandsExtensionPoints = xmlManifest._versionOverrides[versionOverrideHostIndex][Constants.InputAddinCommandsExtensionPoints][formFactor];\n            }\n            else if (!Utilities.isNullOrUndefined(versionOverrideIndex) &&\n                !Utilities.isNullOrUndefined(xmlManifest._versionOverrides[versionOverrideHostIndex][versionOverrideIndex]) &&\n                !Utilities.isNullOrUndefined(xmlManifest._versionOverrides[versionOverrideHostIndex][versionOverrideIndex][Constants.InputAddinCommandsExtensionPoints] &&\n                    !Utilities.isNullOrUndefined(xmlManifest._versionOverrides[versionOverrideHostIndex][versionOverrideIndex][Constants.InputAddinCommandsExtensionPoints][formFactor]))) {\n\n                // Outlook/Mailbox manifest is stored under \"100\" and \"101\" for version overrides\n                addinCommandsExtensionPoints = xmlManifest._versionOverrides[versionOverrideHostIndex][versionOverrideIndex][Constants.InputAddinCommandsExtensionPoints][formFactor];\n            }\n        }\n\n        return addinCommandsExtensionPoints;\n    }\n\n    private static _cloneRequirements(requirements: MOS.RequirementsExtensionElement): MOS.RequirementsExtensionElement {\n\n        if (Utilities.isNullOrUndefined(requirements)) {\n            return null;\n        }\n\n        let req: MOS.RequirementsExtensionElement = new MOS.RequirementsExtensionElement();\n\n        if (Utilities.isNullOrUndefined(requirements.capabilities)) {\n            req.capabilities = undefined;\n        }\n        else {\n            req.capabilities = Converter._cloneCapabilities(requirements.capabilities);\n        }\n\n        req.formFactors = !Utilities.isNullOrUndefined(requirements.formFactors) ? requirements.formFactors.map((x) => x) : undefined;\n        req.formFactors = !Utilities.isNullOrUndefined(requirements.formFactors) ? requirements.formFactors.map((x) => x) : undefined;\n        req.scopes = !Utilities.isNullOrUndefined(requirements.scopes) ? requirements.scopes.map((x) => x) : undefined;\n\n        return req;\n    }\n\n    private static _cloneCapabilities(capabilities: MOS.Capabilities[]): MOS.Capabilities[] {\n\n        if (Utilities.isNullOrUndefined(capabilities)) {\n            return undefined;\n        }\n\n        let caps: MOS.Capabilities[] = [];\n\n        for (let i = 0; i < capabilities.length; i++) {\n            let capability: MOS.Capabilities = capabilities[i];\n            let cap: MOS.Capabilities = new MOS.Capabilities();\n            cap.name = capability.name;\n            cap.minVersion = capability.minVersion;\n            cap.maxVersion = capability.maxVersion;\n\n            caps.push(cap);\n        }\n\n        return caps;\n    }\n\n    private _addRuntimeForFormFactor(runtimeRecords: RuntimeRecord[], formFactor: string, sourceLocation: string): void {\n\n        let runtimeRecord: RuntimeRecord = this._createRuntimeRecord(null,\n            sourceLocation,\n            new MOS.RequirementsExtensionElement(),\n            RuntimeSource.DefaultSettingSourceLocations,\n            null);  // Capability/ManifestHostType comes from requirements and there can be multiple capabilities\n\n        // Scopes at the base level will part of the requirements at extension level. We don't need to add the Hosts at the runtime level again.\n        // this._addScopesFromHosts(<MOS.RequirementsExtensionElement><unknown>runtimeRecord._requirements);\n\n        // now go through and add the default source locations for the different languages\n        for (let seenLocale in this._xmlManifest.getLocalesSeen()) {\n\n            // Get the default settings source location for a particular language and add it to the runtime record\n            let localeSourceLocation: string = this._xmlManifest.getSourceLocation(seenLocale, formFactor);\n\n            if (!Utilities.isNullOrUndefined(localeSourceLocation)) {\n                runtimeRecord._localeResources[seenLocale] = localeSourceLocation;\n            }\n        }\n\n        this._addRuntimeRecord(runtimeRecord, runtimeRecords);\n    }\n\n    private _collectRuntimeRecordsFromRuntimes(context: ConversionContext, runtimeRecords: RuntimeRecord[], runtimes: OSF.Manifest.Runtimes, manifestHostType: OSF.ManifestHostType, source: RuntimeSource): void {\n\n        let requirements: MOS.RequirementsExtensionElement = new MOS.RequirementsExtensionElement();\n        // TODO: We should set FormFactor\n        requirements.capabilities = context.getCurrentVersionOverrideCapabilities();\n\n        for (let idx = 0; idx < runtimes.getRuntimes().length; idx++) {\n            let runtime = runtimes.getRuntimes()[idx];\n\n            let scriptResId: string;\n            let lifetime: MOS.RuntimesLifetime = MOS.RuntimesLifetime.Short;\n\n            if (!Utilities.isNullOrUndefined(runtime.Overrides)) {\n                for (let override of runtime.Overrides) {\n                    // get the code.script resId\n                    if (override.Type === \"javascript\") {\n                        scriptResId = override.Resid;\n                        break;\n                    }\n                }\n            }\n\n            if (runtime.LifeTime === InputRuntimeLifeTime.Long) {\n                lifetime = MOS.RuntimesLifetime.Long;\n            }\n\n            let runtimeRecord: RuntimeRecord = this._createRuntimeRecord(context,\n                runtime.Resid,\n                requirements,\n                source,\n                manifestHostType,\n                scriptResId,\n                lifetime);\n\n            this._addRuntimeRecord(runtimeRecord, runtimeRecords);\n        }\n    }\n\n    private _collectRuntimeRecordsFromActions(context: ConversionContext, runtimeRecords: RuntimeRecord[], controls: any, manifestHostType: OSF.ManifestHostType): void {\n\n        if (Utilities.isNullOrUndefined(controls?.length))\n            return;\n\n        let requirements: MOS.RequirementsExtensionElement = new MOS.RequirementsExtensionElement();\n        // TODO: We should set FormFactor\n        requirements.capabilities = context.getCurrentVersionOverrideCapabilities();\n\n        for (let idx = 0; idx < controls.length; idx++) {\n            let control: any = controls[idx];\n\n            // We only need to create a runtime record for ShowTaskPane because ExecuteFunction runtime records will\n            // be added from the encompassing <FunctionFile> tag.\n            if (control.actionType !== Constants.InputShowTaskpane && control.controlType !== Constants.InputMenu) {\n                continue;\n            }\n\n            switch (control.controlType) {\n                case Constants.InputButton:        // ribbon's top level control is button\n                case Constants.InputMenuItem:      // context menu's top level control is menu item\n\n                    let runtimeRecord: RuntimeRecord = this._createRuntimeRecord(context,\n                        control.action.sourceLocation,\n                        requirements,\n                        RuntimeSource.ShowTaskpane,\n                        manifestHostType);\n\n                    this._addRuntimeRecord(runtimeRecord, runtimeRecords);\n\n                    break;\n\n                case Constants.InputMenu:          // for ribbon's menu control\n\n                    for (let menuIdx: number = 0; menuIdx < control.children.length; menuIdx++) {\n\n                        let menuControl: any = control.children[menuIdx];\n                        if (menuControl.actionType === Constants.InputShowTaskpane) {\n\n                            let runtimeRecord: RuntimeRecord = this._createRuntimeRecord(context,\n                                menuControl.action.sourceLocation,\n                                requirements,\n                                RuntimeSource.ShowTaskpane,\n                                manifestHostType);\n\n                            this._addRuntimeRecord(runtimeRecord, runtimeRecords);\n                        }\n                    }\n\n                    break;\n            }\n        }\n    }\n\n    private _createRuntimeRecord(context: ConversionContext,\n        resource: string,\n        requirements: MOS.RequirementsExtensionElement,\n        source: RuntimeSource,\n        manifestHostType: OSF.ManifestHostType,\n        scriptResId: string = null,\n        lifetime: MOS.RuntimesLifetime = MOS.RuntimesLifetime.Short\n    ): RuntimeRecord {\n\n        let runtimeRecord: RuntimeRecord = new RuntimeRecord();\n        runtimeRecord._resource = resource;\n        runtimeRecord._requirements = requirements;\n        runtimeRecord._source = source;\n        runtimeRecord._manifestHostType = manifestHostType;\n        runtimeRecord._localeResources = {};\n        runtimeRecord._lifetime = lifetime;\n\n        if (!Utilities.isNullOrUndefined(scriptResId)) {\n            runtimeRecord._scriptResId = scriptResId;\n        }\n\n        if (!Utilities.isNullOrUndefined(context)) {\n            runtimeRecord._versionOverridesNumber = context.getCurrentVersionOverrideNumber();\n        }\n        // Record the capabilities (from <Requirements><Sets>) that come from the containing version override.\n        // Later when the runtimes are coallesced, these requirements will be merged into requirements.capabilities\n        // of the resulting runtimes in the metaos manifest.\n        if (!Utilities.isNullOrUndefined(context) && !Utilities.isNullOrUndefined(context.getCurrentVersionOverrideCapabilities())) {\n            runtimeRecord._versionOverrideCapabilities = context.getCurrentVersionOverrideCapabilities();\n        }\n\n        return runtimeRecord;\n    }\n\n    private _addRuntimeRecord(runtimeRecord: RuntimeRecord, runtimeRecords: RuntimeRecord[]): void {\n\n        Utilities.log(\"Found runtime: \" + runtimeRecord._resource);\n        runtimeRecords.push(runtimeRecord);\n    }\n\n    private _populateRootRequirements(): void {\n        // TODO: Not present in legacy manifest\n    }\n\n    private _populateLocaleSensitiveProperty(propertyGetter: Function, mosPropertyName: string, maxLength: number): void {\n\n        const defaultLocale: string = this._xmlManifest.getDefaultLocale();\n\n        for (let seenLocale in this._xmlManifest.getLocalesSeen()) {\n\n            // The default language is put into the main manifest file and not in auxillary localized files\n            if (seenLocale != defaultLocale) {\n                Utilities.log(\"handling %s for locale: %s\", mosPropertyName, seenLocale);\n                let localizedPropertyValue: string = propertyGetter.apply(this._xmlManifest, [seenLocale]);\n\n                if (!Utilities.isNullOrUndefined(localizedPropertyValue)) {\n\n                    let finalValue: string = localizedPropertyValue;\n\n                    if (!Utilities.isNullOrUndefined(maxLength)) {\n                        finalValue = Utilities.getLimitedString(localizedPropertyValue,\n                            maxLength,\n                            mosPropertyName + \" truncated to %d characters in localized file \" + seenLocale);\n                    }\n\n                    this._localeBuilder.addLocaleString(seenLocale, mosPropertyName, finalValue);\n                }\n            }\n        }\n    }\n\n    private _populateValidDomains(): void {\n\n        // Sometimes the underlying parser has a null in the collection but this breaks the metaos\n        // schema if we have null in the validDomains so we need to ignore nulls\n        const appDomains: string[] = this._xmlManifest.getAppDomains();\n\n        // TODO: Review should empty collection be there regardless if we find any domains?\n        this._mosManifest.validDomains = [];\n\n        for (let domain of appDomains) {\n            if (!Utilities.isNullOrUndefined(domain)) {\n                this._mosManifest.validDomains.push(domain);\n            }\n        }\n    }\n\n    // Population methods below are data that is not present in the Office legacy manifests\n    private _populateStaticTabs(): void {\n    }\n\n    private _populateComposeExtensions(): void {\n    }\n\n    private _populateGraphConnector(): void {\n    }\n\n    private _populateConfigurableTabs(): void {\n    }\n\n    private _populateBots(): void {\n    }\n\n    private _populateConnectors(): void {\n    }\n\n    private _populateActivities(): void {\n    }\n\n    private _populateMeetingExtensionDefinition(): void {\n    }\n\n    private _populateSubscriptionOffer(): void {\n    }\n\n    private _populateShowLoadingIndicator(): void {\n    }\n\n    private _populateIsFullScreen(): void {\n    }\n\n    private _populateConfigurableProperties(): void {\n    }\n\n    private _populateDefaultBlockUntilAdminAction(): void {\n    }\n\n    private _populatePublisherDocsUrl(): void {\n    }\n\n    private _populateDefaultInstallScope(): void {\n    }\n\n    private _populateDefaultGroupCapability(): void {\n    }\n\n    getOfficeAppManifest(): OSF.Manifest.OfficeAppManifest {\n\n        return this._xmlManifest;\n    }\n\n    getJSON(): string {\n\n        return this._mosManifest.toJSON();\n    }\n\n    private _getMailHostOverrides(): string[] {\n\n        let overrides: string[] = [];\n\n        // If there are version overrides for mailhost then we add them\n        for (let overrideVersion in this._xmlManifest._versionOverrides[Constants.InputMailHost]) {\n            // We get these in reverse order so that we end up with the highest number override first because the higher the number the\n            // higher the precedence so the resulting elements in the json manifest should be in that order so that the parser can give precedence to the first one.\n            // Also see: _getMailHostVersionOVerrides() that builds the same array but from the enum directly instead of from the OSFManifest parser's version overrides.\n            overrides.unshift(overrideVersion);\n        }\n\n        return overrides;\n    }\n\n    private _doesHostHaveContentInManifest(manifestHostType: OSF.ManifestHostType): boolean {\n\n        let hostType: string = Converter._getVersionOverrideHostTypeFromOsfManifestHostType(manifestHostType);\n        return !Utilities.isNullOrUndefined(this._xmlManifest._versionOverrides[hostType]);\n    }\n\n    private _getResourceAndWriteLocalizedValues(\n        resId: string,\n        defaultValue: string,\n        maxLength: number,\n        versionOverridesNumber: OSF.VersionOverridesNumber,\n        resourceTemplate: string,\n        resourceType: ResourceType,\n        index1: number = undefined,\n        index2: number = undefined,\n        index3: number = undefined,\n        index4: number = undefined,\n        index5: number = undefined,\n        index6: number = undefined): string {\n\n        let resources: object = this._xmlManifest.getResources(versionOverridesNumber);\n\n        if (Utilities.isNullOrUndefined(resources)) {\n            return !Utilities.isNullOrUndefined(defaultValue) ? defaultValue : resId;\n        }\n\n        let allLocaleResources: object = resources[resourceType];\n\n        if (Utilities.isNullOrUndefined(allLocaleResources)) {\n            return !Utilities.isNullOrUndefined(defaultValue) ? defaultValue : resId;\n        }\n\n        const defaultLocale: string = this._xmlManifest.getDefaultLocale().toLocaleLowerCase();\n\n        if (Utilities.isNullOrUndefined(allLocaleResources[resId]) || Utilities.isNullOrUndefined(allLocaleResources[resId][defaultLocale])) {\n            // return back the resId if we can't find a matching resource\n            return !Utilities.isNullOrUndefined(defaultValue) ? defaultValue : resId;\n        }\n\n        // Add localized runtime strings for other languages besides the default language\n        for (let seenLocale in this._xmlManifest.getLocalesSeen()) {\n\n            if (seenLocale !== defaultLocale && !Utilities.isNullOrUndefined(allLocaleResources[resId][seenLocale])) {\n                let formattedValue: string = Converter._formatResourceStringWithVariableNumberParameters(resourceTemplate, index1, index2, index3, index4, index5, index6);\n\n                // For images, we also need to add them to the iconBuilder and store the package file reference in the localization file\n                if (resourceType === ResourceType.AllLocaleImages) {\n                    const packageReference: string = this._iconBuilder.addIconAndGetReference(allLocaleResources[resId][seenLocale], !Utilities._writeImageUrls);\n                    this._localeBuilder.addLocaleString(seenLocale, formattedValue, packageReference);\n                }\n                else {\n                    this._localeBuilder.addLocaleString(seenLocale, formattedValue, allLocaleResources[resId][seenLocale]);\n                }\n            }\n        }\n\n        // Return the string for the default language that will be written into the main manifest file\n        const valueObtained: string = Utilities.isNullOrUndefined(defaultValue) ? allLocaleResources[resId][defaultLocale] : defaultValue;\n        return (maxLength == Constants.MaxResourceStringLengthAny) ? valueObtained : Utilities.truncateString(valueObtained, maxLength);\n    }\n\n    private _addConstantResourceForAllSeenLocales(value: string, resourceTemplate: string, index1: number, index2: number, index3: number, index4: number, index5: number, index6: number): void {\n\n        const defaultLocale: string = this._xmlManifest.getDefaultLocale().toLocaleLowerCase();\n\n        for (let seenLocale in this._xmlManifest.getLocalesSeen()) {\n\n            if (seenLocale !== defaultLocale) {\n                let formattedValue: string = Converter._formatResourceStringWithVariableNumberParameters(resourceTemplate, index1, index2, index3, index4, index5, index6);\n                this._localeBuilder.addLocaleString(seenLocale, formattedValue, value);\n            }\n        }\n    }\n\n    private static _formatResourceStringWithVariableNumberParameters(\n        resourceTemplate: string,\n        index1: number = undefined,\n        index2: number = undefined,\n        index3: number = undefined,\n        index4: number = undefined,\n        index5: number = undefined,\n        index6: number = undefined): string {\n\n        if (Utilities.isNullOrUndefined(index1) || index1 === ConversionContext.UnsetIndex) {\n            return resourceTemplate;\n        } else if (Utilities.isNullOrUndefined(index2) || index2 === ConversionContext.UnsetIndex) {\n            return util.format(resourceTemplate, index1);\n        } else if (Utilities.isNullOrUndefined(index3) || index3 === ConversionContext.UnsetIndex) {\n            return util.format(resourceTemplate, index1, index2);\n        } else if (Utilities.isNullOrUndefined(index4) || index4 === ConversionContext.UnsetIndex) {\n            return util.format(resourceTemplate, index1, index2, index3);\n        } else if (Utilities.isNullOrUndefined(index5) || index5 === ConversionContext.UnsetIndex) {\n            return util.format(resourceTemplate, index1, index2, index3, index4);\n        } else if (Utilities.isNullOrUndefined(index6) || index6 === ConversionContext.UnsetIndex) {\n            return util.format(resourceTemplate, index1, index2, index3, index4, index5);\n        } else {\n            return util.format(resourceTemplate, index1, index2, index3, index4, index5, index6);\n        }\n    }\n\n    private _addRuntimeExecuteAction(runtime: MOS.Runtimes, action: MOS.ExtensionRuntimesActionsItem, runtimeKey: string): void {\n\n        Utilities.assert(action.type == MOS.ExtensionRuntimesActionsItemType.ExecuteFunction, \"Expected an executeFunction type of action.\");\n\n        const runtimeActionKey: string = Converter._generateExecuteActionKey(runtimeKey, action.id);\n\n        // If an ExecuteFunction action with this same actionId already is in this runtime then we don't add it\n        if (Utilities.isNullOrUndefined(this._addedExecuteFunctions[runtimeActionKey]) || !this._addedExecuteFunctions[runtimeActionKey]) {\n            runtime.actions.push(action);\n            this._addedExecuteFunctions[runtimeActionKey] = true;\n            Utilities.log(\"Added action %s for key: %s\", action.id, runtimeActionKey);\n        }\n        else {\n            Utilities.log(\"Skipped adding action %s for key: %s because an identical one already exists.\", action.id, runtimeActionKey);\n        }\n    }\n\n    private static _getVersionOverrideHostTypeFromOsfManifestHostType(manifestHostType: OSF.ManifestHostType): string {\n\n        switch (manifestHostType) {\n            case OSF.ManifestHostType.Document:\n                return Constants.InputDocument;\n            case OSF.ManifestHostType.Workbook:\n                return Constants.InputWorkbook;\n            case OSF.ManifestHostType.Presentation:\n                return Constants.InputPresentation;\n            case OSF.ManifestHostType.Mailbox:\n                return Constants.InputMailHost;\n            default:\n                throw \"unsupported manifest host type: \" + manifestHostType;\n        }\n    }\n\n    private static _getCapabilityVersionFromNumericVersion(overrideText: string): string {\n\n        switch (overrideText) {\n            case OSF.VersionOverridesNumber.V1_0.toString():\n                return Constants.MosV100;\n            case OSF.VersionOverridesNumber.V1_1.toString():\n                return Constants.MosV101;\n            default:\n                Utilities.logError(\"Unrecognized override version: \" + overrideText);\n                return \"\";\n        }\n    }\n\n    private static _getNumericOverrideVersionFromString(overrideText: string): OSF.VersionOverridesNumber {\n\n        switch (overrideText) {\n            case OSF.VersionOverridesNumber.V1_0.toString():\n                return OSF.VersionOverridesNumber.V1_0;\n            case OSF.VersionOverridesNumber.V1_1.toString():\n                return OSF.VersionOverridesNumber.V1_1;\n            default:\n                Utilities.logError(\"Unrecognized override version: \" + overrideText);\n                return null;\n        }\n    }\n\n    private static _getRequirementsScopeFromManifestHostType(manifestHostType: string): MOS.Scopes {\n\n        switch (manifestHostType) {\n            case OSF.ManifestHostType.Mailbox:\n                return MOS.Scopes.Mail;\n            case OSF.ManifestHostType.Workbook:\n                return MOS.Scopes.Workbook;\n            case OSF.ManifestHostType.Document:\n                return MOS.Scopes.Document;\n            case OSF.ManifestHostType.Presentation:\n                return MOS.Scopes.Presentation;\n            default:\n                Utilities.logError(\"Unsupported manifestHostType \" + manifestHostType);\n        }\n    }\n\n    private static _mosSendModeFromXmlSendMode(sendMode: string): MOS.OptionsSendMode {\n\n        switch (sendMode.toLowerCase()) {\n            case Constants.InputSendModeBlock:\n                return MOS.OptionsSendMode.Block;\n            case Constants.InputSendModePromptUser:\n                return MOS.OptionsSendMode.PromptUser;\n            case Constants.InputSendModeSoftBlock:\n                return MOS.OptionsSendMode.SoftBlock;\n            default:\n                Utilities.logError(\"Unsupported sendMode: '%s'. Setting to null.\", sendMode);\n                return null;\n        }\n    }\n\n\n    private static _mosPermissionfromXmlPermission(permission: number, appType: OSF.OfficeAppType): string {\n\n        if (appType === OSF.OfficeAppType.ContentApp || appType === OSF.OfficeAppType.TaskPaneApp) {\n\n            // Content App Permissions: [Restricted | ReadDocument | ReadAllDocument | WriteDocument | ReadWriteDocument]\n            switch (permission) {\n                case OSF.OsfControlPermission.Restricted:\n                    return Constants.DocumentRestrictedUser;\n                case OSF.OsfControlPermission.ReadDocument:\n                    return Constants.DocumentReadUser;\n                case OSF.OsfControlPermission.WriteDocument:\n                    return Constants.DocumentWriteUser;\n                case OSF.OsfControlPermission.ReadAllDocument:\n                    return Constants.DocumentReadAllUser;  // TODO: Need to get the correct name in metaos WI:6247317\n                case OSF.OsfControlPermission.ReadWriteDocument:\n                    return Constants.DocumentReadWriteUser; // TODO:Need to get the correct name in metaos WI:6247317\n                default:\n                    Utilities.logError(\"Unknown <Permission> found for ContentApp/TaskpaneApp: \" + permission);\n            }\n        }\n        else if (appType === OSF.OfficeAppType.MailApp) {\n\n            // MailApp Permissions: [Restricted | ReadItem | ReadWriteItem | ReadWriteMailbox]\n            switch (permission) {\n                case OSF.OsfControlPermission.Restricted:\n                    return Constants.MailboxItemRestrictedUser;\n                case OSF.OsfControlPermission.ReadItem:\n                    return Constants.MailboxItemReadUser;\n                case OSF.OsfControlPermission.ReadWriteItem:\n                    return Constants.MailboxItemReadWriteUser;\n                case OSF.OsfControlPermission.ReadWriteMailbox:\n                    return Constants.MailboxReadWriteUser;\n                default:\n                    Utilities.logError(\"Unknown <Permission> found for MailApp: \" + permission);\n            }\n        }\n    }\n\n    private static _setVersionOverrideNumberAndCapabilitiesInContext(context: ConversionContext, xmlManifest: any, hostType: string, versionOverridesIndex: string): void {\n\n        let capabilities: MOS.Capabilities[] = null;\n        let versionOverride: Object = null;\n        let versionOverrideIndexNumeric: OSF.VersionOverridesNumber= null;\n\n        if (Converter._isWXP(hostType)) {\n            versionOverride = xmlManifest._versionOverrides[hostType];\n        }\n        else {\n            versionOverride = xmlManifest._versionOverrides[hostType][versionOverridesIndex];\n            versionOverrideIndexNumeric = Converter._getNumericOverrideVersionFromString(versionOverridesIndex);\n        }\n\n        if (!Utilities.isNullOrUndefined(versionOverride) &&\n            !Utilities.isNullOrUndefined(versionOverride[Constants.InputRequirements]) &&\n            !Utilities.isNullOrUndefined(versionOverride[Constants.InputRequirements][Constants.InputSets])) {\n            capabilities = Converter._getCapabilitiesFromLegacyRequirementSets(versionOverride[Constants.InputRequirements][Constants.InputSets]);\n        }\n\n        // Set implicit capabilty for the versionOverride\n        let capability: MOS.Capabilities = this._getImplicitCapabilityBasedOnVersionOverrideForHost(hostType, versionOverridesIndex);\n        if (!Utilities.isNullOrUndefined(capability)) {\n            if (Utilities.isNullOrUndefined(capabilities)) {\n                capabilities = [];\n            }\n            capabilities.push(capability);\n        }\n\n        // Merge the added capabilities\n        let requirements: MOS.RequirementsExtensionElement = new MOS.RequirementsExtensionElement();\n        Converter._mergeInVersionOverrideRequirements(capabilities, requirements);\n\n        // If there is an override present in the manifest then we set the capabilities and this override in the context\n        // so that subsequent population will understand and be able to set requirements correctly.\n        if (!Utilities.isNullOrUndefined(versionOverride)) {\n            context.setCurrentVersionOverrideAndCapabilities(versionOverrideIndexNumeric, requirements.capabilities);\n        }\n    }\n\n    private static _clearVersionOverrideNumberAndCapabilitiesInContext(context: ConversionContext): void {\n        context.setCurrentVersionOverrideAndCapabilities(null, null);\n    }\n\n    private static _legacyLaunchEventToMosEventType(legacyEventType: string): string {\n\n        switch (legacyEventType) {\n            case \"OnNewMessageCompose\":\n                return \"newMessageComposeCreated\";\n            case \"OnNewAppointmentOrganizer\":\n                return \"newAppointmentOrganizerCreated\";\n            case \"OnMessageAttachmentsChanged\":\n                return \"messageAttachmentsChanged\";\n            case \"OnAppointmentAttachmentsChanged\":\n                return \"appointmentAttachmentsChanged\";\n            case \"OnMessageRecipientsChanged\":\n                return \"messageRecipientsChanged\";\n            case \"OnAppointmentAttendeesChanged\":\n                return \"appointmentAttendeesChanged\";\n            case \"OnAppointmentTimeChanged\":\n                return \"appointmentTimeChanged\";\n            case \"OnAppointmentRecurrenceChanged\":\n                return \"appointmentRecurrenceChanged\";\n            case \"OnInfoBarDismissClicked\":\n                return \"infoBarDismissClicked\";\n            case \"OnMessageSend\":\n                return \"messageSending\";\n            case \"OnAppointmentSend\":\n                return \"appointmentSending\";\n            case \"OnOpenDocument\":\n                return \"documentOpen\";\n            case \"OnMessageCompose\":\n                return \"messageComposeOpened\";\n            case \"OnAppointmentOrganizer\":\n                return \"appointmentOrganizerOpened\";\n            default:\n                Utilities.logError(\"Unrecognized autorun even type: \" + legacyEventType);\n        }\n\n        return legacyEventType;\n    }\n\n    static _generateExecuteActionKey(runtimeKey: string, actionId: string): string {\n\n        return runtimeKey + actionId;\n    }\n\n    static _generateRuntimeLookupKey(url: string, lifetime: MOS.RuntimesLifetime, capabilities: MOS.Capabilities[]): string {\n        // Currently we are building the key for the Runtime using the URL, lifetime and Capabilities\n        // URL: URL is the primary thing which is required for the Runtime this has to be unqiue\n        // Lifetime: As we can have the same URL with Lifetime Long(SharedRuntime) and Short\n        // Capabilities: A URL can be found inside a VersionOverride 1_0 (Like Capability MailBox 1.3) and the same URL can be found for VersionOverrde 1_1(Mailbox 1.5)\n\n        let resultKey: string = url + lifetime.toString();\n\n        if (!Utilities.isNullOrUndefined(capabilities)) {\n            Converter._sortCapabilitiesAlphabatically(capabilities);\n            for (let capability of capabilities) {\n                resultKey = resultKey + (capability.name + capability.minVersion);\n            }\n        }\n\n        return resultKey;\n    }\n\n    static _sortCapabilitiesAlphabatically(capabilities: MOS.Capabilities[]): void {\n\n        if (!Utilities.isNullOrUndefined(capabilities)) {\n            capabilities.sort(function (c1, c2) {\n                if (c1.name < c2.name) {\n                    return -1;\n                }\n\n                if (c1.name > c2.name) {\n                    return 1;\n                }\n\n                return 0;\n            });\n        }\n    }\n\n    static _getImplicitCapabilityBasedOnVersionOverrideForHost(hostType: string, versionOverridesIndex: string): MOS.Capabilities {\n        let capability: MOS.Capabilities = null;\n        // The requirementsets are taken from the public document specified here: https://docs.microsoft.com/en-us/javascript/api/manifest/versionoverrides?view=excel-js-preview#variant-schemas\n        if (hostType === Constants.InputMailHost) {\n            if (versionOverridesIndex === OSF.VersionOverridesNumber.V1_0.toString()) {\n                capability = new MOS.Capabilities();\n                capability.name = Constants.InputMailBoxCapability;\n                capability.minVersion = \"1.3\";\n            }\n            else if (versionOverridesIndex === OSF.VersionOverridesNumber.V1_1.toString()) {\n                capability = new MOS.Capabilities();\n                capability.name = Constants.InputMailBoxCapability;\n                capability.minVersion = \"1.5\";\n            }\n        }\n        else if (Converter._isWXP(hostType)) {\n\n            if (versionOverridesIndex === OSF.VersionOverridesNumber.V1_0.toString()) {\n                capability = new MOS.Capabilities();\n                capability.name = Constants.InputAddinCommandCapability;\n                capability.minVersion = \"1.1\";\n            }\n        }\n        else {\n            Utilities.logError(\"Skipping adding VersionOverride capability for the host as unsupported host type: %s\", hostType);\n        }\n\n        return capability;\n    }\n\n    static _isWXP(hostType: string): boolean {\n        return (hostType === Constants.InputDocument ||\n            hostType === Constants.InputPresentation ||\n            hostType === Constants.InputWorkbook);\n    }\n\n    static _getMailHostVersionOVerrides(): string[] {\n        let versionOverrides = [];\n\n        const values = Object.values(OSF.VersionOverridesNumber);\n        // We should fill the array in reverse array as we need to iterate from maximum version to minimum in order to maintain the order\n        values.slice().reverse().forEach(value => {\n            if (!isNaN(Number(value)) && Number(value) !== OSF.VersionOverridesNumber.Max) {\n                versionOverrides.push(value.toString());\n            }\n        });\n\n        return versionOverrides;\n    }\n}\n"]}