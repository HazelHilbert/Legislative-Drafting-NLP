{"version":3,"file":"main.js","sourceRoot":"","sources":["../src/main.ts"],"names":[],"mappings":"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","sourcesContent":["import * as fs from 'fs';\nimport path = require('path');\nimport { Converter } from './converter';\nimport { Constants } from './constants';\nimport { Utilities } from './utilities';\n\nfunction initialize() {\n    Utilities.setUpOSFAppTelemetry();\n}\n\nexport async function convert(inputXmlFilePath: string,\n                              outputJsonFolderPath: string,\n                              imageDownload: boolean = false,\n                              imageUrls: boolean = false,\n                              verbose: boolean = false): Promise<void>\n{\n    initialize();\n    Utilities.setInputXmlFilePath(inputXmlFilePath);\n\n    if (Utilities.isNullOrUndefined(imageDownload)) {\n        imageDownload = false;\n    }\n\n    Utilities.setDownloadImages(imageDownload);\n\n    if (Utilities.isNullOrUndefined(imageUrls)) {\n        imageUrls = false;\n    }\n\n    Utilities.setWriteImageUrls(imageUrls);\n\n    if (Utilities.isNullOrUndefined(verbose)) {\n        verbose = false;\n    }\n\n    Utilities.setVerbosity(verbose);\n\n    const inputXml: string = fs.readFileSync(inputXmlFilePath, 'utf8');\n    let basename: string = path.basename(inputXmlFilePath);\n    if (path.extname(basename).toLowerCase() === '.xml') {\n        basename = basename.slice(0, -4);\n    }\n\n    // In case no output folder is given, write to a new folder as the sibling of the input XML file\n    let outputFolder: string = outputJsonFolderPath;\n    if (Utilities.isNullOrUndefined(outputFolder) || outputFolder.trim().length == 0) {\n        outputFolder = path.dirname(inputXmlFilePath) + '/' + basename;\n    }\n\n    Utilities.ensureFolder(outputFolder);\n\n    const converter: Converter = new Converter(inputXml, 'en-US');\n    await converter.convert();\n\n    await converter.downloadAndStoreIcons(outputFolder);\n\n    // Write the main manifest file\n    await writeMainManifestFile(converter, outputFolder);\n\n    // Write locale files\n    await writeLocaleFiles(converter, outputFolder);\n}\n\nasync function writeMainManifestFile(converter: Converter, outputJSONFolderPath: string)\n{\n    const manifestFilePath: string = outputJSONFolderPath + \"/\" + Constants.JSONManifestFileName;\n    Utilities.log(\"manifest file path: \" + manifestFilePath);\n    const jsonResult = converter.getJSON();\n\n    await Utilities.writeFile(manifestFilePath, JSON.stringify(jsonResult, null /* replacer */ , 4 /* space */), 'Error writing file', 'Successfully wrote file: ' + manifestFilePath);\n}\n\nfunction writeLocaleFiles(converter: Converter, outputJSONPath: string): Promise<void>\n{\n    return new Promise<void>(async (resolve, reject) => {\n        let locales: string[] = converter.getLocaleBuilder().getLocales();\n        let promises: Promise<void>[] = [];\n        Utilities.log(\"locales seen by legacy parser: \" + locales);\n        // Write file for each language that is present in the manifest\n        for (let i: number = 0; i < locales.length; i++) {\n            let locale: string = locales[i];\n            let localeFilePath: string = outputJSONPath + \"/\" + Utilities.createLocaleFileName(locale);\n            Utilities.log(\"locale file path: \" + localeFilePath);\n            promises.push(Utilities.writeFile(localeFilePath, JSON.stringify(converter.getLocaleBuilder().getLocaleFileResources(locale), null /* replacer */ , 4 /* space */), 'Error writing file', 'Successfully wrote file: ' + localeFilePath));\n        }\n\n        await Utilities.promiseAll(promises, resolve, reject, \"writeLocalFiles:Failed\");\n    });\n}\n"]}