{"version":3,"file":"handler.interface.js","sourceRoot":"","sources":["../../../src/interfaces/handler.interface.ts"],"names":[],"mappings":"","sourcesContent":["import { ContainerInstance } from '../container-instance.class';\nimport { Constructable } from '../types/constructable.type';\n\n/**\n * Used to register special \"handler\" which will be executed on a service class during its initialization.\n * It can be used to create custom decorators and set/replace service class properties and constructor parameters.\n */\nexport interface Handler<T = unknown> {\n  /**\n   * Service object used to apply handler to.\n   */\n  object: Constructable<T>;\n\n  /**\n   * Class property name to set/replace value of.\n   * Used if handler is applied on a class property.\n   */\n  propertyName?: string;\n\n  /**\n   * Parameter index to set/replace value of.\n   * Used if handler is applied on a constructor parameter.\n   */\n  index?: number;\n\n  /**\n   * Factory function that produces value that will be set to class property or constructor parameter.\n   * Accepts container instance which requested the value.\n   */\n  value: (container: ContainerInstance) => any;\n}\n"]}