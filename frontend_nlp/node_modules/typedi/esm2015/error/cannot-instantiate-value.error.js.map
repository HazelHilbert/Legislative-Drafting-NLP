{"version":3,"file":"cannot-instantiate-value.error.js","sourceRoot":"","sources":["../../../src/error/cannot-instantiate-value.error.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,KAAK,EAAE,MAAM,gBAAgB,CAAC;AAEvC;;GAEG;AACH,MAAM,OAAO,2BAA4B,SAAQ,KAAK;IAapD,YAAY,UAA6B;;QACvC,KAAK,EAAE,CAAC;QAbH,SAAI,GAAG,6BAA6B,CAAC;QAE5C,4DAA4D;QACpD,yBAAoB,GAAW,sBAAsB,CAAC;QAY5D,oFAAoF;QACpF,IAAI,OAAO,UAAU,KAAK,QAAQ,EAAE;YAClC,IAAI,CAAC,oBAAoB,GAAG,UAAU,CAAC;SACxC;aAAM,IAAI,UAAU,YAAY,KAAK,EAAE;YACtC,IAAI,CAAC,oBAAoB,GAAG,SAAS,UAAU,CAAC,IAAI,IAAI,YAAY,GAAG,CAAC;SACzE;aAAM,IAAI,UAAU,IAAI,CAAC,UAAU,CAAC,IAAI,WAAI,UAAU,CAAC,SAAS,0CAAE,IAAI,CAAA,CAAC,EAAE;YACxE,IAAI,CAAC,oBAAoB;gBACvB,sBAAsB,UAAU,CAAC,IAAI,GAAG;oBACxC,sBAAsB,MAAC,UAAU,CAAC,SAA8B,0CAAE,IAAI,GAAG,CAAC;SAC7E;IACH,CAAC;IApBD,IAAI,OAAO;QACT,OAAO,CACL,mDAAmD,IAAI,CAAC,oBAAoB,gBAAgB;YAC5F,0EAA0E,CAC3E,CAAC;IACJ,CAAC;CAgBF","sourcesContent":["import { ServiceIdentifier } from '../types/service-identifier.type';\nimport { Token } from '../token.class';\n\n/**\n * Thrown when DI cannot inject value into property decorated by @Inject decorator.\n */\nexport class CannotInstantiateValueError extends Error {\n  public name = 'CannotInstantiateValueError';\n\n  /** Normalized identifier name used in the error message. */\n  private normalizedIdentifier: string = '<UNKNOWN_IDENTIFIER>';\n\n  get message(): string {\n    return (\n      `Cannot instantiate the requested value for the \"${this.normalizedIdentifier}\" identifier. ` +\n      `The related metadata doesn't contain a factory or a type to instantiate.`\n    );\n  }\n\n  constructor(identifier: ServiceIdentifier) {\n    super();\n\n    // TODO: Extract this to a helper function and share between this and NotFoundError.\n    if (typeof identifier === 'string') {\n      this.normalizedIdentifier = identifier;\n    } else if (identifier instanceof Token) {\n      this.normalizedIdentifier = `Token<${identifier.name || 'UNSET_NAME'}>`;\n    } else if (identifier && (identifier.name || identifier.prototype?.name)) {\n      this.normalizedIdentifier =\n        `MaybeConstructable<${identifier.name}>` ||\n        `MaybeConstructable<${(identifier.prototype as { name: string })?.name}>`;\n    }\n  }\n}\n"]}