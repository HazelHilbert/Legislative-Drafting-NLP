{"version":3,"file":"container.class.js","sourceRoot":"","sources":["../../src/container.class.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,iBAAiB,EAAE,MAAM,4BAA4B,CAAC;AAQ/D;;GAEG;AACH,MAAM,OAAO,SAAS;IAYpB;;OAEG;IACH,MAAM,CAAC,EAAE,CAAC,cAAsB,SAAS;QACvC,IAAI,WAAW,KAAK,SAAS;YAAE,OAAO,IAAI,CAAC,cAAc,CAAC;QAE1D,IAAI,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,QAAQ,CAAC,EAAE,KAAK,WAAW,CAAC,CAAC;QAC7E,IAAI,CAAC,SAAS,EAAE;YACd,SAAS,GAAG,IAAI,iBAAiB,CAAC,WAAW,CAAC,CAAC;YAC/C,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;YAC/B,2FAA2F;YAC3F,qBAAqB;SACtB;QAED,OAAO,SAAS,CAAC;IACnB,CAAC;IASD,MAAM,CAAC,GAAG,CAAI,UAA6B;QACzC,OAAO,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,UAAiB,CAAC,CAAC;IACpD,CAAC;IAUD,MAAM,CAAC,GAAG,CAAI,UAAgC;QAC5C,OAAO,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,UAAiB,CAAC,CAAC;IACpD,CAAC;IAQD,MAAM,CAAC,OAAO,CAAI,EAAqB;QACrC,OAAO,IAAI,CAAC,cAAc,CAAC,OAAO,CAAC,EAAS,CAAC,CAAC;IAChD,CAAC;IAYD,MAAM,CAAC,GAAG,CACR,2BAA4F,EAC5F,KAAW;QAEX,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,2BAAkC,EAAE,KAAK,CAAC,CAAC;QACnE,OAAO,IAAI,CAAC;IACd,CAAC;IAED;;OAEG;IACH,MAAM,CAAC,MAAM,CAAC,2BAAoE;QAChF,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,2BAA2B,CAAC,CAAC;QAExD,OAAO,IAAI,CAAC;IACd,CAAC;IAED;;OAEG;IACH,MAAM,CAAC,KAAK,CAAC,cAAsB,SAAS;QAC1C,IAAI,WAAW,IAAI,SAAS,EAAE;YAC5B,IAAI,CAAC,cAAc,CAAC,KAAK,EAAE,CAAC;YAC5B,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,QAAQ,CAAC,EAAE,CAAC,QAAQ,CAAC,KAAK,EAAE,CAAC,CAAC;SACtD;aAAM;YACL,MAAM,QAAQ,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,QAAQ,CAAC,EAAE,KAAK,WAAW,CAAC,CAAC;YAC9E,IAAI,QAAQ,EAAE;gBACZ,QAAQ,CAAC,KAAK,EAAE,CAAC;gBACjB,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;aAC5D;SACF;QACD,OAAO,IAAI,CAAC;IACd,CAAC;IAED;;OAEG;IACH,MAAM,CAAC,eAAe,CAAC,OAAgB;QACrC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QAC5B,OAAO,IAAI,CAAC;IACd,CAAC;IAED;;OAEG;IACH,gEAAgE;IAChE,MAAM,CAAC,MAAM,CAAC,QAAoB;QAChC,OAAO,IAAI,CAAC;IACd,CAAC;;AAvHD;;IAEI;AACY,kBAAQ,GAAc,EAAE,CAAC;AAEzC,kCAAkC;AACV,wBAAc,GAAsB,IAAI,iBAAiB,CAAC,SAAS,CAAC,CAAC;AAE7F,0DAA0D;AAClC,mBAAS,GAAwB,EAAE,CAAC","sourcesContent":["import { ContainerInstance } from './container-instance.class';\nimport { Token } from './token.class';\nimport { Handler } from './interfaces/handler.interface';\nimport { Constructable } from './types/constructable.type';\nimport { ServiceIdentifier } from './types/service-identifier.type';\nimport { ServiceOptions } from './interfaces/service-options.interface';\nimport { AbstractConstructable } from './types/abstract-constructable.type';\n\n/**\n * Service container.\n */\nexport class Container {\n  /**\n   * All registered handlers. The @Inject() decorator uses handlers internally to mark a property for injection.\n   **/\n  static readonly handlers: Handler[] = [];\n\n  /**  Global container instance. */\n  private static readonly globalInstance: ContainerInstance = new ContainerInstance('default');\n\n  /** Other containers created using Container.of method. */\n  private static readonly instances: ContainerInstance[] = [];\n\n  /**\n   * Gets a separate container instance for the given instance id.\n   */\n  static of(containerId: string = 'default'): ContainerInstance {\n    if (containerId === 'default') return this.globalInstance;\n\n    let container = this.instances.find(instance => instance.id === containerId);\n    if (!container) {\n      container = new ContainerInstance(containerId);\n      this.instances.push(container);\n      // TODO: Why we are not reseting here? Let's reset here. (I have added the commented code.)\n      // container.reset();\n    }\n\n    return container;\n  }\n\n  /**\n   * Checks if the service with given name or type is registered service container.\n   * Optionally, parameters can be passed in case if instance is initialized in the container for the first time.\n   */\n  static has<T>(type: Constructable<T>): boolean;\n  static has<T>(id: string): boolean;\n  static has<T>(id: Token<T>): boolean;\n  static has<T>(identifier: ServiceIdentifier): boolean {\n    return this.globalInstance.has(identifier as any);\n  }\n\n  /**\n   * Retrieves the service with given name or type from the service container.\n   * Optionally, parameters can be passed in case if instance is initialized in the container for the first time.\n   */\n  static get<T>(type: Constructable<T>): T;\n  static get<T>(type: AbstractConstructable<T>): T;\n  static get<T>(id: string): T;\n  static get<T>(id: Token<T>): T;\n  static get<T>(identifier: ServiceIdentifier<T>): T {\n    return this.globalInstance.get(identifier as any);\n  }\n\n  /**\n   * Gets all instances registered in the container of the given service identifier.\n   * Used when service defined with multiple: true flag.\n   */\n  static getMany<T>(id: string): T[];\n  static getMany<T>(id: Token<T>): T[];\n  static getMany<T>(id: string | Token<T>): T[] {\n    return this.globalInstance.getMany(id as any);\n  }\n\n  /**\n   * Sets a value for the given type or service name in the container.\n   */\n  static set<T = unknown>(type: Function, value: any): Container;\n  static set<T = unknown>(type: Constructable<T>, value: any): Container;\n  static set<T = unknown>(type: AbstractConstructable<T>, value: any): Container;\n  static set<T = unknown>(name: string, value: any): Container;\n  static set<T = unknown>(token: Token<T>, value: any): Container;\n  static set<T = unknown>(value: ServiceOptions<T>): Container;\n  static set<T = unknown>(values: ServiceOptions<T>[]): Container;\n  static set(\n    identifierOrServiceMetadata: ServiceIdentifier | ServiceOptions<any> | ServiceOptions<any>[],\n    value?: any\n  ): Container {\n    this.globalInstance.set(identifierOrServiceMetadata as any, value);\n    return this;\n  }\n\n  /**\n   * Removes services with a given service identifiers.\n   */\n  static remove(identifierOrIdentifierArray: ServiceIdentifier | ServiceIdentifier[]): Container {\n    this.globalInstance.remove(identifierOrIdentifierArray);\n\n    return this;\n  }\n\n  /**\n   * Completely resets the container by removing all previously registered services and handlers from it.\n   */\n  static reset(containerId: string = 'default'): Container {\n    if (containerId == 'default') {\n      this.globalInstance.reset();\n      this.instances.forEach(instance => instance.reset());\n    } else {\n      const instance = this.instances.find(instance => instance.id === containerId);\n      if (instance) {\n        instance.reset();\n        this.instances.splice(this.instances.indexOf(instance), 1);\n      }\n    }\n    return this;\n  }\n\n  /**\n   * Registers a new handler.\n   */\n  static registerHandler(handler: Handler): Container {\n    this.handlers.push(handler);\n    return this;\n  }\n\n  /**\n   * Helper method that imports given services.\n   */\n  /* eslint-disable-next-line @typescript-eslint/no-unused-vars */\n  static import(services: Function[]): Container {\n    return this;\n  }\n}\n"]}