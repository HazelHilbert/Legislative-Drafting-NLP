{"version":3,"file":"service-not-found.error.js","sourceRoot":"","sources":["../../../src/error/service-not-found.error.ts"],"names":[],"mappings":";;;;;;;;;;;;;AACA,OAAO,EAAE,KAAK,EAAE,MAAM,gBAAgB,CAAC;AAEvC;;GAEG;AACH;IAA0C,wCAAK;IAa7C,8BAAY,UAA6B;;QAAzC,YACE,iBAAO,SAWR;QAxBM,UAAI,GAAG,sBAAsB,CAAC;QAErC,4DAA4D;QACpD,0BAAoB,GAAW,sBAAsB,CAAC;QAY5D,IAAI,OAAO,UAAU,KAAK,QAAQ,EAAE;YAClC,KAAI,CAAC,oBAAoB,GAAG,UAAU,CAAC;SACxC;aAAM,IAAI,UAAU,YAAY,KAAK,EAAE;YACtC,KAAI,CAAC,oBAAoB,GAAG,YAAS,UAAU,CAAC,IAAI,IAAI,YAAY,OAAG,CAAC;SACzE;aAAM,IAAI,UAAU,IAAI,CAAC,UAAU,CAAC,IAAI,WAAI,UAAU,CAAC,SAAS,0CAAE,IAAI,CAAA,CAAC,EAAE;YACxE,KAAI,CAAC,oBAAoB;gBACvB,wBAAsB,UAAU,CAAC,IAAI,MAAG;oBACxC,+BAAuB,UAAU,CAAC,SAA8B,0CAAE,IAAI,OAAG,CAAC;SAC7E;;IACH,CAAC;IAnBD,sBAAI,yCAAO;aAAX;YACE,OAAO,CACL,oBAAiB,IAAI,CAAC,oBAAoB,mDAA+C;gBACzF,uHAAmH,CACpH,CAAC;QACJ,CAAC;;;OAAA;IAeH,2BAAC;AAAD,CAAC,AA1BD,CAA0C,KAAK,GA0B9C","sourcesContent":["import { ServiceIdentifier } from '../types/service-identifier.type';\nimport { Token } from '../token.class';\n\n/**\n * Thrown when requested service was not found.\n */\nexport class ServiceNotFoundError extends Error {\n  public name = 'ServiceNotFoundError';\n\n  /** Normalized identifier name used in the error message. */\n  private normalizedIdentifier: string = '<UNKNOWN_IDENTIFIER>';\n\n  get message(): string {\n    return (\n      `Service with \"${this.normalizedIdentifier}\" identifier was not found in the container. ` +\n      `Register it before usage via explicitly calling the \"Container.set\" function or using the \"@Service()\" decorator.`\n    );\n  }\n\n  constructor(identifier: ServiceIdentifier) {\n    super();\n\n    if (typeof identifier === 'string') {\n      this.normalizedIdentifier = identifier;\n    } else if (identifier instanceof Token) {\n      this.normalizedIdentifier = `Token<${identifier.name || 'UNSET_NAME'}>`;\n    } else if (identifier && (identifier.name || identifier.prototype?.name)) {\n      this.normalizedIdentifier =\n        `MaybeConstructable<${identifier.name}>` ||\n        `MaybeConstructable<${(identifier.prototype as { name: string })?.name}>`;\n    }\n  }\n}\n"]}