{"version":3,"file":"service-metadata.interface.js","sourceRoot":"","sources":["../../../src/interfaces/service-metadata.interface.ts"],"names":[],"mappings":"","sourcesContent":["import { Constructable } from '../types/constructable.type';\nimport { ServiceIdentifier } from '../types/service-identifier.type';\n\n/**\n * Service metadata is used to initialize service and store its state.\n */\nexport interface ServiceMetadata<Type = unknown> {\n  /** Unique identifier of the referenced service. */\n  id: ServiceIdentifier;\n\n  /**\n   * Class definition of the service what is used to initialize given service.\n   * This property maybe null if the value of the service is set manually.\n   * If id is not set then it serves as service id.\n   */\n  type: Constructable<Type> | null;\n\n  /**\n   * Indicates if this service must be global and same instance must be used across all containers.\n   */\n  global: boolean;\n\n  /**\n   * Indicates whether a new instance of this class must be created for each class injecting this class.\n   * Global option is ignored when this option is used.\n   */\n  transient: boolean;\n\n  /**\n   * Allows to setup multiple instances the different classes under a single service id string or token.\n   */\n  multiple: boolean;\n\n  /**\n   * Indicates whether a new instance should be created as soon as the class is registered.\n   * By default the registered classes are only instantiated when they are requested from the container.\n   */\n  eager?: boolean;\n\n  /**\n   * Factory function used to initialize this service.\n   * Can be regular function (\"createCar\" for example),\n   * or other service which produces this instance ([CarFactory, \"createCar\"] for example).\n   */\n  factory: [Constructable<unknown>, string] | CallableFunction | undefined;\n\n  /**\n   * Instance of the target class.\n   */\n  value: unknown | Symbol;\n}\n"]}