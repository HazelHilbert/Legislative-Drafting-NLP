import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { DeletedServers } from "../operationsInterfaces";
import { SqlManagementClient } from "../sqlManagementClient";
import { PollerLike, PollOperationState } from "@azure/core-lro";
import { DeletedServer, DeletedServersListOptionalParams, DeletedServersListByLocationOptionalParams, DeletedServersGetOptionalParams, DeletedServersGetResponse, DeletedServersRecoverOptionalParams, DeletedServersRecoverResponse } from "../models";
/** Class containing DeletedServers operations. */
export declare class DeletedServersImpl implements DeletedServers {
    private readonly client;
    /**
     * Initialize a new instance of the class DeletedServers class.
     * @param client Reference to the service client
     */
    constructor(client: SqlManagementClient);
    /**
     * Gets a list of all deleted servers in a subscription.
     * @param options The options parameters.
     */
    list(options?: DeletedServersListOptionalParams): PagedAsyncIterableIterator<DeletedServer>;
    private listPagingPage;
    private listPagingAll;
    /**
     * Gets a list of deleted servers for a location.
     * @param locationName The name of the region where the resource is located.
     * @param options The options parameters.
     */
    listByLocation(locationName: string, options?: DeletedServersListByLocationOptionalParams): PagedAsyncIterableIterator<DeletedServer>;
    private listByLocationPagingPage;
    private listByLocationPagingAll;
    /**
     * Gets a list of all deleted servers in a subscription.
     * @param options The options parameters.
     */
    private _list;
    /**
     * Gets a deleted server.
     * @param locationName The name of the region where the resource is located.
     * @param deletedServerName The name of the deleted server.
     * @param options The options parameters.
     */
    get(locationName: string, deletedServerName: string, options?: DeletedServersGetOptionalParams): Promise<DeletedServersGetResponse>;
    /**
     * Gets a list of deleted servers for a location.
     * @param locationName The name of the region where the resource is located.
     * @param options The options parameters.
     */
    private _listByLocation;
    /**
     * Recovers a deleted server.
     * @param locationName The name of the region where the resource is located.
     * @param deletedServerName The name of the deleted server.
     * @param options The options parameters.
     */
    beginRecover(locationName: string, deletedServerName: string, options?: DeletedServersRecoverOptionalParams): Promise<PollerLike<PollOperationState<DeletedServersRecoverResponse>, DeletedServersRecoverResponse>>;
    /**
     * Recovers a deleted server.
     * @param locationName The name of the region where the resource is located.
     * @param deletedServerName The name of the deleted server.
     * @param options The options parameters.
     */
    beginRecoverAndWait(locationName: string, deletedServerName: string, options?: DeletedServersRecoverOptionalParams): Promise<DeletedServersRecoverResponse>;
    /**
     * ListNext
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    private _listNext;
    /**
     * ListByLocationNext
     * @param locationName The name of the region where the resource is located.
     * @param nextLink The nextLink from the previous successful call to the ListByLocation method.
     * @param options The options parameters.
     */
    private _listByLocationNext;
}
//# sourceMappingURL=deletedServers.d.ts.map