import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { ManagedInstanceAdministrators } from "../operationsInterfaces";
import { SqlManagementClient } from "../sqlManagementClient";
import { PollerLike, PollOperationState } from "@azure/core-lro";
import { ManagedInstanceAdministrator, ManagedInstanceAdministratorsListByInstanceOptionalParams, AdministratorName, ManagedInstanceAdministratorsGetOptionalParams, ManagedInstanceAdministratorsGetResponse, ManagedInstanceAdministratorsCreateOrUpdateOptionalParams, ManagedInstanceAdministratorsCreateOrUpdateResponse, ManagedInstanceAdministratorsDeleteOptionalParams } from "../models";
/** Class containing ManagedInstanceAdministrators operations. */
export declare class ManagedInstanceAdministratorsImpl implements ManagedInstanceAdministrators {
    private readonly client;
    /**
     * Initialize a new instance of the class ManagedInstanceAdministrators class.
     * @param client Reference to the service client
     */
    constructor(client: SqlManagementClient);
    /**
     * Gets a list of managed instance administrators.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param managedInstanceName The name of the managed instance.
     * @param options The options parameters.
     */
    listByInstance(resourceGroupName: string, managedInstanceName: string, options?: ManagedInstanceAdministratorsListByInstanceOptionalParams): PagedAsyncIterableIterator<ManagedInstanceAdministrator>;
    private listByInstancePagingPage;
    private listByInstancePagingAll;
    /**
     * Gets a list of managed instance administrators.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param managedInstanceName The name of the managed instance.
     * @param options The options parameters.
     */
    private _listByInstance;
    /**
     * Gets a managed instance administrator.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param managedInstanceName The name of the managed instance.
     * @param administratorName
     * @param options The options parameters.
     */
    get(resourceGroupName: string, managedInstanceName: string, administratorName: AdministratorName, options?: ManagedInstanceAdministratorsGetOptionalParams): Promise<ManagedInstanceAdministratorsGetResponse>;
    /**
     * Creates or updates a managed instance administrator.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param managedInstanceName The name of the managed instance.
     * @param administratorName
     * @param parameters The requested administrator parameters.
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName: string, managedInstanceName: string, administratorName: AdministratorName, parameters: ManagedInstanceAdministrator, options?: ManagedInstanceAdministratorsCreateOrUpdateOptionalParams): Promise<PollerLike<PollOperationState<ManagedInstanceAdministratorsCreateOrUpdateResponse>, ManagedInstanceAdministratorsCreateOrUpdateResponse>>;
    /**
     * Creates or updates a managed instance administrator.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param managedInstanceName The name of the managed instance.
     * @param administratorName
     * @param parameters The requested administrator parameters.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName: string, managedInstanceName: string, administratorName: AdministratorName, parameters: ManagedInstanceAdministrator, options?: ManagedInstanceAdministratorsCreateOrUpdateOptionalParams): Promise<ManagedInstanceAdministratorsCreateOrUpdateResponse>;
    /**
     * Deletes a managed instance administrator.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param managedInstanceName The name of the managed instance.
     * @param administratorName
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, managedInstanceName: string, administratorName: AdministratorName, options?: ManagedInstanceAdministratorsDeleteOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Deletes a managed instance administrator.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param managedInstanceName The name of the managed instance.
     * @param administratorName
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, managedInstanceName: string, administratorName: AdministratorName, options?: ManagedInstanceAdministratorsDeleteOptionalParams): Promise<void>;
    /**
     * ListByInstanceNext
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param managedInstanceName The name of the managed instance.
     * @param nextLink The nextLink from the previous successful call to the ListByInstance method.
     * @param options The options parameters.
     */
    private _listByInstanceNext;
}
//# sourceMappingURL=managedInstanceAdministrators.d.ts.map