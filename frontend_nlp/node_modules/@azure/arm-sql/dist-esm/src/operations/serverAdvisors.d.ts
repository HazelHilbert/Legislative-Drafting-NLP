import { ServerAdvisors } from "../operationsInterfaces";
import { SqlManagementClient } from "../sqlManagementClient";
import { ServerAdvisorsListByServerOptionalParams, ServerAdvisorsListByServerResponse, ServerAdvisorsGetOptionalParams, ServerAdvisorsGetResponse, Advisor, ServerAdvisorsUpdateOptionalParams, ServerAdvisorsUpdateResponse } from "../models";
/** Class containing ServerAdvisors operations. */
export declare class ServerAdvisorsImpl implements ServerAdvisors {
    private readonly client;
    /**
     * Initialize a new instance of the class ServerAdvisors class.
     * @param client Reference to the service client
     */
    constructor(client: SqlManagementClient);
    /**
     * Gets a list of server advisors.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serverName The name of the server.
     * @param options The options parameters.
     */
    listByServer(resourceGroupName: string, serverName: string, options?: ServerAdvisorsListByServerOptionalParams): Promise<ServerAdvisorsListByServerResponse>;
    /**
     * Gets a server advisor.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serverName The name of the server.
     * @param advisorName The name of the Server Advisor.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, serverName: string, advisorName: string, options?: ServerAdvisorsGetOptionalParams): Promise<ServerAdvisorsGetResponse>;
    /**
     * Updates a server advisor.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serverName The name of the server.
     * @param advisorName The name of the Server Advisor.
     * @param parameters The requested advisor resource state.
     * @param options The options parameters.
     */
    update(resourceGroupName: string, serverName: string, advisorName: string, parameters: Advisor, options?: ServerAdvisorsUpdateOptionalParams): Promise<ServerAdvisorsUpdateResponse>;
}
//# sourceMappingURL=serverAdvisors.d.ts.map