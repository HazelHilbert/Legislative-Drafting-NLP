import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { DatabaseExtensionsOperations } from "../operationsInterfaces";
import { SqlManagementClient } from "../sqlManagementClient";
import { PollerLike, PollOperationState } from "@azure/core-lro";
import { ImportExportExtensionsOperationResult, DatabaseExtensionsListByDatabaseOptionalParams, DatabaseExtensionsGetOptionalParams, DatabaseExtensions, DatabaseExtensionsCreateOrUpdateOptionalParams, DatabaseExtensionsCreateOrUpdateResponse } from "../models";
/** Class containing DatabaseExtensionsOperations operations. */
export declare class DatabaseExtensionsOperationsImpl implements DatabaseExtensionsOperations {
    private readonly client;
    /**
     * Initialize a new instance of the class DatabaseExtensionsOperations class.
     * @param client Reference to the service client
     */
    constructor(client: SqlManagementClient);
    /**
     * List database extension. This will return an empty list as it is not supported.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serverName The name of the server.
     * @param databaseName The name of the database.
     * @param options The options parameters.
     */
    listByDatabase(resourceGroupName: string, serverName: string, databaseName: string, options?: DatabaseExtensionsListByDatabaseOptionalParams): PagedAsyncIterableIterator<ImportExportExtensionsOperationResult>;
    private listByDatabasePagingPage;
    private listByDatabasePagingAll;
    /**
     * Gets a database extension. This will return resource not found as it is not supported.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serverName The name of the server.
     * @param databaseName The name of the database.
     * @param extensionName
     * @param options The options parameters.
     */
    get(resourceGroupName: string, serverName: string, databaseName: string, extensionName: string, options?: DatabaseExtensionsGetOptionalParams): Promise<void>;
    /**
     * Perform a database extension operation, like polybase import
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serverName The name of the server.
     * @param databaseName The name of the database.
     * @param extensionName
     * @param parameters The database import request parameters.
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName: string, serverName: string, databaseName: string, extensionName: string, parameters: DatabaseExtensions, options?: DatabaseExtensionsCreateOrUpdateOptionalParams): Promise<PollerLike<PollOperationState<DatabaseExtensionsCreateOrUpdateResponse>, DatabaseExtensionsCreateOrUpdateResponse>>;
    /**
     * Perform a database extension operation, like polybase import
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serverName The name of the server.
     * @param databaseName The name of the database.
     * @param extensionName
     * @param parameters The database import request parameters.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName: string, serverName: string, databaseName: string, extensionName: string, parameters: DatabaseExtensions, options?: DatabaseExtensionsCreateOrUpdateOptionalParams): Promise<DatabaseExtensionsCreateOrUpdateResponse>;
    /**
     * List database extension. This will return an empty list as it is not supported.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serverName The name of the server.
     * @param databaseName The name of the database.
     * @param options The options parameters.
     */
    private _listByDatabase;
    /**
     * ListByDatabaseNext
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serverName The name of the server.
     * @param databaseName The name of the database.
     * @param nextLink The nextLink from the previous successful call to the ListByDatabase method.
     * @param options The options parameters.
     */
    private _listByDatabaseNext;
}
//# sourceMappingURL=databaseExtensionsOperations.d.ts.map