/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { __asyncDelegator, __asyncGenerator, __asyncValues, __await, __awaiter } from "tslib";
import { setContinuationToken } from "../pagingHelper";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { LroEngine } from "@azure/core-lro";
import { LroImpl } from "../lroImpl";
/// <reference lib="esnext.asynciterable" />
/** Class containing LongTermRetentionBackups operations. */
export class LongTermRetentionBackupsImpl {
    /**
     * Initialize a new instance of the class LongTermRetentionBackups class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Lists all long term retention backups for a database.
     * @param locationName The location of the database
     * @param longTermRetentionServerName The name of the server
     * @param longTermRetentionDatabaseName The name of the database
     * @param options The options parameters.
     */
    listByDatabase(locationName, longTermRetentionServerName, longTermRetentionDatabaseName, options) {
        const iter = this.listByDatabasePagingAll(locationName, longTermRetentionServerName, longTermRetentionDatabaseName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listByDatabasePagingPage(locationName, longTermRetentionServerName, longTermRetentionDatabaseName, options, settings);
            }
        };
    }
    listByDatabasePagingPage(locationName, longTermRetentionServerName, longTermRetentionDatabaseName, options, settings) {
        return __asyncGenerator(this, arguments, function* listByDatabasePagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield __await(this._listByDatabase(locationName, longTermRetentionServerName, longTermRetentionDatabaseName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield __await(page);
            }
            while (continuationToken) {
                result = yield __await(this._listByDatabaseNext(locationName, longTermRetentionServerName, longTermRetentionDatabaseName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield __await(page);
            }
        });
    }
    listByDatabasePagingAll(locationName, longTermRetentionServerName, longTermRetentionDatabaseName, options) {
        return __asyncGenerator(this, arguments, function* listByDatabasePagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = __asyncValues(this.listByDatabasePagingPage(locationName, longTermRetentionServerName, longTermRetentionDatabaseName, options)), _c; _c = yield __await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield __await(yield* __asyncDelegator(__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield __await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Lists the long term retention backups for a given location.
     * @param locationName The location of the database
     * @param options The options parameters.
     */
    listByLocation(locationName, options) {
        const iter = this.listByLocationPagingAll(locationName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listByLocationPagingPage(locationName, options, settings);
            }
        };
    }
    listByLocationPagingPage(locationName, options, settings) {
        return __asyncGenerator(this, arguments, function* listByLocationPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield __await(this._listByLocation(locationName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield __await(page);
            }
            while (continuationToken) {
                result = yield __await(this._listByLocationNext(locationName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield __await(page);
            }
        });
    }
    listByLocationPagingAll(locationName, options) {
        return __asyncGenerator(this, arguments, function* listByLocationPagingAll_1() {
            var e_2, _a;
            try {
                for (var _b = __asyncValues(this.listByLocationPagingPage(locationName, options)), _c; _c = yield __await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield __await(yield* __asyncDelegator(__asyncValues(page)));
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield __await(_a.call(_b));
                }
                finally { if (e_2) throw e_2.error; }
            }
        });
    }
    /**
     * Lists the long term retention backups for a given server.
     * @param locationName The location of the database
     * @param longTermRetentionServerName The name of the server
     * @param options The options parameters.
     */
    listByServer(locationName, longTermRetentionServerName, options) {
        const iter = this.listByServerPagingAll(locationName, longTermRetentionServerName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listByServerPagingPage(locationName, longTermRetentionServerName, options, settings);
            }
        };
    }
    listByServerPagingPage(locationName, longTermRetentionServerName, options, settings) {
        return __asyncGenerator(this, arguments, function* listByServerPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield __await(this._listByServer(locationName, longTermRetentionServerName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield __await(page);
            }
            while (continuationToken) {
                result = yield __await(this._listByServerNext(locationName, longTermRetentionServerName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield __await(page);
            }
        });
    }
    listByServerPagingAll(locationName, longTermRetentionServerName, options) {
        return __asyncGenerator(this, arguments, function* listByServerPagingAll_1() {
            var e_3, _a;
            try {
                for (var _b = __asyncValues(this.listByServerPagingPage(locationName, longTermRetentionServerName, options)), _c; _c = yield __await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield __await(yield* __asyncDelegator(__asyncValues(page)));
                }
            }
            catch (e_3_1) { e_3 = { error: e_3_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield __await(_a.call(_b));
                }
                finally { if (e_3) throw e_3.error; }
            }
        });
    }
    /**
     * Lists all long term retention backups for a database.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param locationName The location of the database
     * @param longTermRetentionServerName The name of the server
     * @param longTermRetentionDatabaseName The name of the database
     * @param options The options parameters.
     */
    listByResourceGroupDatabase(resourceGroupName, locationName, longTermRetentionServerName, longTermRetentionDatabaseName, options) {
        const iter = this.listByResourceGroupDatabasePagingAll(resourceGroupName, locationName, longTermRetentionServerName, longTermRetentionDatabaseName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listByResourceGroupDatabasePagingPage(resourceGroupName, locationName, longTermRetentionServerName, longTermRetentionDatabaseName, options, settings);
            }
        };
    }
    listByResourceGroupDatabasePagingPage(resourceGroupName, locationName, longTermRetentionServerName, longTermRetentionDatabaseName, options, settings) {
        return __asyncGenerator(this, arguments, function* listByResourceGroupDatabasePagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield __await(this._listByResourceGroupDatabase(resourceGroupName, locationName, longTermRetentionServerName, longTermRetentionDatabaseName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield __await(page);
            }
            while (continuationToken) {
                result = yield __await(this._listByResourceGroupDatabaseNext(resourceGroupName, locationName, longTermRetentionServerName, longTermRetentionDatabaseName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield __await(page);
            }
        });
    }
    listByResourceGroupDatabasePagingAll(resourceGroupName, locationName, longTermRetentionServerName, longTermRetentionDatabaseName, options) {
        return __asyncGenerator(this, arguments, function* listByResourceGroupDatabasePagingAll_1() {
            var e_4, _a;
            try {
                for (var _b = __asyncValues(this.listByResourceGroupDatabasePagingPage(resourceGroupName, locationName, longTermRetentionServerName, longTermRetentionDatabaseName, options)), _c; _c = yield __await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield __await(yield* __asyncDelegator(__asyncValues(page)));
                }
            }
            catch (e_4_1) { e_4 = { error: e_4_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield __await(_a.call(_b));
                }
                finally { if (e_4) throw e_4.error; }
            }
        });
    }
    /**
     * Lists the long term retention backups for a given location.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param locationName The location of the database
     * @param options The options parameters.
     */
    listByResourceGroupLocation(resourceGroupName, locationName, options) {
        const iter = this.listByResourceGroupLocationPagingAll(resourceGroupName, locationName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listByResourceGroupLocationPagingPage(resourceGroupName, locationName, options, settings);
            }
        };
    }
    listByResourceGroupLocationPagingPage(resourceGroupName, locationName, options, settings) {
        return __asyncGenerator(this, arguments, function* listByResourceGroupLocationPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield __await(this._listByResourceGroupLocation(resourceGroupName, locationName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield __await(page);
            }
            while (continuationToken) {
                result = yield __await(this._listByResourceGroupLocationNext(resourceGroupName, locationName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield __await(page);
            }
        });
    }
    listByResourceGroupLocationPagingAll(resourceGroupName, locationName, options) {
        return __asyncGenerator(this, arguments, function* listByResourceGroupLocationPagingAll_1() {
            var e_5, _a;
            try {
                for (var _b = __asyncValues(this.listByResourceGroupLocationPagingPage(resourceGroupName, locationName, options)), _c; _c = yield __await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield __await(yield* __asyncDelegator(__asyncValues(page)));
                }
            }
            catch (e_5_1) { e_5 = { error: e_5_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield __await(_a.call(_b));
                }
                finally { if (e_5) throw e_5.error; }
            }
        });
    }
    /**
     * Lists the long term retention backups for a given server.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param locationName The location of the database
     * @param longTermRetentionServerName The name of the server
     * @param options The options parameters.
     */
    listByResourceGroupServer(resourceGroupName, locationName, longTermRetentionServerName, options) {
        const iter = this.listByResourceGroupServerPagingAll(resourceGroupName, locationName, longTermRetentionServerName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listByResourceGroupServerPagingPage(resourceGroupName, locationName, longTermRetentionServerName, options, settings);
            }
        };
    }
    listByResourceGroupServerPagingPage(resourceGroupName, locationName, longTermRetentionServerName, options, settings) {
        return __asyncGenerator(this, arguments, function* listByResourceGroupServerPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield __await(this._listByResourceGroupServer(resourceGroupName, locationName, longTermRetentionServerName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield __await(page);
            }
            while (continuationToken) {
                result = yield __await(this._listByResourceGroupServerNext(resourceGroupName, locationName, longTermRetentionServerName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield __await(page);
            }
        });
    }
    listByResourceGroupServerPagingAll(resourceGroupName, locationName, longTermRetentionServerName, options) {
        return __asyncGenerator(this, arguments, function* listByResourceGroupServerPagingAll_1() {
            var e_6, _a;
            try {
                for (var _b = __asyncValues(this.listByResourceGroupServerPagingPage(resourceGroupName, locationName, longTermRetentionServerName, options)), _c; _c = yield __await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield __await(yield* __asyncDelegator(__asyncValues(page)));
                }
            }
            catch (e_6_1) { e_6 = { error: e_6_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield __await(_a.call(_b));
                }
                finally { if (e_6) throw e_6.error; }
            }
        });
    }
    /**
     * Copy an existing long term retention backup.
     * @param locationName The location of the database.
     * @param longTermRetentionServerName The name of the server
     * @param longTermRetentionDatabaseName The name of the database
     * @param backupName The backup name.
     * @param parameters The parameters needed for long term retention copy request
     * @param options The options parameters.
     */
    beginCopy(locationName, longTermRetentionServerName, longTermRetentionDatabaseName, backupName, parameters, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => __awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperation = (args, spec) => __awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = new LroImpl(sendOperation, {
                locationName,
                longTermRetentionServerName,
                longTermRetentionDatabaseName,
                backupName,
                parameters,
                options
            }, copyOperationSpec);
            const poller = new LroEngine(lro, {
                resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Copy an existing long term retention backup.
     * @param locationName The location of the database.
     * @param longTermRetentionServerName The name of the server
     * @param longTermRetentionDatabaseName The name of the database
     * @param backupName The backup name.
     * @param parameters The parameters needed for long term retention copy request
     * @param options The options parameters.
     */
    beginCopyAndWait(locationName, longTermRetentionServerName, longTermRetentionDatabaseName, backupName, parameters, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginCopy(locationName, longTermRetentionServerName, longTermRetentionDatabaseName, backupName, parameters, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Updates an existing long term retention backup.
     * @param locationName The location of the database.
     * @param longTermRetentionServerName The name of the server
     * @param longTermRetentionDatabaseName The name of the database
     * @param backupName The backup name.
     * @param parameters The requested backup resource state
     * @param options The options parameters.
     */
    beginUpdate(locationName, longTermRetentionServerName, longTermRetentionDatabaseName, backupName, parameters, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => __awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperation = (args, spec) => __awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = new LroImpl(sendOperation, {
                locationName,
                longTermRetentionServerName,
                longTermRetentionDatabaseName,
                backupName,
                parameters,
                options
            }, updateOperationSpec);
            const poller = new LroEngine(lro, {
                resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Updates an existing long term retention backup.
     * @param locationName The location of the database.
     * @param longTermRetentionServerName The name of the server
     * @param longTermRetentionDatabaseName The name of the database
     * @param backupName The backup name.
     * @param parameters The requested backup resource state
     * @param options The options parameters.
     */
    beginUpdateAndWait(locationName, longTermRetentionServerName, longTermRetentionDatabaseName, backupName, parameters, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginUpdate(locationName, longTermRetentionServerName, longTermRetentionDatabaseName, backupName, parameters, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Gets a long term retention backup.
     * @param locationName The location of the database.
     * @param longTermRetentionServerName The name of the server
     * @param longTermRetentionDatabaseName The name of the database
     * @param backupName The backup name.
     * @param options The options parameters.
     */
    get(locationName, longTermRetentionServerName, longTermRetentionDatabaseName, backupName, options) {
        return this.client.sendOperationRequest({
            locationName,
            longTermRetentionServerName,
            longTermRetentionDatabaseName,
            backupName,
            options
        }, getOperationSpec);
    }
    /**
     * Deletes a long term retention backup.
     * @param locationName The location of the database
     * @param longTermRetentionServerName The name of the server
     * @param longTermRetentionDatabaseName The name of the database
     * @param backupName The backup name.
     * @param options The options parameters.
     */
    beginDelete(locationName, longTermRetentionServerName, longTermRetentionDatabaseName, backupName, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => __awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperation = (args, spec) => __awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = new LroImpl(sendOperation, {
                locationName,
                longTermRetentionServerName,
                longTermRetentionDatabaseName,
                backupName,
                options
            }, deleteOperationSpec);
            const poller = new LroEngine(lro, {
                resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Deletes a long term retention backup.
     * @param locationName The location of the database
     * @param longTermRetentionServerName The name of the server
     * @param longTermRetentionDatabaseName The name of the database
     * @param backupName The backup name.
     * @param options The options parameters.
     */
    beginDeleteAndWait(locationName, longTermRetentionServerName, longTermRetentionDatabaseName, backupName, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginDelete(locationName, longTermRetentionServerName, longTermRetentionDatabaseName, backupName, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Lists all long term retention backups for a database.
     * @param locationName The location of the database
     * @param longTermRetentionServerName The name of the server
     * @param longTermRetentionDatabaseName The name of the database
     * @param options The options parameters.
     */
    _listByDatabase(locationName, longTermRetentionServerName, longTermRetentionDatabaseName, options) {
        return this.client.sendOperationRequest({
            locationName,
            longTermRetentionServerName,
            longTermRetentionDatabaseName,
            options
        }, listByDatabaseOperationSpec);
    }
    /**
     * Lists the long term retention backups for a given location.
     * @param locationName The location of the database
     * @param options The options parameters.
     */
    _listByLocation(locationName, options) {
        return this.client.sendOperationRequest({ locationName, options }, listByLocationOperationSpec);
    }
    /**
     * Lists the long term retention backups for a given server.
     * @param locationName The location of the database
     * @param longTermRetentionServerName The name of the server
     * @param options The options parameters.
     */
    _listByServer(locationName, longTermRetentionServerName, options) {
        return this.client.sendOperationRequest({ locationName, longTermRetentionServerName, options }, listByServerOperationSpec);
    }
    /**
     * Copy an existing long term retention backup to a different server.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param locationName The location of the database.
     * @param longTermRetentionServerName The name of the server
     * @param longTermRetentionDatabaseName The name of the database
     * @param backupName The backup name.
     * @param parameters The parameters needed for long term retention copy request
     * @param options The options parameters.
     */
    beginCopyByResourceGroup(resourceGroupName, locationName, longTermRetentionServerName, longTermRetentionDatabaseName, backupName, parameters, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => __awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperation = (args, spec) => __awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = new LroImpl(sendOperation, {
                resourceGroupName,
                locationName,
                longTermRetentionServerName,
                longTermRetentionDatabaseName,
                backupName,
                parameters,
                options
            }, copyByResourceGroupOperationSpec);
            const poller = new LroEngine(lro, {
                resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Copy an existing long term retention backup to a different server.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param locationName The location of the database.
     * @param longTermRetentionServerName The name of the server
     * @param longTermRetentionDatabaseName The name of the database
     * @param backupName The backup name.
     * @param parameters The parameters needed for long term retention copy request
     * @param options The options parameters.
     */
    beginCopyByResourceGroupAndWait(resourceGroupName, locationName, longTermRetentionServerName, longTermRetentionDatabaseName, backupName, parameters, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginCopyByResourceGroup(resourceGroupName, locationName, longTermRetentionServerName, longTermRetentionDatabaseName, backupName, parameters, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Updates an existing long term retention backup.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param locationName The location of the database.
     * @param longTermRetentionServerName The name of the server
     * @param longTermRetentionDatabaseName The name of the database
     * @param backupName The backup name.
     * @param parameters The requested backup resource state
     * @param options The options parameters.
     */
    beginUpdateByResourceGroup(resourceGroupName, locationName, longTermRetentionServerName, longTermRetentionDatabaseName, backupName, parameters, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => __awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperation = (args, spec) => __awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = new LroImpl(sendOperation, {
                resourceGroupName,
                locationName,
                longTermRetentionServerName,
                longTermRetentionDatabaseName,
                backupName,
                parameters,
                options
            }, updateByResourceGroupOperationSpec);
            const poller = new LroEngine(lro, {
                resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Updates an existing long term retention backup.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param locationName The location of the database.
     * @param longTermRetentionServerName The name of the server
     * @param longTermRetentionDatabaseName The name of the database
     * @param backupName The backup name.
     * @param parameters The requested backup resource state
     * @param options The options parameters.
     */
    beginUpdateByResourceGroupAndWait(resourceGroupName, locationName, longTermRetentionServerName, longTermRetentionDatabaseName, backupName, parameters, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginUpdateByResourceGroup(resourceGroupName, locationName, longTermRetentionServerName, longTermRetentionDatabaseName, backupName, parameters, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Gets a long term retention backup.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param locationName The location of the database.
     * @param longTermRetentionServerName The name of the server
     * @param longTermRetentionDatabaseName The name of the database
     * @param backupName The backup name.
     * @param options The options parameters.
     */
    getByResourceGroup(resourceGroupName, locationName, longTermRetentionServerName, longTermRetentionDatabaseName, backupName, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            locationName,
            longTermRetentionServerName,
            longTermRetentionDatabaseName,
            backupName,
            options
        }, getByResourceGroupOperationSpec);
    }
    /**
     * Deletes a long term retention backup.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param locationName The location of the database
     * @param longTermRetentionServerName The name of the server
     * @param longTermRetentionDatabaseName The name of the database
     * @param backupName The backup name.
     * @param options The options parameters.
     */
    beginDeleteByResourceGroup(resourceGroupName, locationName, longTermRetentionServerName, longTermRetentionDatabaseName, backupName, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => __awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperation = (args, spec) => __awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = new LroImpl(sendOperation, {
                resourceGroupName,
                locationName,
                longTermRetentionServerName,
                longTermRetentionDatabaseName,
                backupName,
                options
            }, deleteByResourceGroupOperationSpec);
            const poller = new LroEngine(lro, {
                resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Deletes a long term retention backup.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param locationName The location of the database
     * @param longTermRetentionServerName The name of the server
     * @param longTermRetentionDatabaseName The name of the database
     * @param backupName The backup name.
     * @param options The options parameters.
     */
    beginDeleteByResourceGroupAndWait(resourceGroupName, locationName, longTermRetentionServerName, longTermRetentionDatabaseName, backupName, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginDeleteByResourceGroup(resourceGroupName, locationName, longTermRetentionServerName, longTermRetentionDatabaseName, backupName, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Lists all long term retention backups for a database.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param locationName The location of the database
     * @param longTermRetentionServerName The name of the server
     * @param longTermRetentionDatabaseName The name of the database
     * @param options The options parameters.
     */
    _listByResourceGroupDatabase(resourceGroupName, locationName, longTermRetentionServerName, longTermRetentionDatabaseName, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            locationName,
            longTermRetentionServerName,
            longTermRetentionDatabaseName,
            options
        }, listByResourceGroupDatabaseOperationSpec);
    }
    /**
     * Lists the long term retention backups for a given location.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param locationName The location of the database
     * @param options The options parameters.
     */
    _listByResourceGroupLocation(resourceGroupName, locationName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, locationName, options }, listByResourceGroupLocationOperationSpec);
    }
    /**
     * Lists the long term retention backups for a given server.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param locationName The location of the database
     * @param longTermRetentionServerName The name of the server
     * @param options The options parameters.
     */
    _listByResourceGroupServer(resourceGroupName, locationName, longTermRetentionServerName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, locationName, longTermRetentionServerName, options }, listByResourceGroupServerOperationSpec);
    }
    /**
     * ListByDatabaseNext
     * @param locationName The location of the database
     * @param longTermRetentionServerName The name of the server
     * @param longTermRetentionDatabaseName The name of the database
     * @param nextLink The nextLink from the previous successful call to the ListByDatabase method.
     * @param options The options parameters.
     */
    _listByDatabaseNext(locationName, longTermRetentionServerName, longTermRetentionDatabaseName, nextLink, options) {
        return this.client.sendOperationRequest({
            locationName,
            longTermRetentionServerName,
            longTermRetentionDatabaseName,
            nextLink,
            options
        }, listByDatabaseNextOperationSpec);
    }
    /**
     * ListByLocationNext
     * @param locationName The location of the database
     * @param nextLink The nextLink from the previous successful call to the ListByLocation method.
     * @param options The options parameters.
     */
    _listByLocationNext(locationName, nextLink, options) {
        return this.client.sendOperationRequest({ locationName, nextLink, options }, listByLocationNextOperationSpec);
    }
    /**
     * ListByServerNext
     * @param locationName The location of the database
     * @param longTermRetentionServerName The name of the server
     * @param nextLink The nextLink from the previous successful call to the ListByServer method.
     * @param options The options parameters.
     */
    _listByServerNext(locationName, longTermRetentionServerName, nextLink, options) {
        return this.client.sendOperationRequest({ locationName, longTermRetentionServerName, nextLink, options }, listByServerNextOperationSpec);
    }
    /**
     * ListByResourceGroupDatabaseNext
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param locationName The location of the database
     * @param longTermRetentionServerName The name of the server
     * @param longTermRetentionDatabaseName The name of the database
     * @param nextLink The nextLink from the previous successful call to the ListByResourceGroupDatabase
     *                 method.
     * @param options The options parameters.
     */
    _listByResourceGroupDatabaseNext(resourceGroupName, locationName, longTermRetentionServerName, longTermRetentionDatabaseName, nextLink, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            locationName,
            longTermRetentionServerName,
            longTermRetentionDatabaseName,
            nextLink,
            options
        }, listByResourceGroupDatabaseNextOperationSpec);
    }
    /**
     * ListByResourceGroupLocationNext
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param locationName The location of the database
     * @param nextLink The nextLink from the previous successful call to the ListByResourceGroupLocation
     *                 method.
     * @param options The options parameters.
     */
    _listByResourceGroupLocationNext(resourceGroupName, locationName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, locationName, nextLink, options }, listByResourceGroupLocationNextOperationSpec);
    }
    /**
     * ListByResourceGroupServerNext
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param locationName The location of the database
     * @param longTermRetentionServerName The name of the server
     * @param nextLink The nextLink from the previous successful call to the ListByResourceGroupServer
     *                 method.
     * @param options The options parameters.
     */
    _listByResourceGroupServerNext(resourceGroupName, locationName, longTermRetentionServerName, nextLink, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            locationName,
            longTermRetentionServerName,
            nextLink,
            options
        }, listByResourceGroupServerNextOperationSpec);
    }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);
const copyOperationSpec = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.Sql/locations/{locationName}/longTermRetentionServers/{longTermRetentionServerName}/longTermRetentionDatabases/{longTermRetentionDatabaseName}/longTermRetentionBackups/{backupName}/copy",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: Mappers.LongTermRetentionBackupOperationResult
        },
        201: {
            bodyMapper: Mappers.LongTermRetentionBackupOperationResult
        },
        202: {
            bodyMapper: Mappers.LongTermRetentionBackupOperationResult
        },
        204: {
            bodyMapper: Mappers.LongTermRetentionBackupOperationResult
        },
        default: {}
    },
    requestBody: Parameters.parameters84,
    queryParameters: [Parameters.apiVersion1],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.locationName,
        Parameters.longTermRetentionServerName,
        Parameters.longTermRetentionDatabaseName,
        Parameters.backupName
    ],
    headerParameters: [Parameters.accept, Parameters.contentType],
    mediaType: "json",
    serializer
};
const updateOperationSpec = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.Sql/locations/{locationName}/longTermRetentionServers/{longTermRetentionServerName}/longTermRetentionDatabases/{longTermRetentionDatabaseName}/longTermRetentionBackups/{backupName}/update",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: Mappers.LongTermRetentionBackupOperationResult
        },
        201: {
            bodyMapper: Mappers.LongTermRetentionBackupOperationResult
        },
        202: {
            bodyMapper: Mappers.LongTermRetentionBackupOperationResult
        },
        204: {
            bodyMapper: Mappers.LongTermRetentionBackupOperationResult
        },
        default: {}
    },
    requestBody: Parameters.parameters85,
    queryParameters: [Parameters.apiVersion1],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.locationName,
        Parameters.longTermRetentionServerName,
        Parameters.longTermRetentionDatabaseName,
        Parameters.backupName
    ],
    headerParameters: [Parameters.accept, Parameters.contentType],
    mediaType: "json",
    serializer
};
const getOperationSpec = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.Sql/locations/{locationName}/longTermRetentionServers/{longTermRetentionServerName}/longTermRetentionDatabases/{longTermRetentionDatabaseName}/longTermRetentionBackups/{backupName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.LongTermRetentionBackup
        },
        default: {}
    },
    queryParameters: [Parameters.apiVersion1],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.locationName,
        Parameters.longTermRetentionServerName,
        Parameters.longTermRetentionDatabaseName,
        Parameters.backupName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const deleteOperationSpec = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.Sql/locations/{locationName}/longTermRetentionServers/{longTermRetentionServerName}/longTermRetentionDatabases/{longTermRetentionDatabaseName}/longTermRetentionBackups/{backupName}",
    httpMethod: "DELETE",
    responses: { 200: {}, 201: {}, 202: {}, 204: {}, default: {} },
    queryParameters: [Parameters.apiVersion1],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.locationName,
        Parameters.longTermRetentionServerName,
        Parameters.longTermRetentionDatabaseName,
        Parameters.backupName
    ],
    serializer
};
const listByDatabaseOperationSpec = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.Sql/locations/{locationName}/longTermRetentionServers/{longTermRetentionServerName}/longTermRetentionDatabases/{longTermRetentionDatabaseName}/longTermRetentionBackups",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.LongTermRetentionBackupListResult
        },
        default: {}
    },
    queryParameters: [
        Parameters.apiVersion1,
        Parameters.onlyLatestPerDatabase,
        Parameters.databaseState
    ],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.locationName,
        Parameters.longTermRetentionServerName,
        Parameters.longTermRetentionDatabaseName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const listByLocationOperationSpec = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.Sql/locations/{locationName}/longTermRetentionBackups",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.LongTermRetentionBackupListResult
        },
        default: {}
    },
    queryParameters: [
        Parameters.apiVersion1,
        Parameters.onlyLatestPerDatabase,
        Parameters.databaseState
    ],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.locationName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const listByServerOperationSpec = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.Sql/locations/{locationName}/longTermRetentionServers/{longTermRetentionServerName}/longTermRetentionBackups",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.LongTermRetentionBackupListResult
        },
        default: {}
    },
    queryParameters: [
        Parameters.apiVersion1,
        Parameters.onlyLatestPerDatabase,
        Parameters.databaseState
    ],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.locationName,
        Parameters.longTermRetentionServerName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const copyByResourceGroupOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/locations/{locationName}/longTermRetentionServers/{longTermRetentionServerName}/longTermRetentionDatabases/{longTermRetentionDatabaseName}/longTermRetentionBackups/{backupName}/copy",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: Mappers.LongTermRetentionBackupOperationResult
        },
        201: {
            bodyMapper: Mappers.LongTermRetentionBackupOperationResult
        },
        202: {
            bodyMapper: Mappers.LongTermRetentionBackupOperationResult
        },
        204: {
            bodyMapper: Mappers.LongTermRetentionBackupOperationResult
        },
        default: {}
    },
    requestBody: Parameters.parameters84,
    queryParameters: [Parameters.apiVersion1],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.locationName,
        Parameters.longTermRetentionServerName,
        Parameters.longTermRetentionDatabaseName,
        Parameters.backupName
    ],
    headerParameters: [Parameters.accept, Parameters.contentType],
    mediaType: "json",
    serializer
};
const updateByResourceGroupOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/locations/{locationName}/longTermRetentionServers/{longTermRetentionServerName}/longTermRetentionDatabases/{longTermRetentionDatabaseName}/longTermRetentionBackups/{backupName}/update",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: Mappers.LongTermRetentionBackupOperationResult
        },
        201: {
            bodyMapper: Mappers.LongTermRetentionBackupOperationResult
        },
        202: {
            bodyMapper: Mappers.LongTermRetentionBackupOperationResult
        },
        204: {
            bodyMapper: Mappers.LongTermRetentionBackupOperationResult
        },
        default: {}
    },
    requestBody: Parameters.parameters85,
    queryParameters: [Parameters.apiVersion1],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.locationName,
        Parameters.longTermRetentionServerName,
        Parameters.longTermRetentionDatabaseName,
        Parameters.backupName
    ],
    headerParameters: [Parameters.accept, Parameters.contentType],
    mediaType: "json",
    serializer
};
const getByResourceGroupOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/locations/{locationName}/longTermRetentionServers/{longTermRetentionServerName}/longTermRetentionDatabases/{longTermRetentionDatabaseName}/longTermRetentionBackups/{backupName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.LongTermRetentionBackup
        },
        default: {}
    },
    queryParameters: [Parameters.apiVersion1],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.locationName,
        Parameters.longTermRetentionServerName,
        Parameters.longTermRetentionDatabaseName,
        Parameters.backupName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const deleteByResourceGroupOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/locations/{locationName}/longTermRetentionServers/{longTermRetentionServerName}/longTermRetentionDatabases/{longTermRetentionDatabaseName}/longTermRetentionBackups/{backupName}",
    httpMethod: "DELETE",
    responses: { 200: {}, 201: {}, 202: {}, 204: {}, default: {} },
    queryParameters: [Parameters.apiVersion1],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.locationName,
        Parameters.longTermRetentionServerName,
        Parameters.longTermRetentionDatabaseName,
        Parameters.backupName
    ],
    serializer
};
const listByResourceGroupDatabaseOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/locations/{locationName}/longTermRetentionServers/{longTermRetentionServerName}/longTermRetentionDatabases/{longTermRetentionDatabaseName}/longTermRetentionBackups",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.LongTermRetentionBackupListResult
        },
        default: {}
    },
    queryParameters: [
        Parameters.apiVersion1,
        Parameters.onlyLatestPerDatabase,
        Parameters.databaseState
    ],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.locationName,
        Parameters.longTermRetentionServerName,
        Parameters.longTermRetentionDatabaseName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const listByResourceGroupLocationOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/locations/{locationName}/longTermRetentionBackups",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.LongTermRetentionBackupListResult
        },
        default: {}
    },
    queryParameters: [
        Parameters.apiVersion1,
        Parameters.onlyLatestPerDatabase,
        Parameters.databaseState
    ],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.locationName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const listByResourceGroupServerOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/locations/{locationName}/longTermRetentionServers/{longTermRetentionServerName}/longTermRetentionBackups",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.LongTermRetentionBackupListResult
        },
        default: {}
    },
    queryParameters: [
        Parameters.apiVersion1,
        Parameters.onlyLatestPerDatabase,
        Parameters.databaseState
    ],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.locationName,
        Parameters.longTermRetentionServerName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const listByDatabaseNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.LongTermRetentionBackupListResult
        },
        default: {}
    },
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.nextLink,
        Parameters.locationName,
        Parameters.longTermRetentionServerName,
        Parameters.longTermRetentionDatabaseName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const listByLocationNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.LongTermRetentionBackupListResult
        },
        default: {}
    },
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.nextLink,
        Parameters.locationName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const listByServerNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.LongTermRetentionBackupListResult
        },
        default: {}
    },
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.nextLink,
        Parameters.locationName,
        Parameters.longTermRetentionServerName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const listByResourceGroupDatabaseNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.LongTermRetentionBackupListResult
        },
        default: {}
    },
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.nextLink,
        Parameters.locationName,
        Parameters.longTermRetentionServerName,
        Parameters.longTermRetentionDatabaseName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const listByResourceGroupLocationNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.LongTermRetentionBackupListResult
        },
        default: {}
    },
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.nextLink,
        Parameters.locationName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const listByResourceGroupServerNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.LongTermRetentionBackupListResult
        },
        default: {}
    },
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.nextLink,
        Parameters.locationName,
        Parameters.longTermRetentionServerName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
//# sourceMappingURL=longTermRetentionBackups.js.map