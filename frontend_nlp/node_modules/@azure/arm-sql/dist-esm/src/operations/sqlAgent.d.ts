import { SqlAgent } from "../operationsInterfaces";
import { SqlManagementClient } from "../sqlManagementClient";
import { SqlAgentGetOptionalParams, SqlAgentGetResponse, SqlAgentConfiguration, SqlAgentCreateOrUpdateOptionalParams, SqlAgentCreateOrUpdateResponse } from "../models";
/** Class containing SqlAgent operations. */
export declare class SqlAgentImpl implements SqlAgent {
    private readonly client;
    /**
     * Initialize a new instance of the class SqlAgent class.
     * @param client Reference to the service client
     */
    constructor(client: SqlManagementClient);
    /**
     * Gets current instance sql agent configuration.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param managedInstanceName The name of the managed instance.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, managedInstanceName: string, options?: SqlAgentGetOptionalParams): Promise<SqlAgentGetResponse>;
    /**
     * Puts new sql agent configuration to instance.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param managedInstanceName The name of the managed instance.
     * @param parameters A recoverable managed database resource.
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName: string, managedInstanceName: string, parameters: SqlAgentConfiguration, options?: SqlAgentCreateOrUpdateOptionalParams): Promise<SqlAgentCreateOrUpdateResponse>;
}
//# sourceMappingURL=sqlAgent.d.ts.map