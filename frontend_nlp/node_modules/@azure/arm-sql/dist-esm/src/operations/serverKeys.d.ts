import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { ServerKeys } from "../operationsInterfaces";
import { SqlManagementClient } from "../sqlManagementClient";
import { PollerLike, PollOperationState } from "@azure/core-lro";
import { ServerKey, ServerKeysListByServerOptionalParams, ServerKeysGetOptionalParams, ServerKeysGetResponse, ServerKeysCreateOrUpdateOptionalParams, ServerKeysCreateOrUpdateResponse, ServerKeysDeleteOptionalParams } from "../models";
/** Class containing ServerKeys operations. */
export declare class ServerKeysImpl implements ServerKeys {
    private readonly client;
    /**
     * Initialize a new instance of the class ServerKeys class.
     * @param client Reference to the service client
     */
    constructor(client: SqlManagementClient);
    /**
     * Gets a list of server keys.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serverName The name of the server.
     * @param options The options parameters.
     */
    listByServer(resourceGroupName: string, serverName: string, options?: ServerKeysListByServerOptionalParams): PagedAsyncIterableIterator<ServerKey>;
    private listByServerPagingPage;
    private listByServerPagingAll;
    /**
     * Gets a list of server keys.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serverName The name of the server.
     * @param options The options parameters.
     */
    private _listByServer;
    /**
     * Gets a server key.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serverName The name of the server.
     * @param keyName The name of the server key to be retrieved.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, serverName: string, keyName: string, options?: ServerKeysGetOptionalParams): Promise<ServerKeysGetResponse>;
    /**
     * Creates or updates a server key.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serverName The name of the server.
     * @param keyName The name of the server key to be operated on (updated or created). The key name is
     *                required to be in the format of 'vault_key_version'. For example, if the keyId is
     *                https://YourVaultName.vault.azure.net/keys/YourKeyName/YourKeyVersion, then the server key name
     *                should be formatted as: YourVaultName_YourKeyName_YourKeyVersion
     * @param parameters The requested server key resource state.
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName: string, serverName: string, keyName: string, parameters: ServerKey, options?: ServerKeysCreateOrUpdateOptionalParams): Promise<PollerLike<PollOperationState<ServerKeysCreateOrUpdateResponse>, ServerKeysCreateOrUpdateResponse>>;
    /**
     * Creates or updates a server key.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serverName The name of the server.
     * @param keyName The name of the server key to be operated on (updated or created). The key name is
     *                required to be in the format of 'vault_key_version'. For example, if the keyId is
     *                https://YourVaultName.vault.azure.net/keys/YourKeyName/YourKeyVersion, then the server key name
     *                should be formatted as: YourVaultName_YourKeyName_YourKeyVersion
     * @param parameters The requested server key resource state.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName: string, serverName: string, keyName: string, parameters: ServerKey, options?: ServerKeysCreateOrUpdateOptionalParams): Promise<ServerKeysCreateOrUpdateResponse>;
    /**
     * Deletes the server key with the given name.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serverName The name of the server.
     * @param keyName The name of the server key to be deleted.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, serverName: string, keyName: string, options?: ServerKeysDeleteOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Deletes the server key with the given name.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serverName The name of the server.
     * @param keyName The name of the server key to be deleted.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, serverName: string, keyName: string, options?: ServerKeysDeleteOptionalParams): Promise<void>;
    /**
     * ListByServerNext
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serverName The name of the server.
     * @param nextLink The nextLink from the previous successful call to the ListByServer method.
     * @param options The options parameters.
     */
    private _listByServerNext;
}
//# sourceMappingURL=serverKeys.d.ts.map