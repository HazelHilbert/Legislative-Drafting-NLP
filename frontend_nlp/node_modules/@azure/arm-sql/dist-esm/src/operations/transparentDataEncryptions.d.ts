import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { TransparentDataEncryptions } from "../operationsInterfaces";
import { SqlManagementClient } from "../sqlManagementClient";
import { LogicalDatabaseTransparentDataEncryption, TransparentDataEncryptionsListByDatabaseOptionalParams, TransparentDataEncryptionName, TransparentDataEncryptionsGetOptionalParams, TransparentDataEncryptionsGetResponse, TransparentDataEncryptionsCreateOrUpdateOptionalParams, TransparentDataEncryptionsCreateOrUpdateResponse } from "../models";
/** Class containing TransparentDataEncryptions operations. */
export declare class TransparentDataEncryptionsImpl implements TransparentDataEncryptions {
    private readonly client;
    /**
     * Initialize a new instance of the class TransparentDataEncryptions class.
     * @param client Reference to the service client
     */
    constructor(client: SqlManagementClient);
    /**
     * Gets a list of the logical database's transparent data encryption.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serverName The name of the server.
     * @param databaseName The name of the logical database for which the transparent data encryption is
     *                     defined.
     * @param options The options parameters.
     */
    listByDatabase(resourceGroupName: string, serverName: string, databaseName: string, options?: TransparentDataEncryptionsListByDatabaseOptionalParams): PagedAsyncIterableIterator<LogicalDatabaseTransparentDataEncryption>;
    private listByDatabasePagingPage;
    private listByDatabasePagingAll;
    /**
     * Gets a logical database's transparent data encryption.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serverName The name of the server.
     * @param databaseName The name of the logical database for which the transparent data encryption is
     *                     defined.
     * @param tdeName The name of the transparent data encryption configuration.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, serverName: string, databaseName: string, tdeName: TransparentDataEncryptionName, options?: TransparentDataEncryptionsGetOptionalParams): Promise<TransparentDataEncryptionsGetResponse>;
    /**
     * Updates a logical database's transparent data encryption configuration.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serverName The name of the server.
     * @param databaseName The name of the logical database for which the security alert policy is defined.
     * @param tdeName The name of the transparent data encryption configuration.
     * @param parameters The database transparent data encryption.
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName: string, serverName: string, databaseName: string, tdeName: TransparentDataEncryptionName, parameters: LogicalDatabaseTransparentDataEncryption, options?: TransparentDataEncryptionsCreateOrUpdateOptionalParams): Promise<TransparentDataEncryptionsCreateOrUpdateResponse>;
    /**
     * Gets a list of the logical database's transparent data encryption.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serverName The name of the server.
     * @param databaseName The name of the logical database for which the transparent data encryption is
     *                     defined.
     * @param options The options parameters.
     */
    private _listByDatabase;
    /**
     * ListByDatabaseNext
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serverName The name of the server.
     * @param databaseName The name of the logical database for which the transparent data encryption is
     *                     defined.
     * @param nextLink The nextLink from the previous successful call to the ListByDatabase method.
     * @param options The options parameters.
     */
    private _listByDatabaseNext;
}
//# sourceMappingURL=transparentDataEncryptions.d.ts.map