/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { __awaiter } from "tslib";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
import { SqlManagementClient } from "@azure/arm-sql";
import { DefaultAzureCredential } from "@azure/identity";
/**
 * This sample demonstrates how to Creates a new database or updates an existing database.
 *
 * @summary Creates a new database or updates an existing database.
 * x-ms-original-file: specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/CreateVCoreDatabaseByServiceObjective.json
 */
function createsAVCoreDatabaseBySpecifyingServiceObjectiveName() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = "00000000-1111-2222-3333-444444444444";
        const resourceGroupName = "Default-SQL-SouthEastAsia";
        const serverName = "testsvr";
        const databaseName = "testdb";
        const parameters = {
            location: "southeastasia",
            sku: { name: "BC", capacity: 2, family: "Gen4" }
        };
        const credential = new DefaultAzureCredential();
        const client = new SqlManagementClient(credential, subscriptionId);
        const result = yield client.databases.beginCreateOrUpdateAndWait(resourceGroupName, serverName, databaseName, parameters);
        console.log(result);
    });
}
createsAVCoreDatabaseBySpecifyingServiceObjectiveName().catch(console.error);
/**
 * This sample demonstrates how to Creates a new database or updates an existing database.
 *
 * @summary Creates a new database or updates an existing database.
 * x-ms-original-file: specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/CreateVCoreDatabaseBySkuNameCapacity.json
 */
function createsAVCoreDatabaseBySpecifyingSkuNameAndCapacity() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = "00000000-1111-2222-3333-444444444444";
        const resourceGroupName = "Default-SQL-SouthEastAsia";
        const serverName = "testsvr";
        const databaseName = "testdb";
        const parameters = {
            location: "southeastasia",
            sku: { name: "BC_Gen4", capacity: 2 }
        };
        const credential = new DefaultAzureCredential();
        const client = new SqlManagementClient(credential, subscriptionId);
        const result = yield client.databases.beginCreateOrUpdateAndWait(resourceGroupName, serverName, databaseName, parameters);
        console.log(result);
    });
}
createsAVCoreDatabaseBySpecifyingSkuNameAndCapacity().catch(console.error);
/**
 * This sample demonstrates how to Creates a new database or updates an existing database.
 *
 * @summary Creates a new database or updates an existing database.
 * x-ms-original-file: specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/CreateDatabaseCopyMode.json
 */
function createsADatabaseAsACopy() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = "00000000-1111-2222-3333-444444444444";
        const resourceGroupName = "Default-SQL-SouthEastAsia";
        const serverName = "testsvr";
        const databaseName = "dbcopy";
        const parameters = {
            createMode: "Copy",
            location: "southeastasia",
            sku: { name: "S0", tier: "Standard" },
            sourceDatabaseId: "/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default-SQL-SouthEastAsia/providers/Microsoft.Sql/servers/testsvr/databases/testdb"
        };
        const credential = new DefaultAzureCredential();
        const client = new SqlManagementClient(credential, subscriptionId);
        const result = yield client.databases.beginCreateOrUpdateAndWait(resourceGroupName, serverName, databaseName, parameters);
        console.log(result);
    });
}
createsADatabaseAsACopy().catch(console.error);
/**
 * This sample demonstrates how to Creates a new database or updates an existing database.
 *
 * @summary Creates a new database or updates an existing database.
 * x-ms-original-file: specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/CreateDatabaseSecondaryMode.json
 */
function createsADatabaseAsAnOnLineSecondary() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = "00000000-1111-2222-3333-444444444444";
        const resourceGroupName = "Default-SQL-SouthEastAsia";
        const serverName = "testsvr";
        const databaseName = "testdb";
        const parameters = {
            createMode: "Secondary",
            location: "southeastasia",
            secondaryType: "Geo",
            sku: { name: "S0", tier: "Standard" },
            sourceDatabaseId: "/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default-SQL-NorthEurope/providers/Microsoft.Sql/servers/testsvr1/databases/testdb"
        };
        const credential = new DefaultAzureCredential();
        const client = new SqlManagementClient(credential, subscriptionId);
        const result = yield client.databases.beginCreateOrUpdateAndWait(resourceGroupName, serverName, databaseName, parameters);
        console.log(result);
    });
}
createsADatabaseAsAnOnLineSecondary().catch(console.error);
/**
 * This sample demonstrates how to Creates a new database or updates an existing database.
 *
 * @summary Creates a new database or updates an existing database.
 * x-ms-original-file: specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/CreateDatabaseNamedReplica.json
 */
function createsADatabaseAsNamedReplicaSecondary() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = "00000000-1111-2222-3333-444444444444";
        const resourceGroupName = "Default-SQL-SouthEastAsia";
        const serverName = "testsvr";
        const databaseName = "testdb";
        const parameters = {
            createMode: "Secondary",
            location: "southeastasia",
            secondaryType: "Named",
            sku: { name: "HS_Gen4", capacity: 2, tier: "Hyperscale" },
            sourceDatabaseId: "/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default-SQL-NorthEurope/providers/Microsoft.Sql/servers/testsvr1/databases/primarydb"
        };
        const credential = new DefaultAzureCredential();
        const client = new SqlManagementClient(credential, subscriptionId);
        const result = yield client.databases.beginCreateOrUpdateAndWait(resourceGroupName, serverName, databaseName, parameters);
        console.log(result);
    });
}
createsADatabaseAsNamedReplicaSecondary().catch(console.error);
/**
 * This sample demonstrates how to Creates a new database or updates an existing database.
 *
 * @summary Creates a new database or updates an existing database.
 * x-ms-original-file: specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/CreateDatabasePITRMode.json
 */
function createsADatabaseFromPointInTimeRestore() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = "00000000-1111-2222-3333-444444444444";
        const resourceGroupName = "Default-SQL-SouthEastAsia";
        const serverName = "testsvr";
        const databaseName = "dbpitr";
        const parameters = {
            createMode: "PointInTimeRestore",
            location: "southeastasia",
            restorePointInTime: new Date("2020-10-22T05:35:31.503Z"),
            sourceDatabaseId: "/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default-SQL-SoutheastAsia/providers/Microsoft.Sql/servers/testsvr/databases/testdb"
        };
        const credential = new DefaultAzureCredential();
        const client = new SqlManagementClient(credential, subscriptionId);
        const result = yield client.databases.beginCreateOrUpdateAndWait(resourceGroupName, serverName, databaseName, parameters);
        console.log(result);
    });
}
createsADatabaseFromPointInTimeRestore().catch(console.error);
/**
 * This sample demonstrates how to Creates a new database or updates an existing database.
 *
 * @summary Creates a new database or updates an existing database.
 * x-ms-original-file: specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/CreateDatabaseDefaultMode.json
 */
function createsADatabaseWithDefaultMode() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = "00000000-1111-2222-3333-444444444444";
        const resourceGroupName = "Default-SQL-SouthEastAsia";
        const serverName = "testsvr";
        const databaseName = "testdb";
        const parameters = {
            collation: "SQL_Latin1_General_CP1_CI_AS",
            createMode: "Default",
            location: "southeastasia",
            maxSizeBytes: 1073741824,
            sku: { name: "S0", tier: "Standard" }
        };
        const credential = new DefaultAzureCredential();
        const client = new SqlManagementClient(credential, subscriptionId);
        const result = yield client.databases.beginCreateOrUpdateAndWait(resourceGroupName, serverName, databaseName, parameters);
        console.log(result);
    });
}
createsADatabaseWithDefaultMode().catch(console.error);
/**
 * This sample demonstrates how to Creates a new database or updates an existing database.
 *
 * @summary Creates a new database or updates an existing database.
 * x-ms-original-file: specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/CreateDatabaseLedger.json
 */
function createsADatabaseWithLedgerOn() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = "00000000-1111-2222-3333-444444444444";
        const resourceGroupName = "Default-SQL-SouthEastAsia";
        const serverName = "testsvr";
        const databaseName = "testdb";
        const parameters = { isLedgerOn: true, location: "southeastasia" };
        const credential = new DefaultAzureCredential();
        const client = new SqlManagementClient(credential, subscriptionId);
        const result = yield client.databases.beginCreateOrUpdateAndWait(resourceGroupName, serverName, databaseName, parameters);
        console.log(result);
    });
}
createsADatabaseWithLedgerOn().catch(console.error);
/**
 * This sample demonstrates how to Creates a new database or updates an existing database.
 *
 * @summary Creates a new database or updates an existing database.
 * x-ms-original-file: specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/CreateDatabaseMin.json
 */
function createsADatabaseWithMinimumNumberOfParameters() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = "00000000-1111-2222-3333-444444444444";
        const resourceGroupName = "Default-SQL-SouthEastAsia";
        const serverName = "testsvr";
        const databaseName = "testdb";
        const parameters = { location: "southeastasia" };
        const credential = new DefaultAzureCredential();
        const client = new SqlManagementClient(credential, subscriptionId);
        const result = yield client.databases.beginCreateOrUpdateAndWait(resourceGroupName, serverName, databaseName, parameters);
        console.log(result);
    });
}
createsADatabaseWithMinimumNumberOfParameters().catch(console.error);
/**
 * This sample demonstrates how to Creates a new database or updates an existing database.
 *
 * @summary Creates a new database or updates an existing database.
 * x-ms-original-file: specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/CreateDatabaseMaintenanceConfiguration.json
 */
function createsADatabaseWithPreferredMaintenanceWindow() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = "00000000-1111-2222-3333-444444444444";
        const resourceGroupName = "Default-SQL-SouthEastAsia";
        const serverName = "testsvr";
        const databaseName = "testdb";
        const parameters = {
            collation: "SQL_Latin1_General_CP1_CI_AS",
            createMode: "Default",
            location: "southeastasia",
            maintenanceConfigurationId: "/subscriptions/00000000-1111-2222-3333-444444444444/providers/Microsoft.Maintenance/publicMaintenanceConfigurations/SQL_SouthEastAsia_1",
            maxSizeBytes: 1073741824,
            sku: { name: "S2", tier: "Standard" }
        };
        const credential = new DefaultAzureCredential();
        const client = new SqlManagementClient(credential, subscriptionId);
        const result = yield client.databases.beginCreateOrUpdateAndWait(resourceGroupName, serverName, databaseName, parameters);
        console.log(result);
    });
}
createsADatabaseWithPreferredMaintenanceWindow().catch(console.error);
/**
 * This sample demonstrates how to Creates a new database or updates an existing database.
 *
 * @summary Creates a new database or updates an existing database.
 * x-ms-original-file: specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/CreateDatabaseConfiguredBackupStorageRedundancy.json
 */
function createsADatabaseWithSpecifiedBackupStorageRedundancy() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = "00000000-1111-2222-3333-444444444444";
        const resourceGroupName = "Default-SQL-SouthEastAsia";
        const serverName = "testsvr";
        const databaseName = "testdb";
        const parameters = {
            location: "southeastasia",
            requestedBackupStorageRedundancy: "Zone"
        };
        const credential = new DefaultAzureCredential();
        const client = new SqlManagementClient(credential, subscriptionId);
        const result = yield client.databases.beginCreateOrUpdateAndWait(resourceGroupName, serverName, databaseName, parameters);
        console.log(result);
    });
}
createsADatabaseWithSpecifiedBackupStorageRedundancy().catch(console.error);
//# sourceMappingURL=databasesCreateOrUpdateSample.js.map