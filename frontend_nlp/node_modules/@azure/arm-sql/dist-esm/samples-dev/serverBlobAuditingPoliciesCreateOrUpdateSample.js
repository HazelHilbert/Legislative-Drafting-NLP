/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { __awaiter } from "tslib";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
import { SqlManagementClient } from "@azure/arm-sql";
import { DefaultAzureCredential } from "@azure/identity";
/**
 * This sample demonstrates how to Creates or updates a server's blob auditing policy.
 *
 * @summary Creates or updates a server's blob auditing policy.
 * x-ms-original-file: specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ServerBlobAuditingCreateMax.json
 */
function updateAServerBlobAuditingPolicyWithAllParameters() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = "00000000-1111-2222-3333-444444444444";
        const resourceGroupName = "blobauditingtest-4799";
        const serverName = "blobauditingtest-6440";
        const parameters = {
            auditActionsAndGroups: [
                "SUCCESSFUL_DATABASE_AUTHENTICATION_GROUP",
                "FAILED_DATABASE_AUTHENTICATION_GROUP",
                "BATCH_COMPLETED_GROUP"
            ],
            isAzureMonitorTargetEnabled: true,
            isStorageSecondaryKeyInUse: false,
            queueDelayMs: 4000,
            retentionDays: 6,
            state: "Enabled",
            storageAccountAccessKey: "sdlfkjabc+sdlfkjsdlkfsjdfLDKFTERLKFDFKLjsdfksjdflsdkfD2342309432849328476458/3RSD==",
            storageAccountSubscriptionId: "00000000-1234-0000-5678-000000000000",
            storageEndpoint: "https://mystorage.blob.core.windows.net"
        };
        const credential = new DefaultAzureCredential();
        const client = new SqlManagementClient(credential, subscriptionId);
        const result = yield client.serverBlobAuditingPolicies.beginCreateOrUpdateAndWait(resourceGroupName, serverName, parameters);
        console.log(result);
    });
}
updateAServerBlobAuditingPolicyWithAllParameters().catch(console.error);
/**
 * This sample demonstrates how to Creates or updates a server's blob auditing policy.
 *
 * @summary Creates or updates a server's blob auditing policy.
 * x-ms-original-file: specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ServerBlobAuditingCreateMin.json
 */
function updateAServerBlobAuditingPolicyWithMinimalParameters() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = "00000000-1111-2222-3333-444444444444";
        const resourceGroupName = "blobauditingtest-4799";
        const serverName = "blobauditingtest-6440";
        const parameters = {
            state: "Enabled",
            storageAccountAccessKey: "sdlfkjabc+sdlfkjsdlkfsjdfLDKFTERLKFDFKLjsdfksjdflsdkfD2342309432849328476458/3RSD==",
            storageEndpoint: "https://mystorage.blob.core.windows.net"
        };
        const credential = new DefaultAzureCredential();
        const client = new SqlManagementClient(credential, subscriptionId);
        const result = yield client.serverBlobAuditingPolicies.beginCreateOrUpdateAndWait(resourceGroupName, serverName, parameters);
        console.log(result);
    });
}
updateAServerBlobAuditingPolicyWithMinimalParameters().catch(console.error);
//# sourceMappingURL=serverBlobAuditingPoliciesCreateOrUpdateSample.js.map