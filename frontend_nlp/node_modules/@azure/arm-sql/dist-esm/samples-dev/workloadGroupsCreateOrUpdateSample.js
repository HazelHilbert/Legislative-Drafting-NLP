/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { __awaiter } from "tslib";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
import { SqlManagementClient } from "@azure/arm-sql";
import { DefaultAzureCredential } from "@azure/identity";
/**
 * This sample demonstrates how to Creates or updates a workload group.
 *
 * @summary Creates or updates a workload group.
 * x-ms-original-file: specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/CreateOrUpdateWorkloadGroupMax.json
 */
function createAWorkloadGroupWithAllPropertiesSpecified() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = "00000000-1111-2222-3333-444444444444";
        const resourceGroupName = "Default-SQL-SouthEastAsia";
        const serverName = "testsvr";
        const databaseName = "testdb";
        const workloadGroupName = "smallrc";
        const parameters = {
            importance: "normal",
            maxResourcePercent: 100,
            maxResourcePercentPerRequest: 3,
            minResourcePercent: 0,
            minResourcePercentPerRequest: 3,
            queryExecutionTimeout: 0
        };
        const credential = new DefaultAzureCredential();
        const client = new SqlManagementClient(credential, subscriptionId);
        const result = yield client.workloadGroups.beginCreateOrUpdateAndWait(resourceGroupName, serverName, databaseName, workloadGroupName, parameters);
        console.log(result);
    });
}
createAWorkloadGroupWithAllPropertiesSpecified().catch(console.error);
/**
 * This sample demonstrates how to Creates or updates a workload group.
 *
 * @summary Creates or updates a workload group.
 * x-ms-original-file: specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/CreateOrUpdateWorkloadGroupMin.json
 */
function createAWorkloadGroupWithTheRequiredPropertiesSpecified() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = "00000000-1111-2222-3333-444444444444";
        const resourceGroupName = "Default-SQL-SouthEastAsia";
        const serverName = "testsvr";
        const databaseName = "testdb";
        const workloadGroupName = "smallrc";
        const parameters = {
            maxResourcePercent: 100,
            minResourcePercent: 0,
            minResourcePercentPerRequest: 3
        };
        const credential = new DefaultAzureCredential();
        const client = new SqlManagementClient(credential, subscriptionId);
        const result = yield client.workloadGroups.beginCreateOrUpdateAndWait(resourceGroupName, serverName, databaseName, workloadGroupName, parameters);
        console.log(result);
    });
}
createAWorkloadGroupWithTheRequiredPropertiesSpecified().catch(console.error);
//# sourceMappingURL=workloadGroupsCreateOrUpdateSample.js.map