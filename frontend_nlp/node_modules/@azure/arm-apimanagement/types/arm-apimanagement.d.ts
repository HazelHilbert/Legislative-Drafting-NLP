import * as coreAuth from '@azure/core-auth';
import * as coreClient from '@azure/core-client';
import { PagedAsyncIterableIterator } from '@azure/core-paging';
import { PollerLike } from '@azure/core-lro';
import { PollOperationState } from '@azure/core-lro';

/**
 * Defines values for AccessIdName. \
 * {@link KnownAccessIdName} can be used interchangeably with AccessIdName,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **access** \
 * **gitAccess**
 */
export declare type AccessIdName = string;

/** Paged AccessInformation list representation. */
export declare interface AccessInformationCollection {
    /**
     * Page values.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly value?: AccessInformationContract[];
    /** Total record count number across all pages. */
    count?: number;
    /**
     * Next page link if any.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextLink?: string;
}

/** Tenant Settings. */
export declare interface AccessInformationContract extends Resource {
    /** Access Information type ('access' or 'gitAccess') */
    idPropertiesId?: string;
    /** Principal (User) Identifier. */
    principalId?: string;
    /** Determines whether direct access is enabled. */
    enabled?: boolean;
}

/** Tenant access information update parameters. */
export declare interface AccessInformationCreateParameters {
    /** Principal (User) Identifier. */
    principalId?: string;
    /** Primary access key. This property will not be filled on 'GET' operations! Use '/listSecrets' POST request to get the value. */
    primaryKey?: string;
    /** Secondary access key. This property will not be filled on 'GET' operations! Use '/listSecrets' POST request to get the value. */
    secondaryKey?: string;
    /** Determines whether direct access is enabled. */
    enabled?: boolean;
}

/** Tenant access information contract of the API Management service. */
export declare interface AccessInformationSecretsContract {
    /** Access Information type ('access' or 'gitAccess') */
    id?: string;
    /** Principal (User) Identifier. */
    principalId?: string;
    /** Primary access key. This property will not be filled on 'GET' operations! Use '/listSecrets' POST request to get the value. */
    primaryKey?: string;
    /** Secondary access key. This property will not be filled on 'GET' operations! Use '/listSecrets' POST request to get the value. */
    secondaryKey?: string;
    /** Determines whether direct access is enabled. */
    enabled?: boolean;
}

/** Tenant access information update parameters. */
export declare interface AccessInformationUpdateParameters {
    /** Determines whether direct access is enabled. */
    enabled?: boolean;
}

/**
 * Defines values for AccessType. \
 * {@link KnownAccessType} can be used interchangeably with AccessType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **AccessKey**: Use access key. \
 * **SystemAssignedManagedIdentity**: Use system assigned managed identity. \
 * **UserAssignedManagedIdentity**: Use user assigned managed identity.
 */
export declare type AccessType = string;

/** Description of an additional API Management resource location. */
export declare interface AdditionalLocation {
    /** The location name of the additional region among Azure Data center regions. */
    location: string;
    /** SKU properties of the API Management service. */
    sku: ApiManagementServiceSkuProperties;
    /** A list of availability zones denoting where the resource needs to come from. */
    zones?: string[];
    /**
     * Public Static Load Balanced IP addresses of the API Management service in the additional location. Available only for Basic, Standard, Premium and Isolated SKU.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly publicIPAddresses?: string[];
    /**
     * Private Static Load Balanced IP addresses of the API Management service which is deployed in an Internal Virtual Network in a particular additional location. Available only for Basic, Standard, Premium and Isolated SKU.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly privateIPAddresses?: string[];
    /** Public Standard SKU IP V4 based IP address to be associated with Virtual Network deployed service in the location. Supported only for Premium SKU being deployed in Virtual Network. */
    publicIpAddressId?: string;
    /** Virtual network configuration for the location. */
    virtualNetworkConfiguration?: VirtualNetworkConfiguration;
    /**
     * Gateway URL of the API Management service in the Region.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly gatewayRegionalUrl?: string;
    /** Property only valid for an Api Management service deployed in multiple locations. This can be used to disable the gateway in this additional location. */
    disableGateway?: boolean;
    /**
     * Compute Platform Version running the service.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly platformVersion?: PlatformVersion;
}

/**
 * Defines values for AlwaysLog. \
 * {@link KnownAlwaysLog} can be used interchangeably with AlwaysLog,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **allErrors**: Always log all erroneous request regardless of sampling settings.
 */
export declare type AlwaysLog = string;

/** Interface representing a Api. */
export declare interface Api {
    /**
     * Lists all APIs of the API Management service instance.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param options The options parameters.
     */
    listByService(resourceGroupName: string, serviceName: string, options?: ApiListByServiceOptionalParams): PagedAsyncIterableIterator<ApiContract>;
    /**
     * Lists a collection of apis associated with tags.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param options The options parameters.
     */
    listByTags(resourceGroupName: string, serviceName: string, options?: ApiListByTagsOptionalParams): PagedAsyncIterableIterator<TagResourceContract>;
    /**
     * Gets the entity state (Etag) version of the API specified by its identifier.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param apiId API revision identifier. Must be unique in the current API Management service instance.
     *              Non-current revision has ;rev=n as a suffix where n is the revision number.
     * @param options The options parameters.
     */
    getEntityTag(resourceGroupName: string, serviceName: string, apiId: string, options?: ApiGetEntityTagOptionalParams): Promise<ApiGetEntityTagResponse>;
    /**
     * Gets the details of the API specified by its identifier.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param apiId API revision identifier. Must be unique in the current API Management service instance.
     *              Non-current revision has ;rev=n as a suffix where n is the revision number.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, serviceName: string, apiId: string, options?: ApiGetOptionalParams): Promise<ApiGetResponse>;
    /**
     * Creates new or updates existing specified API of the API Management service instance.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param apiId API revision identifier. Must be unique in the current API Management service instance.
     *              Non-current revision has ;rev=n as a suffix where n is the revision number.
     * @param parameters Create or update parameters.
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName: string, serviceName: string, apiId: string, parameters: ApiCreateOrUpdateParameter, options?: ApiCreateOrUpdateOptionalParams): Promise<PollerLike<PollOperationState<ApiCreateOrUpdateResponse>, ApiCreateOrUpdateResponse>>;
    /**
     * Creates new or updates existing specified API of the API Management service instance.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param apiId API revision identifier. Must be unique in the current API Management service instance.
     *              Non-current revision has ;rev=n as a suffix where n is the revision number.
     * @param parameters Create or update parameters.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName: string, serviceName: string, apiId: string, parameters: ApiCreateOrUpdateParameter, options?: ApiCreateOrUpdateOptionalParams): Promise<ApiCreateOrUpdateResponse>;
    /**
     * Updates the specified API of the API Management service instance.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param apiId API revision identifier. Must be unique in the current API Management service instance.
     *              Non-current revision has ;rev=n as a suffix where n is the revision number.
     * @param ifMatch ETag of the Entity. ETag should match the current entity state from the header
     *                response of the GET request or it should be * for unconditional update.
     * @param parameters API Update Contract parameters.
     * @param options The options parameters.
     */
    update(resourceGroupName: string, serviceName: string, apiId: string, ifMatch: string, parameters: ApiUpdateContract, options?: ApiUpdateOptionalParams): Promise<ApiUpdateResponse>;
    /**
     * Deletes the specified API of the API Management service instance.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param apiId API revision identifier. Must be unique in the current API Management service instance.
     *              Non-current revision has ;rev=n as a suffix where n is the revision number.
     * @param ifMatch ETag of the Entity. ETag should match the current entity state from the header
     *                response of the GET request or it should be * for unconditional update.
     * @param options The options parameters.
     */
    delete(resourceGroupName: string, serviceName: string, apiId: string, ifMatch: string, options?: ApiDeleteOptionalParams): Promise<void>;
}

/** Paged API list representation. */
export declare interface ApiCollection {
    /**
     * Page values.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly value?: ApiContract[];
    /** Total record count number across all pages. */
    count?: number;
    /**
     * Next page link if any.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextLink?: string;
}

/** API contact information */
export declare interface ApiContactInformation {
    /** The identifying name of the contact person/organization */
    name?: string;
    /** The URL pointing to the contact information. MUST be in the format of a URL */
    url?: string;
    /** The email address of the contact person/organization. MUST be in the format of an email address */
    email?: string;
}

/** API details. */
export declare interface ApiContract extends Resource {
    /** Description of the API. May include HTML formatting tags. */
    description?: string;
    /** Collection of authentication settings included into this API. */
    authenticationSettings?: AuthenticationSettingsContract;
    /** Protocols over which API is made available. */
    subscriptionKeyParameterNames?: SubscriptionKeyParameterNamesContract;
    /** Type of API. */
    apiType?: ApiType;
    /** Describes the revision of the API. If no value is provided, default revision 1 is created */
    apiRevision?: string;
    /** Indicates the version identifier of the API if the API is versioned */
    apiVersion?: string;
    /** Indicates if API revision is current api revision. */
    isCurrent?: boolean;
    /**
     * Indicates if API revision is accessible via the gateway.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly isOnline?: boolean;
    /** Description of the API Revision. */
    apiRevisionDescription?: string;
    /** Description of the API Version. */
    apiVersionDescription?: string;
    /** A resource identifier for the related ApiVersionSet. */
    apiVersionSetId?: string;
    /** Specifies whether an API or Product subscription is required for accessing the API. */
    subscriptionRequired?: boolean;
    /**  A URL to the Terms of Service for the API. MUST be in the format of a URL. */
    termsOfServiceUrl?: string;
    /** Contact information for the API. */
    contact?: ApiContactInformation;
    /** License information for the API. */
    license?: ApiLicenseInformation;
    /** API identifier of the source API. */
    sourceApiId?: string;
    /** API name. Must be 1 to 300 characters long. */
    displayName?: string;
    /** Absolute URL of the backend service implementing this API. Cannot be more than 2000 characters long. */
    serviceUrl?: string;
    /** Relative URL uniquely identifying this API and all of its resource paths within the API Management service instance. It is appended to the API endpoint base URL specified during the service instance creation to form a public URL for this API. */
    path?: string;
    /** Describes on which protocols the operations in this API can be invoked. */
    protocols?: Protocol[];
    /** Version set details */
    apiVersionSet?: ApiVersionSetContractDetails;
}

/** API Entity Properties */
export declare interface ApiContractProperties extends ApiEntityBaseContract {
    /** API identifier of the source API. */
    sourceApiId?: string;
    /** API name. Must be 1 to 300 characters long. */
    displayName?: string;
    /** Absolute URL of the backend service implementing this API. Cannot be more than 2000 characters long. */
    serviceUrl?: string;
    /** Relative URL uniquely identifying this API and all of its resource paths within the API Management service instance. It is appended to the API endpoint base URL specified during the service instance creation to form a public URL for this API. */
    path: string;
    /** Describes on which protocols the operations in this API can be invoked. */
    protocols?: Protocol[];
    /** Version set details */
    apiVersionSet?: ApiVersionSetContractDetails;
}

/** API update contract properties. */
export declare interface ApiContractUpdateProperties extends ApiEntityBaseContract {
    /** API name. */
    displayName?: string;
    /** Absolute URL of the backend service implementing this API. */
    serviceUrl?: string;
    /** Relative URL uniquely identifying this API and all of its resource paths within the API Management service instance. It is appended to the API endpoint base URL specified during the service instance creation to form a public URL for this API. */
    path?: string;
    /** Describes on which protocols the operations in this API can be invoked. */
    protocols?: Protocol[];
}

/** Defines headers for Api_createOrUpdate operation. */
export declare interface ApiCreateOrUpdateHeaders {
    /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
    eTag?: string;
}

/** Optional parameters. */
export declare interface ApiCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
    /** ETag of the Entity. Not required when creating an entity, but required when updating an entity. */
    ifMatch?: string;
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** API Create or Update Parameters. */
export declare interface ApiCreateOrUpdateParameter {
    /** Description of the API. May include HTML formatting tags. */
    description?: string;
    /** Collection of authentication settings included into this API. */
    authenticationSettings?: AuthenticationSettingsContract;
    /** Protocols over which API is made available. */
    subscriptionKeyParameterNames?: SubscriptionKeyParameterNamesContract;
    /** Type of API. */
    apiType?: ApiType;
    /** Describes the revision of the API. If no value is provided, default revision 1 is created */
    apiRevision?: string;
    /** Indicates the version identifier of the API if the API is versioned */
    apiVersion?: string;
    /** Indicates if API revision is current api revision. */
    isCurrent?: boolean;
    /**
     * Indicates if API revision is accessible via the gateway.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly isOnline?: boolean;
    /** Description of the API Revision. */
    apiRevisionDescription?: string;
    /** Description of the API Version. */
    apiVersionDescription?: string;
    /** A resource identifier for the related ApiVersionSet. */
    apiVersionSetId?: string;
    /** Specifies whether an API or Product subscription is required for accessing the API. */
    subscriptionRequired?: boolean;
    /**  A URL to the Terms of Service for the API. MUST be in the format of a URL. */
    termsOfServiceUrl?: string;
    /** Contact information for the API. */
    contact?: ApiContactInformation;
    /** License information for the API. */
    license?: ApiLicenseInformation;
    /** API identifier of the source API. */
    sourceApiId?: string;
    /** API name. Must be 1 to 300 characters long. */
    displayName?: string;
    /** Absolute URL of the backend service implementing this API. Cannot be more than 2000 characters long. */
    serviceUrl?: string;
    /** Relative URL uniquely identifying this API and all of its resource paths within the API Management service instance. It is appended to the API endpoint base URL specified during the service instance creation to form a public URL for this API. */
    path?: string;
    /** Describes on which protocols the operations in this API can be invoked. */
    protocols?: Protocol[];
    /** Version set details */
    apiVersionSet?: ApiVersionSetContractDetails;
    /** Content value when Importing an API. */
    value?: string;
    /** Format of the Content in which the API is getting imported. */
    format?: ContentFormat;
    /** Criteria to limit import of WSDL to a subset of the document. */
    wsdlSelector?: ApiCreateOrUpdatePropertiesWsdlSelector;
    /**
     * Type of API to create.
     *  * `http` creates a REST API
     *  * `soap` creates a SOAP pass-through API
     *  * `websocket` creates websocket API
     *  * `graphql` creates GraphQL API.
     */
    soapApiType?: SoapApiType;
}

/** API Create or Update Properties. */
export declare interface ApiCreateOrUpdateProperties extends ApiContractProperties {
    /** Content value when Importing an API. */
    value?: string;
    /** Format of the Content in which the API is getting imported. */
    format?: ContentFormat;
    /** Criteria to limit import of WSDL to a subset of the document. */
    wsdlSelector?: ApiCreateOrUpdatePropertiesWsdlSelector;
    /**
     * Type of API to create.
     *  * `http` creates a REST API
     *  * `soap` creates a SOAP pass-through API
     *  * `websocket` creates websocket API
     *  * `graphql` creates GraphQL API.
     */
    soapApiType?: SoapApiType;
}

/** Criteria to limit import of WSDL to a subset of the document. */
export declare interface ApiCreateOrUpdatePropertiesWsdlSelector {
    /** Name of service to import from WSDL */
    wsdlServiceName?: string;
    /** Name of endpoint(port) to import from WSDL */
    wsdlEndpointName?: string;
}

/** Contains response data for the createOrUpdate operation. */
export declare type ApiCreateOrUpdateResponse = ApiCreateOrUpdateHeaders & ApiContract;

/** Optional parameters. */
export declare interface ApiDeleteOptionalParams extends coreClient.OperationOptions {
    /** Delete all revisions of the Api. */
    deleteRevisions?: boolean;
}

/** Interface representing a ApiDiagnostic. */
export declare interface ApiDiagnostic {
    /**
     * Lists all diagnostics of an API.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param apiId API identifier. Must be unique in the current API Management service instance.
     * @param options The options parameters.
     */
    listByService(resourceGroupName: string, serviceName: string, apiId: string, options?: ApiDiagnosticListByServiceOptionalParams): PagedAsyncIterableIterator<DiagnosticContract>;
    /**
     * Gets the entity state (Etag) version of the Diagnostic for an API specified by its identifier.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param apiId API identifier. Must be unique in the current API Management service instance.
     * @param diagnosticId Diagnostic identifier. Must be unique in the current API Management service
     *                     instance.
     * @param options The options parameters.
     */
    getEntityTag(resourceGroupName: string, serviceName: string, apiId: string, diagnosticId: string, options?: ApiDiagnosticGetEntityTagOptionalParams): Promise<ApiDiagnosticGetEntityTagResponse>;
    /**
     * Gets the details of the Diagnostic for an API specified by its identifier.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param apiId API identifier. Must be unique in the current API Management service instance.
     * @param diagnosticId Diagnostic identifier. Must be unique in the current API Management service
     *                     instance.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, serviceName: string, apiId: string, diagnosticId: string, options?: ApiDiagnosticGetOptionalParams): Promise<ApiDiagnosticGetResponse>;
    /**
     * Creates a new Diagnostic for an API or updates an existing one.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param apiId API identifier. Must be unique in the current API Management service instance.
     * @param diagnosticId Diagnostic identifier. Must be unique in the current API Management service
     *                     instance.
     * @param parameters Create parameters.
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName: string, serviceName: string, apiId: string, diagnosticId: string, parameters: DiagnosticContract, options?: ApiDiagnosticCreateOrUpdateOptionalParams): Promise<ApiDiagnosticCreateOrUpdateResponse>;
    /**
     * Updates the details of the Diagnostic for an API specified by its identifier.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param apiId API identifier. Must be unique in the current API Management service instance.
     * @param diagnosticId Diagnostic identifier. Must be unique in the current API Management service
     *                     instance.
     * @param ifMatch ETag of the Entity. ETag should match the current entity state from the header
     *                response of the GET request or it should be * for unconditional update.
     * @param parameters Diagnostic Update parameters.
     * @param options The options parameters.
     */
    update(resourceGroupName: string, serviceName: string, apiId: string, diagnosticId: string, ifMatch: string, parameters: DiagnosticContract, options?: ApiDiagnosticUpdateOptionalParams): Promise<ApiDiagnosticUpdateResponse>;
    /**
     * Deletes the specified Diagnostic from an API.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param apiId API identifier. Must be unique in the current API Management service instance.
     * @param diagnosticId Diagnostic identifier. Must be unique in the current API Management service
     *                     instance.
     * @param ifMatch ETag of the Entity. ETag should match the current entity state from the header
     *                response of the GET request or it should be * for unconditional update.
     * @param options The options parameters.
     */
    delete(resourceGroupName: string, serviceName: string, apiId: string, diagnosticId: string, ifMatch: string, options?: ApiDiagnosticDeleteOptionalParams): Promise<void>;
}

/** Defines headers for ApiDiagnostic_createOrUpdate operation. */
export declare interface ApiDiagnosticCreateOrUpdateHeaders {
    /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
    eTag?: string;
}

/** Optional parameters. */
export declare interface ApiDiagnosticCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
    /** ETag of the Entity. Not required when creating an entity, but required when updating an entity. */
    ifMatch?: string;
}

/** Contains response data for the createOrUpdate operation. */
export declare type ApiDiagnosticCreateOrUpdateResponse = ApiDiagnosticCreateOrUpdateHeaders & DiagnosticContract;

/** Optional parameters. */
export declare interface ApiDiagnosticDeleteOptionalParams extends coreClient.OperationOptions {
}

/** Defines headers for ApiDiagnostic_getEntityTag operation. */
export declare interface ApiDiagnosticGetEntityTagHeaders {
    /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
    eTag?: string;
}

/** Optional parameters. */
export declare interface ApiDiagnosticGetEntityTagOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the getEntityTag operation. */
export declare type ApiDiagnosticGetEntityTagResponse = ApiDiagnosticGetEntityTagHeaders;

/** Defines headers for ApiDiagnostic_get operation. */
export declare interface ApiDiagnosticGetHeaders {
    /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
    eTag?: string;
}

/** Optional parameters. */
export declare interface ApiDiagnosticGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type ApiDiagnosticGetResponse = ApiDiagnosticGetHeaders & DiagnosticContract;

/** Optional parameters. */
export declare interface ApiDiagnosticListByServiceNextOptionalParams extends coreClient.OperationOptions {
    /** |     Field     |     Usage     |     Supported operators     |     Supported functions     |</br>|-------------|-------------|-------------|-------------|</br>| name | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |</br> */
    filter?: string;
    /** Number of records to return. */
    top?: number;
    /** Number of records to skip. */
    skip?: number;
}

/** Contains response data for the listByServiceNext operation. */
export declare type ApiDiagnosticListByServiceNextResponse = DiagnosticCollection;

/** Optional parameters. */
export declare interface ApiDiagnosticListByServiceOptionalParams extends coreClient.OperationOptions {
    /** |     Field     |     Usage     |     Supported operators     |     Supported functions     |</br>|-------------|-------------|-------------|-------------|</br>| name | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |</br> */
    filter?: string;
    /** Number of records to return. */
    top?: number;
    /** Number of records to skip. */
    skip?: number;
}

/** Contains response data for the listByService operation. */
export declare type ApiDiagnosticListByServiceResponse = DiagnosticCollection;

/** Defines headers for ApiDiagnostic_update operation. */
export declare interface ApiDiagnosticUpdateHeaders {
    /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
    eTag?: string;
}

/** Optional parameters. */
export declare interface ApiDiagnosticUpdateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the update operation. */
export declare type ApiDiagnosticUpdateResponse = ApiDiagnosticUpdateHeaders & DiagnosticContract;

/** API base contract details. */
export declare interface ApiEntityBaseContract {
    /** Description of the API. May include HTML formatting tags. */
    description?: string;
    /** Collection of authentication settings included into this API. */
    authenticationSettings?: AuthenticationSettingsContract;
    /** Protocols over which API is made available. */
    subscriptionKeyParameterNames?: SubscriptionKeyParameterNamesContract;
    /** Type of API. */
    apiType?: ApiType;
    /** Describes the revision of the API. If no value is provided, default revision 1 is created */
    apiRevision?: string;
    /** Indicates the version identifier of the API if the API is versioned */
    apiVersion?: string;
    /** Indicates if API revision is current api revision. */
    isCurrent?: boolean;
    /**
     * Indicates if API revision is accessible via the gateway.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly isOnline?: boolean;
    /** Description of the API Revision. */
    apiRevisionDescription?: string;
    /** Description of the API Version. */
    apiVersionDescription?: string;
    /** A resource identifier for the related ApiVersionSet. */
    apiVersionSetId?: string;
    /** Specifies whether an API or Product subscription is required for accessing the API. */
    subscriptionRequired?: boolean;
    /**  A URL to the Terms of Service for the API. MUST be in the format of a URL. */
    termsOfServiceUrl?: string;
    /** Contact information for the API. */
    contact?: ApiContactInformation;
    /** License information for the API. */
    license?: ApiLicenseInformation;
}

/** Interface representing a ApiExport. */
export declare interface ApiExport {
    /**
     * Gets the details of the API specified by its identifier in the format specified to the Storage Blob
     * with SAS Key valid for 5 minutes.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param apiId API revision identifier. Must be unique in the current API Management service instance.
     *              Non-current revision has ;rev=n as a suffix where n is the revision number.
     * @param format Format in which to export the Api Details to the Storage Blob with Sas Key valid for 5
     *               minutes.
     * @param exportParam Query parameter required to export the API details.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, serviceName: string, apiId: string, format: ExportFormat, exportParam: ExportApi, options?: ApiExportGetOptionalParams): Promise<ApiExportGetResponse>;
}

/** Optional parameters. */
export declare interface ApiExportGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type ApiExportGetResponse = ApiExportResult;

/** API Export result. */
export declare interface ApiExportResult {
    /** ResourceId of the API which was exported. */
    id?: string;
    /** Format in which the API Details are exported to the Storage Blob with Sas Key valid for 5 minutes. */
    exportResultFormat?: ExportResultFormat;
    /** The object defining the schema of the exported API Detail */
    value?: ApiExportResultValue;
}

/** The object defining the schema of the exported API Detail */
export declare interface ApiExportResultValue {
    /** Link to the Storage Blob containing the result of the export operation. The Blob Uri is only valid for 5 minutes. */
    link?: string;
}

/** Defines headers for Api_getEntityTag operation. */
export declare interface ApiGetEntityTagHeaders {
    /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
    eTag?: string;
}

/** Optional parameters. */
export declare interface ApiGetEntityTagOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the getEntityTag operation. */
export declare type ApiGetEntityTagResponse = ApiGetEntityTagHeaders;

/** Defines headers for Api_get operation. */
export declare interface ApiGetHeaders {
    /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
    eTag?: string;
}

/** Optional parameters. */
export declare interface ApiGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type ApiGetResponse = ApiGetHeaders & ApiContract;

/** Interface representing a ApiIssue. */
export declare interface ApiIssue {
    /**
     * Lists all issues associated with the specified API.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param apiId API identifier. Must be unique in the current API Management service instance.
     * @param options The options parameters.
     */
    listByService(resourceGroupName: string, serviceName: string, apiId: string, options?: ApiIssueListByServiceOptionalParams): PagedAsyncIterableIterator<IssueContract>;
    /**
     * Gets the entity state (Etag) version of the Issue for an API specified by its identifier.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param apiId API identifier. Must be unique in the current API Management service instance.
     * @param issueId Issue identifier. Must be unique in the current API Management service instance.
     * @param options The options parameters.
     */
    getEntityTag(resourceGroupName: string, serviceName: string, apiId: string, issueId: string, options?: ApiIssueGetEntityTagOptionalParams): Promise<ApiIssueGetEntityTagResponse>;
    /**
     * Gets the details of the Issue for an API specified by its identifier.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param apiId API identifier. Must be unique in the current API Management service instance.
     * @param issueId Issue identifier. Must be unique in the current API Management service instance.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, serviceName: string, apiId: string, issueId: string, options?: ApiIssueGetOptionalParams): Promise<ApiIssueGetResponse>;
    /**
     * Creates a new Issue for an API or updates an existing one.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param apiId API identifier. Must be unique in the current API Management service instance.
     * @param issueId Issue identifier. Must be unique in the current API Management service instance.
     * @param parameters Create parameters.
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName: string, serviceName: string, apiId: string, issueId: string, parameters: IssueContract, options?: ApiIssueCreateOrUpdateOptionalParams): Promise<ApiIssueCreateOrUpdateResponse>;
    /**
     * Updates an existing issue for an API.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param apiId API identifier. Must be unique in the current API Management service instance.
     * @param issueId Issue identifier. Must be unique in the current API Management service instance.
     * @param ifMatch ETag of the Entity. ETag should match the current entity state from the header
     *                response of the GET request or it should be * for unconditional update.
     * @param parameters Update parameters.
     * @param options The options parameters.
     */
    update(resourceGroupName: string, serviceName: string, apiId: string, issueId: string, ifMatch: string, parameters: IssueUpdateContract, options?: ApiIssueUpdateOptionalParams): Promise<ApiIssueUpdateResponse>;
    /**
     * Deletes the specified Issue from an API.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param apiId API identifier. Must be unique in the current API Management service instance.
     * @param issueId Issue identifier. Must be unique in the current API Management service instance.
     * @param ifMatch ETag of the Entity. ETag should match the current entity state from the header
     *                response of the GET request or it should be * for unconditional update.
     * @param options The options parameters.
     */
    delete(resourceGroupName: string, serviceName: string, apiId: string, issueId: string, ifMatch: string, options?: ApiIssueDeleteOptionalParams): Promise<void>;
}

/** Interface representing a ApiIssueAttachment. */
export declare interface ApiIssueAttachment {
    /**
     * Lists all attachments for the Issue associated with the specified API.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param apiId API identifier. Must be unique in the current API Management service instance.
     * @param issueId Issue identifier. Must be unique in the current API Management service instance.
     * @param options The options parameters.
     */
    listByService(resourceGroupName: string, serviceName: string, apiId: string, issueId: string, options?: ApiIssueAttachmentListByServiceOptionalParams): PagedAsyncIterableIterator<IssueAttachmentContract>;
    /**
     * Gets the entity state (Etag) version of the issue Attachment for an API specified by its identifier.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param apiId API identifier. Must be unique in the current API Management service instance.
     * @param issueId Issue identifier. Must be unique in the current API Management service instance.
     * @param attachmentId Attachment identifier within an Issue. Must be unique in the current Issue.
     * @param options The options parameters.
     */
    getEntityTag(resourceGroupName: string, serviceName: string, apiId: string, issueId: string, attachmentId: string, options?: ApiIssueAttachmentGetEntityTagOptionalParams): Promise<ApiIssueAttachmentGetEntityTagResponse>;
    /**
     * Gets the details of the issue Attachment for an API specified by its identifier.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param apiId API identifier. Must be unique in the current API Management service instance.
     * @param issueId Issue identifier. Must be unique in the current API Management service instance.
     * @param attachmentId Attachment identifier within an Issue. Must be unique in the current Issue.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, serviceName: string, apiId: string, issueId: string, attachmentId: string, options?: ApiIssueAttachmentGetOptionalParams): Promise<ApiIssueAttachmentGetResponse>;
    /**
     * Creates a new Attachment for the Issue in an API or updates an existing one.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param apiId API identifier. Must be unique in the current API Management service instance.
     * @param issueId Issue identifier. Must be unique in the current API Management service instance.
     * @param attachmentId Attachment identifier within an Issue. Must be unique in the current Issue.
     * @param parameters Create parameters.
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName: string, serviceName: string, apiId: string, issueId: string, attachmentId: string, parameters: IssueAttachmentContract, options?: ApiIssueAttachmentCreateOrUpdateOptionalParams): Promise<ApiIssueAttachmentCreateOrUpdateResponse>;
    /**
     * Deletes the specified comment from an Issue.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param apiId API identifier. Must be unique in the current API Management service instance.
     * @param issueId Issue identifier. Must be unique in the current API Management service instance.
     * @param attachmentId Attachment identifier within an Issue. Must be unique in the current Issue.
     * @param ifMatch ETag of the Entity. ETag should match the current entity state from the header
     *                response of the GET request or it should be * for unconditional update.
     * @param options The options parameters.
     */
    delete(resourceGroupName: string, serviceName: string, apiId: string, issueId: string, attachmentId: string, ifMatch: string, options?: ApiIssueAttachmentDeleteOptionalParams): Promise<void>;
}

/** Defines headers for ApiIssueAttachment_createOrUpdate operation. */
export declare interface ApiIssueAttachmentCreateOrUpdateHeaders {
    /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
    eTag?: string;
}

/** Optional parameters. */
export declare interface ApiIssueAttachmentCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
    /** ETag of the Entity. Not required when creating an entity, but required when updating an entity. */
    ifMatch?: string;
}

/** Contains response data for the createOrUpdate operation. */
export declare type ApiIssueAttachmentCreateOrUpdateResponse = ApiIssueAttachmentCreateOrUpdateHeaders & IssueAttachmentContract;

/** Optional parameters. */
export declare interface ApiIssueAttachmentDeleteOptionalParams extends coreClient.OperationOptions {
}

/** Defines headers for ApiIssueAttachment_getEntityTag operation. */
export declare interface ApiIssueAttachmentGetEntityTagHeaders {
    /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
    eTag?: string;
}

/** Optional parameters. */
export declare interface ApiIssueAttachmentGetEntityTagOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the getEntityTag operation. */
export declare type ApiIssueAttachmentGetEntityTagResponse = ApiIssueAttachmentGetEntityTagHeaders;

/** Defines headers for ApiIssueAttachment_get operation. */
export declare interface ApiIssueAttachmentGetHeaders {
    /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
    eTag?: string;
}

/** Optional parameters. */
export declare interface ApiIssueAttachmentGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type ApiIssueAttachmentGetResponse = ApiIssueAttachmentGetHeaders & IssueAttachmentContract;

/** Optional parameters. */
export declare interface ApiIssueAttachmentListByServiceNextOptionalParams extends coreClient.OperationOptions {
    /** |     Field     |     Usage     |     Supported operators     |     Supported functions     |</br>|-------------|-------------|-------------|-------------|</br>| name | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |</br>| userId | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |</br> */
    filter?: string;
    /** Number of records to return. */
    top?: number;
    /** Number of records to skip. */
    skip?: number;
}

/** Contains response data for the listByServiceNext operation. */
export declare type ApiIssueAttachmentListByServiceNextResponse = IssueAttachmentCollection;

/** Optional parameters. */
export declare interface ApiIssueAttachmentListByServiceOptionalParams extends coreClient.OperationOptions {
    /** |     Field     |     Usage     |     Supported operators     |     Supported functions     |</br>|-------------|-------------|-------------|-------------|</br>| name | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |</br>| userId | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |</br> */
    filter?: string;
    /** Number of records to return. */
    top?: number;
    /** Number of records to skip. */
    skip?: number;
}

/** Contains response data for the listByService operation. */
export declare type ApiIssueAttachmentListByServiceResponse = IssueAttachmentCollection;

/** Interface representing a ApiIssueComment. */
export declare interface ApiIssueComment {
    /**
     * Lists all comments for the Issue associated with the specified API.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param apiId API identifier. Must be unique in the current API Management service instance.
     * @param issueId Issue identifier. Must be unique in the current API Management service instance.
     * @param options The options parameters.
     */
    listByService(resourceGroupName: string, serviceName: string, apiId: string, issueId: string, options?: ApiIssueCommentListByServiceOptionalParams): PagedAsyncIterableIterator<IssueCommentContract>;
    /**
     * Gets the entity state (Etag) version of the issue Comment for an API specified by its identifier.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param apiId API identifier. Must be unique in the current API Management service instance.
     * @param issueId Issue identifier. Must be unique in the current API Management service instance.
     * @param commentId Comment identifier within an Issue. Must be unique in the current Issue.
     * @param options The options parameters.
     */
    getEntityTag(resourceGroupName: string, serviceName: string, apiId: string, issueId: string, commentId: string, options?: ApiIssueCommentGetEntityTagOptionalParams): Promise<ApiIssueCommentGetEntityTagResponse>;
    /**
     * Gets the details of the issue Comment for an API specified by its identifier.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param apiId API identifier. Must be unique in the current API Management service instance.
     * @param issueId Issue identifier. Must be unique in the current API Management service instance.
     * @param commentId Comment identifier within an Issue. Must be unique in the current Issue.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, serviceName: string, apiId: string, issueId: string, commentId: string, options?: ApiIssueCommentGetOptionalParams): Promise<ApiIssueCommentGetResponse>;
    /**
     * Creates a new Comment for the Issue in an API or updates an existing one.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param apiId API identifier. Must be unique in the current API Management service instance.
     * @param issueId Issue identifier. Must be unique in the current API Management service instance.
     * @param commentId Comment identifier within an Issue. Must be unique in the current Issue.
     * @param parameters Create parameters.
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName: string, serviceName: string, apiId: string, issueId: string, commentId: string, parameters: IssueCommentContract, options?: ApiIssueCommentCreateOrUpdateOptionalParams): Promise<ApiIssueCommentCreateOrUpdateResponse>;
    /**
     * Deletes the specified comment from an Issue.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param apiId API identifier. Must be unique in the current API Management service instance.
     * @param issueId Issue identifier. Must be unique in the current API Management service instance.
     * @param commentId Comment identifier within an Issue. Must be unique in the current Issue.
     * @param ifMatch ETag of the Entity. ETag should match the current entity state from the header
     *                response of the GET request or it should be * for unconditional update.
     * @param options The options parameters.
     */
    delete(resourceGroupName: string, serviceName: string, apiId: string, issueId: string, commentId: string, ifMatch: string, options?: ApiIssueCommentDeleteOptionalParams): Promise<void>;
}

/** Defines headers for ApiIssueComment_createOrUpdate operation. */
export declare interface ApiIssueCommentCreateOrUpdateHeaders {
    /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
    eTag?: string;
}

/** Optional parameters. */
export declare interface ApiIssueCommentCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
    /** ETag of the Entity. Not required when creating an entity, but required when updating an entity. */
    ifMatch?: string;
}

/** Contains response data for the createOrUpdate operation. */
export declare type ApiIssueCommentCreateOrUpdateResponse = ApiIssueCommentCreateOrUpdateHeaders & IssueCommentContract;

/** Optional parameters. */
export declare interface ApiIssueCommentDeleteOptionalParams extends coreClient.OperationOptions {
}

/** Defines headers for ApiIssueComment_getEntityTag operation. */
export declare interface ApiIssueCommentGetEntityTagHeaders {
    /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
    eTag?: string;
}

/** Optional parameters. */
export declare interface ApiIssueCommentGetEntityTagOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the getEntityTag operation. */
export declare type ApiIssueCommentGetEntityTagResponse = ApiIssueCommentGetEntityTagHeaders;

/** Defines headers for ApiIssueComment_get operation. */
export declare interface ApiIssueCommentGetHeaders {
    /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
    eTag?: string;
}

/** Optional parameters. */
export declare interface ApiIssueCommentGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type ApiIssueCommentGetResponse = ApiIssueCommentGetHeaders & IssueCommentContract;

/** Optional parameters. */
export declare interface ApiIssueCommentListByServiceNextOptionalParams extends coreClient.OperationOptions {
    /** |     Field     |     Usage     |     Supported operators     |     Supported functions     |</br>|-------------|-------------|-------------|-------------|</br>| name | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |</br>| userId | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |</br> */
    filter?: string;
    /** Number of records to return. */
    top?: number;
    /** Number of records to skip. */
    skip?: number;
}

/** Contains response data for the listByServiceNext operation. */
export declare type ApiIssueCommentListByServiceNextResponse = IssueCommentCollection;

/** Optional parameters. */
export declare interface ApiIssueCommentListByServiceOptionalParams extends coreClient.OperationOptions {
    /** |     Field     |     Usage     |     Supported operators     |     Supported functions     |</br>|-------------|-------------|-------------|-------------|</br>| name | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |</br>| userId | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |</br> */
    filter?: string;
    /** Number of records to return. */
    top?: number;
    /** Number of records to skip. */
    skip?: number;
}

/** Contains response data for the listByService operation. */
export declare type ApiIssueCommentListByServiceResponse = IssueCommentCollection;

/** Defines headers for ApiIssue_createOrUpdate operation. */
export declare interface ApiIssueCreateOrUpdateHeaders {
    /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
    eTag?: string;
}

/** Optional parameters. */
export declare interface ApiIssueCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
    /** ETag of the Entity. Not required when creating an entity, but required when updating an entity. */
    ifMatch?: string;
}

/** Contains response data for the createOrUpdate operation. */
export declare type ApiIssueCreateOrUpdateResponse = ApiIssueCreateOrUpdateHeaders & IssueContract;

/** Optional parameters. */
export declare interface ApiIssueDeleteOptionalParams extends coreClient.OperationOptions {
}

/** Defines headers for ApiIssue_getEntityTag operation. */
export declare interface ApiIssueGetEntityTagHeaders {
    /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
    eTag?: string;
}

/** Optional parameters. */
export declare interface ApiIssueGetEntityTagOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the getEntityTag operation. */
export declare type ApiIssueGetEntityTagResponse = ApiIssueGetEntityTagHeaders;

/** Defines headers for ApiIssue_get operation. */
export declare interface ApiIssueGetHeaders {
    /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
    eTag?: string;
}

/** Optional parameters. */
export declare interface ApiIssueGetOptionalParams extends coreClient.OperationOptions {
    /** Expand the comment attachments. */
    expandCommentsAttachments?: boolean;
}

/** Contains response data for the get operation. */
export declare type ApiIssueGetResponse = ApiIssueGetHeaders & IssueContract;

/** Optional parameters. */
export declare interface ApiIssueListByServiceNextOptionalParams extends coreClient.OperationOptions {
    /** |     Field     |     Usage     |     Supported operators     |     Supported functions     |</br>|-------------|-------------|-------------|-------------|</br>| name | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |</br>| userId | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |</br>| state | filter | eq |     |</br> */
    filter?: string;
    /** Number of records to return. */
    top?: number;
    /** Number of records to skip. */
    skip?: number;
    /** Expand the comment attachments. */
    expandCommentsAttachments?: boolean;
}

/** Contains response data for the listByServiceNext operation. */
export declare type ApiIssueListByServiceNextResponse = IssueCollection;

/** Optional parameters. */
export declare interface ApiIssueListByServiceOptionalParams extends coreClient.OperationOptions {
    /** |     Field     |     Usage     |     Supported operators     |     Supported functions     |</br>|-------------|-------------|-------------|-------------|</br>| name | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |</br>| userId | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |</br>| state | filter | eq |     |</br> */
    filter?: string;
    /** Number of records to return. */
    top?: number;
    /** Number of records to skip. */
    skip?: number;
    /** Expand the comment attachments. */
    expandCommentsAttachments?: boolean;
}

/** Contains response data for the listByService operation. */
export declare type ApiIssueListByServiceResponse = IssueCollection;

/** Defines headers for ApiIssue_update operation. */
export declare interface ApiIssueUpdateHeaders {
    /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
    eTag?: string;
}

/** Optional parameters. */
export declare interface ApiIssueUpdateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the update operation. */
export declare type ApiIssueUpdateResponse = ApiIssueUpdateHeaders & IssueContract;

/** API license information */
export declare interface ApiLicenseInformation {
    /** The license name used for the API */
    name?: string;
    /** A URL to the license used for the API. MUST be in the format of a URL */
    url?: string;
}

/** Optional parameters. */
export declare interface ApiListByServiceNextOptionalParams extends coreClient.OperationOptions {
    /** |     Field     |     Usage     |     Supported operators     |     Supported functions     |</br>|-------------|-------------|-------------|-------------|</br>| name | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |</br>| displayName | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |</br>| description | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |</br>| serviceUrl | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |</br>| path | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |</br>| isCurrent | filter | eq, ne |  |</br> */
    filter?: string;
    /** Number of records to return. */
    top?: number;
    /** Number of records to skip. */
    skip?: number;
    /** Include tags in the response. */
    tags?: string;
    /** Include full ApiVersionSet resource in response */
    expandApiVersionSet?: boolean;
}

/** Contains response data for the listByServiceNext operation. */
export declare type ApiListByServiceNextResponse = ApiCollection;

/** Optional parameters. */
export declare interface ApiListByServiceOptionalParams extends coreClient.OperationOptions {
    /** |     Field     |     Usage     |     Supported operators     |     Supported functions     |</br>|-------------|-------------|-------------|-------------|</br>| name | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |</br>| displayName | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |</br>| description | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |</br>| serviceUrl | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |</br>| path | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |</br>| isCurrent | filter | eq, ne |  |</br> */
    filter?: string;
    /** Number of records to return. */
    top?: number;
    /** Number of records to skip. */
    skip?: number;
    /** Include tags in the response. */
    tags?: string;
    /** Include full ApiVersionSet resource in response */
    expandApiVersionSet?: boolean;
}

/** Contains response data for the listByService operation. */
export declare type ApiListByServiceResponse = ApiCollection;

/** Optional parameters. */
export declare interface ApiListByTagsNextOptionalParams extends coreClient.OperationOptions {
    /** |     Field     |     Usage     |     Supported operators     |     Supported functions     |</br>|-------------|-------------|-------------|-------------|</br>| name | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |</br>| displayName | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |</br>| apiRevision | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |</br>| path | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |</br>| description | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |</br>| serviceUrl | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |</br>| isCurrent | filter | eq |     |</br> */
    filter?: string;
    /** Number of records to return. */
    top?: number;
    /** Number of records to skip. */
    skip?: number;
    /** Include not tagged APIs. */
    includeNotTaggedApis?: boolean;
}

/** Contains response data for the listByTagsNext operation. */
export declare type ApiListByTagsNextResponse = TagResourceCollection;

/** Optional parameters. */
export declare interface ApiListByTagsOptionalParams extends coreClient.OperationOptions {
    /** |     Field     |     Usage     |     Supported operators     |     Supported functions     |</br>|-------------|-------------|-------------|-------------|</br>| name | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |</br>| displayName | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |</br>| apiRevision | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |</br>| path | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |</br>| description | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |</br>| serviceUrl | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |</br>| isCurrent | filter | eq |     |</br> */
    filter?: string;
    /** Number of records to return. */
    top?: number;
    /** Number of records to skip. */
    skip?: number;
    /** Include not tagged APIs. */
    includeNotTaggedApis?: boolean;
}

/** Contains response data for the listByTags operation. */
export declare type ApiListByTagsResponse = TagResourceCollection;

export declare class ApiManagementClient extends coreClient.ServiceClient {
    $host: string;
    apiVersion: string;
    subscriptionId: string;
    /**
     * Initializes a new instance of the ApiManagementClient class.
     * @param credentials Subscription credentials which uniquely identify client subscription.
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription.
     *                       The subscription ID forms part of the URI for every service call.
     * @param options The parameter options
     */
    constructor(credentials: coreAuth.TokenCredential, subscriptionId: string, options?: ApiManagementClientOptionalParams);
    /** A function that adds a policy that sets the api-version (or equivalent) to reflect the library version. */
    private addCustomApiVersionPolicy;
    /**
     * Performs a connectivity check between the API Management service and a given destination, and
     * returns metrics for the connection, as well as errors encountered while trying to establish it.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param connectivityCheckRequestParams Connectivity Check request parameters.
     * @param options The options parameters.
     */
    beginPerformConnectivityCheckAsync(resourceGroupName: string, serviceName: string, connectivityCheckRequestParams: ConnectivityCheckRequest, options?: PerformConnectivityCheckAsyncOptionalParams): Promise<PollerLike<PollOperationState<PerformConnectivityCheckAsyncResponse>, PerformConnectivityCheckAsyncResponse>>;
    /**
     * Performs a connectivity check between the API Management service and a given destination, and
     * returns metrics for the connection, as well as errors encountered while trying to establish it.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param connectivityCheckRequestParams Connectivity Check request parameters.
     * @param options The options parameters.
     */
    beginPerformConnectivityCheckAsyncAndWait(resourceGroupName: string, serviceName: string, connectivityCheckRequestParams: ConnectivityCheckRequest, options?: PerformConnectivityCheckAsyncOptionalParams): Promise<PerformConnectivityCheckAsyncResponse>;
    api: Api;
    apiRevision: ApiRevision;
    apiRelease: ApiRelease;
    apiOperation: ApiOperation;
    apiOperationPolicy: ApiOperationPolicy;
    tag: Tag;
    apiProduct: ApiProduct;
    apiPolicy: ApiPolicy;
    apiSchema: ApiSchema;
    apiDiagnostic: ApiDiagnostic;
    apiIssue: ApiIssue;
    apiIssueComment: ApiIssueComment;
    apiIssueAttachment: ApiIssueAttachment;
    apiTagDescription: ApiTagDescription;
    operationOperations: OperationOperations;
    apiExport: ApiExport;
    apiVersionSet: ApiVersionSet;
    authorizationServer: AuthorizationServer;
    backend: Backend;
    cache: Cache_2;
    certificate: Certificate;
    contentType: ContentType;
    contentItem: ContentItem;
    deletedServices: DeletedServices;
    apiManagementOperations: ApiManagementOperations;
    apiManagementServiceSkus: ApiManagementServiceSkus;
    apiManagementService: ApiManagementService;
    diagnostic: Diagnostic;
    emailTemplate: EmailTemplate;
    gateway: Gateway;
    gatewayHostnameConfiguration: GatewayHostnameConfiguration;
    gatewayApi: GatewayApi;
    gatewayCertificateAuthority: GatewayCertificateAuthority;
    group: Group;
    groupUser: GroupUser;
    identityProvider: IdentityProvider;
    issue: Issue;
    logger: Logger;
    namedValue: NamedValue;
    networkStatus: NetworkStatus;
    notification: Notification_2;
    notificationRecipientUser: NotificationRecipientUser;
    notificationRecipientEmail: NotificationRecipientEmail;
    openIdConnectProvider: OpenIdConnectProvider;
    outboundNetworkDependenciesEndpoints: OutboundNetworkDependenciesEndpoints;
    policy: Policy;
    policyDescription: PolicyDescription;
    portalRevision: PortalRevision;
    portalSettings: PortalSettings;
    signInSettings: SignInSettings;
    signUpSettings: SignUpSettings;
    delegationSettings: DelegationSettings;
    privateEndpointConnectionOperations: PrivateEndpointConnectionOperations;
    product: Product;
    productApi: ProductApi;
    productGroup: ProductGroup;
    productSubscriptions: ProductSubscriptions;
    productPolicy: ProductPolicy;
    quotaByCounterKeys: QuotaByCounterKeys;
    quotaByPeriodKeys: QuotaByPeriodKeys;
    region: Region;
    reports: Reports;
    tenantSettings: TenantSettings;
    apiManagementSkus: ApiManagementSkus;
    subscription: Subscription;
    tagResource: TagResource;
    tenantAccess: TenantAccess;
    tenantAccessGit: TenantAccessGit;
    tenantConfiguration: TenantConfiguration;
    user: User;
    userGroup: UserGroup;
    userSubscription: UserSubscription;
    userIdentities: UserIdentities;
    userConfirmationPassword: UserConfirmationPassword;
}

/** Optional parameters. */
export declare interface ApiManagementClientOptionalParams extends coreClient.ServiceClientOptions {
    /** server parameter */
    $host?: string;
    /** Api Version */
    apiVersion?: string;
    /** Overrides client endpoint. */
    endpoint?: string;
}

/** Interface representing a ApiManagementOperations. */
export declare interface ApiManagementOperations {
    /**
     * Lists all of the available REST API operations of the Microsoft.ApiManagement provider.
     * @param options The options parameters.
     */
    list(options?: ApiManagementOperationsListOptionalParams): PagedAsyncIterableIterator<Operation>;
}

/** Optional parameters. */
export declare interface ApiManagementOperationsListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type ApiManagementOperationsListNextResponse = OperationListResult;

/** Optional parameters. */
export declare interface ApiManagementOperationsListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type ApiManagementOperationsListResponse = OperationListResult;

/** Interface representing a ApiManagementService. */
export declare interface ApiManagementService {
    /**
     * List all API Management services within a resource group.
     * @param resourceGroupName The name of the resource group.
     * @param options The options parameters.
     */
    listByResourceGroup(resourceGroupName: string, options?: ApiManagementServiceListByResourceGroupOptionalParams): PagedAsyncIterableIterator<ApiManagementServiceResource>;
    /**
     * Lists all API Management services within an Azure subscription.
     * @param options The options parameters.
     */
    list(options?: ApiManagementServiceListOptionalParams): PagedAsyncIterableIterator<ApiManagementServiceResource>;
    /**
     * Restores a backup of an API Management service created using the ApiManagementService_Backup
     * operation on the current service. This is a long running operation and could take several minutes to
     * complete.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param parameters Parameters supplied to the Restore API Management service from backup operation.
     * @param options The options parameters.
     */
    beginRestore(resourceGroupName: string, serviceName: string, parameters: ApiManagementServiceBackupRestoreParameters, options?: ApiManagementServiceRestoreOptionalParams): Promise<PollerLike<PollOperationState<ApiManagementServiceRestoreResponse>, ApiManagementServiceRestoreResponse>>;
    /**
     * Restores a backup of an API Management service created using the ApiManagementService_Backup
     * operation on the current service. This is a long running operation and could take several minutes to
     * complete.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param parameters Parameters supplied to the Restore API Management service from backup operation.
     * @param options The options parameters.
     */
    beginRestoreAndWait(resourceGroupName: string, serviceName: string, parameters: ApiManagementServiceBackupRestoreParameters, options?: ApiManagementServiceRestoreOptionalParams): Promise<ApiManagementServiceRestoreResponse>;
    /**
     * Creates a backup of the API Management service to the given Azure Storage Account. This is long
     * running operation and could take several minutes to complete.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param parameters Parameters supplied to the ApiManagementService_Backup operation.
     * @param options The options parameters.
     */
    beginBackup(resourceGroupName: string, serviceName: string, parameters: ApiManagementServiceBackupRestoreParameters, options?: ApiManagementServiceBackupOptionalParams): Promise<PollerLike<PollOperationState<ApiManagementServiceBackupResponse>, ApiManagementServiceBackupResponse>>;
    /**
     * Creates a backup of the API Management service to the given Azure Storage Account. This is long
     * running operation and could take several minutes to complete.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param parameters Parameters supplied to the ApiManagementService_Backup operation.
     * @param options The options parameters.
     */
    beginBackupAndWait(resourceGroupName: string, serviceName: string, parameters: ApiManagementServiceBackupRestoreParameters, options?: ApiManagementServiceBackupOptionalParams): Promise<ApiManagementServiceBackupResponse>;
    /**
     * Creates or updates an API Management service. This is long running operation and could take several
     * minutes to complete.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param parameters Parameters supplied to the CreateOrUpdate API Management service operation.
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName: string, serviceName: string, parameters: ApiManagementServiceResource, options?: ApiManagementServiceCreateOrUpdateOptionalParams): Promise<PollerLike<PollOperationState<ApiManagementServiceCreateOrUpdateResponse>, ApiManagementServiceCreateOrUpdateResponse>>;
    /**
     * Creates or updates an API Management service. This is long running operation and could take several
     * minutes to complete.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param parameters Parameters supplied to the CreateOrUpdate API Management service operation.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName: string, serviceName: string, parameters: ApiManagementServiceResource, options?: ApiManagementServiceCreateOrUpdateOptionalParams): Promise<ApiManagementServiceCreateOrUpdateResponse>;
    /**
     * Updates an existing API Management service.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param parameters Parameters supplied to the CreateOrUpdate API Management service operation.
     * @param options The options parameters.
     */
    beginUpdate(resourceGroupName: string, serviceName: string, parameters: ApiManagementServiceUpdateParameters, options?: ApiManagementServiceUpdateOptionalParams): Promise<PollerLike<PollOperationState<ApiManagementServiceUpdateResponse>, ApiManagementServiceUpdateResponse>>;
    /**
     * Updates an existing API Management service.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param parameters Parameters supplied to the CreateOrUpdate API Management service operation.
     * @param options The options parameters.
     */
    beginUpdateAndWait(resourceGroupName: string, serviceName: string, parameters: ApiManagementServiceUpdateParameters, options?: ApiManagementServiceUpdateOptionalParams): Promise<ApiManagementServiceUpdateResponse>;
    /**
     * Gets an API Management service resource description.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, serviceName: string, options?: ApiManagementServiceGetOptionalParams): Promise<ApiManagementServiceGetResponse>;
    /**
     * Deletes an existing API Management service.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, serviceName: string, options?: ApiManagementServiceDeleteOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Deletes an existing API Management service.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, serviceName: string, options?: ApiManagementServiceDeleteOptionalParams): Promise<void>;
    /**
     * Gets the Single-Sign-On token for the API Management Service which is valid for 5 Minutes.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param options The options parameters.
     */
    getSsoToken(resourceGroupName: string, serviceName: string, options?: ApiManagementServiceGetSsoTokenOptionalParams): Promise<ApiManagementServiceGetSsoTokenResponse>;
    /**
     * Checks availability and correctness of a name for an API Management service.
     * @param parameters Parameters supplied to the CheckNameAvailability operation.
     * @param options The options parameters.
     */
    checkNameAvailability(parameters: ApiManagementServiceCheckNameAvailabilityParameters, options?: ApiManagementServiceCheckNameAvailabilityOptionalParams): Promise<ApiManagementServiceCheckNameAvailabilityResponse>;
    /**
     * Get the custom domain ownership identifier for an API Management service.
     * @param options The options parameters.
     */
    getDomainOwnershipIdentifier(options?: ApiManagementServiceGetDomainOwnershipIdentifierOptionalParams): Promise<ApiManagementServiceGetDomainOwnershipIdentifierResponse>;
    /**
     * Updates the Microsoft.ApiManagement resource running in the Virtual network to pick the updated DNS
     * changes.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param options The options parameters.
     */
    beginApplyNetworkConfigurationUpdates(resourceGroupName: string, serviceName: string, options?: ApiManagementServiceApplyNetworkConfigurationUpdatesOptionalParams): Promise<PollerLike<PollOperationState<ApiManagementServiceApplyNetworkConfigurationUpdatesResponse>, ApiManagementServiceApplyNetworkConfigurationUpdatesResponse>>;
    /**
     * Updates the Microsoft.ApiManagement resource running in the Virtual network to pick the updated DNS
     * changes.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param options The options parameters.
     */
    beginApplyNetworkConfigurationUpdatesAndWait(resourceGroupName: string, serviceName: string, options?: ApiManagementServiceApplyNetworkConfigurationUpdatesOptionalParams): Promise<ApiManagementServiceApplyNetworkConfigurationUpdatesResponse>;
}

/** Parameter supplied to the Apply Network configuration operation. */
export declare interface ApiManagementServiceApplyNetworkConfigurationParameters {
    /** Location of the Api Management service to update for a multi-region service. For a service deployed in a single region, this parameter is not required. */
    location?: string;
}

/** Optional parameters. */
export declare interface ApiManagementServiceApplyNetworkConfigurationUpdatesOptionalParams extends coreClient.OperationOptions {
    /** Parameters supplied to the Apply Network Configuration operation. If the parameters are empty, all the regions in which the Api Management service is deployed will be updated sequentially without incurring downtime in the region. */
    parameters?: ApiManagementServiceApplyNetworkConfigurationParameters;
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the applyNetworkConfigurationUpdates operation. */
export declare type ApiManagementServiceApplyNetworkConfigurationUpdatesResponse = ApiManagementServiceResource;

/** Optional parameters. */
export declare interface ApiManagementServiceBackupOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the backup operation. */
export declare type ApiManagementServiceBackupResponse = ApiManagementServiceResource;

/** Parameters supplied to the Backup/Restore of an API Management service operation. */
export declare interface ApiManagementServiceBackupRestoreParameters {
    /** The name of the Azure storage account (used to place/retrieve the backup). */
    storageAccount: string;
    /** The name of the blob container (used to place/retrieve the backup). */
    containerName: string;
    /** The name of the backup file to create/retrieve. */
    backupName: string;
    /** The type of access to be used for the storage account. */
    accessType?: AccessType;
    /** Storage account access key. Required only if `accessType` is set to `AccessKey`. */
    accessKey?: string;
    /** The Client ID of user assigned managed identity. Required only if `accessType` is set to `UserAssignedManagedIdentity`. */
    clientId?: string;
}

/** Base Properties of an API Management service resource description. */
export declare interface ApiManagementServiceBaseProperties {
    /** Email address from which the notification will be sent. */
    notificationSenderEmail?: string;
    /**
     * The current provisioning state of the API Management service which can be one of the following: Created/Activating/Succeeded/Updating/Failed/Stopped/Terminating/TerminationFailed/Deleted.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: string;
    /**
     * The provisioning state of the API Management service, which is targeted by the long running operation started on the service.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly targetProvisioningState?: string;
    /**
     * Creation UTC date of the API Management service.The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly createdAtUtc?: Date;
    /**
     * Gateway URL of the API Management service.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly gatewayUrl?: string;
    /**
     * Gateway URL of the API Management service in the Default Region.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly gatewayRegionalUrl?: string;
    /**
     * Publisher portal endpoint Url of the API Management service.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly portalUrl?: string;
    /**
     * Management API endpoint URL of the API Management service.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly managementApiUrl?: string;
    /**
     * SCM endpoint URL of the API Management service.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly scmUrl?: string;
    /**
     * DEveloper Portal endpoint URL of the API Management service.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly developerPortalUrl?: string;
    /** Custom hostname configuration of the API Management service. */
    hostnameConfigurations?: HostnameConfiguration[];
    /**
     * Public Static Load Balanced IP addresses of the API Management service in Primary region. Available only for Basic, Standard, Premium and Isolated SKU.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly publicIPAddresses?: string[];
    /**
     * Private Static Load Balanced IP addresses of the API Management service in Primary region which is deployed in an Internal Virtual Network. Available only for Basic, Standard, Premium and Isolated SKU.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly privateIPAddresses?: string[];
    /** Public Standard SKU IP V4 based IP address to be associated with Virtual Network deployed service in the region. Supported only for Developer and Premium SKU being deployed in Virtual Network. */
    publicIpAddressId?: string;
    /** Whether or not public endpoint access is allowed for this API Management service.  Value is optional but if passed in, must be 'Enabled' or 'Disabled'. If 'Disabled', private endpoints are the exclusive access method. Default value is 'Enabled' */
    publicNetworkAccess?: PublicNetworkAccess;
    /** Virtual network configuration of the API Management service. */
    virtualNetworkConfiguration?: VirtualNetworkConfiguration;
    /** Additional datacenter locations of the API Management service. */
    additionalLocations?: AdditionalLocation[];
    /** Custom properties of the API Management service.</br>Setting `Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Ciphers.TripleDes168` will disable the cipher TLS_RSA_WITH_3DES_EDE_CBC_SHA for all TLS(1.0, 1.1 and 1.2).</br>Setting `Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Protocols.Tls11` can be used to disable just TLS 1.1.</br>Setting `Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Protocols.Tls10` can be used to disable TLS 1.0 on an API Management service.</br>Setting `Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Backend.Protocols.Tls11` can be used to disable just TLS 1.1 for communications with backends.</br>Setting `Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Backend.Protocols.Tls10` can be used to disable TLS 1.0 for communications with backends.</br>Setting `Microsoft.WindowsAzure.ApiManagement.Gateway.Protocols.Server.Http2` can be used to enable HTTP2 protocol on an API Management service.</br>Not specifying any of these properties on PATCH operation will reset omitted properties' values to their defaults. For all the settings except Http2 the default value is `True` if the service was created on or before April 1st 2018 and `False` otherwise. Http2 setting's default value is `False`.</br></br>You can disable any of next ciphers by using settings `Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Ciphers.[cipher_name]`: TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA, TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA, TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA, TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA, TLS_RSA_WITH_AES_128_GCM_SHA256, TLS_RSA_WITH_AES_256_CBC_SHA256, TLS_RSA_WITH_AES_128_CBC_SHA256, TLS_RSA_WITH_AES_256_CBC_SHA, TLS_RSA_WITH_AES_128_CBC_SHA. For example, `Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Ciphers.TLS_RSA_WITH_AES_128_CBC_SHA256`:`false`. The default value is `true` for them.  Note: next ciphers can't be disabled since they are required by Azure CloudService internal components: TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384,TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256,TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384,TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256,TLS_RSA_WITH_AES_256_GCM_SHA384 */
    customProperties?: {
        [propertyName: string]: string;
    };
    /** List of Certificates that need to be installed in the API Management service. Max supported certificates that can be installed is 10. */
    certificates?: CertificateConfiguration[];
    /** Property only meant to be used for Consumption SKU Service. This enforces a client certificate to be presented on each request to the gateway. This also enables the ability to authenticate the certificate in the policy on the gateway. */
    enableClientCertificate?: boolean;
    /** Property only valid for an Api Management service deployed in multiple locations. This can be used to disable the gateway in master region. */
    disableGateway?: boolean;
    /** The type of VPN in which API Management service needs to be configured in. None (Default Value) means the API Management service is not part of any Virtual Network, External means the API Management deployment is set up inside a Virtual Network having an Internet Facing Endpoint, and Internal means that API Management deployment is setup inside a Virtual Network having an Intranet Facing Endpoint only. */
    virtualNetworkType?: VirtualNetworkType;
    /** Control Plane Apis version constraint for the API Management service. */
    apiVersionConstraint?: ApiVersionConstraint;
    /** Undelete Api Management Service if it was previously soft-deleted. If this flag is specified and set to True all other properties will be ignored. */
    restore?: boolean;
    /** List of Private Endpoint Connections of this service. */
    privateEndpointConnections?: RemotePrivateEndpointConnectionWrapper[];
    /**
     * Compute Platform Version running the service in this location.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly platformVersion?: PlatformVersion;
}

/** Optional parameters. */
export declare interface ApiManagementServiceCheckNameAvailabilityOptionalParams extends coreClient.OperationOptions {
}

/** Parameters supplied to the CheckNameAvailability operation. */
export declare interface ApiManagementServiceCheckNameAvailabilityParameters {
    /** The name to check for availability. */
    name: string;
}

/** Contains response data for the checkNameAvailability operation. */
export declare type ApiManagementServiceCheckNameAvailabilityResponse = ApiManagementServiceNameAvailabilityResult;

/** Optional parameters. */
export declare interface ApiManagementServiceCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export declare type ApiManagementServiceCreateOrUpdateResponse = ApiManagementServiceResource;

/** Optional parameters. */
export declare interface ApiManagementServiceDeleteOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface ApiManagementServiceGetDomainOwnershipIdentifierOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the getDomainOwnershipIdentifier operation. */
export declare type ApiManagementServiceGetDomainOwnershipIdentifierResponse = ApiManagementServiceGetDomainOwnershipIdentifierResult;

/** Response of the GetDomainOwnershipIdentifier operation. */
export declare interface ApiManagementServiceGetDomainOwnershipIdentifierResult {
    /**
     * The domain ownership identifier value.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly domainOwnershipIdentifier?: string;
}

/** Optional parameters. */
export declare interface ApiManagementServiceGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type ApiManagementServiceGetResponse = ApiManagementServiceResource;

/** Optional parameters. */
export declare interface ApiManagementServiceGetSsoTokenOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the getSsoToken operation. */
export declare type ApiManagementServiceGetSsoTokenResponse = ApiManagementServiceGetSsoTokenResult;

/** The response of the GetSsoToken operation. */
export declare interface ApiManagementServiceGetSsoTokenResult {
    /** Redirect URL to the Publisher Portal containing the SSO token. */
    redirectUri?: string;
}

/** Identity properties of the Api Management service resource. */
export declare interface ApiManagementServiceIdentity {
    /** The type of identity used for the resource. The type 'SystemAssigned, UserAssigned' includes both an implicitly created identity and a set of user assigned identities. The type 'None' will remove any identities from the service. */
    type: ApimIdentityType;
    /**
     * The principal id of the identity.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly principalId?: string;
    /**
     * The client tenant id of the identity.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly tenantId?: string;
    /**
     * The list of user identities associated with the resource. The user identity
     * dictionary key references will be ARM resource ids in the form:
     * '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/
     *     providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.
     */
    userAssignedIdentities?: {
        [propertyName: string]: UserIdentityProperties;
    };
}

/** Optional parameters. */
export declare interface ApiManagementServiceListByResourceGroupNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByResourceGroupNext operation. */
export declare type ApiManagementServiceListByResourceGroupNextResponse = ApiManagementServiceListResult;

/** Optional parameters. */
export declare interface ApiManagementServiceListByResourceGroupOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByResourceGroup operation. */
export declare type ApiManagementServiceListByResourceGroupResponse = ApiManagementServiceListResult;

/** Optional parameters. */
export declare interface ApiManagementServiceListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type ApiManagementServiceListNextResponse = ApiManagementServiceListResult;

/** Optional parameters. */
export declare interface ApiManagementServiceListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type ApiManagementServiceListResponse = ApiManagementServiceListResult;

/** The response of the List API Management services operation. */
export declare interface ApiManagementServiceListResult {
    /** Result of the List API Management services operation. */
    value: ApiManagementServiceResource[];
    /** Link to the next set of results. Not empty if Value contains incomplete list of API Management services. */
    nextLink?: string;
}

/** Response of the CheckNameAvailability operation. */
export declare interface ApiManagementServiceNameAvailabilityResult {
    /**
     * True if the name is available and can be used to create a new API Management service; otherwise false.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nameAvailable?: boolean;
    /**
     * If reason == invalid, provide the user with the reason why the given name is invalid, and provide the resource naming requirements so that the user can select a valid name. If reason == AlreadyExists, explain that <resourceName> is already in use, and direct them to select a different name.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly message?: string;
    /** Invalid indicates the name provided does not match the resource provider’s naming requirements (incorrect length, unsupported characters, etc.)  AlreadyExists indicates that the name is already in use and is therefore unavailable. */
    reason?: NameAvailabilityReason;
}

/** Properties of an API Management service resource description. */
export declare interface ApiManagementServiceProperties extends ApiManagementServiceBaseProperties {
    /** Publisher email. */
    publisherEmail: string;
    /** Publisher name. */
    publisherName: string;
}

/** A single API Management service resource in List or Get response. */
export declare interface ApiManagementServiceResource extends ApimResource {
    /** SKU properties of the API Management service. */
    sku: ApiManagementServiceSkuProperties;
    /** Managed service identity of the Api Management service. */
    identity?: ApiManagementServiceIdentity;
    /**
     * Metadata pertaining to creation and last modification of the resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly systemData?: SystemData;
    /** Resource location. */
    location: string;
    /**
     * ETag of the resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly etag?: string;
    /** A list of availability zones denoting where the resource needs to come from. */
    zones?: string[];
    /** Email address from which the notification will be sent. */
    notificationSenderEmail?: string;
    /**
     * The current provisioning state of the API Management service which can be one of the following: Created/Activating/Succeeded/Updating/Failed/Stopped/Terminating/TerminationFailed/Deleted.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: string;
    /**
     * The provisioning state of the API Management service, which is targeted by the long running operation started on the service.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly targetProvisioningState?: string;
    /**
     * Creation UTC date of the API Management service.The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly createdAtUtc?: Date;
    /**
     * Gateway URL of the API Management service.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly gatewayUrl?: string;
    /**
     * Gateway URL of the API Management service in the Default Region.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly gatewayRegionalUrl?: string;
    /**
     * Publisher portal endpoint Url of the API Management service.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly portalUrl?: string;
    /**
     * Management API endpoint URL of the API Management service.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly managementApiUrl?: string;
    /**
     * SCM endpoint URL of the API Management service.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly scmUrl?: string;
    /**
     * DEveloper Portal endpoint URL of the API Management service.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly developerPortalUrl?: string;
    /** Custom hostname configuration of the API Management service. */
    hostnameConfigurations?: HostnameConfiguration[];
    /**
     * Public Static Load Balanced IP addresses of the API Management service in Primary region. Available only for Basic, Standard, Premium and Isolated SKU.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly publicIPAddresses?: string[];
    /**
     * Private Static Load Balanced IP addresses of the API Management service in Primary region which is deployed in an Internal Virtual Network. Available only for Basic, Standard, Premium and Isolated SKU.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly privateIPAddresses?: string[];
    /** Public Standard SKU IP V4 based IP address to be associated with Virtual Network deployed service in the region. Supported only for Developer and Premium SKU being deployed in Virtual Network. */
    publicIpAddressId?: string;
    /** Whether or not public endpoint access is allowed for this API Management service.  Value is optional but if passed in, must be 'Enabled' or 'Disabled'. If 'Disabled', private endpoints are the exclusive access method. Default value is 'Enabled' */
    publicNetworkAccess?: PublicNetworkAccess;
    /** Virtual network configuration of the API Management service. */
    virtualNetworkConfiguration?: VirtualNetworkConfiguration;
    /** Additional datacenter locations of the API Management service. */
    additionalLocations?: AdditionalLocation[];
    /** Custom properties of the API Management service.</br>Setting `Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Ciphers.TripleDes168` will disable the cipher TLS_RSA_WITH_3DES_EDE_CBC_SHA for all TLS(1.0, 1.1 and 1.2).</br>Setting `Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Protocols.Tls11` can be used to disable just TLS 1.1.</br>Setting `Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Protocols.Tls10` can be used to disable TLS 1.0 on an API Management service.</br>Setting `Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Backend.Protocols.Tls11` can be used to disable just TLS 1.1 for communications with backends.</br>Setting `Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Backend.Protocols.Tls10` can be used to disable TLS 1.0 for communications with backends.</br>Setting `Microsoft.WindowsAzure.ApiManagement.Gateway.Protocols.Server.Http2` can be used to enable HTTP2 protocol on an API Management service.</br>Not specifying any of these properties on PATCH operation will reset omitted properties' values to their defaults. For all the settings except Http2 the default value is `True` if the service was created on or before April 1st 2018 and `False` otherwise. Http2 setting's default value is `False`.</br></br>You can disable any of next ciphers by using settings `Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Ciphers.[cipher_name]`: TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA, TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA, TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA, TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA, TLS_RSA_WITH_AES_128_GCM_SHA256, TLS_RSA_WITH_AES_256_CBC_SHA256, TLS_RSA_WITH_AES_128_CBC_SHA256, TLS_RSA_WITH_AES_256_CBC_SHA, TLS_RSA_WITH_AES_128_CBC_SHA. For example, `Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Ciphers.TLS_RSA_WITH_AES_128_CBC_SHA256`:`false`. The default value is `true` for them.  Note: next ciphers can't be disabled since they are required by Azure CloudService internal components: TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384,TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256,TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384,TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256,TLS_RSA_WITH_AES_256_GCM_SHA384 */
    customProperties?: {
        [propertyName: string]: string;
    };
    /** List of Certificates that need to be installed in the API Management service. Max supported certificates that can be installed is 10. */
    certificates?: CertificateConfiguration[];
    /** Property only meant to be used for Consumption SKU Service. This enforces a client certificate to be presented on each request to the gateway. This also enables the ability to authenticate the certificate in the policy on the gateway. */
    enableClientCertificate?: boolean;
    /** Property only valid for an Api Management service deployed in multiple locations. This can be used to disable the gateway in master region. */
    disableGateway?: boolean;
    /** The type of VPN in which API Management service needs to be configured in. None (Default Value) means the API Management service is not part of any Virtual Network, External means the API Management deployment is set up inside a Virtual Network having an Internet Facing Endpoint, and Internal means that API Management deployment is setup inside a Virtual Network having an Intranet Facing Endpoint only. */
    virtualNetworkType?: VirtualNetworkType;
    /** Control Plane Apis version constraint for the API Management service. */
    apiVersionConstraint?: ApiVersionConstraint;
    /** Undelete Api Management Service if it was previously soft-deleted. If this flag is specified and set to True all other properties will be ignored. */
    restore?: boolean;
    /** List of Private Endpoint Connections of this service. */
    privateEndpointConnections?: RemotePrivateEndpointConnectionWrapper[];
    /**
     * Compute Platform Version running the service in this location.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly platformVersion?: PlatformVersion;
    /** Publisher email. */
    publisherEmail: string;
    /** Publisher name. */
    publisherName: string;
}

/** Optional parameters. */
export declare interface ApiManagementServiceRestoreOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the restore operation. */
export declare type ApiManagementServiceRestoreResponse = ApiManagementServiceResource;

/** API Management service resource SKU properties. */
export declare interface ApiManagementServiceSkuProperties {
    /** Name of the Sku. */
    name: SkuType;
    /** Capacity of the SKU (number of deployed units of the SKU). For Consumption SKU capacity must be specified as 0. */
    capacity: number;
}

/** Interface representing a ApiManagementServiceSkus. */
export declare interface ApiManagementServiceSkus {
    /**
     * Gets all available SKU for a given API Management service
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param options The options parameters.
     */
    listAvailableServiceSkus(resourceGroupName: string, serviceName: string, options?: ApiManagementServiceSkusListAvailableServiceSkusOptionalParams): PagedAsyncIterableIterator<ResourceSkuResult>;
}

/** Optional parameters. */
export declare interface ApiManagementServiceSkusListAvailableServiceSkusNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listAvailableServiceSkusNext operation. */
export declare type ApiManagementServiceSkusListAvailableServiceSkusNextResponse = ResourceSkuResults;

/** Optional parameters. */
export declare interface ApiManagementServiceSkusListAvailableServiceSkusOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listAvailableServiceSkus operation. */
export declare type ApiManagementServiceSkusListAvailableServiceSkusResponse = ResourceSkuResults;

/** Optional parameters. */
export declare interface ApiManagementServiceUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Parameter supplied to Update Api Management Service. */
export declare interface ApiManagementServiceUpdateParameters extends ApimResource {
    /** SKU properties of the API Management service. */
    sku?: ApiManagementServiceSkuProperties;
    /** Managed service identity of the Api Management service. */
    identity?: ApiManagementServiceIdentity;
    /**
     * ETag of the resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly etag?: string;
    /** A list of availability zones denoting where the resource needs to come from. */
    zones?: string[];
    /** Email address from which the notification will be sent. */
    notificationSenderEmail?: string;
    /**
     * The current provisioning state of the API Management service which can be one of the following: Created/Activating/Succeeded/Updating/Failed/Stopped/Terminating/TerminationFailed/Deleted.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: string;
    /**
     * The provisioning state of the API Management service, which is targeted by the long running operation started on the service.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly targetProvisioningState?: string;
    /**
     * Creation UTC date of the API Management service.The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly createdAtUtc?: Date;
    /**
     * Gateway URL of the API Management service.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly gatewayUrl?: string;
    /**
     * Gateway URL of the API Management service in the Default Region.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly gatewayRegionalUrl?: string;
    /**
     * Publisher portal endpoint Url of the API Management service.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly portalUrl?: string;
    /**
     * Management API endpoint URL of the API Management service.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly managementApiUrl?: string;
    /**
     * SCM endpoint URL of the API Management service.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly scmUrl?: string;
    /**
     * DEveloper Portal endpoint URL of the API Management service.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly developerPortalUrl?: string;
    /** Custom hostname configuration of the API Management service. */
    hostnameConfigurations?: HostnameConfiguration[];
    /**
     * Public Static Load Balanced IP addresses of the API Management service in Primary region. Available only for Basic, Standard, Premium and Isolated SKU.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly publicIPAddresses?: string[];
    /**
     * Private Static Load Balanced IP addresses of the API Management service in Primary region which is deployed in an Internal Virtual Network. Available only for Basic, Standard, Premium and Isolated SKU.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly privateIPAddresses?: string[];
    /** Public Standard SKU IP V4 based IP address to be associated with Virtual Network deployed service in the region. Supported only for Developer and Premium SKU being deployed in Virtual Network. */
    publicIpAddressId?: string;
    /** Whether or not public endpoint access is allowed for this API Management service.  Value is optional but if passed in, must be 'Enabled' or 'Disabled'. If 'Disabled', private endpoints are the exclusive access method. Default value is 'Enabled' */
    publicNetworkAccess?: PublicNetworkAccess;
    /** Virtual network configuration of the API Management service. */
    virtualNetworkConfiguration?: VirtualNetworkConfiguration;
    /** Additional datacenter locations of the API Management service. */
    additionalLocations?: AdditionalLocation[];
    /** Custom properties of the API Management service.</br>Setting `Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Ciphers.TripleDes168` will disable the cipher TLS_RSA_WITH_3DES_EDE_CBC_SHA for all TLS(1.0, 1.1 and 1.2).</br>Setting `Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Protocols.Tls11` can be used to disable just TLS 1.1.</br>Setting `Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Protocols.Tls10` can be used to disable TLS 1.0 on an API Management service.</br>Setting `Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Backend.Protocols.Tls11` can be used to disable just TLS 1.1 for communications with backends.</br>Setting `Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Backend.Protocols.Tls10` can be used to disable TLS 1.0 for communications with backends.</br>Setting `Microsoft.WindowsAzure.ApiManagement.Gateway.Protocols.Server.Http2` can be used to enable HTTP2 protocol on an API Management service.</br>Not specifying any of these properties on PATCH operation will reset omitted properties' values to their defaults. For all the settings except Http2 the default value is `True` if the service was created on or before April 1st 2018 and `False` otherwise. Http2 setting's default value is `False`.</br></br>You can disable any of next ciphers by using settings `Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Ciphers.[cipher_name]`: TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA, TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA, TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA, TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA, TLS_RSA_WITH_AES_128_GCM_SHA256, TLS_RSA_WITH_AES_256_CBC_SHA256, TLS_RSA_WITH_AES_128_CBC_SHA256, TLS_RSA_WITH_AES_256_CBC_SHA, TLS_RSA_WITH_AES_128_CBC_SHA. For example, `Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Ciphers.TLS_RSA_WITH_AES_128_CBC_SHA256`:`false`. The default value is `true` for them.  Note: next ciphers can't be disabled since they are required by Azure CloudService internal components: TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384,TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256,TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384,TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256,TLS_RSA_WITH_AES_256_GCM_SHA384 */
    customProperties?: {
        [propertyName: string]: string;
    };
    /** List of Certificates that need to be installed in the API Management service. Max supported certificates that can be installed is 10. */
    certificates?: CertificateConfiguration[];
    /** Property only meant to be used for Consumption SKU Service. This enforces a client certificate to be presented on each request to the gateway. This also enables the ability to authenticate the certificate in the policy on the gateway. */
    enableClientCertificate?: boolean;
    /** Property only valid for an Api Management service deployed in multiple locations. This can be used to disable the gateway in master region. */
    disableGateway?: boolean;
    /** The type of VPN in which API Management service needs to be configured in. None (Default Value) means the API Management service is not part of any Virtual Network, External means the API Management deployment is set up inside a Virtual Network having an Internet Facing Endpoint, and Internal means that API Management deployment is setup inside a Virtual Network having an Intranet Facing Endpoint only. */
    virtualNetworkType?: VirtualNetworkType;
    /** Control Plane Apis version constraint for the API Management service. */
    apiVersionConstraint?: ApiVersionConstraint;
    /** Undelete Api Management Service if it was previously soft-deleted. If this flag is specified and set to True all other properties will be ignored. */
    restore?: boolean;
    /** List of Private Endpoint Connections of this service. */
    privateEndpointConnections?: RemotePrivateEndpointConnectionWrapper[];
    /**
     * Compute Platform Version running the service in this location.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly platformVersion?: PlatformVersion;
    /** Publisher email. */
    publisherEmail?: string;
    /** Publisher name. */
    publisherName?: string;
}

/** Properties of an API Management service resource description. */
export declare interface ApiManagementServiceUpdateProperties extends ApiManagementServiceBaseProperties {
    /** Publisher email. */
    publisherEmail?: string;
    /** Publisher name. */
    publisherName?: string;
}

/** Contains response data for the update operation. */
export declare type ApiManagementServiceUpdateResponse = ApiManagementServiceResource;

/** Describes an available ApiManagement SKU. */
export declare interface ApiManagementSku {
    /**
     * The type of resource the SKU applies to.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly resourceType?: string;
    /**
     * The name of SKU.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /**
     * Specifies the tier of virtual machines in a scale set.<br /><br /> Possible Values:<br /><br /> **Standard**<br /><br /> **Basic**
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly tier?: string;
    /**
     * The Size of the SKU.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly size?: string;
    /**
     * The Family of this particular SKU.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly family?: string;
    /**
     * The Kind of resources that are supported in this SKU.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly kind?: string;
    /**
     * Specifies the number of virtual machines in the scale set.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly capacity?: ApiManagementSkuCapacity;
    /**
     * The set of locations that the SKU is available.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly locations?: string[];
    /**
     * A list of locations and availability zones in those locations where the SKU is available.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly locationInfo?: ApiManagementSkuLocationInfo[];
    /**
     * The api versions that support this SKU.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly apiVersions?: string[];
    /**
     * Metadata for retrieving price info.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly costs?: ApiManagementSkuCosts[];
    /**
     * A name value pair to describe the capability.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly capabilities?: ApiManagementSkuCapabilities[];
    /**
     * The restrictions because of which SKU cannot be used. This is empty if there are no restrictions.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly restrictions?: ApiManagementSkuRestrictions[];
}

/** Describes The SKU capabilities object. */
export declare interface ApiManagementSkuCapabilities {
    /**
     * An invariant to describe the feature.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /**
     * An invariant if the feature is measured by quantity.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly value?: string;
}

/** Describes scaling information of a SKU. */
export declare interface ApiManagementSkuCapacity {
    /**
     * The minimum capacity.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly minimum?: number;
    /**
     * The maximum capacity that can be set.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly maximum?: number;
    /**
     * The default capacity.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly default?: number;
    /**
     * The scale type applicable to the sku.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly scaleType?: ApiManagementSkuCapacityScaleType;
}

/** Defines values for ApiManagementSkuCapacityScaleType. */
export declare type ApiManagementSkuCapacityScaleType = "Automatic" | "Manual" | "None";

/** Describes metadata for retrieving price info. */
export declare interface ApiManagementSkuCosts {
    /**
     * Used for querying price from commerce.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly meterID?: string;
    /**
     * The multiplier is needed to extend the base metered cost.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly quantity?: number;
    /**
     * An invariant to show the extended unit.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly extendedUnit?: string;
}

export declare interface ApiManagementSkuLocationInfo {
    /**
     * Location of the SKU
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly location?: string;
    /**
     * List of availability zones where the SKU is supported.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly zones?: string[];
    /**
     * Details of capabilities available to a SKU in specific zones.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly zoneDetails?: ApiManagementSkuZoneDetails[];
}

export declare interface ApiManagementSkuRestrictionInfo {
    /**
     * Locations where the SKU is restricted
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly locations?: string[];
    /**
     * List of availability zones where the SKU is restricted.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly zones?: string[];
}

/** Describes scaling information of a SKU. */
export declare interface ApiManagementSkuRestrictions {
    /**
     * The type of restrictions.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly type?: ApiManagementSkuRestrictionsType;
    /**
     * The value of restrictions. If the restriction type is set to location. This would be different locations where the SKU is restricted.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly values?: string[];
    /**
     * The information about the restriction where the SKU cannot be used.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly restrictionInfo?: ApiManagementSkuRestrictionInfo;
    /**
     * The reason for restriction.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly reasonCode?: ApiManagementSkuRestrictionsReasonCode;
}

/** Defines values for ApiManagementSkuRestrictionsReasonCode. */
export declare type ApiManagementSkuRestrictionsReasonCode = "QuotaId" | "NotAvailableForSubscription";

/** Defines values for ApiManagementSkuRestrictionsType. */
export declare type ApiManagementSkuRestrictionsType = "Location" | "Zone";

/** Interface representing a ApiManagementSkus. */
export declare interface ApiManagementSkus {
    /**
     * Gets the list of Microsoft.ApiManagement SKUs available for your Subscription.
     * @param options The options parameters.
     */
    list(options?: ApiManagementSkusListOptionalParams): PagedAsyncIterableIterator<ApiManagementSku>;
}

/** Optional parameters. */
export declare interface ApiManagementSkusListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type ApiManagementSkusListNextResponse = ApiManagementSkusResult;

/** Optional parameters. */
export declare interface ApiManagementSkusListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type ApiManagementSkusListResponse = ApiManagementSkusResult;

/** The List Resource Skus operation response. */
export declare interface ApiManagementSkusResult {
    /** The list of skus available for the subscription. */
    value: ApiManagementSku[];
    /**
     * The URI to fetch the next page of Resource Skus. Call ListNext() with this URI to fetch the next page of Resource Skus
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextLink?: string;
}

/** Describes The zonal capabilities of a SKU. */
export declare interface ApiManagementSkuZoneDetails {
    /**
     * The set of zones that the SKU is available in with the specified capabilities.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string[];
    /**
     * A list of capabilities that are available for the SKU in the specified list of zones.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly capabilities?: ApiManagementSkuCapabilities[];
}

/**
 * Defines values for ApimIdentityType. \
 * {@link KnownApimIdentityType} can be used interchangeably with ApimIdentityType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **SystemAssigned** \
 * **UserAssigned** \
 * **SystemAssigned, UserAssigned** \
 * **None**
 */
export declare type ApimIdentityType = string;

/** The Resource definition. */
export declare interface ApimResource {
    /**
     * Resource ID.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly id?: string;
    /**
     * Resource name.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /**
     * Resource type for API Management resource is set to Microsoft.ApiManagement.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly type?: string;
    /** Resource tags. */
    tags?: {
        [propertyName: string]: string;
    };
}

/** Interface representing a ApiOperation. */
export declare interface ApiOperation {
    /**
     * Lists a collection of the operations for the specified API.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param apiId API revision identifier. Must be unique in the current API Management service instance.
     *              Non-current revision has ;rev=n as a suffix where n is the revision number.
     * @param options The options parameters.
     */
    listByApi(resourceGroupName: string, serviceName: string, apiId: string, options?: ApiOperationListByApiOptionalParams): PagedAsyncIterableIterator<OperationContract>;
    /**
     * Gets the entity state (Etag) version of the API operation specified by its identifier.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param apiId API revision identifier. Must be unique in the current API Management service instance.
     *              Non-current revision has ;rev=n as a suffix where n is the revision number.
     * @param operationId Operation identifier within an API. Must be unique in the current API Management
     *                    service instance.
     * @param options The options parameters.
     */
    getEntityTag(resourceGroupName: string, serviceName: string, apiId: string, operationId: string, options?: ApiOperationGetEntityTagOptionalParams): Promise<ApiOperationGetEntityTagResponse>;
    /**
     * Gets the details of the API Operation specified by its identifier.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param apiId API revision identifier. Must be unique in the current API Management service instance.
     *              Non-current revision has ;rev=n as a suffix where n is the revision number.
     * @param operationId Operation identifier within an API. Must be unique in the current API Management
     *                    service instance.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, serviceName: string, apiId: string, operationId: string, options?: ApiOperationGetOptionalParams): Promise<ApiOperationGetResponse>;
    /**
     * Creates a new operation in the API or updates an existing one.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param apiId API revision identifier. Must be unique in the current API Management service instance.
     *              Non-current revision has ;rev=n as a suffix where n is the revision number.
     * @param operationId Operation identifier within an API. Must be unique in the current API Management
     *                    service instance.
     * @param parameters Create parameters.
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName: string, serviceName: string, apiId: string, operationId: string, parameters: OperationContract, options?: ApiOperationCreateOrUpdateOptionalParams): Promise<ApiOperationCreateOrUpdateResponse>;
    /**
     * Updates the details of the operation in the API specified by its identifier.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param apiId API revision identifier. Must be unique in the current API Management service instance.
     *              Non-current revision has ;rev=n as a suffix where n is the revision number.
     * @param operationId Operation identifier within an API. Must be unique in the current API Management
     *                    service instance.
     * @param ifMatch ETag of the Entity. ETag should match the current entity state from the header
     *                response of the GET request or it should be * for unconditional update.
     * @param parameters API Operation Update parameters.
     * @param options The options parameters.
     */
    update(resourceGroupName: string, serviceName: string, apiId: string, operationId: string, ifMatch: string, parameters: OperationUpdateContract, options?: ApiOperationUpdateOptionalParams): Promise<ApiOperationUpdateResponse>;
    /**
     * Deletes the specified operation in the API.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param apiId API revision identifier. Must be unique in the current API Management service instance.
     *              Non-current revision has ;rev=n as a suffix where n is the revision number.
     * @param operationId Operation identifier within an API. Must be unique in the current API Management
     *                    service instance.
     * @param ifMatch ETag of the Entity. ETag should match the current entity state from the header
     *                response of the GET request or it should be * for unconditional update.
     * @param options The options parameters.
     */
    delete(resourceGroupName: string, serviceName: string, apiId: string, operationId: string, ifMatch: string, options?: ApiOperationDeleteOptionalParams): Promise<void>;
}

/** Defines headers for ApiOperation_createOrUpdate operation. */
export declare interface ApiOperationCreateOrUpdateHeaders {
    /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
    eTag?: string;
}

/** Optional parameters. */
export declare interface ApiOperationCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
    /** ETag of the Entity. Not required when creating an entity, but required when updating an entity. */
    ifMatch?: string;
}

/** Contains response data for the createOrUpdate operation. */
export declare type ApiOperationCreateOrUpdateResponse = ApiOperationCreateOrUpdateHeaders & OperationContract;

/** Optional parameters. */
export declare interface ApiOperationDeleteOptionalParams extends coreClient.OperationOptions {
}

/** Defines headers for ApiOperation_getEntityTag operation. */
export declare interface ApiOperationGetEntityTagHeaders {
    /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
    eTag?: string;
}

/** Optional parameters. */
export declare interface ApiOperationGetEntityTagOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the getEntityTag operation. */
export declare type ApiOperationGetEntityTagResponse = ApiOperationGetEntityTagHeaders;

/** Defines headers for ApiOperation_get operation. */
export declare interface ApiOperationGetHeaders {
    /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
    eTag?: string;
}

/** Optional parameters. */
export declare interface ApiOperationGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type ApiOperationGetResponse = ApiOperationGetHeaders & OperationContract;

/** Optional parameters. */
export declare interface ApiOperationListByApiNextOptionalParams extends coreClient.OperationOptions {
    /** |     Field     |     Usage     |     Supported operators     |     Supported functions     |</br>|-------------|-------------|-------------|-------------|</br>| name | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |</br>| displayName | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |</br>| method | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |</br>| description | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |</br>| urlTemplate | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |</br> */
    filter?: string;
    /** Number of records to return. */
    top?: number;
    /** Number of records to skip. */
    skip?: number;
    /** Include tags in the response. */
    tags?: string;
}

/** Contains response data for the listByApiNext operation. */
export declare type ApiOperationListByApiNextResponse = OperationCollection;

/** Optional parameters. */
export declare interface ApiOperationListByApiOptionalParams extends coreClient.OperationOptions {
    /** |     Field     |     Usage     |     Supported operators     |     Supported functions     |</br>|-------------|-------------|-------------|-------------|</br>| name | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |</br>| displayName | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |</br>| method | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |</br>| description | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |</br>| urlTemplate | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |</br> */
    filter?: string;
    /** Number of records to return. */
    top?: number;
    /** Number of records to skip. */
    skip?: number;
    /** Include tags in the response. */
    tags?: string;
}

/** Contains response data for the listByApi operation. */
export declare type ApiOperationListByApiResponse = OperationCollection;

/** Interface representing a ApiOperationPolicy. */
export declare interface ApiOperationPolicy {
    /**
     * Get the list of policy configuration at the API Operation level.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param apiId API revision identifier. Must be unique in the current API Management service instance.
     *              Non-current revision has ;rev=n as a suffix where n is the revision number.
     * @param operationId Operation identifier within an API. Must be unique in the current API Management
     *                    service instance.
     * @param options The options parameters.
     */
    listByOperation(resourceGroupName: string, serviceName: string, apiId: string, operationId: string, options?: ApiOperationPolicyListByOperationOptionalParams): Promise<ApiOperationPolicyListByOperationResponse>;
    /**
     * Gets the entity state (Etag) version of the API operation policy specified by its identifier.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param apiId API revision identifier. Must be unique in the current API Management service instance.
     *              Non-current revision has ;rev=n as a suffix where n is the revision number.
     * @param operationId Operation identifier within an API. Must be unique in the current API Management
     *                    service instance.
     * @param policyId The identifier of the Policy.
     * @param options The options parameters.
     */
    getEntityTag(resourceGroupName: string, serviceName: string, apiId: string, operationId: string, policyId: PolicyIdName, options?: ApiOperationPolicyGetEntityTagOptionalParams): Promise<ApiOperationPolicyGetEntityTagResponse>;
    /**
     * Get the policy configuration at the API Operation level.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param apiId API revision identifier. Must be unique in the current API Management service instance.
     *              Non-current revision has ;rev=n as a suffix where n is the revision number.
     * @param operationId Operation identifier within an API. Must be unique in the current API Management
     *                    service instance.
     * @param policyId The identifier of the Policy.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, serviceName: string, apiId: string, operationId: string, policyId: PolicyIdName, options?: ApiOperationPolicyGetOptionalParams): Promise<ApiOperationPolicyGetResponse>;
    /**
     * Creates or updates policy configuration for the API Operation level.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param apiId API revision identifier. Must be unique in the current API Management service instance.
     *              Non-current revision has ;rev=n as a suffix where n is the revision number.
     * @param operationId Operation identifier within an API. Must be unique in the current API Management
     *                    service instance.
     * @param policyId The identifier of the Policy.
     * @param parameters The policy contents to apply.
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName: string, serviceName: string, apiId: string, operationId: string, policyId: PolicyIdName, parameters: PolicyContract, options?: ApiOperationPolicyCreateOrUpdateOptionalParams): Promise<ApiOperationPolicyCreateOrUpdateResponse>;
    /**
     * Deletes the policy configuration at the Api Operation.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param apiId API revision identifier. Must be unique in the current API Management service instance.
     *              Non-current revision has ;rev=n as a suffix where n is the revision number.
     * @param operationId Operation identifier within an API. Must be unique in the current API Management
     *                    service instance.
     * @param policyId The identifier of the Policy.
     * @param ifMatch ETag of the Entity. ETag should match the current entity state from the header
     *                response of the GET request or it should be * for unconditional update.
     * @param options The options parameters.
     */
    delete(resourceGroupName: string, serviceName: string, apiId: string, operationId: string, policyId: PolicyIdName, ifMatch: string, options?: ApiOperationPolicyDeleteOptionalParams): Promise<void>;
}

/** Defines headers for ApiOperationPolicy_createOrUpdate operation. */
export declare interface ApiOperationPolicyCreateOrUpdateHeaders {
    /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
    eTag?: string;
}

/** Optional parameters. */
export declare interface ApiOperationPolicyCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
    /** ETag of the Entity. Not required when creating an entity, but required when updating an entity. */
    ifMatch?: string;
}

/** Contains response data for the createOrUpdate operation. */
export declare type ApiOperationPolicyCreateOrUpdateResponse = ApiOperationPolicyCreateOrUpdateHeaders & PolicyContract;

/** Optional parameters. */
export declare interface ApiOperationPolicyDeleteOptionalParams extends coreClient.OperationOptions {
}

/** Defines headers for ApiOperationPolicy_getEntityTag operation. */
export declare interface ApiOperationPolicyGetEntityTagHeaders {
    /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
    eTag?: string;
}

/** Optional parameters. */
export declare interface ApiOperationPolicyGetEntityTagOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the getEntityTag operation. */
export declare type ApiOperationPolicyGetEntityTagResponse = ApiOperationPolicyGetEntityTagHeaders;

/** Defines headers for ApiOperationPolicy_get operation. */
export declare interface ApiOperationPolicyGetHeaders {
    /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
    eTag?: string;
}

/** Optional parameters. */
export declare interface ApiOperationPolicyGetOptionalParams extends coreClient.OperationOptions {
    /** Policy Export Format. */
    format?: PolicyExportFormat;
}

/** Contains response data for the get operation. */
export declare type ApiOperationPolicyGetResponse = ApiOperationPolicyGetHeaders & PolicyContract;

/** Optional parameters. */
export declare interface ApiOperationPolicyListByOperationOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByOperation operation. */
export declare type ApiOperationPolicyListByOperationResponse = PolicyCollection;

/** Defines headers for ApiOperation_update operation. */
export declare interface ApiOperationUpdateHeaders {
    /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
    eTag?: string;
}

/** Optional parameters. */
export declare interface ApiOperationUpdateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the update operation. */
export declare type ApiOperationUpdateResponse = ApiOperationUpdateHeaders & OperationContract;

/** Interface representing a ApiPolicy. */
export declare interface ApiPolicy {
    /**
     * Get the policy configuration at the API level.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param apiId API revision identifier. Must be unique in the current API Management service instance.
     *              Non-current revision has ;rev=n as a suffix where n is the revision number.
     * @param options The options parameters.
     */
    listByApi(resourceGroupName: string, serviceName: string, apiId: string, options?: ApiPolicyListByApiOptionalParams): Promise<ApiPolicyListByApiResponse>;
    /**
     * Gets the entity state (Etag) version of the API policy specified by its identifier.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param apiId API revision identifier. Must be unique in the current API Management service instance.
     *              Non-current revision has ;rev=n as a suffix where n is the revision number.
     * @param policyId The identifier of the Policy.
     * @param options The options parameters.
     */
    getEntityTag(resourceGroupName: string, serviceName: string, apiId: string, policyId: PolicyIdName, options?: ApiPolicyGetEntityTagOptionalParams): Promise<ApiPolicyGetEntityTagResponse>;
    /**
     * Get the policy configuration at the API level.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param apiId API revision identifier. Must be unique in the current API Management service instance.
     *              Non-current revision has ;rev=n as a suffix where n is the revision number.
     * @param policyId The identifier of the Policy.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, serviceName: string, apiId: string, policyId: PolicyIdName, options?: ApiPolicyGetOptionalParams): Promise<ApiPolicyGetResponse>;
    /**
     * Creates or updates policy configuration for the API.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param apiId API revision identifier. Must be unique in the current API Management service instance.
     *              Non-current revision has ;rev=n as a suffix where n is the revision number.
     * @param policyId The identifier of the Policy.
     * @param parameters The policy contents to apply.
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName: string, serviceName: string, apiId: string, policyId: PolicyIdName, parameters: PolicyContract, options?: ApiPolicyCreateOrUpdateOptionalParams): Promise<ApiPolicyCreateOrUpdateResponse>;
    /**
     * Deletes the policy configuration at the Api.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param apiId API revision identifier. Must be unique in the current API Management service instance.
     *              Non-current revision has ;rev=n as a suffix where n is the revision number.
     * @param policyId The identifier of the Policy.
     * @param ifMatch ETag of the Entity. ETag should match the current entity state from the header
     *                response of the GET request or it should be * for unconditional update.
     * @param options The options parameters.
     */
    delete(resourceGroupName: string, serviceName: string, apiId: string, policyId: PolicyIdName, ifMatch: string, options?: ApiPolicyDeleteOptionalParams): Promise<void>;
}

/** Defines headers for ApiPolicy_createOrUpdate operation. */
export declare interface ApiPolicyCreateOrUpdateHeaders {
    /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
    eTag?: string;
}

/** Optional parameters. */
export declare interface ApiPolicyCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
    /** ETag of the Entity. Not required when creating an entity, but required when updating an entity. */
    ifMatch?: string;
}

/** Contains response data for the createOrUpdate operation. */
export declare type ApiPolicyCreateOrUpdateResponse = ApiPolicyCreateOrUpdateHeaders & PolicyContract;

/** Optional parameters. */
export declare interface ApiPolicyDeleteOptionalParams extends coreClient.OperationOptions {
}

/** Defines headers for ApiPolicy_getEntityTag operation. */
export declare interface ApiPolicyGetEntityTagHeaders {
    /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
    eTag?: string;
}

/** Optional parameters. */
export declare interface ApiPolicyGetEntityTagOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the getEntityTag operation. */
export declare type ApiPolicyGetEntityTagResponse = ApiPolicyGetEntityTagHeaders;

/** Defines headers for ApiPolicy_get operation. */
export declare interface ApiPolicyGetHeaders {
    /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
    eTag?: string;
}

/** Optional parameters. */
export declare interface ApiPolicyGetOptionalParams extends coreClient.OperationOptions {
    /** Policy Export Format. */
    format?: PolicyExportFormat;
}

/** Contains response data for the get operation. */
export declare type ApiPolicyGetResponse = ApiPolicyGetHeaders & PolicyContract;

/** Optional parameters. */
export declare interface ApiPolicyListByApiOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByApi operation. */
export declare type ApiPolicyListByApiResponse = PolicyCollection;

/** Interface representing a ApiProduct. */
export declare interface ApiProduct {
    /**
     * Lists all Products, which the API is part of.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param apiId API identifier. Must be unique in the current API Management service instance.
     * @param options The options parameters.
     */
    listByApis(resourceGroupName: string, serviceName: string, apiId: string, options?: ApiProductListByApisOptionalParams): PagedAsyncIterableIterator<ProductContract>;
}

/** Optional parameters. */
export declare interface ApiProductListByApisNextOptionalParams extends coreClient.OperationOptions {
    /** |     Field     |     Usage     |     Supported operators     |     Supported functions     |</br>|-------------|-------------|-------------|-------------|</br>| displayName | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |</br> */
    filter?: string;
    /** Number of records to return. */
    top?: number;
    /** Number of records to skip. */
    skip?: number;
}

/** Contains response data for the listByApisNext operation. */
export declare type ApiProductListByApisNextResponse = ProductCollection;

/** Optional parameters. */
export declare interface ApiProductListByApisOptionalParams extends coreClient.OperationOptions {
    /** |     Field     |     Usage     |     Supported operators     |     Supported functions     |</br>|-------------|-------------|-------------|-------------|</br>| displayName | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |</br> */
    filter?: string;
    /** Number of records to return. */
    top?: number;
    /** Number of records to skip. */
    skip?: number;
}

/** Contains response data for the listByApis operation. */
export declare type ApiProductListByApisResponse = ProductCollection;

/** Interface representing a ApiRelease. */
export declare interface ApiRelease {
    /**
     * Lists all releases of an API. An API release is created when making an API Revision current.
     * Releases are also used to rollback to previous revisions. Results will be paged and can be
     * constrained by the $top and $skip parameters.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param apiId API identifier. Must be unique in the current API Management service instance.
     * @param options The options parameters.
     */
    listByService(resourceGroupName: string, serviceName: string, apiId: string, options?: ApiReleaseListByServiceOptionalParams): PagedAsyncIterableIterator<ApiReleaseContract>;
    /**
     * Returns the etag of an API release.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param apiId API identifier. Must be unique in the current API Management service instance.
     * @param releaseId Release identifier within an API. Must be unique in the current API Management
     *                  service instance.
     * @param options The options parameters.
     */
    getEntityTag(resourceGroupName: string, serviceName: string, apiId: string, releaseId: string, options?: ApiReleaseGetEntityTagOptionalParams): Promise<ApiReleaseGetEntityTagResponse>;
    /**
     * Returns the details of an API release.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param apiId API identifier. Must be unique in the current API Management service instance.
     * @param releaseId Release identifier within an API. Must be unique in the current API Management
     *                  service instance.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, serviceName: string, apiId: string, releaseId: string, options?: ApiReleaseGetOptionalParams): Promise<ApiReleaseGetResponse>;
    /**
     * Creates a new Release for the API.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param apiId API identifier. Must be unique in the current API Management service instance.
     * @param releaseId Release identifier within an API. Must be unique in the current API Management
     *                  service instance.
     * @param parameters Create parameters.
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName: string, serviceName: string, apiId: string, releaseId: string, parameters: ApiReleaseContract, options?: ApiReleaseCreateOrUpdateOptionalParams): Promise<ApiReleaseCreateOrUpdateResponse>;
    /**
     * Updates the details of the release of the API specified by its identifier.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param apiId API identifier. Must be unique in the current API Management service instance.
     * @param releaseId Release identifier within an API. Must be unique in the current API Management
     *                  service instance.
     * @param ifMatch ETag of the Entity. ETag should match the current entity state from the header
     *                response of the GET request or it should be * for unconditional update.
     * @param parameters API Release Update parameters.
     * @param options The options parameters.
     */
    update(resourceGroupName: string, serviceName: string, apiId: string, releaseId: string, ifMatch: string, parameters: ApiReleaseContract, options?: ApiReleaseUpdateOptionalParams): Promise<ApiReleaseUpdateResponse>;
    /**
     * Deletes the specified release in the API.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param apiId API identifier. Must be unique in the current API Management service instance.
     * @param releaseId Release identifier within an API. Must be unique in the current API Management
     *                  service instance.
     * @param ifMatch ETag of the Entity. ETag should match the current entity state from the header
     *                response of the GET request or it should be * for unconditional update.
     * @param options The options parameters.
     */
    delete(resourceGroupName: string, serviceName: string, apiId: string, releaseId: string, ifMatch: string, options?: ApiReleaseDeleteOptionalParams): Promise<void>;
}

/** Paged ApiRelease list representation. */
export declare interface ApiReleaseCollection {
    /**
     * Page values.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly value?: ApiReleaseContract[];
    /** Total record count number across all pages. */
    count?: number;
    /**
     * Next page link if any.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextLink?: string;
}

/** ApiRelease details. */
export declare interface ApiReleaseContract extends Resource {
    /** Identifier of the API the release belongs to. */
    apiId?: string;
    /**
     * The time the API was released. The date conforms to the following format: yyyy-MM-ddTHH:mm:ssZ as specified by the ISO 8601 standard.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly createdDateTime?: Date;
    /**
     * The time the API release was updated.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly updatedDateTime?: Date;
    /** Release Notes */
    notes?: string;
}

/** Defines headers for ApiRelease_createOrUpdate operation. */
export declare interface ApiReleaseCreateOrUpdateHeaders {
    /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
    eTag?: string;
}

/** Optional parameters. */
export declare interface ApiReleaseCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
    /** ETag of the Entity. Not required when creating an entity, but required when updating an entity. */
    ifMatch?: string;
}

/** Contains response data for the createOrUpdate operation. */
export declare type ApiReleaseCreateOrUpdateResponse = ApiReleaseCreateOrUpdateHeaders & ApiReleaseContract;

/** Optional parameters. */
export declare interface ApiReleaseDeleteOptionalParams extends coreClient.OperationOptions {
}

/** Defines headers for ApiRelease_getEntityTag operation. */
export declare interface ApiReleaseGetEntityTagHeaders {
    /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
    eTag?: string;
}

/** Optional parameters. */
export declare interface ApiReleaseGetEntityTagOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the getEntityTag operation. */
export declare type ApiReleaseGetEntityTagResponse = ApiReleaseGetEntityTagHeaders;

/** Defines headers for ApiRelease_get operation. */
export declare interface ApiReleaseGetHeaders {
    /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
    eTag?: string;
}

/** Optional parameters. */
export declare interface ApiReleaseGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type ApiReleaseGetResponse = ApiReleaseGetHeaders & ApiReleaseContract;

/** Optional parameters. */
export declare interface ApiReleaseListByServiceNextOptionalParams extends coreClient.OperationOptions {
    /** |     Field     |     Usage     |     Supported operators     |     Supported functions     |</br>|-------------|-------------|-------------|-------------|</br>| notes | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |</br> */
    filter?: string;
    /** Number of records to return. */
    top?: number;
    /** Number of records to skip. */
    skip?: number;
}

/** Contains response data for the listByServiceNext operation. */
export declare type ApiReleaseListByServiceNextResponse = ApiReleaseCollection;

/** Optional parameters. */
export declare interface ApiReleaseListByServiceOptionalParams extends coreClient.OperationOptions {
    /** |     Field     |     Usage     |     Supported operators     |     Supported functions     |</br>|-------------|-------------|-------------|-------------|</br>| notes | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |</br> */
    filter?: string;
    /** Number of records to return. */
    top?: number;
    /** Number of records to skip. */
    skip?: number;
}

/** Contains response data for the listByService operation. */
export declare type ApiReleaseListByServiceResponse = ApiReleaseCollection;

/** Defines headers for ApiRelease_update operation. */
export declare interface ApiReleaseUpdateHeaders {
    /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
    eTag?: string;
}

/** Optional parameters. */
export declare interface ApiReleaseUpdateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the update operation. */
export declare type ApiReleaseUpdateResponse = ApiReleaseUpdateHeaders & ApiReleaseContract;

/** Interface representing a ApiRevision. */
export declare interface ApiRevision {
    /**
     * Lists all revisions of an API.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param apiId API identifier. Must be unique in the current API Management service instance.
     * @param options The options parameters.
     */
    listByService(resourceGroupName: string, serviceName: string, apiId: string, options?: ApiRevisionListByServiceOptionalParams): PagedAsyncIterableIterator<ApiRevisionContract>;
}

/** Paged API Revision list representation. */
export declare interface ApiRevisionCollection {
    /**
     * Page values.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly value?: ApiRevisionContract[];
    /** Total record count number across all pages. */
    count?: number;
    /**
     * Next page link if any.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextLink?: string;
}

/** Summary of revision metadata. */
export declare interface ApiRevisionContract {
    /**
     * Identifier of the API Revision.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly apiId?: string;
    /**
     * Revision number of API.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly apiRevision?: string;
    /**
     * The time the API Revision was created. The date conforms to the following format: yyyy-MM-ddTHH:mm:ssZ as specified by the ISO 8601 standard.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly createdDateTime?: Date;
    /**
     * The time the API Revision were updated. The date conforms to the following format: yyyy-MM-ddTHH:mm:ssZ as specified by the ISO 8601 standard.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly updatedDateTime?: Date;
    /**
     * Description of the API Revision.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly description?: string;
    /**
     * Gateway URL for accessing the non-current API Revision.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly privateUrl?: string;
    /**
     * Indicates if API revision is the current api revision.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly isOnline?: boolean;
    /**
     * Indicates if API revision is accessible via the gateway.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly isCurrent?: boolean;
}

/** Object used to create an API Revision or Version based on an existing API Revision */
export declare interface ApiRevisionInfoContract {
    /** Resource identifier of API to be used to create the revision from. */
    sourceApiId?: string;
    /** Version identifier for the new API Version. */
    apiVersionName?: string;
    /** Description of new API Revision. */
    apiRevisionDescription?: string;
    /** Version set details */
    apiVersionSet?: ApiVersionSetContractDetails;
}

/** Optional parameters. */
export declare interface ApiRevisionListByServiceNextOptionalParams extends coreClient.OperationOptions {
    /** |     Field     |     Usage     |     Supported operators     |     Supported functions     |</br>|-------------|-------------|-------------|-------------|</br>| apiRevision | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |</br> */
    filter?: string;
    /** Number of records to return. */
    top?: number;
    /** Number of records to skip. */
    skip?: number;
}

/** Contains response data for the listByServiceNext operation. */
export declare type ApiRevisionListByServiceNextResponse = ApiRevisionCollection;

/** Optional parameters. */
export declare interface ApiRevisionListByServiceOptionalParams extends coreClient.OperationOptions {
    /** |     Field     |     Usage     |     Supported operators     |     Supported functions     |</br>|-------------|-------------|-------------|-------------|</br>| apiRevision | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |</br> */
    filter?: string;
    /** Number of records to return. */
    top?: number;
    /** Number of records to skip. */
    skip?: number;
}

/** Contains response data for the listByService operation. */
export declare type ApiRevisionListByServiceResponse = ApiRevisionCollection;

/** Interface representing a ApiSchema. */
export declare interface ApiSchema {
    /**
     * Get the schema configuration at the API level.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param apiId API revision identifier. Must be unique in the current API Management service instance.
     *              Non-current revision has ;rev=n as a suffix where n is the revision number.
     * @param options The options parameters.
     */
    listByApi(resourceGroupName: string, serviceName: string, apiId: string, options?: ApiSchemaListByApiOptionalParams): PagedAsyncIterableIterator<SchemaContract>;
    /**
     * Gets the entity state (Etag) version of the schema specified by its identifier.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param apiId API revision identifier. Must be unique in the current API Management service instance.
     *              Non-current revision has ;rev=n as a suffix where n is the revision number.
     * @param schemaId Schema identifier within an API. Must be unique in the current API Management
     *                 service instance.
     * @param options The options parameters.
     */
    getEntityTag(resourceGroupName: string, serviceName: string, apiId: string, schemaId: string, options?: ApiSchemaGetEntityTagOptionalParams): Promise<ApiSchemaGetEntityTagResponse>;
    /**
     * Get the schema configuration at the API level.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param apiId API revision identifier. Must be unique in the current API Management service instance.
     *              Non-current revision has ;rev=n as a suffix where n is the revision number.
     * @param schemaId Schema identifier within an API. Must be unique in the current API Management
     *                 service instance.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, serviceName: string, apiId: string, schemaId: string, options?: ApiSchemaGetOptionalParams): Promise<ApiSchemaGetResponse>;
    /**
     * Creates or updates schema configuration for the API.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param apiId API revision identifier. Must be unique in the current API Management service instance.
     *              Non-current revision has ;rev=n as a suffix where n is the revision number.
     * @param schemaId Schema identifier within an API. Must be unique in the current API Management
     *                 service instance.
     * @param parameters The schema contents to apply.
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName: string, serviceName: string, apiId: string, schemaId: string, parameters: SchemaContract, options?: ApiSchemaCreateOrUpdateOptionalParams): Promise<PollerLike<PollOperationState<ApiSchemaCreateOrUpdateResponse>, ApiSchemaCreateOrUpdateResponse>>;
    /**
     * Creates or updates schema configuration for the API.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param apiId API revision identifier. Must be unique in the current API Management service instance.
     *              Non-current revision has ;rev=n as a suffix where n is the revision number.
     * @param schemaId Schema identifier within an API. Must be unique in the current API Management
     *                 service instance.
     * @param parameters The schema contents to apply.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName: string, serviceName: string, apiId: string, schemaId: string, parameters: SchemaContract, options?: ApiSchemaCreateOrUpdateOptionalParams): Promise<ApiSchemaCreateOrUpdateResponse>;
    /**
     * Deletes the schema configuration at the Api.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param apiId API revision identifier. Must be unique in the current API Management service instance.
     *              Non-current revision has ;rev=n as a suffix where n is the revision number.
     * @param schemaId Schema identifier within an API. Must be unique in the current API Management
     *                 service instance.
     * @param ifMatch ETag of the Entity. ETag should match the current entity state from the header
     *                response of the GET request or it should be * for unconditional update.
     * @param options The options parameters.
     */
    delete(resourceGroupName: string, serviceName: string, apiId: string, schemaId: string, ifMatch: string, options?: ApiSchemaDeleteOptionalParams): Promise<void>;
}

/** Defines headers for ApiSchema_createOrUpdate operation. */
export declare interface ApiSchemaCreateOrUpdateHeaders {
    /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
    eTag?: string;
}

/** Optional parameters. */
export declare interface ApiSchemaCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
    /** ETag of the Entity. Not required when creating an entity, but required when updating an entity. */
    ifMatch?: string;
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export declare type ApiSchemaCreateOrUpdateResponse = ApiSchemaCreateOrUpdateHeaders & SchemaContract;

/** Optional parameters. */
export declare interface ApiSchemaDeleteOptionalParams extends coreClient.OperationOptions {
    /** If true removes all references to the schema before deleting it. */
    force?: boolean;
}

/** Defines headers for ApiSchema_getEntityTag operation. */
export declare interface ApiSchemaGetEntityTagHeaders {
    /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
    eTag?: string;
}

/** Optional parameters. */
export declare interface ApiSchemaGetEntityTagOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the getEntityTag operation. */
export declare type ApiSchemaGetEntityTagResponse = ApiSchemaGetEntityTagHeaders;

/** Defines headers for ApiSchema_get operation. */
export declare interface ApiSchemaGetHeaders {
    /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
    eTag?: string;
}

/** Optional parameters. */
export declare interface ApiSchemaGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type ApiSchemaGetResponse = ApiSchemaGetHeaders & SchemaContract;

/** Optional parameters. */
export declare interface ApiSchemaListByApiNextOptionalParams extends coreClient.OperationOptions {
    /** |     Field     |     Usage     |     Supported operators     |     Supported functions     |</br>|-------------|-------------|-------------|-------------|</br>| contentType | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |</br> */
    filter?: string;
    /** Number of records to return. */
    top?: number;
    /** Number of records to skip. */
    skip?: number;
}

/** Contains response data for the listByApiNext operation. */
export declare type ApiSchemaListByApiNextResponse = SchemaCollection;

/** Optional parameters. */
export declare interface ApiSchemaListByApiOptionalParams extends coreClient.OperationOptions {
    /** |     Field     |     Usage     |     Supported operators     |     Supported functions     |</br>|-------------|-------------|-------------|-------------|</br>| contentType | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |</br> */
    filter?: string;
    /** Number of records to return. */
    top?: number;
    /** Number of records to skip. */
    skip?: number;
}

/** Contains response data for the listByApi operation. */
export declare type ApiSchemaListByApiResponse = SchemaCollection;

/** Interface representing a ApiTagDescription. */
export declare interface ApiTagDescription {
    /**
     * Lists all Tags descriptions in scope of API. Model similar to swagger - tagDescription is defined on
     * API level but tag may be assigned to the Operations
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param apiId API revision identifier. Must be unique in the current API Management service instance.
     *              Non-current revision has ;rev=n as a suffix where n is the revision number.
     * @param options The options parameters.
     */
    listByService(resourceGroupName: string, serviceName: string, apiId: string, options?: ApiTagDescriptionListByServiceOptionalParams): PagedAsyncIterableIterator<TagDescriptionContract>;
    /**
     * Gets the entity state version of the tag specified by its identifier.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param apiId API revision identifier. Must be unique in the current API Management service instance.
     *              Non-current revision has ;rev=n as a suffix where n is the revision number.
     * @param tagDescriptionId Tag description identifier. Used when creating tagDescription for API/Tag
     *                         association. Based on API and Tag names.
     * @param options The options parameters.
     */
    getEntityTag(resourceGroupName: string, serviceName: string, apiId: string, tagDescriptionId: string, options?: ApiTagDescriptionGetEntityTagOptionalParams): Promise<ApiTagDescriptionGetEntityTagResponse>;
    /**
     * Get Tag description in scope of API
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param apiId API revision identifier. Must be unique in the current API Management service instance.
     *              Non-current revision has ;rev=n as a suffix where n is the revision number.
     * @param tagDescriptionId Tag description identifier. Used when creating tagDescription for API/Tag
     *                         association. Based on API and Tag names.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, serviceName: string, apiId: string, tagDescriptionId: string, options?: ApiTagDescriptionGetOptionalParams): Promise<ApiTagDescriptionGetResponse>;
    /**
     * Create/Update tag description in scope of the Api.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param apiId API revision identifier. Must be unique in the current API Management service instance.
     *              Non-current revision has ;rev=n as a suffix where n is the revision number.
     * @param tagDescriptionId Tag description identifier. Used when creating tagDescription for API/Tag
     *                         association. Based on API and Tag names.
     * @param parameters Create parameters.
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName: string, serviceName: string, apiId: string, tagDescriptionId: string, parameters: TagDescriptionCreateParameters, options?: ApiTagDescriptionCreateOrUpdateOptionalParams): Promise<ApiTagDescriptionCreateOrUpdateResponse>;
    /**
     * Delete tag description for the Api.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param apiId API revision identifier. Must be unique in the current API Management service instance.
     *              Non-current revision has ;rev=n as a suffix where n is the revision number.
     * @param tagDescriptionId Tag description identifier. Used when creating tagDescription for API/Tag
     *                         association. Based on API and Tag names.
     * @param ifMatch ETag of the Entity. ETag should match the current entity state from the header
     *                response of the GET request or it should be * for unconditional update.
     * @param options The options parameters.
     */
    delete(resourceGroupName: string, serviceName: string, apiId: string, tagDescriptionId: string, ifMatch: string, options?: ApiTagDescriptionDeleteOptionalParams): Promise<void>;
}

/** Defines headers for ApiTagDescription_createOrUpdate operation. */
export declare interface ApiTagDescriptionCreateOrUpdateHeaders {
    /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
    eTag?: string;
}

/** Optional parameters. */
export declare interface ApiTagDescriptionCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
    /** ETag of the Entity. Not required when creating an entity, but required when updating an entity. */
    ifMatch?: string;
}

/** Contains response data for the createOrUpdate operation. */
export declare type ApiTagDescriptionCreateOrUpdateResponse = ApiTagDescriptionCreateOrUpdateHeaders & TagDescriptionContract;

/** Optional parameters. */
export declare interface ApiTagDescriptionDeleteOptionalParams extends coreClient.OperationOptions {
}

/** Defines headers for ApiTagDescription_getEntityTag operation. */
export declare interface ApiTagDescriptionGetEntityTagHeaders {
    /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
    eTag?: string;
}

/** Optional parameters. */
export declare interface ApiTagDescriptionGetEntityTagOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the getEntityTag operation. */
export declare type ApiTagDescriptionGetEntityTagResponse = ApiTagDescriptionGetEntityTagHeaders;

/** Defines headers for ApiTagDescription_get operation. */
export declare interface ApiTagDescriptionGetHeaders {
    /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
    eTag?: string;
}

/** Optional parameters. */
export declare interface ApiTagDescriptionGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type ApiTagDescriptionGetResponse = ApiTagDescriptionGetHeaders & TagDescriptionContract;

/** Optional parameters. */
export declare interface ApiTagDescriptionListByServiceNextOptionalParams extends coreClient.OperationOptions {
    /** |     Field     |     Usage     |     Supported operators     |     Supported functions     |</br>|-------------|-------------|-------------|-------------|</br>| displayName | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |</br>| name | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |</br> */
    filter?: string;
    /** Number of records to return. */
    top?: number;
    /** Number of records to skip. */
    skip?: number;
}

/** Contains response data for the listByServiceNext operation. */
export declare type ApiTagDescriptionListByServiceNextResponse = TagDescriptionCollection;

/** Optional parameters. */
export declare interface ApiTagDescriptionListByServiceOptionalParams extends coreClient.OperationOptions {
    /** |     Field     |     Usage     |     Supported operators     |     Supported functions     |</br>|-------------|-------------|-------------|-------------|</br>| displayName | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |</br>| name | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |</br> */
    filter?: string;
    /** Number of records to return. */
    top?: number;
    /** Number of records to skip. */
    skip?: number;
}

/** Contains response data for the listByService operation. */
export declare type ApiTagDescriptionListByServiceResponse = TagDescriptionCollection;

/** API contract properties for the Tag Resources. */
export declare interface ApiTagResourceContractProperties extends ApiEntityBaseContract {
    /** API identifier in the form /apis/{apiId}. */
    id?: string;
    /** API name. */
    name?: string;
    /** Absolute URL of the backend service implementing this API. */
    serviceUrl?: string;
    /** Relative URL uniquely identifying this API and all of its resource paths within the API Management service instance. It is appended to the API endpoint base URL specified during the service instance creation to form a public URL for this API. */
    path?: string;
    /** Describes on which protocols the operations in this API can be invoked. */
    protocols?: Protocol[];
}

/**
 * Defines values for ApiType. \
 * {@link KnownApiType} can be used interchangeably with ApiType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **http** \
 * **soap** \
 * **websocket** \
 * **graphql**
 */
export declare type ApiType = string;

/** API update contract details. */
export declare interface ApiUpdateContract {
    /** Description of the API. May include HTML formatting tags. */
    description?: string;
    /** Collection of authentication settings included into this API. */
    authenticationSettings?: AuthenticationSettingsContract;
    /** Protocols over which API is made available. */
    subscriptionKeyParameterNames?: SubscriptionKeyParameterNamesContract;
    /** Type of API. */
    apiType?: ApiType;
    /** Describes the revision of the API. If no value is provided, default revision 1 is created */
    apiRevision?: string;
    /** Indicates the version identifier of the API if the API is versioned */
    apiVersion?: string;
    /** Indicates if API revision is current api revision. */
    isCurrent?: boolean;
    /**
     * Indicates if API revision is accessible via the gateway.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly isOnline?: boolean;
    /** Description of the API Revision. */
    apiRevisionDescription?: string;
    /** Description of the API Version. */
    apiVersionDescription?: string;
    /** A resource identifier for the related ApiVersionSet. */
    apiVersionSetId?: string;
    /** Specifies whether an API or Product subscription is required for accessing the API. */
    subscriptionRequired?: boolean;
    /**  A URL to the Terms of Service for the API. MUST be in the format of a URL. */
    termsOfServiceUrl?: string;
    /** Contact information for the API. */
    contact?: ApiContactInformation;
    /** License information for the API. */
    license?: ApiLicenseInformation;
    /** API name. */
    displayName?: string;
    /** Absolute URL of the backend service implementing this API. */
    serviceUrl?: string;
    /** Relative URL uniquely identifying this API and all of its resource paths within the API Management service instance. It is appended to the API endpoint base URL specified during the service instance creation to form a public URL for this API. */
    path?: string;
    /** Describes on which protocols the operations in this API can be invoked. */
    protocols?: Protocol[];
}

/** Defines headers for Api_update operation. */
export declare interface ApiUpdateHeaders {
    /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
    eTag?: string;
}

/** Optional parameters. */
export declare interface ApiUpdateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the update operation. */
export declare type ApiUpdateResponse = ApiUpdateHeaders & ApiContract;

/** Control Plane Apis version constraint for the API Management service. */
export declare interface ApiVersionConstraint {
    /** Limit control plane API calls to API Management service with version equal to or newer than this value. */
    minApiVersion?: string;
}

/** Interface representing a ApiVersionSet. */
export declare interface ApiVersionSet {
    /**
     * Lists a collection of API Version Sets in the specified service instance.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param options The options parameters.
     */
    listByService(resourceGroupName: string, serviceName: string, options?: ApiVersionSetListByServiceOptionalParams): PagedAsyncIterableIterator<ApiVersionSetContract>;
    /**
     * Gets the entity state (Etag) version of the Api Version Set specified by its identifier.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param versionSetId Api Version Set identifier. Must be unique in the current API Management service
     *                     instance.
     * @param options The options parameters.
     */
    getEntityTag(resourceGroupName: string, serviceName: string, versionSetId: string, options?: ApiVersionSetGetEntityTagOptionalParams): Promise<ApiVersionSetGetEntityTagResponse>;
    /**
     * Gets the details of the Api Version Set specified by its identifier.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param versionSetId Api Version Set identifier. Must be unique in the current API Management service
     *                     instance.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, serviceName: string, versionSetId: string, options?: ApiVersionSetGetOptionalParams): Promise<ApiVersionSetGetResponse>;
    /**
     * Creates or Updates a Api Version Set.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param versionSetId Api Version Set identifier. Must be unique in the current API Management service
     *                     instance.
     * @param parameters Create or update parameters.
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName: string, serviceName: string, versionSetId: string, parameters: ApiVersionSetContract, options?: ApiVersionSetCreateOrUpdateOptionalParams): Promise<ApiVersionSetCreateOrUpdateResponse>;
    /**
     * Updates the details of the Api VersionSet specified by its identifier.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param versionSetId Api Version Set identifier. Must be unique in the current API Management service
     *                     instance.
     * @param ifMatch ETag of the Entity. ETag should match the current entity state from the header
     *                response of the GET request or it should be * for unconditional update.
     * @param parameters Update parameters.
     * @param options The options parameters.
     */
    update(resourceGroupName: string, serviceName: string, versionSetId: string, ifMatch: string, parameters: ApiVersionSetUpdateParameters, options?: ApiVersionSetUpdateOptionalParams): Promise<ApiVersionSetUpdateResponse>;
    /**
     * Deletes specific Api Version Set.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param versionSetId Api Version Set identifier. Must be unique in the current API Management service
     *                     instance.
     * @param ifMatch ETag of the Entity. ETag should match the current entity state from the header
     *                response of the GET request or it should be * for unconditional update.
     * @param options The options parameters.
     */
    delete(resourceGroupName: string, serviceName: string, versionSetId: string, ifMatch: string, options?: ApiVersionSetDeleteOptionalParams): Promise<void>;
}

/** Paged API Version Set list representation. */
export declare interface ApiVersionSetCollection {
    /** Page values. */
    value?: ApiVersionSetContract[];
    /** Total record count number across all pages. */
    count?: number;
    /** Next page link if any. */
    nextLink?: string;
}

/** API Version Set Contract details. */
export declare interface ApiVersionSetContract extends Resource {
    /** Description of API Version Set. */
    description?: string;
    /** Name of query parameter that indicates the API Version if versioningScheme is set to `query`. */
    versionQueryName?: string;
    /** Name of HTTP header parameter that indicates the API Version if versioningScheme is set to `header`. */
    versionHeaderName?: string;
    /** Name of API Version Set */
    displayName?: string;
    /** An value that determines where the API Version identifier will be located in a HTTP request. */
    versioningScheme?: VersioningScheme;
}

/** An API Version Set contains the common configuration for a set of API Versions relating */
export declare interface ApiVersionSetContractDetails {
    /** Identifier for existing API Version Set. Omit this value to create a new Version Set. */
    id?: string;
    /** The display Name of the API Version Set. */
    name?: string;
    /** Description of API Version Set. */
    description?: string;
    /** An value that determines where the API Version identifier will be located in a HTTP request. */
    versioningScheme?: ApiVersionSetContractDetailsVersioningScheme;
    /** Name of query parameter that indicates the API Version if versioningScheme is set to `query`. */
    versionQueryName?: string;
    /** Name of HTTP header parameter that indicates the API Version if versioningScheme is set to `header`. */
    versionHeaderName?: string;
}

/**
 * Defines values for ApiVersionSetContractDetailsVersioningScheme. \
 * {@link KnownApiVersionSetContractDetailsVersioningScheme} can be used interchangeably with ApiVersionSetContractDetailsVersioningScheme,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Segment** \
 * **Query** \
 * **Header**
 */
export declare type ApiVersionSetContractDetailsVersioningScheme = string;

/** Properties of an API Version Set. */
export declare interface ApiVersionSetContractProperties extends ApiVersionSetEntityBase {
    /** Name of API Version Set */
    displayName: string;
    /** An value that determines where the API Version identifier will be located in a HTTP request. */
    versioningScheme: VersioningScheme;
}

/** Defines headers for ApiVersionSet_createOrUpdate operation. */
export declare interface ApiVersionSetCreateOrUpdateHeaders {
    /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
    eTag?: string;
}

/** Optional parameters. */
export declare interface ApiVersionSetCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
    /** ETag of the Entity. Not required when creating an entity, but required when updating an entity. */
    ifMatch?: string;
}

/** Contains response data for the createOrUpdate operation. */
export declare type ApiVersionSetCreateOrUpdateResponse = ApiVersionSetCreateOrUpdateHeaders & ApiVersionSetContract;

/** Optional parameters. */
export declare interface ApiVersionSetDeleteOptionalParams extends coreClient.OperationOptions {
}

/** API Version set base parameters */
export declare interface ApiVersionSetEntityBase {
    /** Description of API Version Set. */
    description?: string;
    /** Name of query parameter that indicates the API Version if versioningScheme is set to `query`. */
    versionQueryName?: string;
    /** Name of HTTP header parameter that indicates the API Version if versioningScheme is set to `header`. */
    versionHeaderName?: string;
}

/** Defines headers for ApiVersionSet_getEntityTag operation. */
export declare interface ApiVersionSetGetEntityTagHeaders {
    /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
    eTag?: string;
}

/** Optional parameters. */
export declare interface ApiVersionSetGetEntityTagOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the getEntityTag operation. */
export declare type ApiVersionSetGetEntityTagResponse = ApiVersionSetGetEntityTagHeaders;

/** Defines headers for ApiVersionSet_get operation. */
export declare interface ApiVersionSetGetHeaders {
    /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
    eTag?: string;
}

/** Optional parameters. */
export declare interface ApiVersionSetGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type ApiVersionSetGetResponse = ApiVersionSetGetHeaders & ApiVersionSetContract;

/** Optional parameters. */
export declare interface ApiVersionSetListByServiceNextOptionalParams extends coreClient.OperationOptions {
    /** |     Field     |     Usage     |     Supported operators     |     Supported functions     |</br>|-------------|-------------|-------------|-------------|</br> */
    filter?: string;
    /** Number of records to return. */
    top?: number;
    /** Number of records to skip. */
    skip?: number;
}

/** Contains response data for the listByServiceNext operation. */
export declare type ApiVersionSetListByServiceNextResponse = ApiVersionSetCollection;

/** Optional parameters. */
export declare interface ApiVersionSetListByServiceOptionalParams extends coreClient.OperationOptions {
    /** |     Field     |     Usage     |     Supported operators     |     Supported functions     |</br>|-------------|-------------|-------------|-------------|</br> */
    filter?: string;
    /** Number of records to return. */
    top?: number;
    /** Number of records to skip. */
    skip?: number;
}

/** Contains response data for the listByService operation. */
export declare type ApiVersionSetListByServiceResponse = ApiVersionSetCollection;

/** Defines headers for ApiVersionSet_update operation. */
export declare interface ApiVersionSetUpdateHeaders {
    /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
    eTag?: string;
}

/** Optional parameters. */
export declare interface ApiVersionSetUpdateOptionalParams extends coreClient.OperationOptions {
}

/** Parameters to update or create an API Version Set Contract. */
export declare interface ApiVersionSetUpdateParameters {
    /** Description of API Version Set. */
    description?: string;
    /** Name of query parameter that indicates the API Version if versioningScheme is set to `query`. */
    versionQueryName?: string;
    /** Name of HTTP header parameter that indicates the API Version if versioningScheme is set to `header`. */
    versionHeaderName?: string;
    /** Name of API Version Set */
    displayName?: string;
    /** An value that determines where the API Version identifier will be located in a HTTP request. */
    versioningScheme?: VersioningScheme;
}

/** Properties used to create or update an API Version Set. */
export declare interface ApiVersionSetUpdateParametersProperties extends ApiVersionSetEntityBase {
    /** Name of API Version Set */
    displayName?: string;
    /** An value that determines where the API Version identifier will be located in a HTTP request. */
    versioningScheme?: VersioningScheme;
}

/** Contains response data for the update operation. */
export declare type ApiVersionSetUpdateResponse = ApiVersionSetUpdateHeaders & ApiVersionSetContract;

/**
 * Defines values for AppType. \
 * {@link KnownAppType} can be used interchangeably with AppType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **portal**: User create request was sent by legacy developer portal. \
 * **developerPortal**: User create request was sent by new developer portal.
 */
export declare type AppType = string;

/** A wrapper for an ARM resource id */
export declare interface ArmIdWrapper {
    /** NOTE: This property will not be serialized. It can only be populated by the server. */
    readonly id?: string;
}

/** Association entity details. */
export declare interface AssociationContract extends Resource {
    /** Provisioning state. */
    provisioningState?: "created";
}

/** Defines values for AsyncOperationStatus. */
export declare type AsyncOperationStatus = "Started" | "InProgress" | "Succeeded" | "Failed";

/** API Authentication Settings. */
export declare interface AuthenticationSettingsContract {
    /** OAuth2 Authentication settings */
    oAuth2?: OAuth2AuthenticationSettingsContract;
    /** OpenID Connect Authentication Settings */
    openid?: OpenIdAuthenticationSettingsContract;
}

/** Defines values for AuthorizationMethod. */
export declare type AuthorizationMethod = "HEAD" | "OPTIONS" | "TRACE" | "GET" | "POST" | "PUT" | "PATCH" | "DELETE";

/** Interface representing a AuthorizationServer. */
export declare interface AuthorizationServer {
    /**
     * Lists a collection of authorization servers defined within a service instance.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param options The options parameters.
     */
    listByService(resourceGroupName: string, serviceName: string, options?: AuthorizationServerListByServiceOptionalParams): PagedAsyncIterableIterator<AuthorizationServerContract>;
    /**
     * Gets the entity state (Etag) version of the authorizationServer specified by its identifier.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param authsid Identifier of the authorization server.
     * @param options The options parameters.
     */
    getEntityTag(resourceGroupName: string, serviceName: string, authsid: string, options?: AuthorizationServerGetEntityTagOptionalParams): Promise<AuthorizationServerGetEntityTagResponse>;
    /**
     * Gets the details of the authorization server specified by its identifier.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param authsid Identifier of the authorization server.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, serviceName: string, authsid: string, options?: AuthorizationServerGetOptionalParams): Promise<AuthorizationServerGetResponse>;
    /**
     * Creates new authorization server or updates an existing authorization server.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param authsid Identifier of the authorization server.
     * @param parameters Create or update parameters.
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName: string, serviceName: string, authsid: string, parameters: AuthorizationServerContract, options?: AuthorizationServerCreateOrUpdateOptionalParams): Promise<AuthorizationServerCreateOrUpdateResponse>;
    /**
     * Updates the details of the authorization server specified by its identifier.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param authsid Identifier of the authorization server.
     * @param ifMatch ETag of the Entity. ETag should match the current entity state from the header
     *                response of the GET request or it should be * for unconditional update.
     * @param parameters OAuth2 Server settings Update parameters.
     * @param options The options parameters.
     */
    update(resourceGroupName: string, serviceName: string, authsid: string, ifMatch: string, parameters: AuthorizationServerUpdateContract, options?: AuthorizationServerUpdateOptionalParams): Promise<AuthorizationServerUpdateResponse>;
    /**
     * Deletes specific authorization server instance.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param authsid Identifier of the authorization server.
     * @param ifMatch ETag of the Entity. ETag should match the current entity state from the header
     *                response of the GET request or it should be * for unconditional update.
     * @param options The options parameters.
     */
    delete(resourceGroupName: string, serviceName: string, authsid: string, ifMatch: string, options?: AuthorizationServerDeleteOptionalParams): Promise<void>;
    /**
     * Gets the client secret details of the authorization server.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param authsid Identifier of the authorization server.
     * @param options The options parameters.
     */
    listSecrets(resourceGroupName: string, serviceName: string, authsid: string, options?: AuthorizationServerListSecretsOptionalParams): Promise<AuthorizationServerListSecretsResponse>;
}

/** Paged OAuth2 Authorization Servers list representation. */
export declare interface AuthorizationServerCollection {
    /** Page values. */
    value?: AuthorizationServerContract[];
    /** Total record count number across all pages. */
    count?: number;
    /** Next page link if any. */
    nextLink?: string;
}

/** External OAuth authorization server settings. */
export declare interface AuthorizationServerContract extends Resource {
    /** Description of the authorization server. Can contain HTML formatting tags. */
    description?: string;
    /** HTTP verbs supported by the authorization endpoint. GET must be always present. POST is optional. */
    authorizationMethods?: AuthorizationMethod[];
    /** Method of authentication supported by the token endpoint of this authorization server. Possible values are Basic and/or Body. When Body is specified, client credentials and other parameters are passed within the request body in the application/x-www-form-urlencoded format. */
    clientAuthenticationMethod?: ClientAuthenticationMethod[];
    /** Additional parameters required by the token endpoint of this authorization server represented as an array of JSON objects with name and value string properties, i.e. {"name" : "name value", "value": "a value"}. */
    tokenBodyParameters?: TokenBodyParameterContract[];
    /** OAuth token endpoint. Contains absolute URI to entity being referenced. */
    tokenEndpoint?: string;
    /** If true, authorization server will include state parameter from the authorization request to its response. Client may use state parameter to raise protocol security. */
    supportState?: boolean;
    /** Access token scope that is going to be requested by default. Can be overridden at the API level. Should be provided in the form of a string containing space-delimited values. */
    defaultScope?: string;
    /** Specifies the mechanism by which access token is passed to the API. */
    bearerTokenSendingMethods?: BearerTokenSendingMethod[];
    /** Can be optionally specified when resource owner password grant type is supported by this authorization server. Default resource owner username. */
    resourceOwnerUsername?: string;
    /** Can be optionally specified when resource owner password grant type is supported by this authorization server. Default resource owner password. */
    resourceOwnerPassword?: string;
    /** User-friendly authorization server name. */
    displayName?: string;
    /** Optional reference to a page where client or app registration for this authorization server is performed. Contains absolute URL to entity being referenced. */
    clientRegistrationEndpoint?: string;
    /** OAuth authorization endpoint. See http://tools.ietf.org/html/rfc6749#section-3.2. */
    authorizationEndpoint?: string;
    /** Form of an authorization grant, which the client uses to request the access token. */
    grantTypes?: GrantType[];
    /** Client or app id registered with this authorization server. */
    clientId?: string;
    /** Client or app secret registered with this authorization server. This property will not be filled on 'GET' operations! Use '/listSecrets' POST request to get the value. */
    clientSecret?: string;
}

/** External OAuth authorization server Update settings contract. */
export declare interface AuthorizationServerContractBaseProperties {
    /** Description of the authorization server. Can contain HTML formatting tags. */
    description?: string;
    /** HTTP verbs supported by the authorization endpoint. GET must be always present. POST is optional. */
    authorizationMethods?: AuthorizationMethod[];
    /** Method of authentication supported by the token endpoint of this authorization server. Possible values are Basic and/or Body. When Body is specified, client credentials and other parameters are passed within the request body in the application/x-www-form-urlencoded format. */
    clientAuthenticationMethod?: ClientAuthenticationMethod[];
    /** Additional parameters required by the token endpoint of this authorization server represented as an array of JSON objects with name and value string properties, i.e. {"name" : "name value", "value": "a value"}. */
    tokenBodyParameters?: TokenBodyParameterContract[];
    /** OAuth token endpoint. Contains absolute URI to entity being referenced. */
    tokenEndpoint?: string;
    /** If true, authorization server will include state parameter from the authorization request to its response. Client may use state parameter to raise protocol security. */
    supportState?: boolean;
    /** Access token scope that is going to be requested by default. Can be overridden at the API level. Should be provided in the form of a string containing space-delimited values. */
    defaultScope?: string;
    /** Specifies the mechanism by which access token is passed to the API. */
    bearerTokenSendingMethods?: BearerTokenSendingMethod[];
    /** Can be optionally specified when resource owner password grant type is supported by this authorization server. Default resource owner username. */
    resourceOwnerUsername?: string;
    /** Can be optionally specified when resource owner password grant type is supported by this authorization server. Default resource owner password. */
    resourceOwnerPassword?: string;
}

/** External OAuth authorization server settings Properties. */
export declare interface AuthorizationServerContractProperties extends AuthorizationServerContractBaseProperties {
    /** User-friendly authorization server name. */
    displayName: string;
    /** Optional reference to a page where client or app registration for this authorization server is performed. Contains absolute URL to entity being referenced. */
    clientRegistrationEndpoint: string;
    /** OAuth authorization endpoint. See http://tools.ietf.org/html/rfc6749#section-3.2. */
    authorizationEndpoint: string;
    /** Form of an authorization grant, which the client uses to request the access token. */
    grantTypes: GrantType[];
    /** Client or app id registered with this authorization server. */
    clientId: string;
    /** Client or app secret registered with this authorization server. This property will not be filled on 'GET' operations! Use '/listSecrets' POST request to get the value. */
    clientSecret?: string;
}

/** Defines headers for AuthorizationServer_createOrUpdate operation. */
export declare interface AuthorizationServerCreateOrUpdateHeaders {
    /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
    eTag?: string;
}

/** Optional parameters. */
export declare interface AuthorizationServerCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
    /** ETag of the Entity. Not required when creating an entity, but required when updating an entity. */
    ifMatch?: string;
}

/** Contains response data for the createOrUpdate operation. */
export declare type AuthorizationServerCreateOrUpdateResponse = AuthorizationServerCreateOrUpdateHeaders & AuthorizationServerContract;

/** Optional parameters. */
export declare interface AuthorizationServerDeleteOptionalParams extends coreClient.OperationOptions {
}

/** Defines headers for AuthorizationServer_getEntityTag operation. */
export declare interface AuthorizationServerGetEntityTagHeaders {
    /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
    eTag?: string;
}

/** Optional parameters. */
export declare interface AuthorizationServerGetEntityTagOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the getEntityTag operation. */
export declare type AuthorizationServerGetEntityTagResponse = AuthorizationServerGetEntityTagHeaders;

/** Defines headers for AuthorizationServer_get operation. */
export declare interface AuthorizationServerGetHeaders {
    /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
    eTag?: string;
}

/** Optional parameters. */
export declare interface AuthorizationServerGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type AuthorizationServerGetResponse = AuthorizationServerGetHeaders & AuthorizationServerContract;

/** Optional parameters. */
export declare interface AuthorizationServerListByServiceNextOptionalParams extends coreClient.OperationOptions {
    /** |     Field     |     Usage     |     Supported operators     |     Supported functions     |</br>|-------------|-------------|-------------|-------------|</br>| name | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |</br>| displayName | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |</br> */
    filter?: string;
    /** Number of records to return. */
    top?: number;
    /** Number of records to skip. */
    skip?: number;
}

/** Contains response data for the listByServiceNext operation. */
export declare type AuthorizationServerListByServiceNextResponse = AuthorizationServerCollection;

/** Optional parameters. */
export declare interface AuthorizationServerListByServiceOptionalParams extends coreClient.OperationOptions {
    /** |     Field     |     Usage     |     Supported operators     |     Supported functions     |</br>|-------------|-------------|-------------|-------------|</br>| name | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |</br>| displayName | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |</br> */
    filter?: string;
    /** Number of records to return. */
    top?: number;
    /** Number of records to skip. */
    skip?: number;
}

/** Contains response data for the listByService operation. */
export declare type AuthorizationServerListByServiceResponse = AuthorizationServerCollection;

/** Defines headers for AuthorizationServer_listSecrets operation. */
export declare interface AuthorizationServerListSecretsHeaders {
    /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
    eTag?: string;
}

/** Optional parameters. */
export declare interface AuthorizationServerListSecretsOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listSecrets operation. */
export declare type AuthorizationServerListSecretsResponse = AuthorizationServerListSecretsHeaders & AuthorizationServerSecretsContract;

/** OAuth Server Secrets Contract. */
export declare interface AuthorizationServerSecretsContract {
    /** oAuth Authorization Server Secrets. */
    clientSecret?: string;
    /** Can be optionally specified when resource owner password grant type is supported by this authorization server. Default resource owner username. */
    resourceOwnerUsername?: string;
    /** Can be optionally specified when resource owner password grant type is supported by this authorization server. Default resource owner password. */
    resourceOwnerPassword?: string;
}

/** External OAuth authorization server settings. */
export declare interface AuthorizationServerUpdateContract extends Resource {
    /** Description of the authorization server. Can contain HTML formatting tags. */
    description?: string;
    /** HTTP verbs supported by the authorization endpoint. GET must be always present. POST is optional. */
    authorizationMethods?: AuthorizationMethod[];
    /** Method of authentication supported by the token endpoint of this authorization server. Possible values are Basic and/or Body. When Body is specified, client credentials and other parameters are passed within the request body in the application/x-www-form-urlencoded format. */
    clientAuthenticationMethod?: ClientAuthenticationMethod[];
    /** Additional parameters required by the token endpoint of this authorization server represented as an array of JSON objects with name and value string properties, i.e. {"name" : "name value", "value": "a value"}. */
    tokenBodyParameters?: TokenBodyParameterContract[];
    /** OAuth token endpoint. Contains absolute URI to entity being referenced. */
    tokenEndpoint?: string;
    /** If true, authorization server will include state parameter from the authorization request to its response. Client may use state parameter to raise protocol security. */
    supportState?: boolean;
    /** Access token scope that is going to be requested by default. Can be overridden at the API level. Should be provided in the form of a string containing space-delimited values. */
    defaultScope?: string;
    /** Specifies the mechanism by which access token is passed to the API. */
    bearerTokenSendingMethods?: BearerTokenSendingMethod[];
    /** Can be optionally specified when resource owner password grant type is supported by this authorization server. Default resource owner username. */
    resourceOwnerUsername?: string;
    /** Can be optionally specified when resource owner password grant type is supported by this authorization server. Default resource owner password. */
    resourceOwnerPassword?: string;
    /** User-friendly authorization server name. */
    displayName?: string;
    /** Optional reference to a page where client or app registration for this authorization server is performed. Contains absolute URL to entity being referenced. */
    clientRegistrationEndpoint?: string;
    /** OAuth authorization endpoint. See http://tools.ietf.org/html/rfc6749#section-3.2. */
    authorizationEndpoint?: string;
    /** Form of an authorization grant, which the client uses to request the access token. */
    grantTypes?: GrantType[];
    /** Client or app id registered with this authorization server. */
    clientId?: string;
    /** Client or app secret registered with this authorization server. This property will not be filled on 'GET' operations! Use '/listSecrets' POST request to get the value. */
    clientSecret?: string;
}

/** External OAuth authorization server Update settings contract. */
export declare interface AuthorizationServerUpdateContractProperties extends AuthorizationServerContractBaseProperties {
    /** User-friendly authorization server name. */
    displayName?: string;
    /** Optional reference to a page where client or app registration for this authorization server is performed. Contains absolute URL to entity being referenced. */
    clientRegistrationEndpoint?: string;
    /** OAuth authorization endpoint. See http://tools.ietf.org/html/rfc6749#section-3.2. */
    authorizationEndpoint?: string;
    /** Form of an authorization grant, which the client uses to request the access token. */
    grantTypes?: GrantType[];
    /** Client or app id registered with this authorization server. */
    clientId?: string;
    /** Client or app secret registered with this authorization server. This property will not be filled on 'GET' operations! Use '/listSecrets' POST request to get the value. */
    clientSecret?: string;
}

/** Defines headers for AuthorizationServer_update operation. */
export declare interface AuthorizationServerUpdateHeaders {
    /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
    eTag?: string;
}

/** Optional parameters. */
export declare interface AuthorizationServerUpdateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the update operation. */
export declare type AuthorizationServerUpdateResponse = AuthorizationServerUpdateHeaders & AuthorizationServerContract;

/** Interface representing a Backend. */
export declare interface Backend {
    /**
     * Lists a collection of backends in the specified service instance.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param options The options parameters.
     */
    listByService(resourceGroupName: string, serviceName: string, options?: BackendListByServiceOptionalParams): PagedAsyncIterableIterator<BackendContract>;
    /**
     * Gets the entity state (Etag) version of the backend specified by its identifier.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param backendId Identifier of the Backend entity. Must be unique in the current API Management
     *                  service instance.
     * @param options The options parameters.
     */
    getEntityTag(resourceGroupName: string, serviceName: string, backendId: string, options?: BackendGetEntityTagOptionalParams): Promise<BackendGetEntityTagResponse>;
    /**
     * Gets the details of the backend specified by its identifier.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param backendId Identifier of the Backend entity. Must be unique in the current API Management
     *                  service instance.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, serviceName: string, backendId: string, options?: BackendGetOptionalParams): Promise<BackendGetResponse>;
    /**
     * Creates or Updates a backend.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param backendId Identifier of the Backend entity. Must be unique in the current API Management
     *                  service instance.
     * @param parameters Create parameters.
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName: string, serviceName: string, backendId: string, parameters: BackendContract, options?: BackendCreateOrUpdateOptionalParams): Promise<BackendCreateOrUpdateResponse>;
    /**
     * Updates an existing backend.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param backendId Identifier of the Backend entity. Must be unique in the current API Management
     *                  service instance.
     * @param ifMatch ETag of the Entity. ETag should match the current entity state from the header
     *                response of the GET request or it should be * for unconditional update.
     * @param parameters Update parameters.
     * @param options The options parameters.
     */
    update(resourceGroupName: string, serviceName: string, backendId: string, ifMatch: string, parameters: BackendUpdateParameters, options?: BackendUpdateOptionalParams): Promise<BackendUpdateResponse>;
    /**
     * Deletes the specified backend.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param backendId Identifier of the Backend entity. Must be unique in the current API Management
     *                  service instance.
     * @param ifMatch ETag of the Entity. ETag should match the current entity state from the header
     *                response of the GET request or it should be * for unconditional update.
     * @param options The options parameters.
     */
    delete(resourceGroupName: string, serviceName: string, backendId: string, ifMatch: string, options?: BackendDeleteOptionalParams): Promise<void>;
    /**
     * Notifies the APIM proxy to create a new connection to the backend after the specified timeout. If no
     * timeout was specified, timeout of 2 minutes is used.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param backendId Identifier of the Backend entity. Must be unique in the current API Management
     *                  service instance.
     * @param options The options parameters.
     */
    reconnect(resourceGroupName: string, serviceName: string, backendId: string, options?: BackendReconnectOptionalParams): Promise<void>;
}

/** Authorization header information. */
export declare interface BackendAuthorizationHeaderCredentials {
    /** Authentication Scheme name. */
    scheme: string;
    /** Authentication Parameter value. */
    parameter: string;
}

/** Backend entity base Parameter set. */
export declare interface BackendBaseParameters {
    /** Backend Title. */
    title?: string;
    /** Backend Description. */
    description?: string;
    /** Management Uri of the Resource in External System. This url can be the Arm Resource Id of Logic Apps, Function Apps or API Apps. */
    resourceId?: string;
    /** Backend Properties contract */
    properties?: BackendProperties;
    /** Backend Credentials Contract Properties */
    credentials?: BackendCredentialsContract;
    /** Backend Proxy Contract Properties */
    proxy?: BackendProxyContract;
    /** Backend TLS Properties */
    tls?: BackendTlsProperties;
}

/** Paged Backend list representation. */
export declare interface BackendCollection {
    /** Backend values. */
    value?: BackendContract[];
    /** Total record count number across all pages. */
    count?: number;
    /** Next page link if any. */
    nextLink?: string;
}

/** Backend details. */
export declare interface BackendContract extends Resource {
    /** Backend Title. */
    title?: string;
    /** Backend Description. */
    description?: string;
    /** Management Uri of the Resource in External System. This url can be the Arm Resource Id of Logic Apps, Function Apps or API Apps. */
    resourceId?: string;
    /** Backend Properties contract */
    properties?: BackendProperties;
    /** Backend Credentials Contract Properties */
    credentials?: BackendCredentialsContract;
    /** Backend Proxy Contract Properties */
    proxy?: BackendProxyContract;
    /** Backend TLS Properties */
    tls?: BackendTlsProperties;
    /** Runtime Url of the Backend. */
    url?: string;
    /** Backend communication protocol. */
    protocol?: BackendProtocol;
}

/** Parameters supplied to the Create Backend operation. */
export declare interface BackendContractProperties extends BackendBaseParameters {
    /** Runtime Url of the Backend. */
    url: string;
    /** Backend communication protocol. */
    protocol: BackendProtocol;
}

/** Defines headers for Backend_createOrUpdate operation. */
export declare interface BackendCreateOrUpdateHeaders {
    /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
    eTag?: string;
}

/** Optional parameters. */
export declare interface BackendCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
    /** ETag of the Entity. Not required when creating an entity, but required when updating an entity. */
    ifMatch?: string;
}

/** Contains response data for the createOrUpdate operation. */
export declare type BackendCreateOrUpdateResponse = BackendCreateOrUpdateHeaders & BackendContract;

/** Details of the Credentials used to connect to Backend. */
export declare interface BackendCredentialsContract {
    /** List of Client Certificate Ids. */
    certificateIds?: string[];
    /** List of Client Certificate Thumbprints. Will be ignored if certificatesIds are provided. */
    certificate?: string[];
    /** Query Parameter description. */
    query?: {
        [propertyName: string]: string[];
    };
    /** Header Parameter description. */
    header?: {
        [propertyName: string]: string[];
    };
    /** Authorization header authentication */
    authorization?: BackendAuthorizationHeaderCredentials;
}

/** Optional parameters. */
export declare interface BackendDeleteOptionalParams extends coreClient.OperationOptions {
}

/** Defines headers for Backend_getEntityTag operation. */
export declare interface BackendGetEntityTagHeaders {
    /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
    eTag?: string;
}

/** Optional parameters. */
export declare interface BackendGetEntityTagOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the getEntityTag operation. */
export declare type BackendGetEntityTagResponse = BackendGetEntityTagHeaders;

/** Defines headers for Backend_get operation. */
export declare interface BackendGetHeaders {
    /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
    eTag?: string;
}

/** Optional parameters. */
export declare interface BackendGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type BackendGetResponse = BackendGetHeaders & BackendContract;

/** Optional parameters. */
export declare interface BackendListByServiceNextOptionalParams extends coreClient.OperationOptions {
    /** |     Field     |     Usage     |     Supported operators     |     Supported functions     |</br>|-------------|-------------|-------------|-------------|</br>| name | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |</br>| title | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |</br>| url | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |</br> */
    filter?: string;
    /** Number of records to return. */
    top?: number;
    /** Number of records to skip. */
    skip?: number;
}

/** Contains response data for the listByServiceNext operation. */
export declare type BackendListByServiceNextResponse = BackendCollection;

/** Optional parameters. */
export declare interface BackendListByServiceOptionalParams extends coreClient.OperationOptions {
    /** |     Field     |     Usage     |     Supported operators     |     Supported functions     |</br>|-------------|-------------|-------------|-------------|</br>| name | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |</br>| title | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |</br>| url | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |</br> */
    filter?: string;
    /** Number of records to return. */
    top?: number;
    /** Number of records to skip. */
    skip?: number;
}

/** Contains response data for the listByService operation. */
export declare type BackendListByServiceResponse = BackendCollection;

/** Properties specific to the Backend Type. */
export declare interface BackendProperties {
    /** Backend Service Fabric Cluster Properties */
    serviceFabricCluster?: BackendServiceFabricClusterProperties;
}

/**
 * Defines values for BackendProtocol. \
 * {@link KnownBackendProtocol} can be used interchangeably with BackendProtocol,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **http**: The Backend is a RESTful service. \
 * **soap**: The Backend is a SOAP service.
 */
export declare type BackendProtocol = string;

/** Details of the Backend WebProxy Server to use in the Request to Backend. */
export declare interface BackendProxyContract {
    /** WebProxy Server AbsoluteUri property which includes the entire URI stored in the Uri instance, including all fragments and query strings. */
    url: string;
    /** Username to connect to the WebProxy server */
    username?: string;
    /** Password to connect to the WebProxy Server */
    password?: string;
}

/** Reconnect request parameters. */
export declare interface BackendReconnectContract extends Resource {
    /** Duration in ISO8601 format after which reconnect will be initiated. Minimum duration of the Reconnect is PT2M. */
    after?: string;
}

/** Optional parameters. */
export declare interface BackendReconnectOptionalParams extends coreClient.OperationOptions {
    /** Reconnect request parameters. */
    parameters?: BackendReconnectContract;
}

/** Properties of the Service Fabric Type Backend. */
export declare interface BackendServiceFabricClusterProperties {
    /** The client certificate id for the management endpoint. */
    clientCertificateId?: string;
    /** The client certificate thumbprint for the management endpoint. Will be ignored if certificatesIds are provided */
    clientCertificatethumbprint?: string;
    /** Maximum number of retries while attempting resolve the partition. */
    maxPartitionResolutionRetries?: number;
    /** The cluster management endpoint. */
    managementEndpoints: string[];
    /** Thumbprints of certificates cluster management service uses for tls communication */
    serverCertificateThumbprints?: string[];
    /** Server X509 Certificate Names Collection */
    serverX509Names?: X509CertificateName[];
}

/** Properties controlling TLS Certificate Validation. */
export declare interface BackendTlsProperties {
    /** Flag indicating whether SSL certificate chain validation should be done when using self-signed certificates for this backend host. */
    validateCertificateChain?: boolean;
    /** Flag indicating whether SSL certificate name validation should be done when using self-signed certificates for this backend host. */
    validateCertificateName?: boolean;
}

/** Defines headers for Backend_update operation. */
export declare interface BackendUpdateHeaders {
    /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
    eTag?: string;
}

/** Optional parameters. */
export declare interface BackendUpdateOptionalParams extends coreClient.OperationOptions {
}

/** Parameters supplied to the Update Backend operation. */
export declare interface BackendUpdateParameterProperties extends BackendBaseParameters {
    /** Runtime Url of the Backend. */
    url?: string;
    /** Backend communication protocol. */
    protocol?: BackendProtocol;
}

/** Backend update parameters. */
export declare interface BackendUpdateParameters {
    /** Backend Title. */
    title?: string;
    /** Backend Description. */
    description?: string;
    /** Management Uri of the Resource in External System. This url can be the Arm Resource Id of Logic Apps, Function Apps or API Apps. */
    resourceId?: string;
    /** Backend Properties contract */
    properties?: BackendProperties;
    /** Backend Credentials Contract Properties */
    credentials?: BackendCredentialsContract;
    /** Backend Proxy Contract Properties */
    proxy?: BackendProxyContract;
    /** Backend TLS Properties */
    tls?: BackendTlsProperties;
    /** Runtime Url of the Backend. */
    url?: string;
    /** Backend communication protocol. */
    protocol?: BackendProtocol;
}

/** Contains response data for the update operation. */
export declare type BackendUpdateResponse = BackendUpdateHeaders & BackendContract;

/**
 * Defines values for BearerTokenSendingMethod. \
 * {@link KnownBearerTokenSendingMethod} can be used interchangeably with BearerTokenSendingMethod,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **authorizationHeader** \
 * **query**
 */
export declare type BearerTokenSendingMethod = string;

/**
 * Defines values for BearerTokenSendingMethods. \
 * {@link KnownBearerTokenSendingMethods} can be used interchangeably with BearerTokenSendingMethods,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **authorizationHeader**: Access token will be transmitted in the Authorization header using Bearer schema \
 * **query**: Access token will be transmitted as query parameters.
 */
export declare type BearerTokenSendingMethods = string;

/** Body logging settings. */
export declare interface BodyDiagnosticSettings {
    /** Number of request body bytes to log. */
    bytes?: number;
}

/** Interface representing a Cache. */
declare interface Cache_2 {
    /**
     * Lists a collection of all external Caches in the specified service instance.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param options The options parameters.
     */
    listByService(resourceGroupName: string, serviceName: string, options?: CacheListByServiceOptionalParams): PagedAsyncIterableIterator<CacheContract>;
    /**
     * Gets the entity state (Etag) version of the Cache specified by its identifier.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param cacheId Identifier of the Cache entity. Cache identifier (should be either 'default' or valid
     *                Azure region identifier).
     * @param options The options parameters.
     */
    getEntityTag(resourceGroupName: string, serviceName: string, cacheId: string, options?: CacheGetEntityTagOptionalParams): Promise<CacheGetEntityTagResponse>;
    /**
     * Gets the details of the Cache specified by its identifier.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param cacheId Identifier of the Cache entity. Cache identifier (should be either 'default' or valid
     *                Azure region identifier).
     * @param options The options parameters.
     */
    get(resourceGroupName: string, serviceName: string, cacheId: string, options?: CacheGetOptionalParams): Promise<CacheGetResponse>;
    /**
     * Creates or updates an External Cache to be used in Api Management instance.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param cacheId Identifier of the Cache entity. Cache identifier (should be either 'default' or valid
     *                Azure region identifier).
     * @param parameters Create or Update parameters.
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName: string, serviceName: string, cacheId: string, parameters: CacheContract, options?: CacheCreateOrUpdateOptionalParams): Promise<CacheCreateOrUpdateResponse>;
    /**
     * Updates the details of the cache specified by its identifier.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param cacheId Identifier of the Cache entity. Cache identifier (should be either 'default' or valid
     *                Azure region identifier).
     * @param ifMatch ETag of the Entity. ETag should match the current entity state from the header
     *                response of the GET request or it should be * for unconditional update.
     * @param parameters Update parameters.
     * @param options The options parameters.
     */
    update(resourceGroupName: string, serviceName: string, cacheId: string, ifMatch: string, parameters: CacheUpdateParameters, options?: CacheUpdateOptionalParams): Promise<CacheUpdateResponse>;
    /**
     * Deletes specific Cache.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param cacheId Identifier of the Cache entity. Cache identifier (should be either 'default' or valid
     *                Azure region identifier).
     * @param ifMatch ETag of the Entity. ETag should match the current entity state from the header
     *                response of the GET request or it should be * for unconditional update.
     * @param options The options parameters.
     */
    delete(resourceGroupName: string, serviceName: string, cacheId: string, ifMatch: string, options?: CacheDeleteOptionalParams): Promise<void>;
}
export { Cache_2 as Cache }

/** Paged Caches list representation. */
export declare interface CacheCollection {
    /** Page values. */
    value?: CacheContract[];
    /** Total record count number across all pages. */
    count?: number;
    /** Next page link if any. */
    nextLink?: string;
}

/** Cache details. */
export declare interface CacheContract extends Resource {
    /** Cache description */
    description?: string;
    /** Runtime connection string to cache */
    connectionString?: string;
    /** Location identifier to use cache from (should be either 'default' or valid Azure region identifier) */
    useFromLocation?: string;
    /** Original uri of entity in external system cache points to */
    resourceId?: string;
}

/** Defines headers for Cache_createOrUpdate operation. */
export declare interface CacheCreateOrUpdateHeaders {
    /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
    eTag?: string;
}

/** Optional parameters. */
export declare interface CacheCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
    /** ETag of the Entity. Not required when creating an entity, but required when updating an entity. */
    ifMatch?: string;
}

/** Contains response data for the createOrUpdate operation. */
export declare type CacheCreateOrUpdateResponse = CacheCreateOrUpdateHeaders & CacheContract;

/** Optional parameters. */
export declare interface CacheDeleteOptionalParams extends coreClient.OperationOptions {
}

/** Defines headers for Cache_getEntityTag operation. */
export declare interface CacheGetEntityTagHeaders {
    /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
    eTag?: string;
}

/** Optional parameters. */
export declare interface CacheGetEntityTagOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the getEntityTag operation. */
export declare type CacheGetEntityTagResponse = CacheGetEntityTagHeaders;

/** Defines headers for Cache_get operation. */
export declare interface CacheGetHeaders {
    /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
    eTag?: string;
}

/** Optional parameters. */
export declare interface CacheGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type CacheGetResponse = CacheGetHeaders & CacheContract;

/** Optional parameters. */
export declare interface CacheListByServiceNextOptionalParams extends coreClient.OperationOptions {
    /** Number of records to return. */
    top?: number;
    /** Number of records to skip. */
    skip?: number;
}

/** Contains response data for the listByServiceNext operation. */
export declare type CacheListByServiceNextResponse = CacheCollection;

/** Optional parameters. */
export declare interface CacheListByServiceOptionalParams extends coreClient.OperationOptions {
    /** Number of records to return. */
    top?: number;
    /** Number of records to skip. */
    skip?: number;
}

/** Contains response data for the listByService operation. */
export declare type CacheListByServiceResponse = CacheCollection;

/** Defines headers for Cache_update operation. */
export declare interface CacheUpdateHeaders {
    /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
    eTag?: string;
}

/** Optional parameters. */
export declare interface CacheUpdateOptionalParams extends coreClient.OperationOptions {
}

/** Cache update details. */
export declare interface CacheUpdateParameters {
    /** Cache description */
    description?: string;
    /** Runtime connection string to cache */
    connectionString?: string;
    /** Location identifier to use cache from (should be either 'default' or valid Azure region identifier) */
    useFromLocation?: string;
    /** Original uri of entity in external system cache points to */
    resourceId?: string;
}

/** Contains response data for the update operation. */
export declare type CacheUpdateResponse = CacheUpdateHeaders & CacheContract;

/** Interface representing a Certificate. */
export declare interface Certificate {
    /**
     * Lists a collection of all certificates in the specified service instance.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param options The options parameters.
     */
    listByService(resourceGroupName: string, serviceName: string, options?: CertificateListByServiceOptionalParams): PagedAsyncIterableIterator<CertificateContract>;
    /**
     * Gets the entity state (Etag) version of the certificate specified by its identifier.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param certificateId Identifier of the certificate entity. Must be unique in the current API
     *                      Management service instance.
     * @param options The options parameters.
     */
    getEntityTag(resourceGroupName: string, serviceName: string, certificateId: string, options?: CertificateGetEntityTagOptionalParams): Promise<CertificateGetEntityTagResponse>;
    /**
     * Gets the details of the certificate specified by its identifier.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param certificateId Identifier of the certificate entity. Must be unique in the current API
     *                      Management service instance.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, serviceName: string, certificateId: string, options?: CertificateGetOptionalParams): Promise<CertificateGetResponse>;
    /**
     * Creates or updates the certificate being used for authentication with the backend.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param certificateId Identifier of the certificate entity. Must be unique in the current API
     *                      Management service instance.
     * @param parameters Create or Update parameters.
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName: string, serviceName: string, certificateId: string, parameters: CertificateCreateOrUpdateParameters, options?: CertificateCreateOrUpdateOptionalParams): Promise<CertificateCreateOrUpdateResponse>;
    /**
     * Deletes specific certificate.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param certificateId Identifier of the certificate entity. Must be unique in the current API
     *                      Management service instance.
     * @param ifMatch ETag of the Entity. ETag should match the current entity state from the header
     *                response of the GET request or it should be * for unconditional update.
     * @param options The options parameters.
     */
    delete(resourceGroupName: string, serviceName: string, certificateId: string, ifMatch: string, options?: CertificateDeleteOptionalParams): Promise<void>;
    /**
     * From KeyVault, Refresh the certificate being used for authentication with the backend.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param certificateId Identifier of the certificate entity. Must be unique in the current API
     *                      Management service instance.
     * @param options The options parameters.
     */
    refreshSecret(resourceGroupName: string, serviceName: string, certificateId: string, options?: CertificateRefreshSecretOptionalParams): Promise<CertificateRefreshSecretResponse>;
}

/** Paged Certificates list representation. */
export declare interface CertificateCollection {
    /** Page values. */
    value?: CertificateContract[];
    /** Total record count number across all pages. */
    count?: number;
    /** Next page link if any. */
    nextLink?: string;
}

/** Certificate configuration which consist of non-trusted intermediates and root certificates. */
export declare interface CertificateConfiguration {
    /** Base64 Encoded certificate. */
    encodedCertificate?: string;
    /** Certificate Password. */
    certificatePassword?: string;
    /** The System.Security.Cryptography.x509certificates.StoreName certificate store location. Only Root and CertificateAuthority are valid locations. */
    storeName: CertificateConfigurationStoreName;
    /** Certificate information. */
    certificate?: CertificateInformation;
}

/**
 * Defines values for CertificateConfigurationStoreName. \
 * {@link KnownCertificateConfigurationStoreName} can be used interchangeably with CertificateConfigurationStoreName,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **CertificateAuthority** \
 * **Root**
 */
export declare type CertificateConfigurationStoreName = string;

/** Certificate details. */
export declare interface CertificateContract extends Resource {
    /** Subject attribute of the certificate. */
    subject?: string;
    /** Thumbprint of the certificate. */
    thumbprint?: string;
    /**
     * Expiration date of the certificate. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard.
     *
     */
    expirationDate?: Date;
    /** KeyVault location details of the certificate. */
    keyVault?: KeyVaultContractProperties;
}

/** Defines headers for Certificate_createOrUpdate operation. */
export declare interface CertificateCreateOrUpdateHeaders {
    /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
    eTag?: string;
}

/** Optional parameters. */
export declare interface CertificateCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
    /** ETag of the Entity. Not required when creating an entity, but required when updating an entity. */
    ifMatch?: string;
}

/** Certificate create or update details. */
export declare interface CertificateCreateOrUpdateParameters {
    /** Base 64 encoded certificate using the application/x-pkcs12 representation. */
    data?: string;
    /** Password for the Certificate */
    password?: string;
    /** KeyVault location details of the certificate. */
    keyVault?: KeyVaultContractCreateProperties;
}

/** Contains response data for the createOrUpdate operation. */
export declare type CertificateCreateOrUpdateResponse = CertificateCreateOrUpdateHeaders & CertificateContract;

/** Optional parameters. */
export declare interface CertificateDeleteOptionalParams extends coreClient.OperationOptions {
}

/** Defines headers for Certificate_getEntityTag operation. */
export declare interface CertificateGetEntityTagHeaders {
    /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
    eTag?: string;
}

/** Optional parameters. */
export declare interface CertificateGetEntityTagOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the getEntityTag operation. */
export declare type CertificateGetEntityTagResponse = CertificateGetEntityTagHeaders;

/** Defines headers for Certificate_get operation. */
export declare interface CertificateGetHeaders {
    /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
    eTag?: string;
}

/** Optional parameters. */
export declare interface CertificateGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type CertificateGetResponse = CertificateGetHeaders & CertificateContract;

/** SSL certificate information. */
export declare interface CertificateInformation {
    /** Expiration date of the certificate. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard. */
    expiry: Date;
    /** Thumbprint of the certificate. */
    thumbprint: string;
    /** Subject of the certificate. */
    subject: string;
}

/** Optional parameters. */
export declare interface CertificateListByServiceNextOptionalParams extends coreClient.OperationOptions {
    /** |     Field     |     Usage     |     Supported operators     |     Supported functions     |</br>|-------------|-------------|-------------|-------------|</br>| name | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |</br>| subject | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |</br>| thumbprint | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |</br>| expirationDate | filter | ge, le, eq, ne, gt, lt |     |</br> */
    filter?: string;
    /** Number of records to return. */
    top?: number;
    /** Number of records to skip. */
    skip?: number;
    /** When set to true, the response contains only certificates entities which failed refresh. */
    isKeyVaultRefreshFailed?: boolean;
}

/** Contains response data for the listByServiceNext operation. */
export declare type CertificateListByServiceNextResponse = CertificateCollection;

/** Optional parameters. */
export declare interface CertificateListByServiceOptionalParams extends coreClient.OperationOptions {
    /** |     Field     |     Usage     |     Supported operators     |     Supported functions     |</br>|-------------|-------------|-------------|-------------|</br>| name | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |</br>| subject | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |</br>| thumbprint | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |</br>| expirationDate | filter | ge, le, eq, ne, gt, lt |     |</br> */
    filter?: string;
    /** Number of records to return. */
    top?: number;
    /** Number of records to skip. */
    skip?: number;
    /** When set to true, the response contains only certificates entities which failed refresh. */
    isKeyVaultRefreshFailed?: boolean;
}

/** Contains response data for the listByService operation. */
export declare type CertificateListByServiceResponse = CertificateCollection;

/** Defines headers for Certificate_refreshSecret operation. */
export declare interface CertificateRefreshSecretHeaders {
    /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
    eTag?: string;
}

/** Optional parameters. */
export declare interface CertificateRefreshSecretOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the refreshSecret operation. */
export declare type CertificateRefreshSecretResponse = CertificateRefreshSecretHeaders & CertificateContract;

/**
 * Defines values for CertificateSource. \
 * {@link KnownCertificateSource} can be used interchangeably with CertificateSource,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Managed** \
 * **KeyVault** \
 * **Custom** \
 * **BuiltIn**
 */
export declare type CertificateSource = string;

/**
 * Defines values for CertificateStatus. \
 * {@link KnownCertificateStatus} can be used interchangeably with CertificateStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Completed** \
 * **Failed** \
 * **InProgress**
 */
export declare type CertificateStatus = string;

/**
 * Defines values for ClientAuthenticationMethod. \
 * {@link KnownClientAuthenticationMethod} can be used interchangeably with ClientAuthenticationMethod,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Basic**: Basic Client Authentication method. \
 * **Body**: Body based Authentication method.
 */
export declare type ClientAuthenticationMethod = string;

/** Client or app secret used in IdentityProviders, Aad, OpenID or OAuth. */
export declare interface ClientSecretContract {
    /** Client or app secret used in IdentityProviders, Aad, OpenID or OAuth. */
    clientSecret?: string;
}

/**
 * Defines values for ConfigurationIdName. \
 * {@link KnownConfigurationIdName} can be used interchangeably with ConfigurationIdName,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **configuration**
 */
export declare type ConfigurationIdName = string;

/**
 * Defines values for Confirmation. \
 * {@link KnownConfirmation} can be used interchangeably with Confirmation,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **signup**: Send an e-mail to the user confirming they have successfully signed up. \
 * **invite**: Send an e-mail inviting the user to sign-up and complete registration.
 */
export declare type Confirmation = string;

/**
 * Defines values for ConnectionStatus. \
 * {@link KnownConnectionStatus} can be used interchangeably with ConnectionStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Unknown** \
 * **Connected** \
 * **Disconnected** \
 * **Degraded**
 */
export declare type ConnectionStatus = string;

/**
 * Defines values for ConnectivityCheckProtocol. \
 * {@link KnownConnectivityCheckProtocol} can be used interchangeably with ConnectivityCheckProtocol,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **TCP** \
 * **HTTP** \
 * **HTTPS**
 */
export declare type ConnectivityCheckProtocol = string;

/** A request to perform the connectivity check operation on a API Management service. */
export declare interface ConnectivityCheckRequest {
    /** Definitions about the connectivity check origin. */
    source: ConnectivityCheckRequestSource;
    /** The connectivity check operation destination. */
    destination: ConnectivityCheckRequestDestination;
    /** The IP version to be used. Only IPv4 is supported for now. */
    preferredIPVersion?: PreferredIPVersion;
    /** The request's protocol. Specific protocol configuration can be available based on this selection. The specified destination address must be coherent with this value. */
    protocol?: ConnectivityCheckProtocol;
    /** Protocol-specific configuration. */
    protocolConfiguration?: ConnectivityCheckRequestProtocolConfiguration;
}

/** The connectivity check operation destination. */
export declare interface ConnectivityCheckRequestDestination {
    /** Destination address. Can either be an IP address or a FQDN. */
    address: string;
    /** Destination port. */
    port: number;
}

/** Protocol-specific configuration. */
export declare interface ConnectivityCheckRequestProtocolConfiguration {
    /** Configuration for HTTP or HTTPS requests. */
    httpConfiguration?: ConnectivityCheckRequestProtocolConfigurationHttpConfiguration;
}

/** Configuration for HTTP or HTTPS requests. */
export declare interface ConnectivityCheckRequestProtocolConfigurationHttpConfiguration {
    /** The HTTP method to be used. */
    method?: Method;
    /** List of HTTP status codes considered valid for the request response. */
    validStatusCodes?: number[];
    /** List of headers to be included in the request. */
    headers?: HttpHeader[];
}

/** Definitions about the connectivity check origin. */
export declare interface ConnectivityCheckRequestSource {
    /** The API Management service region from where to start the connectivity check operation. */
    region: string;
    /** The particular VMSS instance from which to fire the request. */
    instance?: number;
}

/** Information on the connectivity status. */
export declare interface ConnectivityCheckResponse {
    /**
     * List of hops between the source and the destination.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly hops?: ConnectivityHop[];
    /**
     * The connection status.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly connectionStatus?: ConnectionStatus;
    /**
     * Average latency in milliseconds.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly avgLatencyInMs?: number;
    /**
     * Minimum latency in milliseconds.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly minLatencyInMs?: number;
    /**
     * Maximum latency in milliseconds.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly maxLatencyInMs?: number;
    /**
     * Total number of probes sent.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly probesSent?: number;
    /**
     * Number of failed probes.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly probesFailed?: number;
}

/** Information about a hop between the source and the destination. */
export declare interface ConnectivityHop {
    /**
     * The type of the hop.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly type?: string;
    /**
     * The ID of the hop.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly id?: string;
    /**
     * The IP address of the hop.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly address?: string;
    /**
     * The ID of the resource corresponding to this hop.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly resourceId?: string;
    /**
     * List of next hop identifiers.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextHopIds?: string[];
    /**
     * List of issues.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly issues?: ConnectivityIssue[];
}

/** Information about an issue encountered in the process of checking for connectivity. */
export declare interface ConnectivityIssue {
    /**
     * The origin of the issue.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly origin?: Origin;
    /**
     * The severity of the issue.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly severity?: Severity;
    /**
     * The type of issue.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly type?: IssueType;
    /**
     * Provides additional context on the issue.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly context?: {
        [propertyName: string]: string;
    }[];
}

/** Details about connectivity to a resource. */
export declare interface ConnectivityStatusContract {
    /** The hostname of the resource which the service depends on. This can be the database, storage or any other azure resource on which the service depends upon. */
    name: string;
    /** Resource Connectivity Status Type identifier. */
    status: ConnectivityStatusType;
    /** Error details of the connectivity to the resource. */
    error?: string;
    /**
     * The date when the resource connectivity status was last updated. This status should be updated every 15 minutes. If this status has not been updated, then it means that the service has lost network connectivity to the resource, from inside the Virtual Network.The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard.
     *
     */
    lastUpdated: Date;
    /**
     * The date when the resource connectivity status last Changed from success to failure or vice-versa. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard.
     *
     */
    lastStatusChange: Date;
    /** Resource Type. */
    resourceType: string;
    /** Whether this is optional. */
    isOptional: boolean;
}

/**
 * Defines values for ConnectivityStatusType. \
 * {@link KnownConnectivityStatusType} can be used interchangeably with ConnectivityStatusType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **initializing** \
 * **success** \
 * **failure**
 */
export declare type ConnectivityStatusType = string;

/**
 * Defines values for ContentFormat. \
 * {@link KnownContentFormat} can be used interchangeably with ContentFormat,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **wadl-xml**: The contents are inline and Content type is a WADL document. \
 * **wadl-link-json**: The WADL document is hosted on a publicly accessible internet address. \
 * **swagger-json**: The contents are inline and Content Type is a OpenAPI 2.0 JSON Document. \
 * **swagger-link-json**: The OpenAPI 2.0 JSON document is hosted on a publicly accessible internet address. \
 * **wsdl**: The contents are inline and the document is a WSDL\/Soap document. \
 * **wsdl-link**: The WSDL document is hosted on a publicly accessible internet address. \
 * **openapi**: The contents are inline and Content Type is a OpenAPI 3.0 YAML Document. \
 * **openapi+json**: The contents are inline and Content Type is a OpenAPI 3.0 JSON Document. \
 * **openapi-link**: The OpenAPI 3.0 YAML document is hosted on a publicly accessible internet address. \
 * **openapi+json-link**: The OpenAPI 3.0 JSON document is hosted on a publicly accessible internet address. \
 * **graphql-link**: The GraphQL API endpoint hosted on a publicly accessible internet address.
 */
export declare type ContentFormat = string;

/** Interface representing a ContentItem. */
export declare interface ContentItem {
    /**
     * Lists developer portal's content items specified by the provided content type.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param contentTypeId Content type identifier.
     * @param options The options parameters.
     */
    listByService(resourceGroupName: string, serviceName: string, contentTypeId: string, options?: ContentItemListByServiceOptionalParams): PagedAsyncIterableIterator<ContentItemContract>;
    /**
     * Returns the entity state (ETag) version of the developer portal's content item specified by its
     * identifier.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param contentTypeId Content type identifier.
     * @param contentItemId Content item identifier.
     * @param options The options parameters.
     */
    getEntityTag(resourceGroupName: string, serviceName: string, contentTypeId: string, contentItemId: string, options?: ContentItemGetEntityTagOptionalParams): Promise<ContentItemGetEntityTagResponse>;
    /**
     * Returns the developer portal's content item specified by its identifier.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param contentTypeId Content type identifier.
     * @param contentItemId Content item identifier.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, serviceName: string, contentTypeId: string, contentItemId: string, options?: ContentItemGetOptionalParams): Promise<ContentItemGetResponse>;
    /**
     * Creates a new developer portal's content item specified by the provided content type.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param contentTypeId Content type identifier.
     * @param contentItemId Content item identifier.
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName: string, serviceName: string, contentTypeId: string, contentItemId: string, options?: ContentItemCreateOrUpdateOptionalParams): Promise<ContentItemCreateOrUpdateResponse>;
    /**
     * Removes the specified developer portal's content item.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param contentTypeId Content type identifier.
     * @param contentItemId Content item identifier.
     * @param ifMatch ETag of the Entity. ETag should match the current entity state from the header
     *                response of the GET request or it should be * for unconditional update.
     * @param options The options parameters.
     */
    delete(resourceGroupName: string, serviceName: string, contentTypeId: string, contentItemId: string, ifMatch: string, options?: ContentItemDeleteOptionalParams): Promise<void>;
}

/** Paged list of content items. */
export declare interface ContentItemCollection {
    /**
     * Collection of content items.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly value?: ContentItemContract[];
    /**
     * Next page link, if any.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextLink?: string;
}

/** Content type contract details. */
export declare interface ContentItemContract extends Resource {
    /** Properties of the content item. */
    properties?: {
        [propertyName: string]: any;
    };
}

/** Defines headers for ContentItem_createOrUpdate operation. */
export declare interface ContentItemCreateOrUpdateHeaders {
    /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
    eTag?: string;
}

/** Optional parameters. */
export declare interface ContentItemCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
    /** ETag of the Entity. Not required when creating an entity, but required when updating an entity. */
    ifMatch?: string;
}

/** Contains response data for the createOrUpdate operation. */
export declare type ContentItemCreateOrUpdateResponse = ContentItemCreateOrUpdateHeaders & ContentItemContract;

/** Optional parameters. */
export declare interface ContentItemDeleteOptionalParams extends coreClient.OperationOptions {
}

/** Defines headers for ContentItem_getEntityTag operation. */
export declare interface ContentItemGetEntityTagHeaders {
    /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
    eTag?: string;
}

/** Optional parameters. */
export declare interface ContentItemGetEntityTagOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the getEntityTag operation. */
export declare type ContentItemGetEntityTagResponse = ContentItemGetEntityTagHeaders;

/** Defines headers for ContentItem_get operation. */
export declare interface ContentItemGetHeaders {
    /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
    eTag?: string;
}

/** Optional parameters. */
export declare interface ContentItemGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type ContentItemGetResponse = ContentItemGetHeaders & ContentItemContract;

/** Optional parameters. */
export declare interface ContentItemListByServiceNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByServiceNext operation. */
export declare type ContentItemListByServiceNextResponse = ContentItemCollection;

/** Optional parameters. */
export declare interface ContentItemListByServiceOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByService operation. */
export declare type ContentItemListByServiceResponse = ContentItemCollection;

/** Interface representing a ContentType. */
export declare interface ContentType {
    /**
     * Lists the developer portal's content types. Content types describe content items' properties,
     * validation rules, and constraints.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param options The options parameters.
     */
    listByService(resourceGroupName: string, serviceName: string, options?: ContentTypeListByServiceOptionalParams): PagedAsyncIterableIterator<ContentTypeContract>;
    /**
     * Gets the details of the developer portal's content type. Content types describe content items'
     * properties, validation rules, and constraints.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param contentTypeId Content type identifier.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, serviceName: string, contentTypeId: string, options?: ContentTypeGetOptionalParams): Promise<ContentTypeGetResponse>;
    /**
     * Creates or updates the developer portal's content type. Content types describe content items'
     * properties, validation rules, and constraints. Custom content types' identifiers need to start with
     * the `c-` prefix. Built-in content types can't be modified.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param contentTypeId Content type identifier.
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName: string, serviceName: string, contentTypeId: string, options?: ContentTypeCreateOrUpdateOptionalParams): Promise<ContentTypeCreateOrUpdateResponse>;
    /**
     * Removes the specified developer portal's content type. Content types describe content items'
     * properties, validation rules, and constraints. Built-in content types (with identifiers starting
     * with the `c-` prefix) can't be removed.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param contentTypeId Content type identifier.
     * @param ifMatch ETag of the Entity. ETag should match the current entity state from the header
     *                response of the GET request or it should be * for unconditional update.
     * @param options The options parameters.
     */
    delete(resourceGroupName: string, serviceName: string, contentTypeId: string, ifMatch: string, options?: ContentTypeDeleteOptionalParams): Promise<void>;
}

/** Paged list of content types. */
export declare interface ContentTypeCollection {
    /**
     * Collection of content types.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly value?: ContentTypeContract[];
    /**
     * Next page link, if any.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextLink?: string;
}

/** Content type contract details. */
export declare interface ContentTypeContract extends Resource {
    /** Content type identifier */
    idPropertiesId?: string;
    /** Content type name. Must be 1 to 250 characters long. */
    namePropertiesName?: string;
    /** Content type description. */
    description?: string;
    /** Content type schema. */
    schema?: Record<string, unknown>;
    /** Content type version. */
    version?: string;
}

/** Defines headers for ContentType_createOrUpdate operation. */
export declare interface ContentTypeCreateOrUpdateHeaders {
    /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
    eTag?: string;
}

/** Optional parameters. */
export declare interface ContentTypeCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
    /** ETag of the Entity. Not required when creating an entity, but required when updating an entity. */
    ifMatch?: string;
}

/** Contains response data for the createOrUpdate operation. */
export declare type ContentTypeCreateOrUpdateResponse = ContentTypeCreateOrUpdateHeaders & ContentTypeContract;

/** Optional parameters. */
export declare interface ContentTypeDeleteOptionalParams extends coreClient.OperationOptions {
}

/** Defines headers for ContentType_get operation. */
export declare interface ContentTypeGetHeaders {
    /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
    eTag?: string;
}

/** Optional parameters. */
export declare interface ContentTypeGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type ContentTypeGetResponse = ContentTypeGetHeaders & ContentTypeContract;

/** Optional parameters. */
export declare interface ContentTypeListByServiceNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByServiceNext operation. */
export declare type ContentTypeListByServiceNextResponse = ContentTypeCollection;

/** Optional parameters. */
export declare interface ContentTypeListByServiceOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByService operation. */
export declare type ContentTypeListByServiceResponse = ContentTypeCollection;

/**
 * Defines values for CreatedByType. \
 * {@link KnownCreatedByType} can be used interchangeably with CreatedByType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **User** \
 * **Application** \
 * **ManagedIdentity** \
 * **Key**
 */
export declare type CreatedByType = string;

export declare interface DataMasking {
    /** Masking settings for Url query parameters */
    queryParams?: DataMaskingEntity[];
    /** Masking settings for headers */
    headers?: DataMaskingEntity[];
}

export declare interface DataMaskingEntity {
    /** The name of an entity to mask (e.g. a name of a header or a query parameter). */
    value?: string;
    /** Data masking mode. */
    mode?: DataMaskingMode;
}

/**
 * Defines values for DataMaskingMode. \
 * {@link KnownDataMaskingMode} can be used interchangeably with DataMaskingMode,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Mask**: Mask the value of an entity. \
 * **Hide**: Hide the presence of an entity.
 */
export declare type DataMaskingMode = string;

/** Interface representing a DelegationSettings. */
export declare interface DelegationSettings {
    /**
     * Gets the entity state (Etag) version of the DelegationSettings.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param options The options parameters.
     */
    getEntityTag(resourceGroupName: string, serviceName: string, options?: DelegationSettingsGetEntityTagOptionalParams): Promise<DelegationSettingsGetEntityTagResponse>;
    /**
     * Get Delegation Settings for the Portal.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, serviceName: string, options?: DelegationSettingsGetOptionalParams): Promise<DelegationSettingsGetResponse>;
    /**
     * Update Delegation settings.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param ifMatch ETag of the Entity. ETag should match the current entity state from the header
     *                response of the GET request or it should be * for unconditional update.
     * @param parameters Update Delegation settings.
     * @param options The options parameters.
     */
    update(resourceGroupName: string, serviceName: string, ifMatch: string, parameters: PortalDelegationSettings, options?: DelegationSettingsUpdateOptionalParams): Promise<void>;
    /**
     * Create or Update Delegation settings.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param parameters Create or update parameters.
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName: string, serviceName: string, parameters: PortalDelegationSettings, options?: DelegationSettingsCreateOrUpdateOptionalParams): Promise<DelegationSettingsCreateOrUpdateResponse>;
    /**
     * Gets the secret validation key of the DelegationSettings.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param options The options parameters.
     */
    listSecrets(resourceGroupName: string, serviceName: string, options?: DelegationSettingsListSecretsOptionalParams): Promise<DelegationSettingsListSecretsResponse>;
}

/** Optional parameters. */
export declare interface DelegationSettingsCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
    /** ETag of the Entity. Not required when creating an entity, but required when updating an entity. */
    ifMatch?: string;
}

/** Contains response data for the createOrUpdate operation. */
export declare type DelegationSettingsCreateOrUpdateResponse = PortalDelegationSettings;

/** Defines headers for DelegationSettings_getEntityTag operation. */
export declare interface DelegationSettingsGetEntityTagHeaders {
    /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
    eTag?: string;
}

/** Optional parameters. */
export declare interface DelegationSettingsGetEntityTagOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the getEntityTag operation. */
export declare type DelegationSettingsGetEntityTagResponse = DelegationSettingsGetEntityTagHeaders;

/** Defines headers for DelegationSettings_get operation. */
export declare interface DelegationSettingsGetHeaders {
    /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
    eTag?: string;
}

/** Optional parameters. */
export declare interface DelegationSettingsGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type DelegationSettingsGetResponse = DelegationSettingsGetHeaders & PortalDelegationSettings;

/** Optional parameters. */
export declare interface DelegationSettingsListSecretsOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listSecrets operation. */
export declare type DelegationSettingsListSecretsResponse = PortalSettingValidationKeyContract;

/** Optional parameters. */
export declare interface DelegationSettingsUpdateOptionalParams extends coreClient.OperationOptions {
}

/** Deleted API Management Service information. */
export declare interface DeletedServiceContract extends Resource {
    /**
     * API Management Service Master Location.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly location?: string;
    /** Fully-qualified API Management Service Resource ID */
    serviceId?: string;
    /** UTC Date and Time when the service will be automatically purged. The date conforms to the following format: yyyy-MM-ddTHH:mm:ssZ as specified by the ISO 8601 standard. */
    scheduledPurgeDate?: Date;
    /** UTC Timestamp when the service was soft-deleted. The date conforms to the following format: yyyy-MM-ddTHH:mm:ssZ as specified by the ISO 8601 standard. */
    deletionDate?: Date;
}

/** Interface representing a DeletedServices. */
export declare interface DeletedServices {
    /**
     * Lists all soft-deleted services available for undelete for the given subscription.
     * @param options The options parameters.
     */
    listBySubscription(options?: DeletedServicesListBySubscriptionOptionalParams): PagedAsyncIterableIterator<DeletedServiceContract>;
    /**
     * Get soft-deleted Api Management Service by name.
     * @param serviceName The name of the API Management service.
     * @param location The location of the deleted API Management service.
     * @param options The options parameters.
     */
    getByName(serviceName: string, location: string, options?: DeletedServicesGetByNameOptionalParams): Promise<DeletedServicesGetByNameResponse>;
    /**
     * Purges Api Management Service (deletes it with no option to undelete).
     * @param serviceName The name of the API Management service.
     * @param location The location of the deleted API Management service.
     * @param options The options parameters.
     */
    beginPurge(serviceName: string, location: string, options?: DeletedServicesPurgeOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Purges Api Management Service (deletes it with no option to undelete).
     * @param serviceName The name of the API Management service.
     * @param location The location of the deleted API Management service.
     * @param options The options parameters.
     */
    beginPurgeAndWait(serviceName: string, location: string, options?: DeletedServicesPurgeOptionalParams): Promise<void>;
}

/** Paged deleted API Management Services List Representation. */
export declare interface DeletedServicesCollection {
    /**
     * Page values.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly value?: DeletedServiceContract[];
    /**
     * Next page link if any.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextLink?: string;
}

/** Optional parameters. */
export declare interface DeletedServicesGetByNameOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the getByName operation. */
export declare type DeletedServicesGetByNameResponse = DeletedServiceContract;

/** Optional parameters. */
export declare interface DeletedServicesListBySubscriptionNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listBySubscriptionNext operation. */
export declare type DeletedServicesListBySubscriptionNextResponse = DeletedServicesCollection;

/** Optional parameters. */
export declare interface DeletedServicesListBySubscriptionOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listBySubscription operation. */
export declare type DeletedServicesListBySubscriptionResponse = DeletedServicesCollection;

/** Optional parameters. */
export declare interface DeletedServicesPurgeOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Deploy Tenant Configuration Contract. */
export declare interface DeployConfigurationParameters {
    /** The name of the Git branch from which the configuration is to be deployed to the configuration database. */
    branch?: string;
    /** The value enforcing deleting subscriptions to products that are deleted in this update. */
    force?: boolean;
}

/** Interface representing a Diagnostic. */
export declare interface Diagnostic {
    /**
     * Lists all diagnostics of the API Management service instance.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param options The options parameters.
     */
    listByService(resourceGroupName: string, serviceName: string, options?: DiagnosticListByServiceOptionalParams): PagedAsyncIterableIterator<DiagnosticContract>;
    /**
     * Gets the entity state (Etag) version of the Diagnostic specified by its identifier.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param diagnosticId Diagnostic identifier. Must be unique in the current API Management service
     *                     instance.
     * @param options The options parameters.
     */
    getEntityTag(resourceGroupName: string, serviceName: string, diagnosticId: string, options?: DiagnosticGetEntityTagOptionalParams): Promise<DiagnosticGetEntityTagResponse>;
    /**
     * Gets the details of the Diagnostic specified by its identifier.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param diagnosticId Diagnostic identifier. Must be unique in the current API Management service
     *                     instance.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, serviceName: string, diagnosticId: string, options?: DiagnosticGetOptionalParams): Promise<DiagnosticGetResponse>;
    /**
     * Creates a new Diagnostic or updates an existing one.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param diagnosticId Diagnostic identifier. Must be unique in the current API Management service
     *                     instance.
     * @param parameters Create parameters.
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName: string, serviceName: string, diagnosticId: string, parameters: DiagnosticContract, options?: DiagnosticCreateOrUpdateOptionalParams): Promise<DiagnosticCreateOrUpdateResponse>;
    /**
     * Updates the details of the Diagnostic specified by its identifier.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param diagnosticId Diagnostic identifier. Must be unique in the current API Management service
     *                     instance.
     * @param ifMatch ETag of the Entity. ETag should match the current entity state from the header
     *                response of the GET request or it should be * for unconditional update.
     * @param parameters Diagnostic Update parameters.
     * @param options The options parameters.
     */
    update(resourceGroupName: string, serviceName: string, diagnosticId: string, ifMatch: string, parameters: DiagnosticContract, options?: DiagnosticUpdateOptionalParams): Promise<DiagnosticUpdateResponse>;
    /**
     * Deletes the specified Diagnostic.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param diagnosticId Diagnostic identifier. Must be unique in the current API Management service
     *                     instance.
     * @param ifMatch ETag of the Entity. ETag should match the current entity state from the header
     *                response of the GET request or it should be * for unconditional update.
     * @param options The options parameters.
     */
    delete(resourceGroupName: string, serviceName: string, diagnosticId: string, ifMatch: string, options?: DiagnosticDeleteOptionalParams): Promise<void>;
}

/** Paged Diagnostic list representation. */
export declare interface DiagnosticCollection {
    /** Page values. */
    value?: DiagnosticContract[];
    /** Total record count number across all pages. */
    count?: number;
    /** Next page link if any. */
    nextLink?: string;
}

/** Diagnostic details. */
export declare interface DiagnosticContract extends Resource {
    /** Specifies for what type of messages sampling settings should not apply. */
    alwaysLog?: AlwaysLog;
    /** Resource Id of a target logger. */
    loggerId?: string;
    /** Sampling settings for Diagnostic. */
    sampling?: SamplingSettings;
    /** Diagnostic settings for incoming/outgoing HTTP messages to the Gateway. */
    frontend?: PipelineDiagnosticSettings;
    /** Diagnostic settings for incoming/outgoing HTTP messages to the Backend */
    backend?: PipelineDiagnosticSettings;
    /** Log the ClientIP. Default is false. */
    logClientIp?: boolean;
    /** Sets correlation protocol to use for Application Insights diagnostics. */
    httpCorrelationProtocol?: HttpCorrelationProtocol;
    /** The verbosity level applied to traces emitted by trace policies. */
    verbosity?: Verbosity;
    /** The format of the Operation Name for Application Insights telemetries. Default is Name. */
    operationNameFormat?: OperationNameFormat;
}

/** Defines headers for Diagnostic_createOrUpdate operation. */
export declare interface DiagnosticCreateOrUpdateHeaders {
    /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
    eTag?: string;
}

/** Optional parameters. */
export declare interface DiagnosticCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
    /** ETag of the Entity. Not required when creating an entity, but required when updating an entity. */
    ifMatch?: string;
}

/** Contains response data for the createOrUpdate operation. */
export declare type DiagnosticCreateOrUpdateResponse = DiagnosticCreateOrUpdateHeaders & DiagnosticContract;

/** Optional parameters. */
export declare interface DiagnosticDeleteOptionalParams extends coreClient.OperationOptions {
}

/** Defines headers for Diagnostic_getEntityTag operation. */
export declare interface DiagnosticGetEntityTagHeaders {
    /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
    eTag?: string;
}

/** Optional parameters. */
export declare interface DiagnosticGetEntityTagOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the getEntityTag operation. */
export declare type DiagnosticGetEntityTagResponse = DiagnosticGetEntityTagHeaders;

/** Defines headers for Diagnostic_get operation. */
export declare interface DiagnosticGetHeaders {
    /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
    eTag?: string;
}

/** Optional parameters. */
export declare interface DiagnosticGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type DiagnosticGetResponse = DiagnosticGetHeaders & DiagnosticContract;

/** Optional parameters. */
export declare interface DiagnosticListByServiceNextOptionalParams extends coreClient.OperationOptions {
    /** |     Field     |     Usage     |     Supported operators     |     Supported functions     |</br>|-------------|-------------|-------------|-------------|</br>| name | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |</br> */
    filter?: string;
    /** Number of records to return. */
    top?: number;
    /** Number of records to skip. */
    skip?: number;
}

/** Contains response data for the listByServiceNext operation. */
export declare type DiagnosticListByServiceNextResponse = DiagnosticCollection;

/** Optional parameters. */
export declare interface DiagnosticListByServiceOptionalParams extends coreClient.OperationOptions {
    /** |     Field     |     Usage     |     Supported operators     |     Supported functions     |</br>|-------------|-------------|-------------|-------------|</br>| name | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |</br> */
    filter?: string;
    /** Number of records to return. */
    top?: number;
    /** Number of records to skip. */
    skip?: number;
}

/** Contains response data for the listByService operation. */
export declare type DiagnosticListByServiceResponse = DiagnosticCollection;

/** Defines headers for Diagnostic_update operation. */
export declare interface DiagnosticUpdateHeaders {
    /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
    eTag?: string;
}

/** Optional parameters. */
export declare interface DiagnosticUpdateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the update operation. */
export declare type DiagnosticUpdateResponse = DiagnosticUpdateHeaders & DiagnosticContract;

/** Interface representing a EmailTemplate. */
export declare interface EmailTemplate {
    /**
     * Gets all email templates
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param options The options parameters.
     */
    listByService(resourceGroupName: string, serviceName: string, options?: EmailTemplateListByServiceOptionalParams): PagedAsyncIterableIterator<EmailTemplateContract>;
    /**
     * Gets the entity state (Etag) version of the email template specified by its identifier.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param templateName Email Template Name Identifier.
     * @param options The options parameters.
     */
    getEntityTag(resourceGroupName: string, serviceName: string, templateName: TemplateName, options?: EmailTemplateGetEntityTagOptionalParams): Promise<EmailTemplateGetEntityTagResponse>;
    /**
     * Gets the details of the email template specified by its identifier.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param templateName Email Template Name Identifier.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, serviceName: string, templateName: TemplateName, options?: EmailTemplateGetOptionalParams): Promise<EmailTemplateGetResponse>;
    /**
     * Updates an Email Template.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param templateName Email Template Name Identifier.
     * @param parameters Email Template update parameters.
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName: string, serviceName: string, templateName: TemplateName, parameters: EmailTemplateUpdateParameters, options?: EmailTemplateCreateOrUpdateOptionalParams): Promise<EmailTemplateCreateOrUpdateResponse>;
    /**
     * Updates API Management email template
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param templateName Email Template Name Identifier.
     * @param ifMatch ETag of the Entity. ETag should match the current entity state from the header
     *                response of the GET request or it should be * for unconditional update.
     * @param parameters Update parameters.
     * @param options The options parameters.
     */
    update(resourceGroupName: string, serviceName: string, templateName: TemplateName, ifMatch: string, parameters: EmailTemplateUpdateParameters, options?: EmailTemplateUpdateOptionalParams): Promise<EmailTemplateUpdateResponse>;
    /**
     * Reset the Email Template to default template provided by the API Management service instance.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param templateName Email Template Name Identifier.
     * @param ifMatch ETag of the Entity. ETag should match the current entity state from the header
     *                response of the GET request or it should be * for unconditional update.
     * @param options The options parameters.
     */
    delete(resourceGroupName: string, serviceName: string, templateName: TemplateName, ifMatch: string, options?: EmailTemplateDeleteOptionalParams): Promise<void>;
}

/** Paged email template list representation. */
export declare interface EmailTemplateCollection {
    /** Page values. */
    value?: EmailTemplateContract[];
    /** Total record count number across all pages. */
    count?: number;
    /** Next page link if any. */
    nextLink?: string;
}

/** Email Template details. */
export declare interface EmailTemplateContract extends Resource {
    /** Subject of the Template. */
    subject?: string;
    /** Email Template Body. This should be a valid XDocument */
    body?: string;
    /** Title of the Template. */
    title?: string;
    /** Description of the Email Template. */
    description?: string;
    /**
     * Whether the template is the default template provided by API Management or has been edited.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly isDefault?: boolean;
    /** Email Template Parameter values. */
    parameters?: EmailTemplateParametersContractProperties[];
}

/** Optional parameters. */
export declare interface EmailTemplateCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
    /** ETag of the Entity. Not required when creating an entity, but required when updating an entity. */
    ifMatch?: string;
}

/** Contains response data for the createOrUpdate operation. */
export declare type EmailTemplateCreateOrUpdateResponse = EmailTemplateContract;

/** Optional parameters. */
export declare interface EmailTemplateDeleteOptionalParams extends coreClient.OperationOptions {
}

/** Defines headers for EmailTemplate_getEntityTag operation. */
export declare interface EmailTemplateGetEntityTagHeaders {
    /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
    eTag?: string;
}

/** Optional parameters. */
export declare interface EmailTemplateGetEntityTagOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the getEntityTag operation. */
export declare type EmailTemplateGetEntityTagResponse = EmailTemplateGetEntityTagHeaders;

/** Defines headers for EmailTemplate_get operation. */
export declare interface EmailTemplateGetHeaders {
    /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
    eTag?: string;
}

/** Optional parameters. */
export declare interface EmailTemplateGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type EmailTemplateGetResponse = EmailTemplateGetHeaders & EmailTemplateContract;

/** Optional parameters. */
export declare interface EmailTemplateListByServiceNextOptionalParams extends coreClient.OperationOptions {
    /** |     Field     |     Usage     |     Supported operators     |     Supported functions     |</br>|-------------|-------------|-------------|-------------|</br>| name | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |</br> */
    filter?: string;
    /** Number of records to return. */
    top?: number;
    /** Number of records to skip. */
    skip?: number;
}

/** Contains response data for the listByServiceNext operation. */
export declare type EmailTemplateListByServiceNextResponse = EmailTemplateCollection;

/** Optional parameters. */
export declare interface EmailTemplateListByServiceOptionalParams extends coreClient.OperationOptions {
    /** |     Field     |     Usage     |     Supported operators     |     Supported functions     |</br>|-------------|-------------|-------------|-------------|</br>| name | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |</br> */
    filter?: string;
    /** Number of records to return. */
    top?: number;
    /** Number of records to skip. */
    skip?: number;
}

/** Contains response data for the listByService operation. */
export declare type EmailTemplateListByServiceResponse = EmailTemplateCollection;

/** Email Template Parameter contract. */
export declare interface EmailTemplateParametersContractProperties {
    /** Template parameter name. */
    name?: string;
    /** Template parameter title. */
    title?: string;
    /** Template parameter description. */
    description?: string;
}

/** Defines headers for EmailTemplate_update operation. */
export declare interface EmailTemplateUpdateHeaders {
    /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
    eTag?: string;
}

/** Optional parameters. */
export declare interface EmailTemplateUpdateOptionalParams extends coreClient.OperationOptions {
}

/** Email Template update Parameters. */
export declare interface EmailTemplateUpdateParameters {
    /** Subject of the Template. */
    subject?: string;
    /** Title of the Template. */
    title?: string;
    /** Description of the Email Template. */
    description?: string;
    /** Email Template Body. This should be a valid XDocument */
    body?: string;
    /** Email Template Parameter values. */
    parameters?: EmailTemplateParametersContractProperties[];
}

/** Contains response data for the update operation. */
export declare type EmailTemplateUpdateResponse = EmailTemplateUpdateHeaders & EmailTemplateContract;

/** A domain name that a service is reached at. */
export declare interface EndpointDependency {
    /** The domain name of the dependency. */
    domainName?: string;
    /** The Ports used when connecting to DomainName. */
    endpointDetails?: EndpointDetail[];
}

/** Current TCP connectivity information from the Api Management Service to a single endpoint. */
export declare interface EndpointDetail {
    /** The port an endpoint is connected to. */
    port?: number;
    /** The region of the dependency. */
    region?: string;
}

/** Error Field contract. */
export declare interface ErrorFieldContract {
    /** Property level error code. */
    code?: string;
    /** Human-readable representation of property-level error. */
    message?: string;
    /** Property name. */
    target?: string;
}

/** Error Response. */
export declare interface ErrorResponse {
    /** Service-defined error code. This code serves as a sub-status for the HTTP error code specified in the response. */
    code?: string;
    /** Human-readable representation of the error. */
    message?: string;
    /** The list of invalid fields send in request, in case of validation error. */
    details?: ErrorFieldContract[];
}

/** Error Body contract. */
export declare interface ErrorResponseBody {
    /** Service-defined error code. This code serves as a sub-status for the HTTP error code specified in the response. */
    code?: string;
    /** Human-readable representation of the error. */
    message?: string;
    /** The list of invalid fields send in request, in case of validation error. */
    details?: ErrorFieldContract[];
}

/**
 * Defines values for ExportApi. \
 * {@link KnownExportApi} can be used interchangeably with ExportApi,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **true**
 */
export declare type ExportApi = string;

/**
 * Defines values for ExportFormat. \
 * {@link KnownExportFormat} can be used interchangeably with ExportFormat,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **swagger-link**: Export the Api Definition in OpenAPI 2.0 Specification as JSON document to the Storage Blob. \
 * **wsdl-link**: Export the Api Definition in WSDL Schema to Storage Blob. This is only supported for APIs of Type `soap` \
 * **wadl-link**: Export the Api Definition in WADL Schema to Storage Blob. \
 * **openapi-link**: Export the Api Definition in OpenAPI 3.0 Specification as YAML document to Storage Blob. \
 * **openapi+json-link**: Export the Api Definition in OpenAPI 3.0 Specification as JSON document to Storage Blob.
 */
export declare type ExportFormat = string;

/**
 * Defines values for ExportResultFormat. \
 * {@link KnownExportResultFormat} can be used interchangeably with ExportResultFormat,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **swagger-link-json**: The API Definition is exported in OpenAPI Specification 2.0 format to the Storage Blob. \
 * **wsdl-link+xml**: The API Definition is exported in WSDL Schema to Storage Blob. This is only supported for APIs of Type `soap` \
 * **wadl-link-json**: Export the API Definition in WADL Schema to Storage Blob. \
 * **openapi-link**: Export the API Definition in OpenAPI Specification 3.0 to Storage Blob.
 */
export declare type ExportResultFormat = string;

/** Interface representing a Gateway. */
export declare interface Gateway {
    /**
     * Lists a collection of gateways registered with service instance.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param options The options parameters.
     */
    listByService(resourceGroupName: string, serviceName: string, options?: GatewayListByServiceOptionalParams): PagedAsyncIterableIterator<GatewayContract>;
    /**
     * Gets the entity state (Etag) version of the Gateway specified by its identifier.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param gatewayId Gateway entity identifier. Must be unique in the current API Management service
     *                  instance. Must not have value 'managed'
     * @param options The options parameters.
     */
    getEntityTag(resourceGroupName: string, serviceName: string, gatewayId: string, options?: GatewayGetEntityTagOptionalParams): Promise<GatewayGetEntityTagResponse>;
    /**
     * Gets the details of the Gateway specified by its identifier.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param gatewayId Gateway entity identifier. Must be unique in the current API Management service
     *                  instance. Must not have value 'managed'
     * @param options The options parameters.
     */
    get(resourceGroupName: string, serviceName: string, gatewayId: string, options?: GatewayGetOptionalParams): Promise<GatewayGetResponse>;
    /**
     * Creates or updates a Gateway to be used in Api Management instance.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param gatewayId Gateway entity identifier. Must be unique in the current API Management service
     *                  instance. Must not have value 'managed'
     * @param parameters Gateway details.
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName: string, serviceName: string, gatewayId: string, parameters: GatewayContract, options?: GatewayCreateOrUpdateOptionalParams): Promise<GatewayCreateOrUpdateResponse>;
    /**
     * Updates the details of the gateway specified by its identifier.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param gatewayId Gateway entity identifier. Must be unique in the current API Management service
     *                  instance. Must not have value 'managed'
     * @param ifMatch ETag of the Entity. ETag should match the current entity state from the header
     *                response of the GET request or it should be * for unconditional update.
     * @param parameters Gateway details.
     * @param options The options parameters.
     */
    update(resourceGroupName: string, serviceName: string, gatewayId: string, ifMatch: string, parameters: GatewayContract, options?: GatewayUpdateOptionalParams): Promise<GatewayUpdateResponse>;
    /**
     * Deletes specific Gateway.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param gatewayId Gateway entity identifier. Must be unique in the current API Management service
     *                  instance. Must not have value 'managed'
     * @param ifMatch ETag of the Entity. ETag should match the current entity state from the header
     *                response of the GET request or it should be * for unconditional update.
     * @param options The options parameters.
     */
    delete(resourceGroupName: string, serviceName: string, gatewayId: string, ifMatch: string, options?: GatewayDeleteOptionalParams): Promise<void>;
    /**
     * Retrieves gateway keys.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param gatewayId Gateway entity identifier. Must be unique in the current API Management service
     *                  instance. Must not have value 'managed'
     * @param options The options parameters.
     */
    listKeys(resourceGroupName: string, serviceName: string, gatewayId: string, options?: GatewayListKeysOptionalParams): Promise<GatewayListKeysResponse>;
    /**
     * Regenerates specified gateway key invalidating any tokens created with it.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param gatewayId Gateway entity identifier. Must be unique in the current API Management service
     *                  instance. Must not have value 'managed'
     * @param parameters Gateway key regeneration request contract properties.
     * @param options The options parameters.
     */
    regenerateKey(resourceGroupName: string, serviceName: string, gatewayId: string, parameters: GatewayKeyRegenerationRequestContract, options?: GatewayRegenerateKeyOptionalParams): Promise<void>;
    /**
     * Gets the Shared Access Authorization Token for the gateway.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param gatewayId Gateway entity identifier. Must be unique in the current API Management service
     *                  instance. Must not have value 'managed'
     * @param parameters Gateway token request contract properties.
     * @param options The options parameters.
     */
    generateToken(resourceGroupName: string, serviceName: string, gatewayId: string, parameters: GatewayTokenRequestContract, options?: GatewayGenerateTokenOptionalParams): Promise<GatewayGenerateTokenResponse>;
}

/** Interface representing a GatewayApi. */
export declare interface GatewayApi {
    /**
     * Lists a collection of the APIs associated with a gateway.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param gatewayId Gateway entity identifier. Must be unique in the current API Management service
     *                  instance. Must not have value 'managed'
     * @param options The options parameters.
     */
    listByService(resourceGroupName: string, serviceName: string, gatewayId: string, options?: GatewayApiListByServiceOptionalParams): PagedAsyncIterableIterator<ApiContract>;
    /**
     * Checks that API entity specified by identifier is associated with the Gateway entity.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param gatewayId Gateway entity identifier. Must be unique in the current API Management service
     *                  instance. Must not have value 'managed'
     * @param apiId API identifier. Must be unique in the current API Management service instance.
     * @param options The options parameters.
     */
    getEntityTag(resourceGroupName: string, serviceName: string, gatewayId: string, apiId: string, options?: GatewayApiGetEntityTagOptionalParams): Promise<GatewayApiGetEntityTagResponse>;
    /**
     * Adds an API to the specified Gateway.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param gatewayId Gateway entity identifier. Must be unique in the current API Management service
     *                  instance. Must not have value 'managed'
     * @param apiId API identifier. Must be unique in the current API Management service instance.
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName: string, serviceName: string, gatewayId: string, apiId: string, options?: GatewayApiCreateOrUpdateOptionalParams): Promise<GatewayApiCreateOrUpdateResponse>;
    /**
     * Deletes the specified API from the specified Gateway.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param gatewayId Gateway entity identifier. Must be unique in the current API Management service
     *                  instance. Must not have value 'managed'
     * @param apiId API identifier. Must be unique in the current API Management service instance.
     * @param options The options parameters.
     */
    delete(resourceGroupName: string, serviceName: string, gatewayId: string, apiId: string, options?: GatewayApiDeleteOptionalParams): Promise<void>;
}

/** Optional parameters. */
export declare interface GatewayApiCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
    /** Association entity details. */
    parameters?: AssociationContract;
}

/** Contains response data for the createOrUpdate operation. */
export declare type GatewayApiCreateOrUpdateResponse = ApiContract;

/** Optional parameters. */
export declare interface GatewayApiDeleteOptionalParams extends coreClient.OperationOptions {
}

/** Defines headers for GatewayApi_getEntityTag operation. */
export declare interface GatewayApiGetEntityTagHeaders {
    /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
    eTag?: string;
}

/** Optional parameters. */
export declare interface GatewayApiGetEntityTagOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the getEntityTag operation. */
export declare type GatewayApiGetEntityTagResponse = GatewayApiGetEntityTagHeaders;

/** Optional parameters. */
export declare interface GatewayApiListByServiceNextOptionalParams extends coreClient.OperationOptions {
    /** |     Field     |     Usage     |     Supported operators     |     Supported functions     |</br>|-------------|-------------|-------------|-------------|</br>| name | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |</br> */
    filter?: string;
    /** Number of records to return. */
    top?: number;
    /** Number of records to skip. */
    skip?: number;
}

/** Contains response data for the listByServiceNext operation. */
export declare type GatewayApiListByServiceNextResponse = ApiCollection;

/** Optional parameters. */
export declare interface GatewayApiListByServiceOptionalParams extends coreClient.OperationOptions {
    /** |     Field     |     Usage     |     Supported operators     |     Supported functions     |</br>|-------------|-------------|-------------|-------------|</br>| name | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |</br> */
    filter?: string;
    /** Number of records to return. */
    top?: number;
    /** Number of records to skip. */
    skip?: number;
}

/** Contains response data for the listByService operation. */
export declare type GatewayApiListByServiceResponse = ApiCollection;

/** Interface representing a GatewayCertificateAuthority. */
export declare interface GatewayCertificateAuthority {
    /**
     * Lists the collection of Certificate Authorities for the specified Gateway entity.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param gatewayId Gateway entity identifier. Must be unique in the current API Management service
     *                  instance. Must not have value 'managed'
     * @param options The options parameters.
     */
    listByService(resourceGroupName: string, serviceName: string, gatewayId: string, options?: GatewayCertificateAuthorityListByServiceOptionalParams): PagedAsyncIterableIterator<GatewayCertificateAuthorityContract>;
    /**
     * Checks if Certificate entity is assigned to Gateway entity as Certificate Authority.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param gatewayId Gateway entity identifier. Must be unique in the current API Management service
     *                  instance. Must not have value 'managed'
     * @param certificateId Identifier of the certificate entity. Must be unique in the current API
     *                      Management service instance.
     * @param options The options parameters.
     */
    getEntityTag(resourceGroupName: string, serviceName: string, gatewayId: string, certificateId: string, options?: GatewayCertificateAuthorityGetEntityTagOptionalParams): Promise<GatewayCertificateAuthorityGetEntityTagResponse>;
    /**
     * Get assigned Gateway Certificate Authority details.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param gatewayId Gateway entity identifier. Must be unique in the current API Management service
     *                  instance. Must not have value 'managed'
     * @param certificateId Identifier of the certificate entity. Must be unique in the current API
     *                      Management service instance.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, serviceName: string, gatewayId: string, certificateId: string, options?: GatewayCertificateAuthorityGetOptionalParams): Promise<GatewayCertificateAuthorityGetResponse>;
    /**
     * Assign Certificate entity to Gateway entity as Certificate Authority.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param gatewayId Gateway entity identifier. Must be unique in the current API Management service
     *                  instance. Must not have value 'managed'
     * @param certificateId Identifier of the certificate entity. Must be unique in the current API
     *                      Management service instance.
     * @param parameters Gateway certificate authority details.
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName: string, serviceName: string, gatewayId: string, certificateId: string, parameters: GatewayCertificateAuthorityContract, options?: GatewayCertificateAuthorityCreateOrUpdateOptionalParams): Promise<GatewayCertificateAuthorityCreateOrUpdateResponse>;
    /**
     * Remove relationship between Certificate Authority and Gateway entity.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param gatewayId Gateway entity identifier. Must be unique in the current API Management service
     *                  instance. Must not have value 'managed'
     * @param certificateId Identifier of the certificate entity. Must be unique in the current API
     *                      Management service instance.
     * @param ifMatch ETag of the Entity. ETag should match the current entity state from the header
     *                response of the GET request or it should be * for unconditional update.
     * @param options The options parameters.
     */
    delete(resourceGroupName: string, serviceName: string, gatewayId: string, certificateId: string, ifMatch: string, options?: GatewayCertificateAuthorityDeleteOptionalParams): Promise<void>;
}

/** Paged Gateway certificate authority list representation. */
export declare interface GatewayCertificateAuthorityCollection {
    /**
     * Page values.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly value?: GatewayCertificateAuthorityContract[];
    /**
     * Next page link if any.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextLink?: string;
}

/** Gateway certificate authority details. */
export declare interface GatewayCertificateAuthorityContract extends Resource {
    /** Determines whether certificate authority is trusted. */
    isTrusted?: boolean;
}

/** Defines headers for GatewayCertificateAuthority_createOrUpdate operation. */
export declare interface GatewayCertificateAuthorityCreateOrUpdateHeaders {
    /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
    eTag?: string;
}

/** Optional parameters. */
export declare interface GatewayCertificateAuthorityCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
    /** ETag of the Entity. Not required when creating an entity, but required when updating an entity. */
    ifMatch?: string;
}

/** Contains response data for the createOrUpdate operation. */
export declare type GatewayCertificateAuthorityCreateOrUpdateResponse = GatewayCertificateAuthorityCreateOrUpdateHeaders & GatewayCertificateAuthorityContract;

/** Optional parameters. */
export declare interface GatewayCertificateAuthorityDeleteOptionalParams extends coreClient.OperationOptions {
}

/** Defines headers for GatewayCertificateAuthority_getEntityTag operation. */
export declare interface GatewayCertificateAuthorityGetEntityTagHeaders {
    /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
    eTag?: string;
}

/** Optional parameters. */
export declare interface GatewayCertificateAuthorityGetEntityTagOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the getEntityTag operation. */
export declare type GatewayCertificateAuthorityGetEntityTagResponse = GatewayCertificateAuthorityGetEntityTagHeaders;

/** Defines headers for GatewayCertificateAuthority_get operation. */
export declare interface GatewayCertificateAuthorityGetHeaders {
    /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
    eTag?: string;
}

/** Optional parameters. */
export declare interface GatewayCertificateAuthorityGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type GatewayCertificateAuthorityGetResponse = GatewayCertificateAuthorityGetHeaders & GatewayCertificateAuthorityContract;

/** Optional parameters. */
export declare interface GatewayCertificateAuthorityListByServiceNextOptionalParams extends coreClient.OperationOptions {
    /** |     Field     |     Usage     |     Supported operators     |     Supported functions     |</br>|-------------|-------------|-------------|-------------|</br>| name | filter | eq, ne |  |</br> */
    filter?: string;
    /** Number of records to return. */
    top?: number;
    /** Number of records to skip. */
    skip?: number;
}

/** Contains response data for the listByServiceNext operation. */
export declare type GatewayCertificateAuthorityListByServiceNextResponse = GatewayCertificateAuthorityCollection;

/** Optional parameters. */
export declare interface GatewayCertificateAuthorityListByServiceOptionalParams extends coreClient.OperationOptions {
    /** |     Field     |     Usage     |     Supported operators     |     Supported functions     |</br>|-------------|-------------|-------------|-------------|</br>| name | filter | eq, ne |  |</br> */
    filter?: string;
    /** Number of records to return. */
    top?: number;
    /** Number of records to skip. */
    skip?: number;
}

/** Contains response data for the listByService operation. */
export declare type GatewayCertificateAuthorityListByServiceResponse = GatewayCertificateAuthorityCollection;

/** Paged Gateway list representation. */
export declare interface GatewayCollection {
    /**
     * Page values.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly value?: GatewayContract[];
    /** Total record count number across all pages. */
    count?: number;
    /**
     * Next page link if any.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextLink?: string;
}

/** Gateway details. */
export declare interface GatewayContract extends Resource {
    /** Gateway location. */
    locationData?: ResourceLocationDataContract;
    /** Gateway description */
    description?: string;
}

/** Defines headers for Gateway_createOrUpdate operation. */
export declare interface GatewayCreateOrUpdateHeaders {
    /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
    eTag?: string;
}

/** Optional parameters. */
export declare interface GatewayCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
    /** ETag of the Entity. Not required when creating an entity, but required when updating an entity. */
    ifMatch?: string;
}

/** Contains response data for the createOrUpdate operation. */
export declare type GatewayCreateOrUpdateResponse = GatewayCreateOrUpdateHeaders & GatewayContract;

/** Optional parameters. */
export declare interface GatewayDeleteOptionalParams extends coreClient.OperationOptions {
}

/** Optional parameters. */
export declare interface GatewayGenerateTokenOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the generateToken operation. */
export declare type GatewayGenerateTokenResponse = GatewayTokenContract;

/** Defines headers for Gateway_getEntityTag operation. */
export declare interface GatewayGetEntityTagHeaders {
    /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
    eTag?: string;
}

/** Optional parameters. */
export declare interface GatewayGetEntityTagOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the getEntityTag operation. */
export declare type GatewayGetEntityTagResponse = GatewayGetEntityTagHeaders;

/** Defines headers for Gateway_get operation. */
export declare interface GatewayGetHeaders {
    /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
    eTag?: string;
}

/** Optional parameters. */
export declare interface GatewayGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type GatewayGetResponse = GatewayGetHeaders & GatewayContract;

/** Interface representing a GatewayHostnameConfiguration. */
export declare interface GatewayHostnameConfiguration {
    /**
     * Lists the collection of hostname configurations for the specified gateway.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param gatewayId Gateway entity identifier. Must be unique in the current API Management service
     *                  instance. Must not have value 'managed'
     * @param options The options parameters.
     */
    listByService(resourceGroupName: string, serviceName: string, gatewayId: string, options?: GatewayHostnameConfigurationListByServiceOptionalParams): PagedAsyncIterableIterator<GatewayHostnameConfigurationContract>;
    /**
     * Checks that hostname configuration entity specified by identifier exists for specified Gateway
     * entity.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param gatewayId Gateway entity identifier. Must be unique in the current API Management service
     *                  instance. Must not have value 'managed'
     * @param hcId Gateway hostname configuration identifier. Must be unique in the scope of parent Gateway
     *             entity.
     * @param options The options parameters.
     */
    getEntityTag(resourceGroupName: string, serviceName: string, gatewayId: string, hcId: string, options?: GatewayHostnameConfigurationGetEntityTagOptionalParams): Promise<GatewayHostnameConfigurationGetEntityTagResponse>;
    /**
     * Get details of a hostname configuration
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param gatewayId Gateway entity identifier. Must be unique in the current API Management service
     *                  instance. Must not have value 'managed'
     * @param hcId Gateway hostname configuration identifier. Must be unique in the scope of parent Gateway
     *             entity.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, serviceName: string, gatewayId: string, hcId: string, options?: GatewayHostnameConfigurationGetOptionalParams): Promise<GatewayHostnameConfigurationGetResponse>;
    /**
     * Creates of updates hostname configuration for a Gateway.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param gatewayId Gateway entity identifier. Must be unique in the current API Management service
     *                  instance. Must not have value 'managed'
     * @param hcId Gateway hostname configuration identifier. Must be unique in the scope of parent Gateway
     *             entity.
     * @param parameters Gateway hostname configuration details.
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName: string, serviceName: string, gatewayId: string, hcId: string, parameters: GatewayHostnameConfigurationContract, options?: GatewayHostnameConfigurationCreateOrUpdateOptionalParams): Promise<GatewayHostnameConfigurationCreateOrUpdateResponse>;
    /**
     * Deletes the specified hostname configuration from the specified Gateway.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param gatewayId Gateway entity identifier. Must be unique in the current API Management service
     *                  instance. Must not have value 'managed'
     * @param hcId Gateway hostname configuration identifier. Must be unique in the scope of parent Gateway
     *             entity.
     * @param ifMatch ETag of the Entity. ETag should match the current entity state from the header
     *                response of the GET request or it should be * for unconditional update.
     * @param options The options parameters.
     */
    delete(resourceGroupName: string, serviceName: string, gatewayId: string, hcId: string, ifMatch: string, options?: GatewayHostnameConfigurationDeleteOptionalParams): Promise<void>;
}

/** Paged Gateway hostname configuration list representation. */
export declare interface GatewayHostnameConfigurationCollection {
    /**
     * Page values.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly value?: GatewayHostnameConfigurationContract[];
    /**
     * Next page link if any.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextLink?: string;
}

/** Gateway hostname configuration details. */
export declare interface GatewayHostnameConfigurationContract extends Resource {
    /** Hostname value. Supports valid domain name, partial or full wildcard */
    hostname?: string;
    /** Identifier of Certificate entity that will be used for TLS connection establishment */
    certificateId?: string;
    /** Determines whether gateway requests client certificate */
    negotiateClientCertificate?: boolean;
    /** Specifies if TLS 1.0 is supported */
    tls10Enabled?: boolean;
    /** Specifies if TLS 1.1 is supported */
    tls11Enabled?: boolean;
    /** Specifies if HTTP/2.0 is supported */
    http2Enabled?: boolean;
}

/** Defines headers for GatewayHostnameConfiguration_createOrUpdate operation. */
export declare interface GatewayHostnameConfigurationCreateOrUpdateHeaders {
    /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
    eTag?: string;
}

/** Optional parameters. */
export declare interface GatewayHostnameConfigurationCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
    /** ETag of the Entity. Not required when creating an entity, but required when updating an entity. */
    ifMatch?: string;
}

/** Contains response data for the createOrUpdate operation. */
export declare type GatewayHostnameConfigurationCreateOrUpdateResponse = GatewayHostnameConfigurationCreateOrUpdateHeaders & GatewayHostnameConfigurationContract;

/** Optional parameters. */
export declare interface GatewayHostnameConfigurationDeleteOptionalParams extends coreClient.OperationOptions {
}

/** Defines headers for GatewayHostnameConfiguration_getEntityTag operation. */
export declare interface GatewayHostnameConfigurationGetEntityTagHeaders {
    /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
    eTag?: string;
}

/** Optional parameters. */
export declare interface GatewayHostnameConfigurationGetEntityTagOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the getEntityTag operation. */
export declare type GatewayHostnameConfigurationGetEntityTagResponse = GatewayHostnameConfigurationGetEntityTagHeaders;

/** Defines headers for GatewayHostnameConfiguration_get operation. */
export declare interface GatewayHostnameConfigurationGetHeaders {
    /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
    eTag?: string;
}

/** Optional parameters. */
export declare interface GatewayHostnameConfigurationGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type GatewayHostnameConfigurationGetResponse = GatewayHostnameConfigurationGetHeaders & GatewayHostnameConfigurationContract;

/** Optional parameters. */
export declare interface GatewayHostnameConfigurationListByServiceNextOptionalParams extends coreClient.OperationOptions {
    /** |     Field     |     Usage     |     Supported operators     |     Supported functions     |</br>|-------------|-------------|-------------|-------------|</br>| name | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |</br>| hostname | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |</br> */
    filter?: string;
    /** Number of records to return. */
    top?: number;
    /** Number of records to skip. */
    skip?: number;
}

/** Contains response data for the listByServiceNext operation. */
export declare type GatewayHostnameConfigurationListByServiceNextResponse = GatewayHostnameConfigurationCollection;

/** Optional parameters. */
export declare interface GatewayHostnameConfigurationListByServiceOptionalParams extends coreClient.OperationOptions {
    /** |     Field     |     Usage     |     Supported operators     |     Supported functions     |</br>|-------------|-------------|-------------|-------------|</br>| name | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |</br>| hostname | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |</br> */
    filter?: string;
    /** Number of records to return. */
    top?: number;
    /** Number of records to skip. */
    skip?: number;
}

/** Contains response data for the listByService operation. */
export declare type GatewayHostnameConfigurationListByServiceResponse = GatewayHostnameConfigurationCollection;

/** Gateway key regeneration request contract properties. */
export declare interface GatewayKeyRegenerationRequestContract {
    /** The Key being regenerated. */
    keyType: KeyType_2;
}

/** Gateway authentication keys. */
export declare interface GatewayKeysContract {
    /** Primary gateway key. */
    primary?: string;
    /** Secondary gateway key. */
    secondary?: string;
}

/** Optional parameters. */
export declare interface GatewayListByServiceNextOptionalParams extends coreClient.OperationOptions {
    /** |     Field     |     Usage     |     Supported operators     |     Supported functions     |</br>|-------------|-------------|-------------|-------------|</br>| name | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |</br>| region | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |</br>| description | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |</br> */
    filter?: string;
    /** Number of records to return. */
    top?: number;
    /** Number of records to skip. */
    skip?: number;
}

/** Contains response data for the listByServiceNext operation. */
export declare type GatewayListByServiceNextResponse = GatewayCollection;

/** Optional parameters. */
export declare interface GatewayListByServiceOptionalParams extends coreClient.OperationOptions {
    /** |     Field     |     Usage     |     Supported operators     |     Supported functions     |</br>|-------------|-------------|-------------|-------------|</br>| name | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |</br>| region | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |</br>| description | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |</br> */
    filter?: string;
    /** Number of records to return. */
    top?: number;
    /** Number of records to skip. */
    skip?: number;
}

/** Contains response data for the listByService operation. */
export declare type GatewayListByServiceResponse = GatewayCollection;

/** Defines headers for Gateway_listKeys operation. */
export declare interface GatewayListKeysHeaders {
    /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
    eTag?: string;
}

/** Optional parameters. */
export declare interface GatewayListKeysOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listKeys operation. */
export declare type GatewayListKeysResponse = GatewayListKeysHeaders & GatewayKeysContract;

/** Optional parameters. */
export declare interface GatewayRegenerateKeyOptionalParams extends coreClient.OperationOptions {
}

/** Gateway access token. */
export declare interface GatewayTokenContract {
    /** Shared Access Authentication token value for the Gateway. */
    value?: string;
}

/** Gateway token request contract properties. */
export declare interface GatewayTokenRequestContract {
    /** The Key to be used to generate gateway token. */
    keyType: KeyType_2;
    /**
     * The Expiry time of the Token. Maximum token expiry time is set to 30 days. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard.
     *
     */
    expiry: Date;
}

/** Defines headers for Gateway_update operation. */
export declare interface GatewayUpdateHeaders {
    /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
    eTag?: string;
}

/** Optional parameters. */
export declare interface GatewayUpdateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the update operation. */
export declare type GatewayUpdateResponse = GatewayUpdateHeaders & GatewayContract;

/** Generate SSO Url operations response details. */
export declare interface GenerateSsoUrlResult {
    /** Redirect Url containing the SSO URL value. */
    value?: string;
}

/**
 * Defines values for GrantType. \
 * {@link KnownGrantType} can be used interchangeably with GrantType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **authorizationCode**: Authorization Code Grant flow as described https:\/\/tools.ietf.org\/html\/rfc6749#section-4.1. \
 * **implicit**: Implicit Code Grant flow as described https:\/\/tools.ietf.org\/html\/rfc6749#section-4.2. \
 * **resourceOwnerPassword**: Resource Owner Password Grant flow as described https:\/\/tools.ietf.org\/html\/rfc6749#section-4.3. \
 * **clientCredentials**: Client Credentials Grant flow as described https:\/\/tools.ietf.org\/html\/rfc6749#section-4.4.
 */
export declare type GrantType = string;

/** Interface representing a Group. */
export declare interface Group {
    /**
     * Lists a collection of groups defined within a service instance.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param options The options parameters.
     */
    listByService(resourceGroupName: string, serviceName: string, options?: GroupListByServiceOptionalParams): PagedAsyncIterableIterator<GroupContract>;
    /**
     * Gets the entity state (Etag) version of the group specified by its identifier.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param groupId Group identifier. Must be unique in the current API Management service instance.
     * @param options The options parameters.
     */
    getEntityTag(resourceGroupName: string, serviceName: string, groupId: string, options?: GroupGetEntityTagOptionalParams): Promise<GroupGetEntityTagResponse>;
    /**
     * Gets the details of the group specified by its identifier.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param groupId Group identifier. Must be unique in the current API Management service instance.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, serviceName: string, groupId: string, options?: GroupGetOptionalParams): Promise<GroupGetResponse>;
    /**
     * Creates or Updates a group.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param groupId Group identifier. Must be unique in the current API Management service instance.
     * @param parameters Create parameters.
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName: string, serviceName: string, groupId: string, parameters: GroupCreateParameters, options?: GroupCreateOrUpdateOptionalParams): Promise<GroupCreateOrUpdateResponse>;
    /**
     * Updates the details of the group specified by its identifier.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param groupId Group identifier. Must be unique in the current API Management service instance.
     * @param ifMatch ETag of the Entity. ETag should match the current entity state from the header
     *                response of the GET request or it should be * for unconditional update.
     * @param parameters Update parameters.
     * @param options The options parameters.
     */
    update(resourceGroupName: string, serviceName: string, groupId: string, ifMatch: string, parameters: GroupUpdateParameters, options?: GroupUpdateOptionalParams): Promise<GroupUpdateResponse>;
    /**
     * Deletes specific group of the API Management service instance.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param groupId Group identifier. Must be unique in the current API Management service instance.
     * @param ifMatch ETag of the Entity. ETag should match the current entity state from the header
     *                response of the GET request or it should be * for unconditional update.
     * @param options The options parameters.
     */
    delete(resourceGroupName: string, serviceName: string, groupId: string, ifMatch: string, options?: GroupDeleteOptionalParams): Promise<void>;
}

/** Paged Group list representation. */
export declare interface GroupCollection {
    /** Page values. */
    value?: GroupContract[];
    /** Total record count number across all pages. */
    count?: number;
    /** Next page link if any. */
    nextLink?: string;
}

/** Contract details. */
export declare interface GroupContract extends Resource {
    /** Group name. */
    displayName?: string;
    /** Group description. Can contain HTML formatting tags. */
    description?: string;
    /**
     * true if the group is one of the three system groups (Administrators, Developers, or Guests); otherwise false.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly builtIn?: boolean;
    /** Group type. */
    typePropertiesType?: GroupType;
    /** For external groups, this property contains the id of the group from the external identity provider, e.g. for Azure Active Directory `aad://<tenant>.onmicrosoft.com/groups/<group object id>`; otherwise the value is null. */
    externalId?: string;
}

/** Group contract Properties. */
export declare interface GroupContractProperties {
    /** Group name. */
    displayName: string;
    /** Group description. Can contain HTML formatting tags. */
    description?: string;
    /**
     * true if the group is one of the three system groups (Administrators, Developers, or Guests); otherwise false.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly builtIn?: boolean;
    /** Group type. */
    type?: GroupType;
    /** For external groups, this property contains the id of the group from the external identity provider, e.g. for Azure Active Directory `aad://<tenant>.onmicrosoft.com/groups/<group object id>`; otherwise the value is null. */
    externalId?: string;
}

/** Defines headers for Group_createOrUpdate operation. */
export declare interface GroupCreateOrUpdateHeaders {
    /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
    eTag?: string;
}

/** Optional parameters. */
export declare interface GroupCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
    /** ETag of the Entity. Not required when creating an entity, but required when updating an entity. */
    ifMatch?: string;
}

/** Contains response data for the createOrUpdate operation. */
export declare type GroupCreateOrUpdateResponse = GroupCreateOrUpdateHeaders & GroupContract;

/** Parameters supplied to the Create Group operation. */
export declare interface GroupCreateParameters {
    /** Group name. */
    displayName?: string;
    /** Group description. */
    description?: string;
    /** Group type. */
    type?: GroupType;
    /** Identifier of the external groups, this property contains the id of the group from the external identity provider, e.g. for Azure Active Directory `aad://<tenant>.onmicrosoft.com/groups/<group object id>`; otherwise the value is null. */
    externalId?: string;
}

/** Optional parameters. */
export declare interface GroupDeleteOptionalParams extends coreClient.OperationOptions {
}

/** Defines headers for Group_getEntityTag operation. */
export declare interface GroupGetEntityTagHeaders {
    /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
    eTag?: string;
}

/** Optional parameters. */
export declare interface GroupGetEntityTagOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the getEntityTag operation. */
export declare type GroupGetEntityTagResponse = GroupGetEntityTagHeaders;

/** Defines headers for Group_get operation. */
export declare interface GroupGetHeaders {
    /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
    eTag?: string;
}

/** Optional parameters. */
export declare interface GroupGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type GroupGetResponse = GroupGetHeaders & GroupContract;

/** Optional parameters. */
export declare interface GroupListByServiceNextOptionalParams extends coreClient.OperationOptions {
    /** |     Field     |     Usage     |     Supported operators     |     Supported functions     |</br>|-------------|-------------|-------------|-------------|</br>| name | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |</br>| displayName | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |</br>| description | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |</br>| externalId | filter | eq |     |</br> */
    filter?: string;
    /** Number of records to return. */
    top?: number;
    /** Number of records to skip. */
    skip?: number;
}

/** Contains response data for the listByServiceNext operation. */
export declare type GroupListByServiceNextResponse = GroupCollection;

/** Optional parameters. */
export declare interface GroupListByServiceOptionalParams extends coreClient.OperationOptions {
    /** |     Field     |     Usage     |     Supported operators     |     Supported functions     |</br>|-------------|-------------|-------------|-------------|</br>| name | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |</br>| displayName | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |</br>| description | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |</br>| externalId | filter | eq |     |</br> */
    filter?: string;
    /** Number of records to return. */
    top?: number;
    /** Number of records to skip. */
    skip?: number;
}

/** Contains response data for the listByService operation. */
export declare type GroupListByServiceResponse = GroupCollection;

/** Defines values for GroupType. */
export declare type GroupType = "custom" | "system" | "external";

/** Defines headers for Group_update operation. */
export declare interface GroupUpdateHeaders {
    /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
    eTag?: string;
}

/** Optional parameters. */
export declare interface GroupUpdateOptionalParams extends coreClient.OperationOptions {
}

/** Parameters supplied to the Update Group operation. */
export declare interface GroupUpdateParameters {
    /** Group name. */
    displayName?: string;
    /** Group description. */
    description?: string;
    /** Group type. */
    type?: GroupType;
    /** Identifier of the external groups, this property contains the id of the group from the external identity provider, e.g. for Azure Active Directory `aad://<tenant>.onmicrosoft.com/groups/<group object id>`; otherwise the value is null. */
    externalId?: string;
}

/** Contains response data for the update operation. */
export declare type GroupUpdateResponse = GroupUpdateHeaders & GroupContract;

/** Interface representing a GroupUser. */
export declare interface GroupUser {
    /**
     * Lists a collection of user entities associated with the group.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param groupId Group identifier. Must be unique in the current API Management service instance.
     * @param options The options parameters.
     */
    list(resourceGroupName: string, serviceName: string, groupId: string, options?: GroupUserListOptionalParams): PagedAsyncIterableIterator<UserContract>;
    /**
     * Checks that user entity specified by identifier is associated with the group entity.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param groupId Group identifier. Must be unique in the current API Management service instance.
     * @param userId User identifier. Must be unique in the current API Management service instance.
     * @param options The options parameters.
     */
    checkEntityExists(resourceGroupName: string, serviceName: string, groupId: string, userId: string, options?: GroupUserCheckEntityExistsOptionalParams): Promise<GroupUserCheckEntityExistsResponse>;
    /**
     * Add existing user to existing group
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param groupId Group identifier. Must be unique in the current API Management service instance.
     * @param userId User identifier. Must be unique in the current API Management service instance.
     * @param options The options parameters.
     */
    create(resourceGroupName: string, serviceName: string, groupId: string, userId: string, options?: GroupUserCreateOptionalParams): Promise<GroupUserCreateResponse>;
    /**
     * Remove existing user from existing group.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param groupId Group identifier. Must be unique in the current API Management service instance.
     * @param userId User identifier. Must be unique in the current API Management service instance.
     * @param options The options parameters.
     */
    delete(resourceGroupName: string, serviceName: string, groupId: string, userId: string, options?: GroupUserDeleteOptionalParams): Promise<void>;
}

/** Optional parameters. */
export declare interface GroupUserCheckEntityExistsOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the checkEntityExists operation. */
export declare type GroupUserCheckEntityExistsResponse = {
    body: boolean;
};

/** Optional parameters. */
export declare interface GroupUserCreateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the create operation. */
export declare type GroupUserCreateResponse = UserContract;

/** Optional parameters. */
export declare interface GroupUserDeleteOptionalParams extends coreClient.OperationOptions {
}

/** Optional parameters. */
export declare interface GroupUserListNextOptionalParams extends coreClient.OperationOptions {
    /** |     Field     |     Usage     |     Supported operators     |     Supported functions     |</br>|-------------|-------------|-------------|-------------|</br>| name | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |</br>| firstName | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |</br>| lastName | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |</br>| email | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |</br>| registrationDate | filter | ge, le, eq, ne, gt, lt |     |</br>| note | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |</br> */
    filter?: string;
    /** Number of records to return. */
    top?: number;
    /** Number of records to skip. */
    skip?: number;
}

/** Contains response data for the listNext operation. */
export declare type GroupUserListNextResponse = UserCollection;

/** Optional parameters. */
export declare interface GroupUserListOptionalParams extends coreClient.OperationOptions {
    /** |     Field     |     Usage     |     Supported operators     |     Supported functions     |</br>|-------------|-------------|-------------|-------------|</br>| name | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |</br>| firstName | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |</br>| lastName | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |</br>| email | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |</br>| registrationDate | filter | ge, le, eq, ne, gt, lt |     |</br>| note | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |</br> */
    filter?: string;
    /** Number of records to return. */
    top?: number;
    /** Number of records to skip. */
    skip?: number;
}

/** Contains response data for the list operation. */
export declare type GroupUserListResponse = UserCollection;

/** Custom hostname configuration. */
export declare interface HostnameConfiguration {
    /** Hostname type. */
    type: HostnameType;
    /** Hostname to configure on the Api Management service. */
    hostName: string;
    /** Url to the KeyVault Secret containing the Ssl Certificate. If absolute Url containing version is provided, auto-update of ssl certificate will not work. This requires Api Management service to be configured with aka.ms/apimmsi. The secret should be of type *application/x-pkcs12* */
    keyVaultId?: string;
    /** System or User Assigned Managed identity clientId as generated by Azure AD, which has GET access to the keyVault containing the SSL certificate. */
    identityClientId?: string;
    /** Base64 Encoded certificate. */
    encodedCertificate?: string;
    /** Certificate Password. */
    certificatePassword?: string;
    /** Specify true to setup the certificate associated with this Hostname as the Default SSL Certificate. If a client does not send the SNI header, then this will be the certificate that will be challenged. The property is useful if a service has multiple custom hostname enabled and it needs to decide on the default ssl certificate. The setting only applied to Proxy Hostname Type. */
    defaultSslBinding?: boolean;
    /** Specify true to always negotiate client certificate on the hostname. Default Value is false. */
    negotiateClientCertificate?: boolean;
    /** Certificate information. */
    certificate?: CertificateInformation;
    /** Certificate Source. */
    certificateSource?: CertificateSource;
    /** Certificate Status. */
    certificateStatus?: CertificateStatus;
}

/**
 * Defines values for HostnameType. \
 * {@link KnownHostnameType} can be used interchangeably with HostnameType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Proxy** \
 * **Portal** \
 * **Management** \
 * **Scm** \
 * **DeveloperPortal**
 */
export declare type HostnameType = string;

/**
 * Defines values for HttpCorrelationProtocol. \
 * {@link KnownHttpCorrelationProtocol} can be used interchangeably with HttpCorrelationProtocol,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **None**: Do not read and inject correlation headers. \
 * **Legacy**: Inject Request-Id and Request-Context headers with request correlation data. See https:\/\/github.com\/dotnet\/corefx\/blob\/master\/src\/System.Diagnostics.DiagnosticSource\/src\/HttpCorrelationProtocol.md. \
 * **W3C**: Inject Trace Context headers. See https:\/\/w3c.github.io\/trace-context.
 */
export declare type HttpCorrelationProtocol = string;

/** HTTP header and it's value. */
export declare interface HttpHeader {
    /** Header name. */
    name: string;
    /** Header value. */
    value: string;
}

/** Http message diagnostic settings. */
export declare interface HttpMessageDiagnostic {
    /** Array of HTTP Headers to log. */
    headers?: string[];
    /** Body logging settings. */
    body?: BodyDiagnosticSettings;
    /** Data masking settings. */
    dataMasking?: DataMasking;
}

/** Interface representing a IdentityProvider. */
export declare interface IdentityProvider {
    /**
     * Lists a collection of Identity Provider configured in the specified service instance.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param options The options parameters.
     */
    listByService(resourceGroupName: string, serviceName: string, options?: IdentityProviderListByServiceOptionalParams): PagedAsyncIterableIterator<IdentityProviderContract>;
    /**
     * Gets the entity state (Etag) version of the identityProvider specified by its identifier.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param identityProviderName Identity Provider Type identifier.
     * @param options The options parameters.
     */
    getEntityTag(resourceGroupName: string, serviceName: string, identityProviderName: IdentityProviderType, options?: IdentityProviderGetEntityTagOptionalParams): Promise<IdentityProviderGetEntityTagResponse>;
    /**
     * Gets the configuration details of the identity Provider configured in specified service instance.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param identityProviderName Identity Provider Type identifier.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, serviceName: string, identityProviderName: IdentityProviderType, options?: IdentityProviderGetOptionalParams): Promise<IdentityProviderGetResponse>;
    /**
     * Creates or Updates the IdentityProvider configuration.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param identityProviderName Identity Provider Type identifier.
     * @param parameters Create parameters.
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName: string, serviceName: string, identityProviderName: IdentityProviderType, parameters: IdentityProviderCreateContract, options?: IdentityProviderCreateOrUpdateOptionalParams): Promise<IdentityProviderCreateOrUpdateResponse>;
    /**
     * Updates an existing IdentityProvider configuration.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param identityProviderName Identity Provider Type identifier.
     * @param ifMatch ETag of the Entity. ETag should match the current entity state from the header
     *                response of the GET request or it should be * for unconditional update.
     * @param parameters Update parameters.
     * @param options The options parameters.
     */
    update(resourceGroupName: string, serviceName: string, identityProviderName: IdentityProviderType, ifMatch: string, parameters: IdentityProviderUpdateParameters, options?: IdentityProviderUpdateOptionalParams): Promise<IdentityProviderUpdateResponse>;
    /**
     * Deletes the specified identity provider configuration.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param identityProviderName Identity Provider Type identifier.
     * @param ifMatch ETag of the Entity. ETag should match the current entity state from the header
     *                response of the GET request or it should be * for unconditional update.
     * @param options The options parameters.
     */
    delete(resourceGroupName: string, serviceName: string, identityProviderName: IdentityProviderType, ifMatch: string, options?: IdentityProviderDeleteOptionalParams): Promise<void>;
    /**
     * Gets the client secret details of the Identity Provider.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param identityProviderName Identity Provider Type identifier.
     * @param options The options parameters.
     */
    listSecrets(resourceGroupName: string, serviceName: string, identityProviderName: IdentityProviderType, options?: IdentityProviderListSecretsOptionalParams): Promise<IdentityProviderListSecretsResponse>;
}

/** Identity Provider Base Parameter Properties. */
export declare interface IdentityProviderBaseParameters {
    /** Identity Provider Type identifier. */
    type?: IdentityProviderType;
    /** The TenantId to use instead of Common when logging into Active Directory */
    signinTenant?: string;
    /** List of Allowed Tenants when configuring Azure Active Directory login. */
    allowedTenants?: string[];
    /** OpenID Connect discovery endpoint hostname for AAD or AAD B2C. */
    authority?: string;
    /** Signup Policy Name. Only applies to AAD B2C Identity Provider. */
    signupPolicyName?: string;
    /** Signin Policy Name. Only applies to AAD B2C Identity Provider. */
    signinPolicyName?: string;
    /** Profile Editing Policy Name. Only applies to AAD B2C Identity Provider. */
    profileEditingPolicyName?: string;
    /** Password Reset Policy Name. Only applies to AAD B2C Identity Provider. */
    passwordResetPolicyName?: string;
}

/** Identity Provider details. */
export declare interface IdentityProviderContract extends Resource {
    /** Identity Provider Type identifier. */
    typePropertiesType?: IdentityProviderType;
    /** The TenantId to use instead of Common when logging into Active Directory */
    signinTenant?: string;
    /** List of Allowed Tenants when configuring Azure Active Directory login. */
    allowedTenants?: string[];
    /** OpenID Connect discovery endpoint hostname for AAD or AAD B2C. */
    authority?: string;
    /** Signup Policy Name. Only applies to AAD B2C Identity Provider. */
    signupPolicyName?: string;
    /** Signin Policy Name. Only applies to AAD B2C Identity Provider. */
    signinPolicyName?: string;
    /** Profile Editing Policy Name. Only applies to AAD B2C Identity Provider. */
    profileEditingPolicyName?: string;
    /** Password Reset Policy Name. Only applies to AAD B2C Identity Provider. */
    passwordResetPolicyName?: string;
    /** Client Id of the Application in the external Identity Provider. It is App ID for Facebook login, Client ID for Google login, App ID for Microsoft. */
    clientId?: string;
    /** Client secret of the Application in external Identity Provider, used to authenticate login request. For example, it is App Secret for Facebook login, API Key for Google login, Public Key for Microsoft. This property will not be filled on 'GET' operations! Use '/listSecrets' POST request to get the value. */
    clientSecret?: string;
}

/** The external Identity Providers like Facebook, Google, Microsoft, Twitter or Azure Active Directory which can be used to enable access to the API Management service developer portal for all users. */
export declare interface IdentityProviderContractProperties extends IdentityProviderBaseParameters {
    /** Client Id of the Application in the external Identity Provider. It is App ID for Facebook login, Client ID for Google login, App ID for Microsoft. */
    clientId: string;
    /** Client secret of the Application in external Identity Provider, used to authenticate login request. For example, it is App Secret for Facebook login, API Key for Google login, Public Key for Microsoft. This property will not be filled on 'GET' operations! Use '/listSecrets' POST request to get the value. */
    clientSecret?: string;
}

/** Identity Provider details. */
export declare interface IdentityProviderCreateContract extends Resource {
    /** Identity Provider Type identifier. */
    typePropertiesType?: IdentityProviderType;
    /** The TenantId to use instead of Common when logging into Active Directory */
    signinTenant?: string;
    /** List of Allowed Tenants when configuring Azure Active Directory login. */
    allowedTenants?: string[];
    /** OpenID Connect discovery endpoint hostname for AAD or AAD B2C. */
    authority?: string;
    /** Signup Policy Name. Only applies to AAD B2C Identity Provider. */
    signupPolicyName?: string;
    /** Signin Policy Name. Only applies to AAD B2C Identity Provider. */
    signinPolicyName?: string;
    /** Profile Editing Policy Name. Only applies to AAD B2C Identity Provider. */
    profileEditingPolicyName?: string;
    /** Password Reset Policy Name. Only applies to AAD B2C Identity Provider. */
    passwordResetPolicyName?: string;
    /** Client Id of the Application in the external Identity Provider. It is App ID for Facebook login, Client ID for Google login, App ID for Microsoft. */
    clientId?: string;
    /** Client secret of the Application in external Identity Provider, used to authenticate login request. For example, it is App Secret for Facebook login, API Key for Google login, Public Key for Microsoft. This property will not be filled on 'GET' operations! Use '/listSecrets' POST request to get the value. */
    clientSecret?: string;
}

/** The external Identity Providers like Facebook, Google, Microsoft, Twitter or Azure Active Directory which can be used to enable access to the API Management service developer portal for all users. */
export declare interface IdentityProviderCreateContractProperties extends IdentityProviderBaseParameters {
    /** Client Id of the Application in the external Identity Provider. It is App ID for Facebook login, Client ID for Google login, App ID for Microsoft. */
    clientId: string;
    /** Client secret of the Application in external Identity Provider, used to authenticate login request. For example, it is App Secret for Facebook login, API Key for Google login, Public Key for Microsoft. This property will not be filled on 'GET' operations! Use '/listSecrets' POST request to get the value. */
    clientSecret: string;
}

/** Defines headers for IdentityProvider_createOrUpdate operation. */
export declare interface IdentityProviderCreateOrUpdateHeaders {
    /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
    eTag?: string;
}

/** Optional parameters. */
export declare interface IdentityProviderCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
    /** ETag of the Entity. Not required when creating an entity, but required when updating an entity. */
    ifMatch?: string;
}

/** Contains response data for the createOrUpdate operation. */
export declare type IdentityProviderCreateOrUpdateResponse = IdentityProviderCreateOrUpdateHeaders & IdentityProviderContract;

/** Optional parameters. */
export declare interface IdentityProviderDeleteOptionalParams extends coreClient.OperationOptions {
}

/** Defines headers for IdentityProvider_getEntityTag operation. */
export declare interface IdentityProviderGetEntityTagHeaders {
    /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
    eTag?: string;
}

/** Optional parameters. */
export declare interface IdentityProviderGetEntityTagOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the getEntityTag operation. */
export declare type IdentityProviderGetEntityTagResponse = IdentityProviderGetEntityTagHeaders;

/** Defines headers for IdentityProvider_get operation. */
export declare interface IdentityProviderGetHeaders {
    /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
    eTag?: string;
}

/** Optional parameters. */
export declare interface IdentityProviderGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type IdentityProviderGetResponse = IdentityProviderGetHeaders & IdentityProviderContract;

/** List of all the Identity Providers configured on the service instance. */
export declare interface IdentityProviderList {
    /** Identity Provider configuration values. */
    value?: IdentityProviderContract[];
    /** Total record count number across all pages. */
    count?: number;
    /** Next page link if any. */
    nextLink?: string;
}

/** Optional parameters. */
export declare interface IdentityProviderListByServiceNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByServiceNext operation. */
export declare type IdentityProviderListByServiceNextResponse = IdentityProviderList;

/** Optional parameters. */
export declare interface IdentityProviderListByServiceOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByService operation. */
export declare type IdentityProviderListByServiceResponse = IdentityProviderList;

/** Defines headers for IdentityProvider_listSecrets operation. */
export declare interface IdentityProviderListSecretsHeaders {
    /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
    eTag?: string;
}

/** Optional parameters. */
export declare interface IdentityProviderListSecretsOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listSecrets operation. */
export declare type IdentityProviderListSecretsResponse = IdentityProviderListSecretsHeaders & ClientSecretContract;

/**
 * Defines values for IdentityProviderType. \
 * {@link KnownIdentityProviderType} can be used interchangeably with IdentityProviderType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **facebook**: Facebook as Identity provider. \
 * **google**: Google as Identity provider. \
 * **microsoft**: Microsoft Live as Identity provider. \
 * **twitter**: Twitter as Identity provider. \
 * **aad**: Azure Active Directory as Identity provider. \
 * **aadB2C**: Azure Active Directory B2C as Identity provider.
 */
export declare type IdentityProviderType = string;

/** Defines headers for IdentityProvider_update operation. */
export declare interface IdentityProviderUpdateHeaders {
    /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
    eTag?: string;
}

/** Optional parameters. */
export declare interface IdentityProviderUpdateOptionalParams extends coreClient.OperationOptions {
}

/** Parameters supplied to update Identity Provider */
export declare interface IdentityProviderUpdateParameters {
    /** Identity Provider Type identifier. */
    type?: IdentityProviderType;
    /** The TenantId to use instead of Common when logging into Active Directory */
    signinTenant?: string;
    /** List of Allowed Tenants when configuring Azure Active Directory login. */
    allowedTenants?: string[];
    /** OpenID Connect discovery endpoint hostname for AAD or AAD B2C. */
    authority?: string;
    /** Signup Policy Name. Only applies to AAD B2C Identity Provider. */
    signupPolicyName?: string;
    /** Signin Policy Name. Only applies to AAD B2C Identity Provider. */
    signinPolicyName?: string;
    /** Profile Editing Policy Name. Only applies to AAD B2C Identity Provider. */
    profileEditingPolicyName?: string;
    /** Password Reset Policy Name. Only applies to AAD B2C Identity Provider. */
    passwordResetPolicyName?: string;
    /** Client Id of the Application in the external Identity Provider. It is App ID for Facebook login, Client ID for Google login, App ID for Microsoft. */
    clientId?: string;
    /** Client secret of the Application in external Identity Provider, used to authenticate login request. For example, it is App Secret for Facebook login, API Key for Google login, Public Key for Microsoft. */
    clientSecret?: string;
}

/** Parameters supplied to the Update Identity Provider operation. */
export declare interface IdentityProviderUpdateProperties extends IdentityProviderBaseParameters {
    /** Client Id of the Application in the external Identity Provider. It is App ID for Facebook login, Client ID for Google login, App ID for Microsoft. */
    clientId?: string;
    /** Client secret of the Application in external Identity Provider, used to authenticate login request. For example, it is App Secret for Facebook login, API Key for Google login, Public Key for Microsoft. */
    clientSecret?: string;
}

/** Contains response data for the update operation. */
export declare type IdentityProviderUpdateResponse = IdentityProviderUpdateHeaders & IdentityProviderContract;

/** Interface representing a Issue. */
export declare interface Issue {
    /**
     * Lists a collection of issues in the specified service instance.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param options The options parameters.
     */
    listByService(resourceGroupName: string, serviceName: string, options?: IssueListByServiceOptionalParams): PagedAsyncIterableIterator<IssueContract>;
    /**
     * Gets API Management issue details
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param issueId Issue identifier. Must be unique in the current API Management service instance.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, serviceName: string, issueId: string, options?: IssueGetOptionalParams): Promise<IssueGetResponse>;
}

/** Paged Issue Attachment list representation. */
export declare interface IssueAttachmentCollection {
    /**
     * Issue Attachment values.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly value?: IssueAttachmentContract[];
    /** Total record count number across all pages. */
    count?: number;
    /**
     * Next page link if any.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextLink?: string;
}

/** Issue Attachment Contract details. */
export declare interface IssueAttachmentContract extends Resource {
    /** Filename by which the binary data will be saved. */
    title?: string;
    /** Either 'link' if content is provided via an HTTP link or the MIME type of the Base64-encoded binary data provided in the 'content' property. */
    contentFormat?: string;
    /** An HTTP link or Base64-encoded binary data. */
    content?: string;
}

/** Paged Issue list representation. */
export declare interface IssueCollection {
    /**
     * Issue values.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly value?: IssueContract[];
    /** Total record count number across all pages. */
    count?: number;
    /**
     * Next page link if any.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextLink?: string;
}

/** Paged Issue Comment list representation. */
export declare interface IssueCommentCollection {
    /**
     * Issue Comment values.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly value?: IssueCommentContract[];
    /** Total record count number across all pages. */
    count?: number;
    /**
     * Next page link if any.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextLink?: string;
}

/** Issue Comment Contract details. */
export declare interface IssueCommentContract extends Resource {
    /** Comment text. */
    text?: string;
    /** Date and time when the comment was created. */
    createdDate?: Date;
    /** A resource identifier for the user who left the comment. */
    userId?: string;
}

/** Issue Contract details. */
export declare interface IssueContract extends Resource {
    /** Date and time when the issue was created. */
    createdDate?: Date;
    /** Status of the issue. */
    state?: State;
    /** A resource identifier for the API the issue was created for. */
    apiId?: string;
    /** The issue title. */
    title?: string;
    /** Text describing the issue. */
    description?: string;
    /** A resource identifier for the user created the issue. */
    userId?: string;
}

/** Issue contract Base Properties. */
export declare interface IssueContractBaseProperties {
    /** Date and time when the issue was created. */
    createdDate?: Date;
    /** Status of the issue. */
    state?: State;
    /** A resource identifier for the API the issue was created for. */
    apiId?: string;
}

/** Issue contract Properties. */
export declare interface IssueContractProperties extends IssueContractBaseProperties {
    /** The issue title. */
    title: string;
    /** Text describing the issue. */
    description: string;
    /** A resource identifier for the user created the issue. */
    userId: string;
}

/** Defines headers for Issue_get operation. */
export declare interface IssueGetHeaders {
    /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
    eTag?: string;
}

/** Optional parameters. */
export declare interface IssueGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type IssueGetResponse = IssueGetHeaders & IssueContract;

/** Optional parameters. */
export declare interface IssueListByServiceNextOptionalParams extends coreClient.OperationOptions {
    /** |     Field     |     Usage     |     Supported operators     |     Supported functions     |</br>|-------------|-------------|-------------|-------------|</br>| name | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |</br>| apiId | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |</br>| title | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |</br>| description | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |</br>| authorName | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |</br>| state | filter | eq |     |</br> */
    filter?: string;
    /** Number of records to return. */
    top?: number;
    /** Number of records to skip. */
    skip?: number;
}

/** Contains response data for the listByServiceNext operation. */
export declare type IssueListByServiceNextResponse = IssueCollection;

/** Optional parameters. */
export declare interface IssueListByServiceOptionalParams extends coreClient.OperationOptions {
    /** |     Field     |     Usage     |     Supported operators     |     Supported functions     |</br>|-------------|-------------|-------------|-------------|</br>| name | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |</br>| apiId | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |</br>| title | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |</br>| description | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |</br>| authorName | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |</br>| state | filter | eq |     |</br> */
    filter?: string;
    /** Number of records to return. */
    top?: number;
    /** Number of records to skip. */
    skip?: number;
}

/** Contains response data for the listByService operation. */
export declare type IssueListByServiceResponse = IssueCollection;

/**
 * Defines values for IssueType. \
 * {@link KnownIssueType} can be used interchangeably with IssueType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Unknown** \
 * **AgentStopped** \
 * **GuestFirewall** \
 * **DnsResolution** \
 * **SocketBind** \
 * **NetworkSecurityRule** \
 * **UserDefinedRoute** \
 * **PortThrottled** \
 * **Platform**
 */
export declare type IssueType = string;

/** Issue update Parameters. */
export declare interface IssueUpdateContract {
    /** Date and time when the issue was created. */
    createdDate?: Date;
    /** Status of the issue. */
    state?: State;
    /** A resource identifier for the API the issue was created for. */
    apiId?: string;
    /** The issue title. */
    title?: string;
    /** Text describing the issue. */
    description?: string;
    /** A resource identifier for the user created the issue. */
    userId?: string;
}

/** Issue contract Update Properties. */
export declare interface IssueUpdateContractProperties extends IssueContractBaseProperties {
    /** The issue title. */
    title?: string;
    /** Text describing the issue. */
    description?: string;
    /** A resource identifier for the user created the issue. */
    userId?: string;
}

/** Defines values for KeyType. */
declare type KeyType_2 = "primary" | "secondary";
export { KeyType_2 as KeyType }

/** Create keyVault contract details. */
export declare interface KeyVaultContractCreateProperties {
    /** Key vault secret identifier for fetching secret. Providing a versioned secret will prevent auto-refresh. This requires API Management service to be configured with aka.ms/apimmsi */
    secretIdentifier?: string;
    /** SystemAssignedIdentity or UserAssignedIdentity Client Id which will be used to access key vault secret. */
    identityClientId?: string;
}

/** KeyVault contract details. */
export declare interface KeyVaultContractProperties extends KeyVaultContractCreateProperties {
    /** Last time sync and refresh status of secret from key vault. */
    lastStatus?: KeyVaultLastAccessStatusContractProperties;
}

/** Issue contract Update Properties. */
export declare interface KeyVaultLastAccessStatusContractProperties {
    /** Last status code for sync and refresh of secret from key vault. */
    code?: string;
    /** Details of the error else empty. */
    message?: string;
    /**
     * Last time secret was accessed. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard.
     *
     */
    timeStampUtc?: Date;
}

/** Known values of {@link AccessIdName} that the service accepts. */
export declare enum KnownAccessIdName {
    /** Access */
    Access = "access",
    /** GitAccess */
    GitAccess = "gitAccess"
}

/** Known values of {@link AccessType} that the service accepts. */
export declare enum KnownAccessType {
    /** Use access key. */
    AccessKey = "AccessKey",
    /** Use system assigned managed identity. */
    SystemAssignedManagedIdentity = "SystemAssignedManagedIdentity",
    /** Use user assigned managed identity. */
    UserAssignedManagedIdentity = "UserAssignedManagedIdentity"
}

/** Known values of {@link AlwaysLog} that the service accepts. */
export declare enum KnownAlwaysLog {
    /** Always log all erroneous request regardless of sampling settings. */
    AllErrors = "allErrors"
}

/** Known values of {@link ApimIdentityType} that the service accepts. */
export declare enum KnownApimIdentityType {
    /** SystemAssigned */
    SystemAssigned = "SystemAssigned",
    /** UserAssigned */
    UserAssigned = "UserAssigned",
    /** SystemAssignedUserAssigned */
    SystemAssignedUserAssigned = "SystemAssigned, UserAssigned",
    /** None */
    None = "None"
}

/** Known values of {@link ApiType} that the service accepts. */
export declare enum KnownApiType {
    /** Http */
    Http = "http",
    /** Soap */
    Soap = "soap",
    /** Websocket */
    Websocket = "websocket",
    /** Graphql */
    Graphql = "graphql"
}

/** Known values of {@link ApiVersionSetContractDetailsVersioningScheme} that the service accepts. */
export declare enum KnownApiVersionSetContractDetailsVersioningScheme {
    /** Segment */
    Segment = "Segment",
    /** Query */
    Query = "Query",
    /** Header */
    Header = "Header"
}

/** Known values of {@link AppType} that the service accepts. */
export declare enum KnownAppType {
    /** User create request was sent by legacy developer portal. */
    Portal = "portal",
    /** User create request was sent by new developer portal. */
    DeveloperPortal = "developerPortal"
}

/** Known values of {@link BackendProtocol} that the service accepts. */
export declare enum KnownBackendProtocol {
    /** The Backend is a RESTful service. */
    Http = "http",
    /** The Backend is a SOAP service. */
    Soap = "soap"
}

/** Known values of {@link BearerTokenSendingMethod} that the service accepts. */
export declare enum KnownBearerTokenSendingMethod {
    /** AuthorizationHeader */
    AuthorizationHeader = "authorizationHeader",
    /** Query */
    Query = "query"
}

/** Known values of {@link BearerTokenSendingMethods} that the service accepts. */
export declare enum KnownBearerTokenSendingMethods {
    /** Access token will be transmitted in the Authorization header using Bearer schema */
    AuthorizationHeader = "authorizationHeader",
    /** Access token will be transmitted as query parameters. */
    Query = "query"
}

/** Known values of {@link CertificateConfigurationStoreName} that the service accepts. */
export declare enum KnownCertificateConfigurationStoreName {
    /** CertificateAuthority */
    CertificateAuthority = "CertificateAuthority",
    /** Root */
    Root = "Root"
}

/** Known values of {@link CertificateSource} that the service accepts. */
export declare enum KnownCertificateSource {
    /** Managed */
    Managed = "Managed",
    /** KeyVault */
    KeyVault = "KeyVault",
    /** Custom */
    Custom = "Custom",
    /** BuiltIn */
    BuiltIn = "BuiltIn"
}

/** Known values of {@link CertificateStatus} that the service accepts. */
export declare enum KnownCertificateStatus {
    /** Completed */
    Completed = "Completed",
    /** Failed */
    Failed = "Failed",
    /** InProgress */
    InProgress = "InProgress"
}

/** Known values of {@link ClientAuthenticationMethod} that the service accepts. */
export declare enum KnownClientAuthenticationMethod {
    /** Basic Client Authentication method. */
    Basic = "Basic",
    /** Body based Authentication method. */
    Body = "Body"
}

/** Known values of {@link ConfigurationIdName} that the service accepts. */
export declare enum KnownConfigurationIdName {
    /** Configuration */
    Configuration = "configuration"
}

/** Known values of {@link Confirmation} that the service accepts. */
export declare enum KnownConfirmation {
    /** Send an e-mail to the user confirming they have successfully signed up. */
    Signup = "signup",
    /** Send an e-mail inviting the user to sign-up and complete registration. */
    Invite = "invite"
}

/** Known values of {@link ConnectionStatus} that the service accepts. */
export declare enum KnownConnectionStatus {
    /** Unknown */
    Unknown = "Unknown",
    /** Connected */
    Connected = "Connected",
    /** Disconnected */
    Disconnected = "Disconnected",
    /** Degraded */
    Degraded = "Degraded"
}

/** Known values of {@link ConnectivityCheckProtocol} that the service accepts. */
export declare enum KnownConnectivityCheckProtocol {
    /** TCP */
    TCP = "TCP",
    /** Http */
    Http = "HTTP",
    /** Https */
    Https = "HTTPS"
}

/** Known values of {@link ConnectivityStatusType} that the service accepts. */
export declare enum KnownConnectivityStatusType {
    /** Initializing */
    Initializing = "initializing",
    /** Success */
    Success = "success",
    /** Failure */
    Failure = "failure"
}

/** Known values of {@link ContentFormat} that the service accepts. */
export declare enum KnownContentFormat {
    /** The contents are inline and Content type is a WADL document. */
    WadlXml = "wadl-xml",
    /** The WADL document is hosted on a publicly accessible internet address. */
    WadlLinkJson = "wadl-link-json",
    /** The contents are inline and Content Type is a OpenAPI 2.0 JSON Document. */
    SwaggerJson = "swagger-json",
    /** The OpenAPI 2.0 JSON document is hosted on a publicly accessible internet address. */
    SwaggerLinkJson = "swagger-link-json",
    /** The contents are inline and the document is a WSDL/Soap document. */
    Wsdl = "wsdl",
    /** The WSDL document is hosted on a publicly accessible internet address. */
    WsdlLink = "wsdl-link",
    /** The contents are inline and Content Type is a OpenAPI 3.0 YAML Document. */
    Openapi = "openapi",
    /** The contents are inline and Content Type is a OpenAPI 3.0 JSON Document. */
    OpenapiJson = "openapi+json",
    /** The OpenAPI 3.0 YAML document is hosted on a publicly accessible internet address. */
    OpenapiLink = "openapi-link",
    /** The OpenAPI 3.0 JSON document is hosted on a publicly accessible internet address. */
    OpenapiJsonLink = "openapi+json-link",
    /** The GraphQL API endpoint hosted on a publicly accessible internet address. */
    GraphqlLink = "graphql-link"
}

/** Known values of {@link CreatedByType} that the service accepts. */
export declare enum KnownCreatedByType {
    /** User */
    User = "User",
    /** Application */
    Application = "Application",
    /** ManagedIdentity */
    ManagedIdentity = "ManagedIdentity",
    /** Key */
    Key = "Key"
}

/** Known values of {@link DataMaskingMode} that the service accepts. */
export declare enum KnownDataMaskingMode {
    /** Mask the value of an entity. */
    Mask = "Mask",
    /** Hide the presence of an entity. */
    Hide = "Hide"
}

/** Known values of {@link ExportApi} that the service accepts. */
export declare enum KnownExportApi {
    /** True */
    True = "true"
}

/** Known values of {@link ExportFormat} that the service accepts. */
export declare enum KnownExportFormat {
    /** Export the Api Definition in OpenAPI 2.0 Specification as JSON document to the Storage Blob. */
    Swagger = "swagger-link",
    /** Export the Api Definition in WSDL Schema to Storage Blob. This is only supported for APIs of Type `soap` */
    Wsdl = "wsdl-link",
    /** Export the Api Definition in WADL Schema to Storage Blob. */
    Wadl = "wadl-link",
    /** Export the Api Definition in OpenAPI 3.0 Specification as YAML document to Storage Blob. */
    Openapi = "openapi-link",
    /** Export the Api Definition in OpenAPI 3.0 Specification as JSON document to Storage Blob. */
    OpenapiJson = "openapi+json-link"
}

/** Known values of {@link ExportResultFormat} that the service accepts. */
export declare enum KnownExportResultFormat {
    /** The API Definition is exported in OpenAPI Specification 2.0 format to the Storage Blob. */
    Swagger = "swagger-link-json",
    /** The API Definition is exported in WSDL Schema to Storage Blob. This is only supported for APIs of Type `soap` */
    Wsdl = "wsdl-link+xml",
    /** Export the API Definition in WADL Schema to Storage Blob. */
    Wadl = "wadl-link-json",
    /** Export the API Definition in OpenAPI Specification 3.0 to Storage Blob. */
    OpenApi = "openapi-link"
}

/** Known values of {@link GrantType} that the service accepts. */
export declare enum KnownGrantType {
    /** Authorization Code Grant flow as described https://tools.ietf.org/html/rfc6749#section-4.1. */
    AuthorizationCode = "authorizationCode",
    /** Implicit Code Grant flow as described https://tools.ietf.org/html/rfc6749#section-4.2. */
    Implicit = "implicit",
    /** Resource Owner Password Grant flow as described https://tools.ietf.org/html/rfc6749#section-4.3. */
    ResourceOwnerPassword = "resourceOwnerPassword",
    /** Client Credentials Grant flow as described https://tools.ietf.org/html/rfc6749#section-4.4. */
    ClientCredentials = "clientCredentials"
}

/** Known values of {@link HostnameType} that the service accepts. */
export declare enum KnownHostnameType {
    /** Proxy */
    Proxy = "Proxy",
    /** Portal */
    Portal = "Portal",
    /** Management */
    Management = "Management",
    /** Scm */
    Scm = "Scm",
    /** DeveloperPortal */
    DeveloperPortal = "DeveloperPortal"
}

/** Known values of {@link HttpCorrelationProtocol} that the service accepts. */
export declare enum KnownHttpCorrelationProtocol {
    /** Do not read and inject correlation headers. */
    None = "None",
    /** Inject Request-Id and Request-Context headers with request correlation data. See https://github.com/dotnet/corefx/blob/master/src/System.Diagnostics.DiagnosticSource/src/HttpCorrelationProtocol.md. */
    Legacy = "Legacy",
    /** Inject Trace Context headers. See https://w3c.github.io/trace-context. */
    W3C = "W3C"
}

/** Known values of {@link IdentityProviderType} that the service accepts. */
export declare enum KnownIdentityProviderType {
    /** Facebook as Identity provider. */
    Facebook = "facebook",
    /** Google as Identity provider. */
    Google = "google",
    /** Microsoft Live as Identity provider. */
    Microsoft = "microsoft",
    /** Twitter as Identity provider. */
    Twitter = "twitter",
    /** Azure Active Directory as Identity provider. */
    Aad = "aad",
    /** Azure Active Directory B2C as Identity provider. */
    AadB2C = "aadB2C"
}

/** Known values of {@link IssueType} that the service accepts. */
export declare enum KnownIssueType {
    /** Unknown */
    Unknown = "Unknown",
    /** AgentStopped */
    AgentStopped = "AgentStopped",
    /** GuestFirewall */
    GuestFirewall = "GuestFirewall",
    /** DnsResolution */
    DnsResolution = "DnsResolution",
    /** SocketBind */
    SocketBind = "SocketBind",
    /** NetworkSecurityRule */
    NetworkSecurityRule = "NetworkSecurityRule",
    /** UserDefinedRoute */
    UserDefinedRoute = "UserDefinedRoute",
    /** PortThrottled */
    PortThrottled = "PortThrottled",
    /** Platform */
    Platform = "Platform"
}

/** Known values of {@link LoggerType} that the service accepts. */
export declare enum KnownLoggerType {
    /** Azure Event Hub as log destination. */
    AzureEventHub = "azureEventHub",
    /** Azure Application Insights as log destination. */
    ApplicationInsights = "applicationInsights",
    /** Azure Monitor */
    AzureMonitor = "azureMonitor"
}

/** Known values of {@link Method} that the service accepts. */
export declare enum KnownMethod {
    /** GET */
    GET = "GET",
    /** Post */
    Post = "POST"
}

/** Known values of {@link NotificationName} that the service accepts. */
export declare enum KnownNotificationName {
    /** The following email recipients and users will receive email notifications about subscription requests for API products requiring approval. */
    RequestPublisherNotificationMessage = "RequestPublisherNotificationMessage",
    /** The following email recipients and users will receive email notifications about new API product subscriptions. */
    PurchasePublisherNotificationMessage = "PurchasePublisherNotificationMessage",
    /** The following email recipients and users will receive email notifications when new applications are submitted to the application gallery. */
    NewApplicationNotificationMessage = "NewApplicationNotificationMessage",
    /** The following recipients will receive blind carbon copies of all emails sent to developers. */
    BCC = "BCC",
    /** The following email recipients and users will receive email notifications when a new issue or comment is submitted on the developer portal. */
    NewIssuePublisherNotificationMessage = "NewIssuePublisherNotificationMessage",
    /** The following email recipients and users will receive email notifications when developer closes his account. */
    AccountClosedPublisher = "AccountClosedPublisher",
    /** The following email recipients and users will receive email notifications when subscription usage gets close to usage quota. */
    QuotaLimitApproachingPublisherNotificationMessage = "QuotaLimitApproachingPublisherNotificationMessage"
}

/** Known values of {@link OperationNameFormat} that the service accepts. */
export declare enum KnownOperationNameFormat {
    /** API_NAME;rev=API_REVISION - OPERATION_NAME */
    Name = "Name",
    /** HTTP_VERB URL */
    Url = "Url"
}

/** Known values of {@link Origin} that the service accepts. */
export declare enum KnownOrigin {
    /** Local */
    Local = "Local",
    /** Inbound */
    Inbound = "Inbound",
    /** Outbound */
    Outbound = "Outbound"
}

/** Known values of {@link PlatformVersion} that the service accepts. */
export declare enum KnownPlatformVersion {
    /** Platform version cannot be determined, as compute platform is not deployed. */
    Undetermined = "undetermined",
    /** Platform running the service on Single Tenant V1 platform. */
    Stv1 = "stv1",
    /** Platform running the service on Single Tenant V2 platform. */
    Stv2 = "stv2",
    /** Platform running the service on Multi Tenant V1 platform. */
    Mtv1 = "mtv1"
}

/** Known values of {@link PolicyContentFormat} that the service accepts. */
export declare enum KnownPolicyContentFormat {
    /** The contents are inline and Content type is an XML document. */
    Xml = "xml",
    /** The policy XML document is hosted on a http endpoint accessible from the API Management service. */
    XmlLink = "xml-link",
    /** The contents are inline and Content type is a non XML encoded policy document. */
    Rawxml = "rawxml",
    /** The policy document is not Xml encoded and is hosted on a http endpoint accessible from the API Management service. */
    RawxmlLink = "rawxml-link"
}

/** Known values of {@link PolicyExportFormat} that the service accepts. */
export declare enum KnownPolicyExportFormat {
    /** The contents are inline and Content type is an XML document. */
    Xml = "xml",
    /** The contents are inline and Content type is a non XML encoded policy document. */
    Rawxml = "rawxml"
}

/** Known values of {@link PolicyIdName} that the service accepts. */
export declare enum KnownPolicyIdName {
    /** Policy */
    Policy = "policy"
}

/** Known values of {@link PortalRevisionStatus} that the service accepts. */
export declare enum KnownPortalRevisionStatus {
    /** Portal's revision has been queued. */
    Pending = "pending",
    /** Portal's revision is being published. */
    Publishing = "publishing",
    /** Portal's revision publishing completed. */
    Completed = "completed",
    /** Portal's revision publishing failed. */
    Failed = "failed"
}

/** Known values of {@link PreferredIPVersion} that the service accepts. */
export declare enum KnownPreferredIPVersion {
    /** IPv4 */
    IPv4 = "IPv4"
}

/** Known values of {@link PrivateEndpointConnectionProvisioningState} that the service accepts. */
export declare enum KnownPrivateEndpointConnectionProvisioningState {
    /** Succeeded */
    Succeeded = "Succeeded",
    /** Creating */
    Creating = "Creating",
    /** Deleting */
    Deleting = "Deleting",
    /** Failed */
    Failed = "Failed"
}

/** Known values of {@link PrivateEndpointServiceConnectionStatus} that the service accepts. */
export declare enum KnownPrivateEndpointServiceConnectionStatus {
    /** Pending */
    Pending = "Pending",
    /** Approved */
    Approved = "Approved",
    /** Rejected */
    Rejected = "Rejected"
}

/** Known values of {@link Protocol} that the service accepts. */
export declare enum KnownProtocol {
    /** Http */
    Http = "http",
    /** Https */
    Https = "https",
    /** Ws */
    Ws = "ws",
    /** Wss */
    Wss = "wss"
}

/** Known values of {@link PublicNetworkAccess} that the service accepts. */
export declare enum KnownPublicNetworkAccess {
    /** Enabled */
    Enabled = "Enabled",
    /** Disabled */
    Disabled = "Disabled"
}

/** Known values of {@link ResourceSkuCapacityScaleType} that the service accepts. */
export declare enum KnownResourceSkuCapacityScaleType {
    /** Supported scale type automatic. */
    Automatic = "automatic",
    /** Supported scale type manual. */
    Manual = "manual",
    /** Scaling not supported. */
    None = "none"
}

/** Known values of {@link SamplingType} that the service accepts. */
export declare enum KnownSamplingType {
    /** Fixed-rate sampling. */
    Fixed = "fixed"
}

/** Known values of {@link SettingsTypeName} that the service accepts. */
export declare enum KnownSettingsTypeName {
    /** Public */
    Public = "public"
}

/** Known values of {@link Severity} that the service accepts. */
export declare enum KnownSeverity {
    /** Error */
    Error = "Error",
    /** Warning */
    Warning = "Warning"
}

/** Known values of {@link SkuType} that the service accepts. */
export declare enum KnownSkuType {
    /** Developer SKU of Api Management. */
    Developer = "Developer",
    /** Standard SKU of Api Management. */
    Standard = "Standard",
    /** Premium SKU of Api Management. */
    Premium = "Premium",
    /** Basic SKU of Api Management. */
    Basic = "Basic",
    /** Consumption SKU of Api Management. */
    Consumption = "Consumption",
    /** Isolated SKU of Api Management. */
    Isolated = "Isolated"
}

/** Known values of {@link SoapApiType} that the service accepts. */
export declare enum KnownSoapApiType {
    /** Imports a SOAP API having a RESTful front end. */
    SoapToRest = "http",
    /** Imports the SOAP API having a SOAP front end. */
    SoapPassThrough = "soap",
    /** Imports the API having a Websocket front end. */
    WebSocket = "websocket",
    /** Imports the API having a GraphQL front end. */
    GraphQL = "graphql"
}

/** Known values of {@link State} that the service accepts. */
export declare enum KnownState {
    /** The issue is proposed. */
    Proposed = "proposed",
    /** The issue is opened. */
    Open = "open",
    /** The issue was removed. */
    Removed = "removed",
    /** The issue is now resolved. */
    Resolved = "resolved",
    /** The issue was closed. */
    Closed = "closed"
}

/** Known values of {@link TemplateName} that the service accepts. */
export declare enum KnownTemplateName {
    /** ApplicationApprovedNotificationMessage */
    ApplicationApprovedNotificationMessage = "applicationApprovedNotificationMessage",
    /** AccountClosedDeveloper */
    AccountClosedDeveloper = "accountClosedDeveloper",
    /** QuotaLimitApproachingDeveloperNotificationMessage */
    QuotaLimitApproachingDeveloperNotificationMessage = "quotaLimitApproachingDeveloperNotificationMessage",
    /** NewDeveloperNotificationMessage */
    NewDeveloperNotificationMessage = "newDeveloperNotificationMessage",
    /** EmailChangeIdentityDefault */
    EmailChangeIdentityDefault = "emailChangeIdentityDefault",
    /** InviteUserNotificationMessage */
    InviteUserNotificationMessage = "inviteUserNotificationMessage",
    /** NewCommentNotificationMessage */
    NewCommentNotificationMessage = "newCommentNotificationMessage",
    /** ConfirmSignUpIdentityDefault */
    ConfirmSignUpIdentityDefault = "confirmSignUpIdentityDefault",
    /** NewIssueNotificationMessage */
    NewIssueNotificationMessage = "newIssueNotificationMessage",
    /** PurchaseDeveloperNotificationMessage */
    PurchaseDeveloperNotificationMessage = "purchaseDeveloperNotificationMessage",
    /** PasswordResetIdentityDefault */
    PasswordResetIdentityDefault = "passwordResetIdentityDefault",
    /** PasswordResetByAdminNotificationMessage */
    PasswordResetByAdminNotificationMessage = "passwordResetByAdminNotificationMessage",
    /** RejectDeveloperNotificationMessage */
    RejectDeveloperNotificationMessage = "rejectDeveloperNotificationMessage",
    /** RequestDeveloperNotificationMessage */
    RequestDeveloperNotificationMessage = "requestDeveloperNotificationMessage"
}

/** Known values of {@link UserState} that the service accepts. */
export declare enum KnownUserState {
    /** User state is active. */
    Active = "active",
    /** User is blocked. Blocked users cannot authenticate at developer portal or call API. */
    Blocked = "blocked",
    /** User account is pending. Requires identity confirmation before it can be made active. */
    Pending = "pending",
    /** User account is closed. All identities and related entities are removed. */
    Deleted = "deleted"
}

/** Known values of {@link Verbosity} that the service accepts. */
export declare enum KnownVerbosity {
    /** All the traces emitted by trace policies will be sent to the logger attached to this diagnostic instance. */
    Verbose = "verbose",
    /** Traces with 'severity' set to 'information' and 'error' will be sent to the logger attached to this diagnostic instance. */
    Information = "information",
    /** Only traces with 'severity' set to 'error' will be sent to the logger attached to this diagnostic instance. */
    Error = "error"
}

/** Known values of {@link VersioningScheme} that the service accepts. */
export declare enum KnownVersioningScheme {
    /** The API Version is passed in a path segment. */
    Segment = "Segment",
    /** The API Version is passed in a query parameter. */
    Query = "Query",
    /** The API Version is passed in a HTTP header. */
    Header = "Header"
}

/** Known values of {@link VirtualNetworkType} that the service accepts. */
export declare enum KnownVirtualNetworkType {
    /** The service is not part of any Virtual Network. */
    None = "None",
    /** The service is part of Virtual Network and it is accessible from Internet. */
    External = "External",
    /** The service is part of Virtual Network and it is only accessible from within the virtual network. */
    Internal = "Internal"
}

/** Interface representing a Logger. */
export declare interface Logger {
    /**
     * Lists a collection of loggers in the specified service instance.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param options The options parameters.
     */
    listByService(resourceGroupName: string, serviceName: string, options?: LoggerListByServiceOptionalParams): PagedAsyncIterableIterator<LoggerContract>;
    /**
     * Gets the entity state (Etag) version of the logger specified by its identifier.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param loggerId Logger identifier. Must be unique in the API Management service instance.
     * @param options The options parameters.
     */
    getEntityTag(resourceGroupName: string, serviceName: string, loggerId: string, options?: LoggerGetEntityTagOptionalParams): Promise<LoggerGetEntityTagResponse>;
    /**
     * Gets the details of the logger specified by its identifier.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param loggerId Logger identifier. Must be unique in the API Management service instance.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, serviceName: string, loggerId: string, options?: LoggerGetOptionalParams): Promise<LoggerGetResponse>;
    /**
     * Creates or Updates a logger.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param loggerId Logger identifier. Must be unique in the API Management service instance.
     * @param parameters Create parameters.
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName: string, serviceName: string, loggerId: string, parameters: LoggerContract, options?: LoggerCreateOrUpdateOptionalParams): Promise<LoggerCreateOrUpdateResponse>;
    /**
     * Updates an existing logger.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param loggerId Logger identifier. Must be unique in the API Management service instance.
     * @param ifMatch ETag of the Entity. ETag should match the current entity state from the header
     *                response of the GET request or it should be * for unconditional update.
     * @param parameters Update parameters.
     * @param options The options parameters.
     */
    update(resourceGroupName: string, serviceName: string, loggerId: string, ifMatch: string, parameters: LoggerUpdateContract, options?: LoggerUpdateOptionalParams): Promise<LoggerUpdateResponse>;
    /**
     * Deletes the specified logger.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param loggerId Logger identifier. Must be unique in the API Management service instance.
     * @param ifMatch ETag of the Entity. ETag should match the current entity state from the header
     *                response of the GET request or it should be * for unconditional update.
     * @param options The options parameters.
     */
    delete(resourceGroupName: string, serviceName: string, loggerId: string, ifMatch: string, options?: LoggerDeleteOptionalParams): Promise<void>;
}

/** Paged Logger list representation. */
export declare interface LoggerCollection {
    /** Logger values. */
    value?: LoggerContract[];
    /** Total record count number across all pages. */
    count?: number;
    /** Next page link if any. */
    nextLink?: string;
}

/** Logger details. */
export declare interface LoggerContract extends Resource {
    /** Logger type. */
    loggerType?: LoggerType;
    /** Logger description. */
    description?: string;
    /**
     * The name and SendRule connection string of the event hub for azureEventHub logger.
     * Instrumentation key for applicationInsights logger.
     */
    credentials?: {
        [propertyName: string]: string;
    };
    /** Whether records are buffered in the logger before publishing. Default is assumed to be true. */
    isBuffered?: boolean;
    /** Azure Resource Id of a log target (either Azure Event Hub resource or Azure Application Insights resource). */
    resourceId?: string;
}

/** Defines headers for Logger_createOrUpdate operation. */
export declare interface LoggerCreateOrUpdateHeaders {
    /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
    eTag?: string;
}

/** Optional parameters. */
export declare interface LoggerCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
    /** ETag of the Entity. Not required when creating an entity, but required when updating an entity. */
    ifMatch?: string;
}

/** Contains response data for the createOrUpdate operation. */
export declare type LoggerCreateOrUpdateResponse = LoggerCreateOrUpdateHeaders & LoggerContract;

/** Optional parameters. */
export declare interface LoggerDeleteOptionalParams extends coreClient.OperationOptions {
}

/** Defines headers for Logger_getEntityTag operation. */
export declare interface LoggerGetEntityTagHeaders {
    /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
    eTag?: string;
}

/** Optional parameters. */
export declare interface LoggerGetEntityTagOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the getEntityTag operation. */
export declare type LoggerGetEntityTagResponse = LoggerGetEntityTagHeaders;

/** Defines headers for Logger_get operation. */
export declare interface LoggerGetHeaders {
    /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
    eTag?: string;
}

/** Optional parameters. */
export declare interface LoggerGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type LoggerGetResponse = LoggerGetHeaders & LoggerContract;

/** Optional parameters. */
export declare interface LoggerListByServiceNextOptionalParams extends coreClient.OperationOptions {
    /** |     Field     |     Usage     |     Supported operators     |     Supported functions     |</br>|-------------|-------------|-------------|-------------|</br>| name | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |</br>| description | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |</br>| loggerType | filter | eq |     |</br>| resourceId | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |</br> */
    filter?: string;
    /** Number of records to return. */
    top?: number;
    /** Number of records to skip. */
    skip?: number;
}

/** Contains response data for the listByServiceNext operation. */
export declare type LoggerListByServiceNextResponse = LoggerCollection;

/** Optional parameters. */
export declare interface LoggerListByServiceOptionalParams extends coreClient.OperationOptions {
    /** |     Field     |     Usage     |     Supported operators     |     Supported functions     |</br>|-------------|-------------|-------------|-------------|</br>| name | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |</br>| description | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |</br>| loggerType | filter | eq |     |</br>| resourceId | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |</br> */
    filter?: string;
    /** Number of records to return. */
    top?: number;
    /** Number of records to skip. */
    skip?: number;
}

/** Contains response data for the listByService operation. */
export declare type LoggerListByServiceResponse = LoggerCollection;

/**
 * Defines values for LoggerType. \
 * {@link KnownLoggerType} can be used interchangeably with LoggerType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **azureEventHub**: Azure Event Hub as log destination. \
 * **applicationInsights**: Azure Application Insights as log destination. \
 * **azureMonitor**: Azure Monitor
 */
export declare type LoggerType = string;

/** Logger update contract. */
export declare interface LoggerUpdateContract {
    /** Logger type. */
    loggerType?: LoggerType;
    /** Logger description. */
    description?: string;
    /** Logger credentials. */
    credentials?: {
        [propertyName: string]: string;
    };
    /** Whether records are buffered in the logger before publishing. Default is assumed to be true. */
    isBuffered?: boolean;
}

/** Defines headers for Logger_update operation. */
export declare interface LoggerUpdateHeaders {
    /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
    eTag?: string;
}

/** Optional parameters. */
export declare interface LoggerUpdateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the update operation. */
export declare type LoggerUpdateResponse = LoggerUpdateHeaders & LoggerContract;

/**
 * Defines values for Method. \
 * {@link KnownMethod} can be used interchangeably with Method,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **GET** \
 * **POST**
 */
export declare type Method = string;

/** Defines values for NameAvailabilityReason. */
export declare type NameAvailabilityReason = "Valid" | "Invalid" | "AlreadyExists";

/** Interface representing a NamedValue. */
export declare interface NamedValue {
    /**
     * Lists a collection of named values defined within a service instance.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param options The options parameters.
     */
    listByService(resourceGroupName: string, serviceName: string, options?: NamedValueListByServiceOptionalParams): PagedAsyncIterableIterator<NamedValueContract>;
    /**
     * Gets the entity state (Etag) version of the named value specified by its identifier.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param namedValueId Identifier of the NamedValue.
     * @param options The options parameters.
     */
    getEntityTag(resourceGroupName: string, serviceName: string, namedValueId: string, options?: NamedValueGetEntityTagOptionalParams): Promise<NamedValueGetEntityTagResponse>;
    /**
     * Gets the details of the named value specified by its identifier.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param namedValueId Identifier of the NamedValue.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, serviceName: string, namedValueId: string, options?: NamedValueGetOptionalParams): Promise<NamedValueGetResponse>;
    /**
     * Creates or updates named value.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param namedValueId Identifier of the NamedValue.
     * @param parameters Create parameters.
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName: string, serviceName: string, namedValueId: string, parameters: NamedValueCreateContract, options?: NamedValueCreateOrUpdateOptionalParams): Promise<PollerLike<PollOperationState<NamedValueCreateOrUpdateResponse>, NamedValueCreateOrUpdateResponse>>;
    /**
     * Creates or updates named value.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param namedValueId Identifier of the NamedValue.
     * @param parameters Create parameters.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName: string, serviceName: string, namedValueId: string, parameters: NamedValueCreateContract, options?: NamedValueCreateOrUpdateOptionalParams): Promise<NamedValueCreateOrUpdateResponse>;
    /**
     * Updates the specific named value.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param namedValueId Identifier of the NamedValue.
     * @param ifMatch ETag of the Entity. ETag should match the current entity state from the header
     *                response of the GET request or it should be * for unconditional update.
     * @param parameters Update parameters.
     * @param options The options parameters.
     */
    beginUpdate(resourceGroupName: string, serviceName: string, namedValueId: string, ifMatch: string, parameters: NamedValueUpdateParameters, options?: NamedValueUpdateOptionalParams): Promise<PollerLike<PollOperationState<NamedValueUpdateResponse>, NamedValueUpdateResponse>>;
    /**
     * Updates the specific named value.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param namedValueId Identifier of the NamedValue.
     * @param ifMatch ETag of the Entity. ETag should match the current entity state from the header
     *                response of the GET request or it should be * for unconditional update.
     * @param parameters Update parameters.
     * @param options The options parameters.
     */
    beginUpdateAndWait(resourceGroupName: string, serviceName: string, namedValueId: string, ifMatch: string, parameters: NamedValueUpdateParameters, options?: NamedValueUpdateOptionalParams): Promise<NamedValueUpdateResponse>;
    /**
     * Deletes specific named value from the API Management service instance.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param namedValueId Identifier of the NamedValue.
     * @param ifMatch ETag of the Entity. ETag should match the current entity state from the header
     *                response of the GET request or it should be * for unconditional update.
     * @param options The options parameters.
     */
    delete(resourceGroupName: string, serviceName: string, namedValueId: string, ifMatch: string, options?: NamedValueDeleteOptionalParams): Promise<void>;
    /**
     * Gets the secret of the named value specified by its identifier.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param namedValueId Identifier of the NamedValue.
     * @param options The options parameters.
     */
    listValue(resourceGroupName: string, serviceName: string, namedValueId: string, options?: NamedValueListValueOptionalParams): Promise<NamedValueListValueResponse>;
    /**
     * Refresh the secret of the named value specified by its identifier.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param namedValueId Identifier of the NamedValue.
     * @param options The options parameters.
     */
    beginRefreshSecret(resourceGroupName: string, serviceName: string, namedValueId: string, options?: NamedValueRefreshSecretOptionalParams): Promise<PollerLike<PollOperationState<NamedValueRefreshSecretResponse>, NamedValueRefreshSecretResponse>>;
    /**
     * Refresh the secret of the named value specified by its identifier.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param namedValueId Identifier of the NamedValue.
     * @param options The options parameters.
     */
    beginRefreshSecretAndWait(resourceGroupName: string, serviceName: string, namedValueId: string, options?: NamedValueRefreshSecretOptionalParams): Promise<NamedValueRefreshSecretResponse>;
}

/** Paged NamedValue list representation. */
export declare interface NamedValueCollection {
    /** Page values. */
    value?: NamedValueContract[];
    /** Total record count number across all pages. */
    count?: number;
    /** Next page link if any. */
    nextLink?: string;
}

/** NamedValue details. */
export declare interface NamedValueContract extends Resource {
    /** Optional tags that when provided can be used to filter the NamedValue list. */
    tags?: string[];
    /** Determines whether the value is a secret and should be encrypted or not. Default value is false. */
    secret?: boolean;
    /** Unique name of NamedValue. It may contain only letters, digits, period, dash, and underscore characters. */
    displayName?: string;
    /** Value of the NamedValue. Can contain policy expressions. It may not be empty or consist only of whitespace. This property will not be filled on 'GET' operations! Use '/listSecrets' POST request to get the value. */
    value?: string;
    /** KeyVault location details of the namedValue. */
    keyVault?: KeyVaultContractProperties;
}

/** NamedValue Contract properties. */
export declare interface NamedValueContractProperties extends NamedValueEntityBaseParameters {
    /** Unique name of NamedValue. It may contain only letters, digits, period, dash, and underscore characters. */
    displayName: string;
    /** Value of the NamedValue. Can contain policy expressions. It may not be empty or consist only of whitespace. This property will not be filled on 'GET' operations! Use '/listSecrets' POST request to get the value. */
    value?: string;
    /** KeyVault location details of the namedValue. */
    keyVault?: KeyVaultContractProperties;
}

/** NamedValue details. */
export declare interface NamedValueCreateContract extends Resource {
    /** Optional tags that when provided can be used to filter the NamedValue list. */
    tags?: string[];
    /** Determines whether the value is a secret and should be encrypted or not. Default value is false. */
    secret?: boolean;
    /** Unique name of NamedValue. It may contain only letters, digits, period, dash, and underscore characters. */
    displayName?: string;
    /** Value of the NamedValue. Can contain policy expressions. It may not be empty or consist only of whitespace. This property will not be filled on 'GET' operations! Use '/listSecrets' POST request to get the value. */
    value?: string;
    /** KeyVault location details of the namedValue. */
    keyVault?: KeyVaultContractCreateProperties;
}

/** NamedValue Contract properties. */
export declare interface NamedValueCreateContractProperties extends NamedValueEntityBaseParameters {
    /** Unique name of NamedValue. It may contain only letters, digits, period, dash, and underscore characters. */
    displayName: string;
    /** Value of the NamedValue. Can contain policy expressions. It may not be empty or consist only of whitespace. This property will not be filled on 'GET' operations! Use '/listSecrets' POST request to get the value. */
    value?: string;
    /** KeyVault location details of the namedValue. */
    keyVault?: KeyVaultContractCreateProperties;
}

/** Defines headers for NamedValue_createOrUpdate operation. */
export declare interface NamedValueCreateOrUpdateHeaders {
    /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
    eTag?: string;
}

/** Optional parameters. */
export declare interface NamedValueCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
    /** ETag of the Entity. Not required when creating an entity, but required when updating an entity. */
    ifMatch?: string;
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export declare type NamedValueCreateOrUpdateResponse = NamedValueCreateOrUpdateHeaders & NamedValueContract;

/** Optional parameters. */
export declare interface NamedValueDeleteOptionalParams extends coreClient.OperationOptions {
}

/** NamedValue Entity Base Parameters set. */
export declare interface NamedValueEntityBaseParameters {
    /** Optional tags that when provided can be used to filter the NamedValue list. */
    tags?: string[];
    /** Determines whether the value is a secret and should be encrypted or not. Default value is false. */
    secret?: boolean;
}

/** Defines headers for NamedValue_getEntityTag operation. */
export declare interface NamedValueGetEntityTagHeaders {
    /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
    eTag?: string;
}

/** Optional parameters. */
export declare interface NamedValueGetEntityTagOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the getEntityTag operation. */
export declare type NamedValueGetEntityTagResponse = NamedValueGetEntityTagHeaders;

/** Defines headers for NamedValue_get operation. */
export declare interface NamedValueGetHeaders {
    /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
    eTag?: string;
}

/** Optional parameters. */
export declare interface NamedValueGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type NamedValueGetResponse = NamedValueGetHeaders & NamedValueContract;

/** Optional parameters. */
export declare interface NamedValueListByServiceNextOptionalParams extends coreClient.OperationOptions {
    /** |     Field     |     Usage     |     Supported operators     |     Supported functions     |</br>|-------------|-------------|-------------|-------------|</br>| tags | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith, any, all |</br>| displayName | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |</br> */
    filter?: string;
    /** Number of records to return. */
    top?: number;
    /** Number of records to skip. */
    skip?: number;
    /** When set to true, the response contains only named value entities which failed refresh. */
    isKeyVaultRefreshFailed?: boolean;
}

/** Contains response data for the listByServiceNext operation. */
export declare type NamedValueListByServiceNextResponse = NamedValueCollection;

/** Optional parameters. */
export declare interface NamedValueListByServiceOptionalParams extends coreClient.OperationOptions {
    /** |     Field     |     Usage     |     Supported operators     |     Supported functions     |</br>|-------------|-------------|-------------|-------------|</br>| tags | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith, any, all |</br>| displayName | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |</br> */
    filter?: string;
    /** Number of records to return. */
    top?: number;
    /** Number of records to skip. */
    skip?: number;
    /** When set to true, the response contains only named value entities which failed refresh. */
    isKeyVaultRefreshFailed?: boolean;
}

/** Contains response data for the listByService operation. */
export declare type NamedValueListByServiceResponse = NamedValueCollection;

/** Defines headers for NamedValue_listValue operation. */
export declare interface NamedValueListValueHeaders {
    /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
    eTag?: string;
}

/** Optional parameters. */
export declare interface NamedValueListValueOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listValue operation. */
export declare type NamedValueListValueResponse = NamedValueListValueHeaders & NamedValueSecretContract;

/** Defines headers for NamedValue_refreshSecret operation. */
export declare interface NamedValueRefreshSecretHeaders {
    /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
    eTag?: string;
}

/** Optional parameters. */
export declare interface NamedValueRefreshSecretOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the refreshSecret operation. */
export declare type NamedValueRefreshSecretResponse = NamedValueRefreshSecretHeaders & NamedValueContract;

/** Client or app secret used in IdentityProviders, Aad, OpenID or OAuth. */
export declare interface NamedValueSecretContract {
    /** This is secret value of the NamedValue entity. */
    value?: string;
}

/** Defines headers for NamedValue_update operation. */
export declare interface NamedValueUpdateHeaders {
    /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
    eTag?: string;
}

/** Optional parameters. */
export declare interface NamedValueUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** NamedValue Contract properties. */
export declare interface NamedValueUpdateParameterProperties extends NamedValueEntityBaseParameters {
    /** Unique name of NamedValue. It may contain only letters, digits, period, dash, and underscore characters. */
    displayName?: string;
    /** Value of the NamedValue. Can contain policy expressions. It may not be empty or consist only of whitespace. */
    value?: string;
    /** KeyVault location details of the namedValue. */
    keyVault?: KeyVaultContractCreateProperties;
}

/** NamedValue update Parameters. */
export declare interface NamedValueUpdateParameters {
    /** Optional tags that when provided can be used to filter the NamedValue list. */
    tags?: string[];
    /** Determines whether the value is a secret and should be encrypted or not. Default value is false. */
    secret?: boolean;
    /** Unique name of NamedValue. It may contain only letters, digits, period, dash, and underscore characters. */
    displayName?: string;
    /** Value of the NamedValue. Can contain policy expressions. It may not be empty or consist only of whitespace. */
    value?: string;
    /** KeyVault location details of the namedValue. */
    keyVault?: KeyVaultContractCreateProperties;
}

/** Contains response data for the update operation. */
export declare type NamedValueUpdateResponse = NamedValueUpdateHeaders & NamedValueContract;

/** Interface representing a NetworkStatus. */
export declare interface NetworkStatus {
    /**
     * Gets the Connectivity Status to the external resources on which the Api Management service depends
     * from inside the Cloud Service. This also returns the DNS Servers as visible to the CloudService.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param options The options parameters.
     */
    listByService(resourceGroupName: string, serviceName: string, options?: NetworkStatusListByServiceOptionalParams): Promise<NetworkStatusListByServiceResponse>;
    /**
     * Gets the Connectivity Status to the external resources on which the Api Management service depends
     * from inside the Cloud Service. This also returns the DNS Servers as visible to the CloudService.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param locationName Location in which the API Management service is deployed. This is one of the
     *                     Azure Regions like West US, East US, South Central US.
     * @param options The options parameters.
     */
    listByLocation(resourceGroupName: string, serviceName: string, locationName: string, options?: NetworkStatusListByLocationOptionalParams): Promise<NetworkStatusListByLocationResponse>;
}

/** Network Status details. */
export declare interface NetworkStatusContract {
    /** Gets the list of DNS servers IPV4 addresses. */
    dnsServers: string[];
    /** Gets the list of Connectivity Status to the Resources on which the service depends upon. */
    connectivityStatus: ConnectivityStatusContract[];
}

/** Network Status in the Location */
export declare interface NetworkStatusContractByLocation {
    /** Location of service */
    location?: string;
    /** Network status in Location */
    networkStatus?: NetworkStatusContract;
}

/** Optional parameters. */
export declare interface NetworkStatusListByLocationOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByLocation operation. */
export declare type NetworkStatusListByLocationResponse = NetworkStatusContract;

/** Optional parameters. */
export declare interface NetworkStatusListByServiceOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByService operation. */
export declare type NetworkStatusListByServiceResponse = NetworkStatusContractByLocation[];

/** Interface representing a Notification. */
declare interface Notification_2 {
    /**
     * Lists a collection of properties defined within a service instance.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param options The options parameters.
     */
    listByService(resourceGroupName: string, serviceName: string, options?: NotificationListByServiceOptionalParams): PagedAsyncIterableIterator<NotificationContract>;
    /**
     * Gets the details of the Notification specified by its identifier.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param notificationName Notification Name Identifier.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, serviceName: string, notificationName: NotificationName, options?: NotificationGetOptionalParams): Promise<NotificationGetResponse>;
    /**
     * Create or Update API Management publisher notification.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param notificationName Notification Name Identifier.
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName: string, serviceName: string, notificationName: NotificationName, options?: NotificationCreateOrUpdateOptionalParams): Promise<NotificationCreateOrUpdateResponse>;
}
export { Notification_2 as Notification }

/** Paged Notification list representation. */
export declare interface NotificationCollection {
    /** Page values. */
    value?: NotificationContract[];
    /** Total record count number across all pages. */
    count?: number;
    /** Next page link if any. */
    nextLink?: string;
}

/** Notification details. */
export declare interface NotificationContract extends Resource {
    /** Title of the Notification. */
    title?: string;
    /** Description of the Notification. */
    description?: string;
    /** Recipient Parameter values. */
    recipients?: RecipientsContractProperties;
}

/** Optional parameters. */
export declare interface NotificationCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
    /** ETag of the Entity. Not required when creating an entity, but required when updating an entity. */
    ifMatch?: string;
}

/** Contains response data for the createOrUpdate operation. */
export declare type NotificationCreateOrUpdateResponse = NotificationContract;

/** Optional parameters. */
export declare interface NotificationGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type NotificationGetResponse = NotificationContract;

/** Optional parameters. */
export declare interface NotificationListByServiceNextOptionalParams extends coreClient.OperationOptions {
    /** Number of records to return. */
    top?: number;
    /** Number of records to skip. */
    skip?: number;
}

/** Contains response data for the listByServiceNext operation. */
export declare type NotificationListByServiceNextResponse = NotificationCollection;

/** Optional parameters. */
export declare interface NotificationListByServiceOptionalParams extends coreClient.OperationOptions {
    /** Number of records to return. */
    top?: number;
    /** Number of records to skip. */
    skip?: number;
}

/** Contains response data for the listByService operation. */
export declare type NotificationListByServiceResponse = NotificationCollection;

/**
 * Defines values for NotificationName. \
 * {@link KnownNotificationName} can be used interchangeably with NotificationName,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **RequestPublisherNotificationMessage**: The following email recipients and users will receive email notifications about subscription requests for API products requiring approval. \
 * **PurchasePublisherNotificationMessage**: The following email recipients and users will receive email notifications about new API product subscriptions. \
 * **NewApplicationNotificationMessage**: The following email recipients and users will receive email notifications when new applications are submitted to the application gallery. \
 * **BCC**: The following recipients will receive blind carbon copies of all emails sent to developers. \
 * **NewIssuePublisherNotificationMessage**: The following email recipients and users will receive email notifications when a new issue or comment is submitted on the developer portal. \
 * **AccountClosedPublisher**: The following email recipients and users will receive email notifications when developer closes his account. \
 * **QuotaLimitApproachingPublisherNotificationMessage**: The following email recipients and users will receive email notifications when subscription usage gets close to usage quota.
 */
export declare type NotificationName = string;

/** Interface representing a NotificationRecipientEmail. */
export declare interface NotificationRecipientEmail {
    /**
     * Gets the list of the Notification Recipient Emails subscribed to a notification.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param notificationName Notification Name Identifier.
     * @param options The options parameters.
     */
    listByNotification(resourceGroupName: string, serviceName: string, notificationName: NotificationName, options?: NotificationRecipientEmailListByNotificationOptionalParams): Promise<NotificationRecipientEmailListByNotificationResponse>;
    /**
     * Determine if Notification Recipient Email subscribed to the notification.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param notificationName Notification Name Identifier.
     * @param email Email identifier.
     * @param options The options parameters.
     */
    checkEntityExists(resourceGroupName: string, serviceName: string, notificationName: NotificationName, email: string, options?: NotificationRecipientEmailCheckEntityExistsOptionalParams): Promise<NotificationRecipientEmailCheckEntityExistsResponse>;
    /**
     * Adds the Email address to the list of Recipients for the Notification.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param notificationName Notification Name Identifier.
     * @param email Email identifier.
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName: string, serviceName: string, notificationName: NotificationName, email: string, options?: NotificationRecipientEmailCreateOrUpdateOptionalParams): Promise<NotificationRecipientEmailCreateOrUpdateResponse>;
    /**
     * Removes the email from the list of Notification.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param notificationName Notification Name Identifier.
     * @param email Email identifier.
     * @param options The options parameters.
     */
    delete(resourceGroupName: string, serviceName: string, notificationName: NotificationName, email: string, options?: NotificationRecipientEmailDeleteOptionalParams): Promise<void>;
}

/** Optional parameters. */
export declare interface NotificationRecipientEmailCheckEntityExistsOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the checkEntityExists operation. */
export declare type NotificationRecipientEmailCheckEntityExistsResponse = {
    body: boolean;
};

/** Optional parameters. */
export declare interface NotificationRecipientEmailCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the createOrUpdate operation. */
export declare type NotificationRecipientEmailCreateOrUpdateResponse = RecipientEmailContract;

/** Optional parameters. */
export declare interface NotificationRecipientEmailDeleteOptionalParams extends coreClient.OperationOptions {
}

/** Optional parameters. */
export declare interface NotificationRecipientEmailListByNotificationOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByNotification operation. */
export declare type NotificationRecipientEmailListByNotificationResponse = RecipientEmailCollection;

/** Interface representing a NotificationRecipientUser. */
export declare interface NotificationRecipientUser {
    /**
     * Gets the list of the Notification Recipient User subscribed to the notification.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param notificationName Notification Name Identifier.
     * @param options The options parameters.
     */
    listByNotification(resourceGroupName: string, serviceName: string, notificationName: NotificationName, options?: NotificationRecipientUserListByNotificationOptionalParams): Promise<NotificationRecipientUserListByNotificationResponse>;
    /**
     * Determine if the Notification Recipient User is subscribed to the notification.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param notificationName Notification Name Identifier.
     * @param userId User identifier. Must be unique in the current API Management service instance.
     * @param options The options parameters.
     */
    checkEntityExists(resourceGroupName: string, serviceName: string, notificationName: NotificationName, userId: string, options?: NotificationRecipientUserCheckEntityExistsOptionalParams): Promise<NotificationRecipientUserCheckEntityExistsResponse>;
    /**
     * Adds the API Management User to the list of Recipients for the Notification.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param notificationName Notification Name Identifier.
     * @param userId User identifier. Must be unique in the current API Management service instance.
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName: string, serviceName: string, notificationName: NotificationName, userId: string, options?: NotificationRecipientUserCreateOrUpdateOptionalParams): Promise<NotificationRecipientUserCreateOrUpdateResponse>;
    /**
     * Removes the API Management user from the list of Notification.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param notificationName Notification Name Identifier.
     * @param userId User identifier. Must be unique in the current API Management service instance.
     * @param options The options parameters.
     */
    delete(resourceGroupName: string, serviceName: string, notificationName: NotificationName, userId: string, options?: NotificationRecipientUserDeleteOptionalParams): Promise<void>;
}

/** Optional parameters. */
export declare interface NotificationRecipientUserCheckEntityExistsOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the checkEntityExists operation. */
export declare type NotificationRecipientUserCheckEntityExistsResponse = {
    body: boolean;
};

/** Optional parameters. */
export declare interface NotificationRecipientUserCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the createOrUpdate operation. */
export declare type NotificationRecipientUserCreateOrUpdateResponse = RecipientUserContract;

/** Optional parameters. */
export declare interface NotificationRecipientUserDeleteOptionalParams extends coreClient.OperationOptions {
}

/** Optional parameters. */
export declare interface NotificationRecipientUserListByNotificationOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByNotification operation. */
export declare type NotificationRecipientUserListByNotificationResponse = RecipientUserCollection;

/** API OAuth2 Authentication settings details. */
export declare interface OAuth2AuthenticationSettingsContract {
    /** OAuth authorization server identifier. */
    authorizationServerId?: string;
    /** operations scope. */
    scope?: string;
}

/** API OAuth2 Authentication settings details. */
export declare interface OpenIdAuthenticationSettingsContract {
    /** OAuth authorization server identifier. */
    openidProviderId?: string;
    /** How to send token to the server. */
    bearerTokenSendingMethods?: BearerTokenSendingMethods[];
}

/** Interface representing a OpenIdConnectProvider. */
export declare interface OpenIdConnectProvider {
    /**
     * Lists of all the OpenId Connect Providers.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param options The options parameters.
     */
    listByService(resourceGroupName: string, serviceName: string, options?: OpenIdConnectProviderListByServiceOptionalParams): PagedAsyncIterableIterator<OpenidConnectProviderContract>;
    /**
     * Gets the entity state (Etag) version of the openIdConnectProvider specified by its identifier.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param opid Identifier of the OpenID Connect Provider.
     * @param options The options parameters.
     */
    getEntityTag(resourceGroupName: string, serviceName: string, opid: string, options?: OpenIdConnectProviderGetEntityTagOptionalParams): Promise<OpenIdConnectProviderGetEntityTagResponse>;
    /**
     * Gets specific OpenID Connect Provider without secrets.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param opid Identifier of the OpenID Connect Provider.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, serviceName: string, opid: string, options?: OpenIdConnectProviderGetOptionalParams): Promise<OpenIdConnectProviderGetResponse>;
    /**
     * Creates or updates the OpenID Connect Provider.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param opid Identifier of the OpenID Connect Provider.
     * @param parameters Create parameters.
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName: string, serviceName: string, opid: string, parameters: OpenidConnectProviderContract, options?: OpenIdConnectProviderCreateOrUpdateOptionalParams): Promise<OpenIdConnectProviderCreateOrUpdateResponse>;
    /**
     * Updates the specific OpenID Connect Provider.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param opid Identifier of the OpenID Connect Provider.
     * @param ifMatch ETag of the Entity. ETag should match the current entity state from the header
     *                response of the GET request or it should be * for unconditional update.
     * @param parameters Update parameters.
     * @param options The options parameters.
     */
    update(resourceGroupName: string, serviceName: string, opid: string, ifMatch: string, parameters: OpenidConnectProviderUpdateContract, options?: OpenIdConnectProviderUpdateOptionalParams): Promise<OpenIdConnectProviderUpdateResponse>;
    /**
     * Deletes specific OpenID Connect Provider of the API Management service instance.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param opid Identifier of the OpenID Connect Provider.
     * @param ifMatch ETag of the Entity. ETag should match the current entity state from the header
     *                response of the GET request or it should be * for unconditional update.
     * @param options The options parameters.
     */
    delete(resourceGroupName: string, serviceName: string, opid: string, ifMatch: string, options?: OpenIdConnectProviderDeleteOptionalParams): Promise<void>;
    /**
     * Gets the client secret details of the OpenID Connect Provider.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param opid Identifier of the OpenID Connect Provider.
     * @param options The options parameters.
     */
    listSecrets(resourceGroupName: string, serviceName: string, opid: string, options?: OpenIdConnectProviderListSecretsOptionalParams): Promise<OpenIdConnectProviderListSecretsResponse>;
}

/** Paged OpenIdProviders list representation. */
export declare interface OpenIdConnectProviderCollection {
    /** Page values. */
    value?: OpenidConnectProviderContract[];
    /** Total record count number across all pages. */
    count?: number;
    /** Next page link if any. */
    nextLink?: string;
}

/** OpenId Connect Provider details. */
export declare interface OpenidConnectProviderContract extends Resource {
    /** User-friendly OpenID Connect Provider name. */
    displayName?: string;
    /** User-friendly description of OpenID Connect Provider. */
    description?: string;
    /** Metadata endpoint URI. */
    metadataEndpoint?: string;
    /** Client ID of developer console which is the client application. */
    clientId?: string;
    /** Client Secret of developer console which is the client application. */
    clientSecret?: string;
}

/** Defines headers for OpenIdConnectProvider_createOrUpdate operation. */
export declare interface OpenIdConnectProviderCreateOrUpdateHeaders {
    /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
    eTag?: string;
}

/** Optional parameters. */
export declare interface OpenIdConnectProviderCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
    /** ETag of the Entity. Not required when creating an entity, but required when updating an entity. */
    ifMatch?: string;
}

/** Contains response data for the createOrUpdate operation. */
export declare type OpenIdConnectProviderCreateOrUpdateResponse = OpenIdConnectProviderCreateOrUpdateHeaders & OpenidConnectProviderContract;

/** Optional parameters. */
export declare interface OpenIdConnectProviderDeleteOptionalParams extends coreClient.OperationOptions {
}

/** Defines headers for OpenIdConnectProvider_getEntityTag operation. */
export declare interface OpenIdConnectProviderGetEntityTagHeaders {
    /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
    eTag?: string;
}

/** Optional parameters. */
export declare interface OpenIdConnectProviderGetEntityTagOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the getEntityTag operation. */
export declare type OpenIdConnectProviderGetEntityTagResponse = OpenIdConnectProviderGetEntityTagHeaders;

/** Defines headers for OpenIdConnectProvider_get operation. */
export declare interface OpenIdConnectProviderGetHeaders {
    /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
    eTag?: string;
}

/** Optional parameters. */
export declare interface OpenIdConnectProviderGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type OpenIdConnectProviderGetResponse = OpenIdConnectProviderGetHeaders & OpenidConnectProviderContract;

/** Optional parameters. */
export declare interface OpenIdConnectProviderListByServiceNextOptionalParams extends coreClient.OperationOptions {
    /** |     Field     |     Usage     |     Supported operators     |     Supported functions     |</br>|-------------|-------------|-------------|-------------|</br>| name | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |</br>| displayName | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |</br> */
    filter?: string;
    /** Number of records to return. */
    top?: number;
    /** Number of records to skip. */
    skip?: number;
}

/** Contains response data for the listByServiceNext operation. */
export declare type OpenIdConnectProviderListByServiceNextResponse = OpenIdConnectProviderCollection;

/** Optional parameters. */
export declare interface OpenIdConnectProviderListByServiceOptionalParams extends coreClient.OperationOptions {
    /** |     Field     |     Usage     |     Supported operators     |     Supported functions     |</br>|-------------|-------------|-------------|-------------|</br>| name | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |</br>| displayName | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |</br> */
    filter?: string;
    /** Number of records to return. */
    top?: number;
    /** Number of records to skip. */
    skip?: number;
}

/** Contains response data for the listByService operation. */
export declare type OpenIdConnectProviderListByServiceResponse = OpenIdConnectProviderCollection;

/** Defines headers for OpenIdConnectProvider_listSecrets operation. */
export declare interface OpenIdConnectProviderListSecretsHeaders {
    /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
    eTag?: string;
}

/** Optional parameters. */
export declare interface OpenIdConnectProviderListSecretsOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listSecrets operation. */
export declare type OpenIdConnectProviderListSecretsResponse = OpenIdConnectProviderListSecretsHeaders & ClientSecretContract;

/** Parameters supplied to the Update OpenID Connect Provider operation. */
export declare interface OpenidConnectProviderUpdateContract {
    /** User-friendly OpenID Connect Provider name. */
    displayName?: string;
    /** User-friendly description of OpenID Connect Provider. */
    description?: string;
    /** Metadata endpoint URI. */
    metadataEndpoint?: string;
    /** Client ID of developer console which is the client application. */
    clientId?: string;
    /** Client Secret of developer console which is the client application. */
    clientSecret?: string;
}

/** Defines headers for OpenIdConnectProvider_update operation. */
export declare interface OpenIdConnectProviderUpdateHeaders {
    /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
    eTag?: string;
}

/** Optional parameters. */
export declare interface OpenIdConnectProviderUpdateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the update operation. */
export declare type OpenIdConnectProviderUpdateResponse = OpenIdConnectProviderUpdateHeaders & OpenidConnectProviderContract;

/** REST API operation */
export declare interface Operation {
    /** Operation name: {provider}/{resource}/{operation} */
    name?: string;
    /** The object that describes the operation. */
    display?: OperationDisplay;
    /** The operation origin. */
    origin?: string;
    /** The operation properties. */
    properties?: Record<string, unknown>;
}

/** Paged Operation list representation. */
export declare interface OperationCollection {
    /**
     * Page values.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly value?: OperationContract[];
    /** Total record count number across all pages. */
    count?: number;
    /**
     * Next page link if any.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextLink?: string;
}

/** API Operation details. */
export declare interface OperationContract extends Resource {
    /** Collection of URL template parameters. */
    templateParameters?: ParameterContract[];
    /** Description of the operation. May include HTML formatting tags. */
    description?: string;
    /** An entity containing request details. */
    request?: RequestContract;
    /** Array of Operation responses. */
    responses?: ResponseContract[];
    /** Operation Policies */
    policies?: string;
    /** Operation Name. */
    displayName?: string;
    /** A Valid HTTP Operation Method. Typical Http Methods like GET, PUT, POST but not limited by only them. */
    method?: string;
    /** Relative URL template identifying the target resource for this operation. May include parameters. Example: /customers/{cid}/orders/{oid}/?date={date} */
    urlTemplate?: string;
}

/** Operation Contract Properties */
export declare interface OperationContractProperties extends OperationEntityBaseContract {
    /** Operation Name. */
    displayName: string;
    /** A Valid HTTP Operation Method. Typical Http Methods like GET, PUT, POST but not limited by only them. */
    method: string;
    /** Relative URL template identifying the target resource for this operation. May include parameters. Example: /customers/{cid}/orders/{oid}/?date={date} */
    urlTemplate: string;
}

/** The object that describes the operation. */
export declare interface OperationDisplay {
    /** Friendly name of the resource provider */
    provider?: string;
    /** Operation type: read, write, delete, listKeys/action, etc. */
    operation?: string;
    /** Resource type on which the operation is performed. */
    resource?: string;
    /** Friendly name of the operation */
    description?: string;
}

/** API Operation Entity Base Contract details. */
export declare interface OperationEntityBaseContract {
    /** Collection of URL template parameters. */
    templateParameters?: ParameterContract[];
    /** Description of the operation. May include HTML formatting tags. */
    description?: string;
    /** An entity containing request details. */
    request?: RequestContract;
    /** Array of Operation responses. */
    responses?: ResponseContract[];
    /** Operation Policies */
    policies?: string;
}

/** Optional parameters. */
export declare interface OperationListByTagsNextOptionalParams extends coreClient.OperationOptions {
    /** |     Field     |     Usage     |     Supported operators     |     Supported functions     |</br>|-------------|-------------|-------------|-------------|</br>| name | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |</br>| displayName | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |</br>| apiName | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |</br>| description | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |</br>| method | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |</br>| urlTemplate | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |</br> */
    filter?: string;
    /** Number of records to return. */
    top?: number;
    /** Number of records to skip. */
    skip?: number;
    /** Include not tagged Operations. */
    includeNotTaggedOperations?: boolean;
}

/** Contains response data for the listByTagsNext operation. */
export declare type OperationListByTagsNextResponse = TagResourceCollection;

/** Optional parameters. */
export declare interface OperationListByTagsOptionalParams extends coreClient.OperationOptions {
    /** |     Field     |     Usage     |     Supported operators     |     Supported functions     |</br>|-------------|-------------|-------------|-------------|</br>| name | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |</br>| displayName | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |</br>| apiName | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |</br>| description | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |</br>| method | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |</br>| urlTemplate | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |</br> */
    filter?: string;
    /** Number of records to return. */
    top?: number;
    /** Number of records to skip. */
    skip?: number;
    /** Include not tagged Operations. */
    includeNotTaggedOperations?: boolean;
}

/** Contains response data for the listByTags operation. */
export declare type OperationListByTagsResponse = TagResourceCollection;

/** Result of the request to list REST API operations. It contains a list of operations and a URL nextLink to get the next set of results. */
export declare interface OperationListResult {
    /** List of operations supported by the resource provider. */
    value?: Operation[];
    /** URL to get the next set of operation list results if there are any. */
    nextLink?: string;
}

/**
 * Defines values for OperationNameFormat. \
 * {@link KnownOperationNameFormat} can be used interchangeably with OperationNameFormat,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Name**: API_NAME;rev=API_REVISION - OPERATION_NAME \
 * **Url**: HTTP_VERB URL
 */
export declare type OperationNameFormat = string;

/** Interface representing a OperationOperations. */
export declare interface OperationOperations {
    /**
     * Lists a collection of operations associated with tags.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param apiId API revision identifier. Must be unique in the current API Management service instance.
     *              Non-current revision has ;rev=n as a suffix where n is the revision number.
     * @param options The options parameters.
     */
    listByTags(resourceGroupName: string, serviceName: string, apiId: string, options?: OperationListByTagsOptionalParams): PagedAsyncIterableIterator<TagResourceContract>;
}

/** Long Running Git Operation Results. */
export declare interface OperationResultContract extends Resource {
    /** Operation result identifier. */
    idPropertiesId?: string;
    /** Status of an async operation. */
    status?: AsyncOperationStatus;
    /**
     * Start time of an async operation. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard.
     *
     */
    started?: Date;
    /**
     * Last update time of an async operation. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard.
     *
     */
    updated?: Date;
    /** Optional result info. */
    resultInfo?: string;
    /** Error Body Contract */
    error?: ErrorResponseBody;
    /**
     * This property if only provided as part of the TenantConfiguration_Validate operation. It contains the log the entities which will be updated/created/deleted as part of the TenantConfiguration_Deploy operation.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly actionLog?: OperationResultLogItemContract[];
}

/** Log of the entity being created, updated or deleted. */
export declare interface OperationResultLogItemContract {
    /** The type of entity contract. */
    objectType?: string;
    /** Action like create/update/delete. */
    action?: string;
    /** Identifier of the entity being created/updated/deleted. */
    objectKey?: string;
}

/** Operation Entity contract Properties. */
export declare interface OperationTagResourceContractProperties {
    /** Identifier of the operation in form /operations/{operationId}. */
    id?: string;
    /**
     * Operation name.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /**
     * API Name.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly apiName?: string;
    /**
     * API Revision.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly apiRevision?: string;
    /**
     * API Version.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly apiVersion?: string;
    /**
     * Operation Description.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly description?: string;
    /**
     * A Valid HTTP Operation Method. Typical Http Methods like GET, PUT, POST but not limited by only them.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly method?: string;
    /**
     * Relative URL template identifying the target resource for this operation. May include parameters. Example: /customers/{cid}/orders/{oid}/?date={date}
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly urlTemplate?: string;
}

/** API Operation Update Contract details. */
export declare interface OperationUpdateContract {
    /** Collection of URL template parameters. */
    templateParameters?: ParameterContract[];
    /** Description of the operation. May include HTML formatting tags. */
    description?: string;
    /** An entity containing request details. */
    request?: RequestContract;
    /** Array of Operation responses. */
    responses?: ResponseContract[];
    /** Operation Policies */
    policies?: string;
    /** Operation Name. */
    displayName?: string;
    /** A Valid HTTP Operation Method. Typical Http Methods like GET, PUT, POST but not limited by only them. */
    method?: string;
    /** Relative URL template identifying the target resource for this operation. May include parameters. Example: /customers/{cid}/orders/{oid}/?date={date} */
    urlTemplate?: string;
}

/** Operation Update Contract Properties. */
export declare interface OperationUpdateContractProperties extends OperationEntityBaseContract {
    /** Operation Name. */
    displayName?: string;
    /** A Valid HTTP Operation Method. Typical Http Methods like GET, PUT, POST but not limited by only them. */
    method?: string;
    /** Relative URL template identifying the target resource for this operation. May include parameters. Example: /customers/{cid}/orders/{oid}/?date={date} */
    urlTemplate?: string;
}

/**
 * Defines values for Origin. \
 * {@link KnownOrigin} can be used interchangeably with Origin,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Local** \
 * **Inbound** \
 * **Outbound**
 */
export declare type Origin = string;

/** Endpoints accessed for a common purpose that the Api Management Service requires outbound network access to. */
export declare interface OutboundEnvironmentEndpoint {
    /** The type of service accessed by the Api Management Service, e.g., Azure Storage, Azure SQL Database, and Azure Active Directory. */
    category?: string;
    /** The endpoints that the Api Management Service reaches the service at. */
    endpoints?: EndpointDependency[];
}

/** Collection of Outbound Environment Endpoints */
export declare interface OutboundEnvironmentEndpointList {
    /** Collection of resources. */
    value: OutboundEnvironmentEndpoint[];
    /**
     * Link to next page of resources.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextLink?: string;
}

/** Interface representing a OutboundNetworkDependenciesEndpoints. */
export declare interface OutboundNetworkDependenciesEndpoints {
    /**
     * Gets the network endpoints of all outbound dependencies of a ApiManagement service.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param options The options parameters.
     */
    listByService(resourceGroupName: string, serviceName: string, options?: OutboundNetworkDependenciesEndpointsListByServiceOptionalParams): Promise<OutboundNetworkDependenciesEndpointsListByServiceResponse>;
}

/** Optional parameters. */
export declare interface OutboundNetworkDependenciesEndpointsListByServiceOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByService operation. */
export declare type OutboundNetworkDependenciesEndpointsListByServiceResponse = OutboundEnvironmentEndpointList;

/** Operation parameters details. */
export declare interface ParameterContract {
    /** Parameter name. */
    name: string;
    /** Parameter description. */
    description?: string;
    /** Parameter type. */
    type: string;
    /** Default parameter value. */
    defaultValue?: string;
    /** Specifies whether parameter is required or not. */
    required?: boolean;
    /** Parameter values. */
    values?: string[];
    /** Schema identifier. */
    schemaId?: string;
    /** Type name defined by the schema. */
    typeName?: string;
    /** Exampled defined for the parameter. */
    examples?: {
        [propertyName: string]: ParameterExampleContract;
    };
}

/** Parameter example. */
export declare interface ParameterExampleContract {
    /** Short description for the example */
    summary?: string;
    /** Long description for the example */
    description?: string;
    /** Example value. May be a primitive value, or an object. */
    value?: any;
    /** A URL that points to the literal example */
    externalValue?: string;
}

/** Optional parameters. */
export declare interface PerformConnectivityCheckAsyncOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the performConnectivityCheckAsync operation. */
export declare type PerformConnectivityCheckAsyncResponse = ConnectivityCheckResponse;

/** Diagnostic settings for incoming/outgoing HTTP messages to the Gateway. */
export declare interface PipelineDiagnosticSettings {
    /** Diagnostic settings for request. */
    request?: HttpMessageDiagnostic;
    /** Diagnostic settings for response. */
    response?: HttpMessageDiagnostic;
}

/**
 * Defines values for PlatformVersion. \
 * {@link KnownPlatformVersion} can be used interchangeably with PlatformVersion,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **undetermined**: Platform version cannot be determined, as compute platform is not deployed. \
 * **stv1**: Platform running the service on Single Tenant V1 platform. \
 * **stv2**: Platform running the service on Single Tenant V2 platform. \
 * **mtv1**: Platform running the service on Multi Tenant V1 platform.
 */
export declare type PlatformVersion = string;

/** Interface representing a Policy. */
export declare interface Policy {
    /**
     * Lists all the Global Policy definitions of the Api Management service.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param options The options parameters.
     */
    listByService(resourceGroupName: string, serviceName: string, options?: PolicyListByServiceOptionalParams): Promise<PolicyListByServiceResponse>;
    /**
     * Gets the entity state (Etag) version of the Global policy definition in the Api Management service.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param policyId The identifier of the Policy.
     * @param options The options parameters.
     */
    getEntityTag(resourceGroupName: string, serviceName: string, policyId: PolicyIdName, options?: PolicyGetEntityTagOptionalParams): Promise<PolicyGetEntityTagResponse>;
    /**
     * Get the Global policy definition of the Api Management service.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param policyId The identifier of the Policy.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, serviceName: string, policyId: PolicyIdName, options?: PolicyGetOptionalParams): Promise<PolicyGetResponse>;
    /**
     * Creates or updates the global policy configuration of the Api Management service.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param policyId The identifier of the Policy.
     * @param parameters The policy contents to apply.
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName: string, serviceName: string, policyId: PolicyIdName, parameters: PolicyContract, options?: PolicyCreateOrUpdateOptionalParams): Promise<PolicyCreateOrUpdateResponse>;
    /**
     * Deletes the global policy configuration of the Api Management Service.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param policyId The identifier of the Policy.
     * @param ifMatch ETag of the Entity. ETag should match the current entity state from the header
     *                response of the GET request or it should be * for unconditional update.
     * @param options The options parameters.
     */
    delete(resourceGroupName: string, serviceName: string, policyId: PolicyIdName, ifMatch: string, options?: PolicyDeleteOptionalParams): Promise<void>;
}

/** The response of the list policy operation. */
export declare interface PolicyCollection {
    /** Policy Contract value. */
    value?: PolicyContract[];
    /** Total record count number. */
    count?: number;
    /** Next page link if any. */
    nextLink?: string;
}

/**
 * Defines values for PolicyContentFormat. \
 * {@link KnownPolicyContentFormat} can be used interchangeably with PolicyContentFormat,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **xml**: The contents are inline and Content type is an XML document. \
 * **xml-link**: The policy XML document is hosted on a http endpoint accessible from the API Management service. \
 * **rawxml**: The contents are inline and Content type is a non XML encoded policy document. \
 * **rawxml-link**: The policy document is not Xml encoded and is hosted on a http endpoint accessible from the API Management service.
 */
export declare type PolicyContentFormat = string;

/** Policy Contract details. */
export declare interface PolicyContract extends Resource {
    /** Contents of the Policy as defined by the format. */
    value?: string;
    /** Format of the policyContent. */
    format?: PolicyContentFormat;
}

/** Defines headers for Policy_createOrUpdate operation. */
export declare interface PolicyCreateOrUpdateHeaders {
    /** Current entity state version */
    eTag?: string;
}

/** Optional parameters. */
export declare interface PolicyCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
    /** ETag of the Entity. Not required when creating an entity, but required when updating an entity. */
    ifMatch?: string;
}

/** Contains response data for the createOrUpdate operation. */
export declare type PolicyCreateOrUpdateResponse = PolicyCreateOrUpdateHeaders & PolicyContract;

/** Optional parameters. */
export declare interface PolicyDeleteOptionalParams extends coreClient.OperationOptions {
}

/** Interface representing a PolicyDescription. */
export declare interface PolicyDescription {
    /**
     * Lists all policy descriptions.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param options The options parameters.
     */
    listByService(resourceGroupName: string, serviceName: string, options?: PolicyDescriptionListByServiceOptionalParams): Promise<PolicyDescriptionListByServiceResponse>;
}

/** Descriptions of APIM policies. */
export declare interface PolicyDescriptionCollection {
    /** Descriptions of APIM policies. */
    value?: PolicyDescriptionContract[];
    /** Total record count number. */
    count?: number;
}

/** Policy description details. */
export declare interface PolicyDescriptionContract extends Resource {
    /**
     * Policy description.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly description?: string;
    /**
     * Binary OR value of the Snippet scope.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly scope?: number;
}

/** Optional parameters. */
export declare interface PolicyDescriptionListByServiceOptionalParams extends coreClient.OperationOptions {
    /** Policy scope. */
    scope?: PolicyScopeContract;
}

/** Contains response data for the listByService operation. */
export declare type PolicyDescriptionListByServiceResponse = PolicyDescriptionCollection;

/**
 * Defines values for PolicyExportFormat. \
 * {@link KnownPolicyExportFormat} can be used interchangeably with PolicyExportFormat,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **xml**: The contents are inline and Content type is an XML document. \
 * **rawxml**: The contents are inline and Content type is a non XML encoded policy document.
 */
export declare type PolicyExportFormat = string;

/** Defines headers for Policy_getEntityTag operation. */
export declare interface PolicyGetEntityTagHeaders {
    /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
    eTag?: string;
}

/** Optional parameters. */
export declare interface PolicyGetEntityTagOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the getEntityTag operation. */
export declare type PolicyGetEntityTagResponse = PolicyGetEntityTagHeaders;

/** Defines headers for Policy_get operation. */
export declare interface PolicyGetHeaders {
    /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
    eTag?: string;
}

/** Optional parameters. */
export declare interface PolicyGetOptionalParams extends coreClient.OperationOptions {
    /** Policy Export Format. */
    format?: PolicyExportFormat;
}

/** Contains response data for the get operation. */
export declare type PolicyGetResponse = PolicyGetHeaders & PolicyContract;

/**
 * Defines values for PolicyIdName. \
 * {@link KnownPolicyIdName} can be used interchangeably with PolicyIdName,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **policy**
 */
export declare type PolicyIdName = string;

/** Optional parameters. */
export declare interface PolicyListByServiceOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByService operation. */
export declare type PolicyListByServiceResponse = PolicyCollection;

/** Defines values for PolicyScopeContract. */
export declare type PolicyScopeContract = "Tenant" | "Product" | "Api" | "Operation" | "All";

/** Delegation settings for a developer portal. */
export declare interface PortalDelegationSettings extends Resource {
    /** A delegation Url. */
    url?: string;
    /** A base64-encoded validation key to validate, that a request is coming from Azure API Management. */
    validationKey?: string;
    /** Subscriptions delegation settings. */
    subscriptions?: SubscriptionsDelegationSettingsProperties;
    /** User registration delegation settings. */
    userRegistration?: RegistrationDelegationSettingsProperties;
}

/** Interface representing a PortalRevision. */
export declare interface PortalRevision {
    /**
     * Lists developer portal's revisions.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param options The options parameters.
     */
    listByService(resourceGroupName: string, serviceName: string, options?: PortalRevisionListByServiceOptionalParams): PagedAsyncIterableIterator<PortalRevisionContract>;
    /**
     * Gets the developer portal revision specified by its identifier.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param portalRevisionId Portal revision identifier. Must be unique in the current API Management
     *                         service instance.
     * @param options The options parameters.
     */
    getEntityTag(resourceGroupName: string, serviceName: string, portalRevisionId: string, options?: PortalRevisionGetEntityTagOptionalParams): Promise<PortalRevisionGetEntityTagResponse>;
    /**
     * Gets the developer portal's revision specified by its identifier.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param portalRevisionId Portal revision identifier. Must be unique in the current API Management
     *                         service instance.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, serviceName: string, portalRevisionId: string, options?: PortalRevisionGetOptionalParams): Promise<PortalRevisionGetResponse>;
    /**
     * Creates a new developer portal's revision by running the portal's publishing. The `isCurrent`
     * property indicates if the revision is publicly accessible.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param portalRevisionId Portal revision identifier. Must be unique in the current API Management
     *                         service instance.
     * @param parameters Portal Revision's contract details.
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName: string, serviceName: string, portalRevisionId: string, parameters: PortalRevisionContract, options?: PortalRevisionCreateOrUpdateOptionalParams): Promise<PollerLike<PollOperationState<PortalRevisionCreateOrUpdateResponse>, PortalRevisionCreateOrUpdateResponse>>;
    /**
     * Creates a new developer portal's revision by running the portal's publishing. The `isCurrent`
     * property indicates if the revision is publicly accessible.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param portalRevisionId Portal revision identifier. Must be unique in the current API Management
     *                         service instance.
     * @param parameters Portal Revision's contract details.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName: string, serviceName: string, portalRevisionId: string, parameters: PortalRevisionContract, options?: PortalRevisionCreateOrUpdateOptionalParams): Promise<PortalRevisionCreateOrUpdateResponse>;
    /**
     * Updates the description of specified portal revision or makes it current.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param portalRevisionId Portal revision identifier. Must be unique in the current API Management
     *                         service instance.
     * @param ifMatch ETag of the Entity. ETag should match the current entity state from the header
     *                response of the GET request or it should be * for unconditional update.
     * @param parameters Portal Revision's contract details.
     * @param options The options parameters.
     */
    beginUpdate(resourceGroupName: string, serviceName: string, portalRevisionId: string, ifMatch: string, parameters: PortalRevisionContract, options?: PortalRevisionUpdateOptionalParams): Promise<PollerLike<PollOperationState<PortalRevisionUpdateResponse>, PortalRevisionUpdateResponse>>;
    /**
     * Updates the description of specified portal revision or makes it current.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param portalRevisionId Portal revision identifier. Must be unique in the current API Management
     *                         service instance.
     * @param ifMatch ETag of the Entity. ETag should match the current entity state from the header
     *                response of the GET request or it should be * for unconditional update.
     * @param parameters Portal Revision's contract details.
     * @param options The options parameters.
     */
    beginUpdateAndWait(resourceGroupName: string, serviceName: string, portalRevisionId: string, ifMatch: string, parameters: PortalRevisionContract, options?: PortalRevisionUpdateOptionalParams): Promise<PortalRevisionUpdateResponse>;
}

/** Paged list of portal revisions. */
export declare interface PortalRevisionCollection {
    /**
     * Collection of portal revisions.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly value?: PortalRevisionContract[];
    /**
     * Next page link, if any.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextLink?: string;
}

/** Portal Revision's contract details. */
export declare interface PortalRevisionContract extends Resource {
    /** Portal revision description. */
    description?: string;
    /**
     * Portal revision publishing status details.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly statusDetails?: string;
    /**
     * Status of the portal's revision.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly status?: PortalRevisionStatus;
    /** Indicates if the portal's revision is public. */
    isCurrent?: boolean;
    /**
     * Portal's revision creation date and time.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly createdDateTime?: Date;
    /**
     * Last updated date and time.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly updatedDateTime?: Date;
}

/** Defines headers for PortalRevision_createOrUpdate operation. */
export declare interface PortalRevisionCreateOrUpdateHeaders {
    /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
    eTag?: string;
}

/** Optional parameters. */
export declare interface PortalRevisionCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export declare type PortalRevisionCreateOrUpdateResponse = PortalRevisionCreateOrUpdateHeaders & PortalRevisionContract;

/** Defines headers for PortalRevision_getEntityTag operation. */
export declare interface PortalRevisionGetEntityTagHeaders {
    /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
    eTag?: string;
}

/** Optional parameters. */
export declare interface PortalRevisionGetEntityTagOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the getEntityTag operation. */
export declare type PortalRevisionGetEntityTagResponse = PortalRevisionGetEntityTagHeaders;

/** Defines headers for PortalRevision_get operation. */
export declare interface PortalRevisionGetHeaders {
    /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
    eTag?: string;
}

/** Optional parameters. */
export declare interface PortalRevisionGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type PortalRevisionGetResponse = PortalRevisionGetHeaders & PortalRevisionContract;

/** Optional parameters. */
export declare interface PortalRevisionListByServiceNextOptionalParams extends coreClient.OperationOptions {
    /**
     * | Field       | Supported operators    | Supported functions               |
     * |-------------|------------------------|-----------------------------------|
     *
     * |name | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith|
     * |description | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith|
     * |isCurrent | eq, ne |    |
     *
     */
    filter?: string;
    /** Number of records to return. */
    top?: number;
    /** Number of records to skip. */
    skip?: number;
}

/** Contains response data for the listByServiceNext operation. */
export declare type PortalRevisionListByServiceNextResponse = PortalRevisionCollection;

/** Optional parameters. */
export declare interface PortalRevisionListByServiceOptionalParams extends coreClient.OperationOptions {
    /**
     * | Field       | Supported operators    | Supported functions               |
     * |-------------|------------------------|-----------------------------------|
     *
     * |name | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith|
     * |description | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith|
     * |isCurrent | eq, ne |    |
     *
     */
    filter?: string;
    /** Number of records to return. */
    top?: number;
    /** Number of records to skip. */
    skip?: number;
}

/** Contains response data for the listByService operation. */
export declare type PortalRevisionListByServiceResponse = PortalRevisionCollection;

/**
 * Defines values for PortalRevisionStatus. \
 * {@link KnownPortalRevisionStatus} can be used interchangeably with PortalRevisionStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **pending**: Portal's revision has been queued. \
 * **publishing**: Portal's revision is being published. \
 * **completed**: Portal's revision publishing completed. \
 * **failed**: Portal's revision publishing failed.
 */
export declare type PortalRevisionStatus = string;

/** Defines headers for PortalRevision_update operation. */
export declare interface PortalRevisionUpdateHeaders {
    /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
    eTag?: string;
}

/** Optional parameters. */
export declare interface PortalRevisionUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the update operation. */
export declare type PortalRevisionUpdateResponse = PortalRevisionUpdateHeaders & PortalRevisionContract;

/** Interface representing a PortalSettings. */
export declare interface PortalSettings {
    /**
     * Lists a collection of portalsettings defined within a service instance..
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param options The options parameters.
     */
    listByService(resourceGroupName: string, serviceName: string, options?: PortalSettingsListByServiceOptionalParams): Promise<PortalSettingsListByServiceResponse>;
}

/** Descriptions of APIM policies. */
export declare interface PortalSettingsCollection {
    /** Descriptions of APIM policies. */
    value?: PortalSettingsContract[];
    /** Total record count number. */
    count?: number;
}

/** Portal Settings for the Developer Portal. */
export declare interface PortalSettingsContract extends Resource {
    /** A delegation Url. */
    url?: string;
    /** A base64-encoded validation key to validate, that a request is coming from Azure API Management. */
    validationKey?: string;
    /** Subscriptions delegation settings. */
    subscriptions?: SubscriptionsDelegationSettingsProperties;
    /** User registration delegation settings. */
    userRegistration?: RegistrationDelegationSettingsProperties;
    /** Redirect Anonymous users to the Sign-In page. */
    enabled?: boolean;
    /** Terms of service contract properties. */
    termsOfService?: TermsOfServiceProperties;
}

/** Optional parameters. */
export declare interface PortalSettingsListByServiceOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByService operation. */
export declare type PortalSettingsListByServiceResponse = PortalSettingsCollection;

/** Client or app secret used in IdentityProviders, Aad, OpenID or OAuth. */
export declare interface PortalSettingValidationKeyContract {
    /** This is secret value of the validation key in portal settings. */
    validationKey?: string;
}

/** Sign-In settings for the Developer Portal. */
export declare interface PortalSigninSettings extends Resource {
    /** Redirect Anonymous users to the Sign-In page. */
    enabled?: boolean;
}

/** Sign-Up settings for a developer portal. */
export declare interface PortalSignupSettings extends Resource {
    /** Allow users to sign up on a developer portal. */
    enabled?: boolean;
    /** Terms of service contract properties. */
    termsOfService?: TermsOfServiceProperties;
}

/**
 * Defines values for PreferredIPVersion. \
 * {@link KnownPreferredIPVersion} can be used interchangeably with PreferredIPVersion,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **IPv4**
 */
export declare type PreferredIPVersion = string;

/** The Private Endpoint resource. */
export declare interface PrivateEndpoint {
    /**
     * The ARM identifier for Private Endpoint
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly id?: string;
}

/** The Private Endpoint Connection resource. */
export declare interface PrivateEndpointConnection extends Resource {
    /** The resource of private end point. */
    privateEndpoint?: PrivateEndpoint;
    /** A collection of information about the state of the connection between service consumer and provider. */
    privateLinkServiceConnectionState?: PrivateLinkServiceConnectionState;
    /**
     * The provisioning state of the private endpoint connection resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: PrivateEndpointConnectionProvisioningState;
}

/** Optional parameters. */
export declare interface PrivateEndpointConnectionCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export declare type PrivateEndpointConnectionCreateOrUpdateResponse = PrivateEndpointConnection;

/** Optional parameters. */
export declare interface PrivateEndpointConnectionDeleteOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface PrivateEndpointConnectionGetByNameOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the getByName operation. */
export declare type PrivateEndpointConnectionGetByNameResponse = PrivateEndpointConnection;

/** Optional parameters. */
export declare interface PrivateEndpointConnectionGetPrivateLinkResourceOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the getPrivateLinkResource operation. */
export declare type PrivateEndpointConnectionGetPrivateLinkResourceResponse = PrivateLinkResource;

/** Optional parameters. */
export declare interface PrivateEndpointConnectionListByServiceOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByService operation. */
export declare type PrivateEndpointConnectionListByServiceResponse = PrivateEndpointConnectionListResult;

/** Optional parameters. */
export declare interface PrivateEndpointConnectionListPrivateLinkResourcesOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listPrivateLinkResources operation. */
export declare type PrivateEndpointConnectionListPrivateLinkResourcesResponse = PrivateLinkResourceListResult;

/** List of private endpoint connection associated with the specified storage account */
export declare interface PrivateEndpointConnectionListResult {
    /** Array of private endpoint connections */
    value?: PrivateEndpointConnection[];
}

/** Interface representing a PrivateEndpointConnectionOperations. */
export declare interface PrivateEndpointConnectionOperations {
    /**
     * Lists all private endpoint connections of the API Management service instance.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param options The options parameters.
     */
    listByService(resourceGroupName: string, serviceName: string, options?: PrivateEndpointConnectionListByServiceOptionalParams): PagedAsyncIterableIterator<PrivateEndpointConnection>;
    /**
     * Gets the details of the Private Endpoint Connection specified by its identifier.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param privateEndpointConnectionName Name of the private endpoint connection.
     * @param options The options parameters.
     */
    getByName(resourceGroupName: string, serviceName: string, privateEndpointConnectionName: string, options?: PrivateEndpointConnectionGetByNameOptionalParams): Promise<PrivateEndpointConnectionGetByNameResponse>;
    /**
     * Creates a new Private Endpoint Connection or updates an existing one.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param privateEndpointConnectionName Name of the private endpoint connection.
     * @param privateEndpointConnectionRequest A request to approve or reject a private endpoint connection
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName: string, serviceName: string, privateEndpointConnectionName: string, privateEndpointConnectionRequest: PrivateEndpointConnectionRequest, options?: PrivateEndpointConnectionCreateOrUpdateOptionalParams): Promise<PollerLike<PollOperationState<PrivateEndpointConnectionCreateOrUpdateResponse>, PrivateEndpointConnectionCreateOrUpdateResponse>>;
    /**
     * Creates a new Private Endpoint Connection or updates an existing one.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param privateEndpointConnectionName Name of the private endpoint connection.
     * @param privateEndpointConnectionRequest A request to approve or reject a private endpoint connection
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName: string, serviceName: string, privateEndpointConnectionName: string, privateEndpointConnectionRequest: PrivateEndpointConnectionRequest, options?: PrivateEndpointConnectionCreateOrUpdateOptionalParams): Promise<PrivateEndpointConnectionCreateOrUpdateResponse>;
    /**
     * Deletes the specified Private Endpoint Connection.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param privateEndpointConnectionName Name of the private endpoint connection.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, serviceName: string, privateEndpointConnectionName: string, options?: PrivateEndpointConnectionDeleteOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Deletes the specified Private Endpoint Connection.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param privateEndpointConnectionName Name of the private endpoint connection.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, serviceName: string, privateEndpointConnectionName: string, options?: PrivateEndpointConnectionDeleteOptionalParams): Promise<void>;
    /**
     * Description for Gets the private link resources
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param options The options parameters.
     */
    listPrivateLinkResources(resourceGroupName: string, serviceName: string, options?: PrivateEndpointConnectionListPrivateLinkResourcesOptionalParams): Promise<PrivateEndpointConnectionListPrivateLinkResourcesResponse>;
    /**
     * Description for Gets the private link resources
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param privateLinkSubResourceName Name of the private link resource.
     * @param options The options parameters.
     */
    getPrivateLinkResource(resourceGroupName: string, serviceName: string, privateLinkSubResourceName: string, options?: PrivateEndpointConnectionGetPrivateLinkResourceOptionalParams): Promise<PrivateEndpointConnectionGetPrivateLinkResourceResponse>;
}

/**
 * Defines values for PrivateEndpointConnectionProvisioningState. \
 * {@link KnownPrivateEndpointConnectionProvisioningState} can be used interchangeably with PrivateEndpointConnectionProvisioningState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Succeeded** \
 * **Creating** \
 * **Deleting** \
 * **Failed**
 */
export declare type PrivateEndpointConnectionProvisioningState = string;

/** A request to approve or reject a private endpoint connection */
export declare interface PrivateEndpointConnectionRequest {
    /** Private Endpoint Connection Resource Id. */
    id?: string;
    /** The connection state of the private endpoint connection. */
    properties?: PrivateEndpointConnectionRequestProperties;
}

/** The connection state of the private endpoint connection. */
export declare interface PrivateEndpointConnectionRequestProperties {
    /** A collection of information about the state of the connection between service consumer and provider. */
    privateLinkServiceConnectionState?: PrivateLinkServiceConnectionState;
}

/**
 * Defines values for PrivateEndpointServiceConnectionStatus. \
 * {@link KnownPrivateEndpointServiceConnectionStatus} can be used interchangeably with PrivateEndpointServiceConnectionStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Pending** \
 * **Approved** \
 * **Rejected**
 */
export declare type PrivateEndpointServiceConnectionStatus = string;

/** A private link resource */
export declare interface PrivateLinkResource extends Resource {
    /**
     * The private link resource group id.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly groupId?: string;
    /**
     * The private link resource required member names.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly requiredMembers?: string[];
    /** The private link resource Private link DNS zone name. */
    requiredZoneNames?: string[];
}

/** A list of private link resources */
export declare interface PrivateLinkResourceListResult {
    /** Array of private link resources */
    value?: PrivateLinkResource[];
}

/** A collection of information about the state of the connection between service consumer and provider. */
export declare interface PrivateLinkServiceConnectionState {
    /** Indicates whether the connection has been Approved/Rejected/Removed by the owner of the service. */
    status?: PrivateEndpointServiceConnectionStatus;
    /** The reason for approval/rejection of the connection. */
    description?: string;
    /** A message indicating if changes on the service provider require any updates on the consumer. */
    actionsRequired?: string;
}

/** Interface representing a Product. */
export declare interface Product {
    /**
     * Lists a collection of products in the specified service instance.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param options The options parameters.
     */
    listByService(resourceGroupName: string, serviceName: string, options?: ProductListByServiceOptionalParams): PagedAsyncIterableIterator<ProductContract>;
    /**
     * Lists a collection of products associated with tags.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param options The options parameters.
     */
    listByTags(resourceGroupName: string, serviceName: string, options?: ProductListByTagsOptionalParams): PagedAsyncIterableIterator<TagResourceContract>;
    /**
     * Gets the entity state (Etag) version of the product specified by its identifier.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param productId Product identifier. Must be unique in the current API Management service instance.
     * @param options The options parameters.
     */
    getEntityTag(resourceGroupName: string, serviceName: string, productId: string, options?: ProductGetEntityTagOptionalParams): Promise<ProductGetEntityTagResponse>;
    /**
     * Gets the details of the product specified by its identifier.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param productId Product identifier. Must be unique in the current API Management service instance.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, serviceName: string, productId: string, options?: ProductGetOptionalParams): Promise<ProductGetResponse>;
    /**
     * Creates or Updates a product.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param productId Product identifier. Must be unique in the current API Management service instance.
     * @param parameters Create or update parameters.
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName: string, serviceName: string, productId: string, parameters: ProductContract, options?: ProductCreateOrUpdateOptionalParams): Promise<ProductCreateOrUpdateResponse>;
    /**
     * Update existing product details.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param productId Product identifier. Must be unique in the current API Management service instance.
     * @param ifMatch ETag of the Entity. ETag should match the current entity state from the header
     *                response of the GET request or it should be * for unconditional update.
     * @param parameters Update parameters.
     * @param options The options parameters.
     */
    update(resourceGroupName: string, serviceName: string, productId: string, ifMatch: string, parameters: ProductUpdateParameters, options?: ProductUpdateOptionalParams): Promise<ProductUpdateResponse>;
    /**
     * Delete product.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param productId Product identifier. Must be unique in the current API Management service instance.
     * @param ifMatch ETag of the Entity. ETag should match the current entity state from the header
     *                response of the GET request or it should be * for unconditional update.
     * @param options The options parameters.
     */
    delete(resourceGroupName: string, serviceName: string, productId: string, ifMatch: string, options?: ProductDeleteOptionalParams): Promise<void>;
}

/** Interface representing a ProductApi. */
export declare interface ProductApi {
    /**
     * Lists a collection of the APIs associated with a product.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param productId Product identifier. Must be unique in the current API Management service instance.
     * @param options The options parameters.
     */
    listByProduct(resourceGroupName: string, serviceName: string, productId: string, options?: ProductApiListByProductOptionalParams): PagedAsyncIterableIterator<ApiContract>;
    /**
     * Checks that API entity specified by identifier is associated with the Product entity.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param productId Product identifier. Must be unique in the current API Management service instance.
     * @param apiId API revision identifier. Must be unique in the current API Management service instance.
     *              Non-current revision has ;rev=n as a suffix where n is the revision number.
     * @param options The options parameters.
     */
    checkEntityExists(resourceGroupName: string, serviceName: string, productId: string, apiId: string, options?: ProductApiCheckEntityExistsOptionalParams): Promise<ProductApiCheckEntityExistsResponse>;
    /**
     * Adds an API to the specified product.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param productId Product identifier. Must be unique in the current API Management service instance.
     * @param apiId API revision identifier. Must be unique in the current API Management service instance.
     *              Non-current revision has ;rev=n as a suffix where n is the revision number.
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName: string, serviceName: string, productId: string, apiId: string, options?: ProductApiCreateOrUpdateOptionalParams): Promise<ProductApiCreateOrUpdateResponse>;
    /**
     * Deletes the specified API from the specified product.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param productId Product identifier. Must be unique in the current API Management service instance.
     * @param apiId API revision identifier. Must be unique in the current API Management service instance.
     *              Non-current revision has ;rev=n as a suffix where n is the revision number.
     * @param options The options parameters.
     */
    delete(resourceGroupName: string, serviceName: string, productId: string, apiId: string, options?: ProductApiDeleteOptionalParams): Promise<void>;
}

/** Optional parameters. */
export declare interface ProductApiCheckEntityExistsOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the checkEntityExists operation. */
export declare type ProductApiCheckEntityExistsResponse = {
    body: boolean;
};

/** Optional parameters. */
export declare interface ProductApiCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the createOrUpdate operation. */
export declare type ProductApiCreateOrUpdateResponse = ApiContract;

/** Optional parameters. */
export declare interface ProductApiDeleteOptionalParams extends coreClient.OperationOptions {
}

/** Optional parameters. */
export declare interface ProductApiListByProductNextOptionalParams extends coreClient.OperationOptions {
    /** |     Field     |     Usage     |     Supported operators     |     Supported functions     |</br>|-------------|-------------|-------------|-------------|</br>| name | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |</br>| displayName | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |</br>| description | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |</br>| serviceUrl | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |</br>| path | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |</br> */
    filter?: string;
    /** Number of records to return. */
    top?: number;
    /** Number of records to skip. */
    skip?: number;
}

/** Contains response data for the listByProductNext operation. */
export declare type ProductApiListByProductNextResponse = ApiCollection;

/** Optional parameters. */
export declare interface ProductApiListByProductOptionalParams extends coreClient.OperationOptions {
    /** |     Field     |     Usage     |     Supported operators     |     Supported functions     |</br>|-------------|-------------|-------------|-------------|</br>| name | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |</br>| displayName | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |</br>| description | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |</br>| serviceUrl | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |</br>| path | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |</br> */
    filter?: string;
    /** Number of records to return. */
    top?: number;
    /** Number of records to skip. */
    skip?: number;
}

/** Contains response data for the listByProduct operation. */
export declare type ProductApiListByProductResponse = ApiCollection;

/** Paged Products list representation. */
export declare interface ProductCollection {
    /** Page values. */
    value?: ProductContract[];
    /** Total record count number across all pages. */
    count?: number;
    /** Next page link if any. */
    nextLink?: string;
}

/** Product details. */
export declare interface ProductContract extends Resource {
    /** Product description. May include HTML formatting tags. */
    description?: string;
    /** Product terms of use. Developers trying to subscribe to the product will be presented and required to accept these terms before they can complete the subscription process. */
    terms?: string;
    /** Whether a product subscription is required for accessing APIs included in this product. If true, the product is referred to as "protected" and a valid subscription key is required for a request to an API included in the product to succeed. If false, the product is referred to as "open" and requests to an API included in the product can be made without a subscription key. If property is omitted when creating a new product it's value is assumed to be true. */
    subscriptionRequired?: boolean;
    /** whether subscription approval is required. If false, new subscriptions will be approved automatically enabling developers to call the product’s APIs immediately after subscribing. If true, administrators must manually approve the subscription before the developer can any of the product’s APIs. Can be present only if subscriptionRequired property is present and has a value of false. */
    approvalRequired?: boolean;
    /** Whether the number of subscriptions a user can have to this product at the same time. Set to null or omit to allow unlimited per user subscriptions. Can be present only if subscriptionRequired property is present and has a value of false. */
    subscriptionsLimit?: number;
    /** whether product is published or not. Published products are discoverable by users of developer portal. Non published products are visible only to administrators. Default state of Product is notPublished. */
    state?: ProductState;
    /** Product name. */
    displayName?: string;
}

/** Product profile. */
export declare interface ProductContractProperties extends ProductEntityBaseParameters {
    /** Product name. */
    displayName: string;
}

/** Defines headers for Product_createOrUpdate operation. */
export declare interface ProductCreateOrUpdateHeaders {
    /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
    eTag?: string;
}

/** Optional parameters. */
export declare interface ProductCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
    /** ETag of the Entity. Not required when creating an entity, but required when updating an entity. */
    ifMatch?: string;
}

/** Contains response data for the createOrUpdate operation. */
export declare type ProductCreateOrUpdateResponse = ProductCreateOrUpdateHeaders & ProductContract;

/** Optional parameters. */
export declare interface ProductDeleteOptionalParams extends coreClient.OperationOptions {
    /** Delete existing subscriptions associated with the product or not. */
    deleteSubscriptions?: boolean;
}

/** Product Entity Base Parameters */
export declare interface ProductEntityBaseParameters {
    /** Product description. May include HTML formatting tags. */
    description?: string;
    /** Product terms of use. Developers trying to subscribe to the product will be presented and required to accept these terms before they can complete the subscription process. */
    terms?: string;
    /** Whether a product subscription is required for accessing APIs included in this product. If true, the product is referred to as "protected" and a valid subscription key is required for a request to an API included in the product to succeed. If false, the product is referred to as "open" and requests to an API included in the product can be made without a subscription key. If property is omitted when creating a new product it's value is assumed to be true. */
    subscriptionRequired?: boolean;
    /** whether subscription approval is required. If false, new subscriptions will be approved automatically enabling developers to call the product’s APIs immediately after subscribing. If true, administrators must manually approve the subscription before the developer can any of the product’s APIs. Can be present only if subscriptionRequired property is present and has a value of false. */
    approvalRequired?: boolean;
    /** Whether the number of subscriptions a user can have to this product at the same time. Set to null or omit to allow unlimited per user subscriptions. Can be present only if subscriptionRequired property is present and has a value of false. */
    subscriptionsLimit?: number;
    /** whether product is published or not. Published products are discoverable by users of developer portal. Non published products are visible only to administrators. Default state of Product is notPublished. */
    state?: ProductState;
}

/** Defines headers for Product_getEntityTag operation. */
export declare interface ProductGetEntityTagHeaders {
    /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
    eTag?: string;
}

/** Optional parameters. */
export declare interface ProductGetEntityTagOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the getEntityTag operation. */
export declare type ProductGetEntityTagResponse = ProductGetEntityTagHeaders;

/** Defines headers for Product_get operation. */
export declare interface ProductGetHeaders {
    /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
    eTag?: string;
}

/** Optional parameters. */
export declare interface ProductGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type ProductGetResponse = ProductGetHeaders & ProductContract;

/** Interface representing a ProductGroup. */
export declare interface ProductGroup {
    /**
     * Lists the collection of developer groups associated with the specified product.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param productId Product identifier. Must be unique in the current API Management service instance.
     * @param options The options parameters.
     */
    listByProduct(resourceGroupName: string, serviceName: string, productId: string, options?: ProductGroupListByProductOptionalParams): PagedAsyncIterableIterator<GroupContract>;
    /**
     * Checks that Group entity specified by identifier is associated with the Product entity.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param productId Product identifier. Must be unique in the current API Management service instance.
     * @param groupId Group identifier. Must be unique in the current API Management service instance.
     * @param options The options parameters.
     */
    checkEntityExists(resourceGroupName: string, serviceName: string, productId: string, groupId: string, options?: ProductGroupCheckEntityExistsOptionalParams): Promise<ProductGroupCheckEntityExistsResponse>;
    /**
     * Adds the association between the specified developer group with the specified product.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param productId Product identifier. Must be unique in the current API Management service instance.
     * @param groupId Group identifier. Must be unique in the current API Management service instance.
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName: string, serviceName: string, productId: string, groupId: string, options?: ProductGroupCreateOrUpdateOptionalParams): Promise<ProductGroupCreateOrUpdateResponse>;
    /**
     * Deletes the association between the specified group and product.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param productId Product identifier. Must be unique in the current API Management service instance.
     * @param groupId Group identifier. Must be unique in the current API Management service instance.
     * @param options The options parameters.
     */
    delete(resourceGroupName: string, serviceName: string, productId: string, groupId: string, options?: ProductGroupDeleteOptionalParams): Promise<void>;
}

/** Optional parameters. */
export declare interface ProductGroupCheckEntityExistsOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the checkEntityExists operation. */
export declare type ProductGroupCheckEntityExistsResponse = {
    body: boolean;
};

/** Optional parameters. */
export declare interface ProductGroupCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the createOrUpdate operation. */
export declare type ProductGroupCreateOrUpdateResponse = GroupContract;

/** Optional parameters. */
export declare interface ProductGroupDeleteOptionalParams extends coreClient.OperationOptions {
}

/** Optional parameters. */
export declare interface ProductGroupListByProductNextOptionalParams extends coreClient.OperationOptions {
    /** |     Field     |     Usage     |     Supported operators     |     Supported functions     |</br>|-------------|-------------|-------------|-------------|</br>| name | filter | ge, le, eq, ne, gt, lt |     |</br>| displayName | filter | eq, ne |     |</br>| description | filter | eq, ne |     |</br> */
    filter?: string;
    /** Number of records to return. */
    top?: number;
    /** Number of records to skip. */
    skip?: number;
}

/** Contains response data for the listByProductNext operation. */
export declare type ProductGroupListByProductNextResponse = GroupCollection;

/** Optional parameters. */
export declare interface ProductGroupListByProductOptionalParams extends coreClient.OperationOptions {
    /** |     Field     |     Usage     |     Supported operators     |     Supported functions     |</br>|-------------|-------------|-------------|-------------|</br>| name | filter | ge, le, eq, ne, gt, lt |     |</br>| displayName | filter | eq, ne |     |</br>| description | filter | eq, ne |     |</br> */
    filter?: string;
    /** Number of records to return. */
    top?: number;
    /** Number of records to skip. */
    skip?: number;
}

/** Contains response data for the listByProduct operation. */
export declare type ProductGroupListByProductResponse = GroupCollection;

/** Optional parameters. */
export declare interface ProductListByServiceNextOptionalParams extends coreClient.OperationOptions {
    /** |     Field     |     Usage     |     Supported operators     |     Supported functions     |</br>|-------------|-------------|-------------|-------------|</br>| name | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |</br>| displayName | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |</br>| description | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |</br>| terms | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |</br>| state | filter | eq |     |</br>| groups | expand |     |     |</br> */
    filter?: string;
    /** Number of records to return. */
    top?: number;
    /** Number of records to skip. */
    skip?: number;
    /** Products which are part of a specific tag. */
    tags?: string;
    /** When set to true, the response contains an array of groups that have visibility to the product. The default is false. */
    expandGroups?: boolean;
}

/** Contains response data for the listByServiceNext operation. */
export declare type ProductListByServiceNextResponse = ProductCollection;

/** Optional parameters. */
export declare interface ProductListByServiceOptionalParams extends coreClient.OperationOptions {
    /** |     Field     |     Usage     |     Supported operators     |     Supported functions     |</br>|-------------|-------------|-------------|-------------|</br>| name | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |</br>| displayName | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |</br>| description | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |</br>| terms | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |</br>| state | filter | eq |     |</br>| groups | expand |     |     |</br> */
    filter?: string;
    /** Number of records to return. */
    top?: number;
    /** Number of records to skip. */
    skip?: number;
    /** Products which are part of a specific tag. */
    tags?: string;
    /** When set to true, the response contains an array of groups that have visibility to the product. The default is false. */
    expandGroups?: boolean;
}

/** Contains response data for the listByService operation. */
export declare type ProductListByServiceResponse = ProductCollection;

/** Optional parameters. */
export declare interface ProductListByTagsNextOptionalParams extends coreClient.OperationOptions {
    /** |     Field     |     Usage     |     Supported operators     |     Supported functions     |</br>|-------------|-------------|-------------|-------------|</br>| name | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |</br>| displayName | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |</br>| description | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |</br>| terms | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |</br>| state | filter | eq | substringof, contains, startswith, endswith |</br> */
    filter?: string;
    /** Number of records to return. */
    top?: number;
    /** Number of records to skip. */
    skip?: number;
    /** Include not tagged Products. */
    includeNotTaggedProducts?: boolean;
}

/** Contains response data for the listByTagsNext operation. */
export declare type ProductListByTagsNextResponse = TagResourceCollection;

/** Optional parameters. */
export declare interface ProductListByTagsOptionalParams extends coreClient.OperationOptions {
    /** |     Field     |     Usage     |     Supported operators     |     Supported functions     |</br>|-------------|-------------|-------------|-------------|</br>| name | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |</br>| displayName | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |</br>| description | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |</br>| terms | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |</br>| state | filter | eq | substringof, contains, startswith, endswith |</br> */
    filter?: string;
    /** Number of records to return. */
    top?: number;
    /** Number of records to skip. */
    skip?: number;
    /** Include not tagged Products. */
    includeNotTaggedProducts?: boolean;
}

/** Contains response data for the listByTags operation. */
export declare type ProductListByTagsResponse = TagResourceCollection;

/** Interface representing a ProductPolicy. */
export declare interface ProductPolicy {
    /**
     * Get the policy configuration at the Product level.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param productId Product identifier. Must be unique in the current API Management service instance.
     * @param options The options parameters.
     */
    listByProduct(resourceGroupName: string, serviceName: string, productId: string, options?: ProductPolicyListByProductOptionalParams): Promise<ProductPolicyListByProductResponse>;
    /**
     * Get the ETag of the policy configuration at the Product level.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param productId Product identifier. Must be unique in the current API Management service instance.
     * @param policyId The identifier of the Policy.
     * @param options The options parameters.
     */
    getEntityTag(resourceGroupName: string, serviceName: string, productId: string, policyId: PolicyIdName, options?: ProductPolicyGetEntityTagOptionalParams): Promise<ProductPolicyGetEntityTagResponse>;
    /**
     * Get the policy configuration at the Product level.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param productId Product identifier. Must be unique in the current API Management service instance.
     * @param policyId The identifier of the Policy.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, serviceName: string, productId: string, policyId: PolicyIdName, options?: ProductPolicyGetOptionalParams): Promise<ProductPolicyGetResponse>;
    /**
     * Creates or updates policy configuration for the Product.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param productId Product identifier. Must be unique in the current API Management service instance.
     * @param policyId The identifier of the Policy.
     * @param parameters The policy contents to apply.
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName: string, serviceName: string, productId: string, policyId: PolicyIdName, parameters: PolicyContract, options?: ProductPolicyCreateOrUpdateOptionalParams): Promise<ProductPolicyCreateOrUpdateResponse>;
    /**
     * Deletes the policy configuration at the Product.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param productId Product identifier. Must be unique in the current API Management service instance.
     * @param policyId The identifier of the Policy.
     * @param ifMatch ETag of the Entity. ETag should match the current entity state from the header
     *                response of the GET request or it should be * for unconditional update.
     * @param options The options parameters.
     */
    delete(resourceGroupName: string, serviceName: string, productId: string, policyId: PolicyIdName, ifMatch: string, options?: ProductPolicyDeleteOptionalParams): Promise<void>;
}

/** Defines headers for ProductPolicy_createOrUpdate operation. */
export declare interface ProductPolicyCreateOrUpdateHeaders {
    /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
    eTag?: string;
}

/** Optional parameters. */
export declare interface ProductPolicyCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
    /** ETag of the Entity. Not required when creating an entity, but required when updating an entity. */
    ifMatch?: string;
}

/** Contains response data for the createOrUpdate operation. */
export declare type ProductPolicyCreateOrUpdateResponse = ProductPolicyCreateOrUpdateHeaders & PolicyContract;

/** Optional parameters. */
export declare interface ProductPolicyDeleteOptionalParams extends coreClient.OperationOptions {
}

/** Defines headers for ProductPolicy_getEntityTag operation. */
export declare interface ProductPolicyGetEntityTagHeaders {
    /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
    eTag?: string;
}

/** Optional parameters. */
export declare interface ProductPolicyGetEntityTagOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the getEntityTag operation. */
export declare type ProductPolicyGetEntityTagResponse = ProductPolicyGetEntityTagHeaders;

/** Defines headers for ProductPolicy_get operation. */
export declare interface ProductPolicyGetHeaders {
    /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
    eTag?: string;
}

/** Optional parameters. */
export declare interface ProductPolicyGetOptionalParams extends coreClient.OperationOptions {
    /** Policy Export Format. */
    format?: PolicyExportFormat;
}

/** Contains response data for the get operation. */
export declare type ProductPolicyGetResponse = ProductPolicyGetHeaders & PolicyContract;

/** Optional parameters. */
export declare interface ProductPolicyListByProductOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByProduct operation. */
export declare type ProductPolicyListByProductResponse = PolicyCollection;

/** Defines values for ProductState. */
export declare type ProductState = "notPublished" | "published";

/** Interface representing a ProductSubscriptions. */
export declare interface ProductSubscriptions {
    /**
     * Lists the collection of subscriptions to the specified product.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param productId Product identifier. Must be unique in the current API Management service instance.
     * @param options The options parameters.
     */
    list(resourceGroupName: string, serviceName: string, productId: string, options?: ProductSubscriptionsListOptionalParams): PagedAsyncIterableIterator<SubscriptionContract>;
}

/** Optional parameters. */
export declare interface ProductSubscriptionsListNextOptionalParams extends coreClient.OperationOptions {
    /** |     Field     |     Usage     |     Supported operators     |     Supported functions     |</br>|-------------|-------------|-------------|-------------|</br>| name | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |</br>| displayName | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |</br>| stateComment | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |</br>| ownerId | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |</br>| scope | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |</br>| userId | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |</br>| productId | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |</br>| state | filter | eq |     |</br>| user | expand |     |     |</br> */
    filter?: string;
    /** Number of records to return. */
    top?: number;
    /** Number of records to skip. */
    skip?: number;
}

/** Contains response data for the listNext operation. */
export declare type ProductSubscriptionsListNextResponse = SubscriptionCollection;

/** Optional parameters. */
export declare interface ProductSubscriptionsListOptionalParams extends coreClient.OperationOptions {
    /** |     Field     |     Usage     |     Supported operators     |     Supported functions     |</br>|-------------|-------------|-------------|-------------|</br>| name | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |</br>| displayName | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |</br>| stateComment | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |</br>| ownerId | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |</br>| scope | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |</br>| userId | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |</br>| productId | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |</br>| state | filter | eq |     |</br>| user | expand |     |     |</br> */
    filter?: string;
    /** Number of records to return. */
    top?: number;
    /** Number of records to skip. */
    skip?: number;
}

/** Contains response data for the list operation. */
export declare type ProductSubscriptionsListResponse = SubscriptionCollection;

/** Product profile. */
export declare interface ProductTagResourceContractProperties extends ProductEntityBaseParameters {
    /** Identifier of the product in the form of /products/{productId} */
    id?: string;
    /** Product name. */
    name: string;
}

/** Defines headers for Product_update operation. */
export declare interface ProductUpdateHeaders {
    /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
    eTag?: string;
}

/** Optional parameters. */
export declare interface ProductUpdateOptionalParams extends coreClient.OperationOptions {
}

/** Product Update parameters. */
export declare interface ProductUpdateParameters {
    /** Product description. May include HTML formatting tags. */
    description?: string;
    /** Product terms of use. Developers trying to subscribe to the product will be presented and required to accept these terms before they can complete the subscription process. */
    terms?: string;
    /** Whether a product subscription is required for accessing APIs included in this product. If true, the product is referred to as "protected" and a valid subscription key is required for a request to an API included in the product to succeed. If false, the product is referred to as "open" and requests to an API included in the product can be made without a subscription key. If property is omitted when creating a new product it's value is assumed to be true. */
    subscriptionRequired?: boolean;
    /** whether subscription approval is required. If false, new subscriptions will be approved automatically enabling developers to call the product’s APIs immediately after subscribing. If true, administrators must manually approve the subscription before the developer can any of the product’s APIs. Can be present only if subscriptionRequired property is present and has a value of false. */
    approvalRequired?: boolean;
    /** Whether the number of subscriptions a user can have to this product at the same time. Set to null or omit to allow unlimited per user subscriptions. Can be present only if subscriptionRequired property is present and has a value of false. */
    subscriptionsLimit?: number;
    /** whether product is published or not. Published products are discoverable by users of developer portal. Non published products are visible only to administrators. Default state of Product is notPublished. */
    state?: ProductState;
    /** Product name. */
    displayName?: string;
}

/** Parameters supplied to the Update Product operation. */
export declare interface ProductUpdateProperties extends ProductEntityBaseParameters {
    /** Product name. */
    displayName?: string;
}

/** Contains response data for the update operation. */
export declare type ProductUpdateResponse = ProductUpdateHeaders & ProductContract;

/**
 * Defines values for Protocol. \
 * {@link KnownProtocol} can be used interchangeably with Protocol,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **http** \
 * **https** \
 * **ws** \
 * **wss**
 */
export declare type Protocol = string;

/**
 * Defines values for PublicNetworkAccess. \
 * {@link KnownPublicNetworkAccess} can be used interchangeably with PublicNetworkAccess,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Enabled** \
 * **Disabled**
 */
export declare type PublicNetworkAccess = string;

/** Interface representing a QuotaByCounterKeys. */
export declare interface QuotaByCounterKeys {
    /**
     * Lists a collection of current quota counter periods associated with the counter-key configured in
     * the policy on the specified service instance. The api does not support paging yet.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param quotaCounterKey Quota counter key identifier.This is the result of expression defined in
     *                        counter-key attribute of the quota-by-key policy.For Example, if you specify counter-key="boo" in
     *                        the policy, then it’s accessible by "boo" counter key. But if it’s defined as
     *                        counter-key="@("b"+"a")" then it will be accessible by "ba" key
     * @param options The options parameters.
     */
    listByService(resourceGroupName: string, serviceName: string, quotaCounterKey: string, options?: QuotaByCounterKeysListByServiceOptionalParams): Promise<QuotaByCounterKeysListByServiceResponse>;
    /**
     * Updates all the quota counter values specified with the existing quota counter key to a value in the
     * specified service instance. This should be used for reset of the quota counter values.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param quotaCounterKey Quota counter key identifier.This is the result of expression defined in
     *                        counter-key attribute of the quota-by-key policy.For Example, if you specify counter-key="boo" in
     *                        the policy, then it’s accessible by "boo" counter key. But if it’s defined as
     *                        counter-key="@("b"+"a")" then it will be accessible by "ba" key
     * @param parameters The value of the quota counter to be applied to all quota counter periods.
     * @param options The options parameters.
     */
    update(resourceGroupName: string, serviceName: string, quotaCounterKey: string, parameters: QuotaCounterValueUpdateContract, options?: QuotaByCounterKeysUpdateOptionalParams): Promise<QuotaByCounterKeysUpdateResponse>;
}

/** Optional parameters. */
export declare interface QuotaByCounterKeysListByServiceOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByService operation. */
export declare type QuotaByCounterKeysListByServiceResponse = QuotaCounterCollection;

/** Optional parameters. */
export declare interface QuotaByCounterKeysUpdateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the update operation. */
export declare type QuotaByCounterKeysUpdateResponse = QuotaCounterCollection;

/** Interface representing a QuotaByPeriodKeys. */
export declare interface QuotaByPeriodKeys {
    /**
     * Gets the value of the quota counter associated with the counter-key in the policy for the specific
     * period in service instance.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param quotaCounterKey Quota counter key identifier.This is the result of expression defined in
     *                        counter-key attribute of the quota-by-key policy.For Example, if you specify counter-key="boo" in
     *                        the policy, then it’s accessible by "boo" counter key. But if it’s defined as
     *                        counter-key="@("b"+"a")" then it will be accessible by "ba" key
     * @param quotaPeriodKey Quota period key identifier.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, serviceName: string, quotaCounterKey: string, quotaPeriodKey: string, options?: QuotaByPeriodKeysGetOptionalParams): Promise<QuotaByPeriodKeysGetResponse>;
    /**
     * Updates an existing quota counter value in the specified service instance.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param quotaCounterKey Quota counter key identifier.This is the result of expression defined in
     *                        counter-key attribute of the quota-by-key policy.For Example, if you specify counter-key="boo" in
     *                        the policy, then it’s accessible by "boo" counter key. But if it’s defined as
     *                        counter-key="@("b"+"a")" then it will be accessible by "ba" key
     * @param quotaPeriodKey Quota period key identifier.
     * @param parameters The value of the Quota counter to be applied on the specified period.
     * @param options The options parameters.
     */
    update(resourceGroupName: string, serviceName: string, quotaCounterKey: string, quotaPeriodKey: string, parameters: QuotaCounterValueUpdateContract, options?: QuotaByPeriodKeysUpdateOptionalParams): Promise<QuotaByPeriodKeysUpdateResponse>;
}

/** Optional parameters. */
export declare interface QuotaByPeriodKeysGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type QuotaByPeriodKeysGetResponse = QuotaCounterContract;

/** Optional parameters. */
export declare interface QuotaByPeriodKeysUpdateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the update operation. */
export declare type QuotaByPeriodKeysUpdateResponse = QuotaCounterContract;

/** Paged Quota Counter list representation. */
export declare interface QuotaCounterCollection {
    /** Quota counter values. */
    value?: QuotaCounterContract[];
    /** Total record count number across all pages. */
    count?: number;
    /** Next page link if any. */
    nextLink?: string;
}

/** Quota counter details. */
export declare interface QuotaCounterContract {
    /** The Key value of the Counter. Must not be empty. */
    counterKey: string;
    /** Identifier of the Period for which the counter was collected. Must not be empty. */
    periodKey: string;
    /**
     * The date of the start of Counter Period. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard.
     *
     */
    periodStartTime: Date;
    /**
     * The date of the end of Counter Period. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard.
     *
     */
    periodEndTime: Date;
    /** Quota Value Properties */
    value?: QuotaCounterValueContractProperties;
}

/** Quota counter value details. */
export declare interface QuotaCounterValueContract {
    /** Number of times Counter was called. */
    callsCount?: number;
    /** Data Transferred in KiloBytes. */
    kbTransferred?: number;
}

/** Quota counter value details. */
export declare interface QuotaCounterValueContractProperties {
    /** Number of times Counter was called. */
    callsCount?: number;
    /** Data Transferred in KiloBytes. */
    kbTransferred?: number;
}

/** Quota counter value details. */
export declare interface QuotaCounterValueUpdateContract {
    /** Number of times Counter was called. */
    callsCount?: number;
    /** Data Transferred in KiloBytes. */
    kbTransferred?: number;
}

/** Paged Recipient User list representation. */
export declare interface RecipientEmailCollection {
    /** Page values. */
    value?: RecipientEmailContract[];
    /** Total record count number across all pages. */
    count?: number;
    /** Next page link if any. */
    nextLink?: string;
}

/** Recipient Email details. */
export declare interface RecipientEmailContract extends Resource {
    /** User Email subscribed to notification. */
    email?: string;
}

/** Notification Parameter contract. */
export declare interface RecipientsContractProperties {
    /** List of Emails subscribed for the notification. */
    emails?: string[];
    /** List of Users subscribed for the notification. */
    users?: string[];
}

/** Paged Recipient User list representation. */
export declare interface RecipientUserCollection {
    /** Page values. */
    value?: RecipientUserContract[];
    /** Total record count number across all pages. */
    count?: number;
    /** Next page link if any. */
    nextLink?: string;
}

/** Recipient User details. */
export declare interface RecipientUserContract extends Resource {
    /** API Management UserId subscribed to notification. */
    userId?: string;
}

/** Interface representing a Region. */
export declare interface Region {
    /**
     * Lists all azure regions in which the service exists.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param options The options parameters.
     */
    listByService(resourceGroupName: string, serviceName: string, options?: RegionListByServiceOptionalParams): PagedAsyncIterableIterator<RegionContract>;
}

/** Region profile. */
export declare interface RegionContract {
    /**
     * Region name.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /** whether Region is the master region. */
    isMasterRegion?: boolean;
    /** whether Region is deleted. */
    isDeleted?: boolean;
}

/** Optional parameters. */
export declare interface RegionListByServiceNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByServiceNext operation. */
export declare type RegionListByServiceNextResponse = RegionListResult;

/** Optional parameters. */
export declare interface RegionListByServiceOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByService operation. */
export declare type RegionListByServiceResponse = RegionListResult;

/** Lists Regions operation response details. */
export declare interface RegionListResult {
    /** Lists of Regions. */
    value?: RegionContract[];
    /** Total record count number across all pages. */
    count?: number;
    /** Next page link if any. */
    nextLink?: string;
}

/** User registration delegation settings properties. */
export declare interface RegistrationDelegationSettingsProperties {
    /** Enable or disable delegation for user registration. */
    enabled?: boolean;
}

/** Remote Private Endpoint Connection resource. */
export declare interface RemotePrivateEndpointConnectionWrapper {
    /** Private Endpoint connection resource id */
    id?: string;
    /** Private Endpoint Connection Name */
    name?: string;
    /** Private Endpoint Connection Resource Type */
    type?: string;
    /** The resource of private end point. */
    privateEndpoint?: ArmIdWrapper;
    /** A collection of information about the state of the connection between service consumer and provider. */
    privateLinkServiceConnectionState?: PrivateLinkServiceConnectionState;
    /**
     * The provisioning state of the private endpoint connection resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: string;
    /**
     * All the Group ids.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly groupIds?: string[];
}

/** Paged Report records list representation. */
export declare interface ReportCollection {
    /** Page values. */
    value?: ReportRecordContract[];
    /** Total record count number across all pages. */
    count?: number;
    /** Next page link if any. */
    nextLink?: string;
}

/** Report data. */
export declare interface ReportRecordContract {
    /** Name depending on report endpoint specifies product, API, operation or developer name. */
    name?: string;
    /**
     * Start of aggregation period. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard.
     *
     */
    timestamp?: Date;
    /** Length of aggregation period.  Interval must be multiple of 15 minutes and may not be zero. The value should be in ISO 8601 format (http://en.wikipedia.org/wiki/ISO_8601#Durations). */
    interval?: string;
    /** Country to which this record data is related. */
    country?: string;
    /** Country region to which this record data is related. */
    region?: string;
    /** Zip code to which this record data is related. */
    zip?: string;
    /**
     * User identifier path. /users/{userId}
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly userId?: string;
    /**
     * Product identifier path. /products/{productId}
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly productId?: string;
    /** API identifier path. /apis/{apiId} */
    apiId?: string;
    /** Operation identifier path. /apis/{apiId}/operations/{operationId} */
    operationId?: string;
    /** API region identifier. */
    apiRegion?: string;
    /** Subscription identifier path. /subscriptions/{subscriptionId} */
    subscriptionId?: string;
    /** Number of successful calls. This includes calls returning HttpStatusCode <= 301 and HttpStatusCode.NotModified and HttpStatusCode.TemporaryRedirect */
    callCountSuccess?: number;
    /** Number of calls blocked due to invalid credentials. This includes calls returning HttpStatusCode.Unauthorized and HttpStatusCode.Forbidden and HttpStatusCode.TooManyRequests */
    callCountBlocked?: number;
    /** Number of calls failed due to proxy or backend errors. This includes calls returning HttpStatusCode.BadRequest(400) and any Code between HttpStatusCode.InternalServerError (500) and 600 */
    callCountFailed?: number;
    /** Number of other calls. */
    callCountOther?: number;
    /** Total number of calls. */
    callCountTotal?: number;
    /** Bandwidth consumed. */
    bandwidth?: number;
    /** Number of times when content was served from cache policy. */
    cacheHitCount?: number;
    /** Number of times content was fetched from backend. */
    cacheMissCount?: number;
    /** Average time it took to process request. */
    apiTimeAvg?: number;
    /** Minimum time it took to process request. */
    apiTimeMin?: number;
    /** Maximum time it took to process request. */
    apiTimeMax?: number;
    /** Average time it took to process request on backend. */
    serviceTimeAvg?: number;
    /** Minimum time it took to process request on backend. */
    serviceTimeMin?: number;
    /** Maximum time it took to process request on backend. */
    serviceTimeMax?: number;
}

/** Interface representing a Reports. */
export declare interface Reports {
    /**
     * Lists report records by API.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param filter The filter to apply on the operation.
     * @param options The options parameters.
     */
    listByApi(resourceGroupName: string, serviceName: string, filter: string, options?: ReportsListByApiOptionalParams): PagedAsyncIterableIterator<ReportRecordContract>;
    /**
     * Lists report records by User.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param filter |   Field     |     Usage     |     Supported operators     |     Supported functions
     *                  |</br>|-------------|-------------|-------------|-------------|</br>| timestamp | filter | ge, le
     *               |     | </br>| displayName | select, orderBy |     |     | </br>| userId | select, filter | eq |
     *               | </br>| apiRegion | filter | eq |     | </br>| productId | filter | eq |     | </br>|
     *               subscriptionId | filter | eq |     | </br>| apiId | filter | eq |     | </br>| operationId | filter
     *               | eq |     | </br>| callCountSuccess | select, orderBy |     |     | </br>| callCountBlocked |
     *               select, orderBy |     |     | </br>| callCountFailed | select, orderBy |     |     | </br>|
     *               callCountOther | select, orderBy |     |     | </br>| callCountTotal | select, orderBy |     |     |
     *               </br>| bandwidth | select, orderBy |     |     | </br>| cacheHitsCount | select |     |     | </br>|
     *               cacheMissCount | select |     |     | </br>| apiTimeAvg | select, orderBy |     |     | </br>|
     *               apiTimeMin | select |     |     | </br>| apiTimeMax | select |     |     | </br>| serviceTimeAvg |
     *               select |     |     | </br>| serviceTimeMin | select |     |     | </br>| serviceTimeMax | select |
     *                 |     | </br>
     * @param options The options parameters.
     */
    listByUser(resourceGroupName: string, serviceName: string, filter: string, options?: ReportsListByUserOptionalParams): PagedAsyncIterableIterator<ReportRecordContract>;
    /**
     * Lists report records by API Operations.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param filter |   Field     |     Usage     |     Supported operators     |     Supported functions
     *                  |</br>|-------------|-------------|-------------|-------------|</br>| timestamp | filter | ge, le
     *               |     | </br>| displayName | select, orderBy |     |     | </br>| apiRegion | filter | eq |     |
     *               </br>| userId | filter | eq |     | </br>| productId | filter | eq |     | </br>| subscriptionId |
     *               filter | eq |     | </br>| apiId | filter | eq |     | </br>| operationId | select, filter | eq |
     *                | </br>| callCountSuccess | select, orderBy |     |     | </br>| callCountBlocked | select, orderBy
     *               |     |     | </br>| callCountFailed | select, orderBy |     |     | </br>| callCountOther | select,
     *               orderBy |     |     | </br>| callCountTotal | select, orderBy |     |     | </br>| bandwidth |
     *               select, orderBy |     |     | </br>| cacheHitsCount | select |     |     | </br>| cacheMissCount |
     *               select |     |     | </br>| apiTimeAvg | select, orderBy |     |     | </br>| apiTimeMin | select |
     *                  |     | </br>| apiTimeMax | select |     |     | </br>| serviceTimeAvg | select |     |     |
     *               </br>| serviceTimeMin | select |     |     | </br>| serviceTimeMax | select |     |     | </br>
     * @param options The options parameters.
     */
    listByOperation(resourceGroupName: string, serviceName: string, filter: string, options?: ReportsListByOperationOptionalParams): PagedAsyncIterableIterator<ReportRecordContract>;
    /**
     * Lists report records by Product.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param filter |   Field     |     Usage     |     Supported operators     |     Supported functions
     *                  |</br>|-------------|-------------|-------------|-------------|</br>| timestamp | filter | ge, le
     *               |     | </br>| displayName | select, orderBy |     |     | </br>| apiRegion | filter | eq |     |
     *               </br>| userId | filter | eq |     | </br>| productId | select, filter | eq |     | </br>|
     *               subscriptionId | filter | eq |     | </br>| callCountSuccess | select, orderBy |     |     | </br>|
     *               callCountBlocked | select, orderBy |     |     | </br>| callCountFailed | select, orderBy |     |
     *                | </br>| callCountOther | select, orderBy |     |     | </br>| callCountTotal | select, orderBy |
     *                 |     | </br>| bandwidth | select, orderBy |     |     | </br>| cacheHitsCount | select |     |
     *                | </br>| cacheMissCount | select |     |     | </br>| apiTimeAvg | select, orderBy |     |     |
     *               </br>| apiTimeMin | select |     |     | </br>| apiTimeMax | select |     |     | </br>|
     *               serviceTimeAvg | select |     |     | </br>| serviceTimeMin | select |     |     | </br>|
     *               serviceTimeMax | select |     |     | </br>
     * @param options The options parameters.
     */
    listByProduct(resourceGroupName: string, serviceName: string, filter: string, options?: ReportsListByProductOptionalParams): PagedAsyncIterableIterator<ReportRecordContract>;
    /**
     * Lists report records by geography.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param filter |   Field     |     Usage     |     Supported operators     |     Supported functions
     *                  |</br>|-------------|-------------|-------------|-------------|</br>| timestamp | filter | ge, le
     *               |     | </br>| country | select |     |     | </br>| region | select |     |     | </br>| zip |
     *               select |     |     | </br>| apiRegion | filter | eq |     | </br>| userId | filter | eq |     |
     *               </br>| productId | filter | eq |     | </br>| subscriptionId | filter | eq |     | </br>| apiId |
     *               filter | eq |     | </br>| operationId | filter | eq |     | </br>| callCountSuccess | select |
     *               |     | </br>| callCountBlocked | select |     |     | </br>| callCountFailed | select |     |     |
     *               </br>| callCountOther | select |     |     | </br>| bandwidth | select, orderBy |     |     | </br>|
     *               cacheHitsCount | select |     |     | </br>| cacheMissCount | select |     |     | </br>| apiTimeAvg
     *               | select |     |     | </br>| apiTimeMin | select |     |     | </br>| apiTimeMax | select |     |
     *                 | </br>| serviceTimeAvg | select |     |     | </br>| serviceTimeMin | select |     |     | </br>|
     *               serviceTimeMax | select |     |     | </br>
     * @param options The options parameters.
     */
    listByGeo(resourceGroupName: string, serviceName: string, filter: string, options?: ReportsListByGeoOptionalParams): PagedAsyncIterableIterator<ReportRecordContract>;
    /**
     * Lists report records by subscription.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param filter |   Field     |     Usage     |     Supported operators     |     Supported functions
     *                  |</br>|-------------|-------------|-------------|-------------|</br>| timestamp | filter | ge, le
     *               |     | </br>| displayName | select, orderBy |     |     | </br>| apiRegion | filter | eq |     |
     *               </br>| userId | select, filter | eq |     | </br>| productId | select, filter | eq |     | </br>|
     *               subscriptionId | select, filter | eq |     | </br>| callCountSuccess | select, orderBy |     |     |
     *               </br>| callCountBlocked | select, orderBy |     |     | </br>| callCountFailed | select, orderBy |
     *                 |     | </br>| callCountOther | select, orderBy |     |     | </br>| callCountTotal | select,
     *               orderBy |     |     | </br>| bandwidth | select, orderBy |     |     | </br>| cacheHitsCount |
     *               select |     |     | </br>| cacheMissCount | select |     |     | </br>| apiTimeAvg | select,
     *               orderBy |     |     | </br>| apiTimeMin | select |     |     | </br>| apiTimeMax | select |     |
     *                | </br>| serviceTimeAvg | select |     |     | </br>| serviceTimeMin | select |     |     | </br>|
     *               serviceTimeMax | select |     |     | </br>
     * @param options The options parameters.
     */
    listBySubscription(resourceGroupName: string, serviceName: string, filter: string, options?: ReportsListBySubscriptionOptionalParams): PagedAsyncIterableIterator<ReportRecordContract>;
    /**
     * Lists report records by Time.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param filter |   Field     |     Usage     |     Supported operators     |     Supported functions
     *                  |</br>|-------------|-------------|-------------|-------------|</br>| timestamp | filter, select
     *               | ge, le |     | </br>| interval | select |     |     | </br>| apiRegion | filter | eq |     |
     *               </br>| userId | filter | eq |     | </br>| productId | filter | eq |     | </br>| subscriptionId |
     *               filter | eq |     | </br>| apiId | filter | eq |     | </br>| operationId | filter | eq |     |
     *               </br>| callCountSuccess | select |     |     | </br>| callCountBlocked | select |     |     | </br>|
     *               callCountFailed | select |     |     | </br>| callCountOther | select |     |     | </br>| bandwidth
     *               | select, orderBy |     |     | </br>| cacheHitsCount | select |     |     | </br>| cacheMissCount |
     *               select |     |     | </br>| apiTimeAvg | select |     |     | </br>| apiTimeMin | select |     |
     *               | </br>| apiTimeMax | select |     |     | </br>| serviceTimeAvg | select |     |     | </br>|
     *               serviceTimeMin | select |     |     | </br>| serviceTimeMax | select |     |     | </br>
     * @param interval By time interval. Interval must be multiple of 15 minutes and may not be zero. The
     *                 value should be in ISO  8601 format (http://en.wikipedia.org/wiki/ISO_8601#Durations).This code can
     *                 be used to convert TimeSpan to a valid interval string: XmlConvert.ToString(new TimeSpan(hours,
     *                 minutes, seconds)).
     * @param options The options parameters.
     */
    listByTime(resourceGroupName: string, serviceName: string, filter: string, interval: string, options?: ReportsListByTimeOptionalParams): PagedAsyncIterableIterator<ReportRecordContract>;
    /**
     * Lists report records by Request.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param filter |   Field     |     Usage     |     Supported operators     |     Supported functions
     *                  |</br>|-------------|-------------|-------------|-------------|</br>| timestamp | filter | ge, le
     *               |     | </br>| apiId | filter | eq |     | </br>| operationId | filter | eq |     | </br>| productId
     *               | filter | eq |     | </br>| userId | filter | eq |     | </br>| apiRegion | filter | eq |     |
     *               </br>| subscriptionId | filter | eq |     | </br>
     * @param options The options parameters.
     */
    listByRequest(resourceGroupName: string, serviceName: string, filter: string, options?: ReportsListByRequestOptionalParams): PagedAsyncIterableIterator<RequestReportRecordContract>;
}

/** Optional parameters. */
export declare interface ReportsListByApiNextOptionalParams extends coreClient.OperationOptions {
    /** Number of records to return. */
    top?: number;
    /** Number of records to skip. */
    skip?: number;
    /** OData order by query option. */
    orderby?: string;
}

/** Contains response data for the listByApiNext operation. */
export declare type ReportsListByApiNextResponse = ReportCollection;

/** Optional parameters. */
export declare interface ReportsListByApiOptionalParams extends coreClient.OperationOptions {
    /** Number of records to return. */
    top?: number;
    /** Number of records to skip. */
    skip?: number;
    /** OData order by query option. */
    orderby?: string;
}

/** Contains response data for the listByApi operation. */
export declare type ReportsListByApiResponse = ReportCollection;

/** Optional parameters. */
export declare interface ReportsListByGeoNextOptionalParams extends coreClient.OperationOptions {
    /** Number of records to return. */
    top?: number;
    /** Number of records to skip. */
    skip?: number;
}

/** Contains response data for the listByGeoNext operation. */
export declare type ReportsListByGeoNextResponse = ReportCollection;

/** Optional parameters. */
export declare interface ReportsListByGeoOptionalParams extends coreClient.OperationOptions {
    /** Number of records to return. */
    top?: number;
    /** Number of records to skip. */
    skip?: number;
}

/** Contains response data for the listByGeo operation. */
export declare type ReportsListByGeoResponse = ReportCollection;

/** Optional parameters. */
export declare interface ReportsListByOperationNextOptionalParams extends coreClient.OperationOptions {
    /** Number of records to return. */
    top?: number;
    /** Number of records to skip. */
    skip?: number;
    /** OData order by query option. */
    orderby?: string;
}

/** Contains response data for the listByOperationNext operation. */
export declare type ReportsListByOperationNextResponse = ReportCollection;

/** Optional parameters. */
export declare interface ReportsListByOperationOptionalParams extends coreClient.OperationOptions {
    /** Number of records to return. */
    top?: number;
    /** Number of records to skip. */
    skip?: number;
    /** OData order by query option. */
    orderby?: string;
}

/** Contains response data for the listByOperation operation. */
export declare type ReportsListByOperationResponse = ReportCollection;

/** Optional parameters. */
export declare interface ReportsListByProductNextOptionalParams extends coreClient.OperationOptions {
    /** Number of records to return. */
    top?: number;
    /** Number of records to skip. */
    skip?: number;
    /** OData order by query option. */
    orderby?: string;
}

/** Contains response data for the listByProductNext operation. */
export declare type ReportsListByProductNextResponse = ReportCollection;

/** Optional parameters. */
export declare interface ReportsListByProductOptionalParams extends coreClient.OperationOptions {
    /** Number of records to return. */
    top?: number;
    /** Number of records to skip. */
    skip?: number;
    /** OData order by query option. */
    orderby?: string;
}

/** Contains response data for the listByProduct operation. */
export declare type ReportsListByProductResponse = ReportCollection;

/** Optional parameters. */
export declare interface ReportsListByRequestOptionalParams extends coreClient.OperationOptions {
    /** Number of records to return. */
    top?: number;
    /** Number of records to skip. */
    skip?: number;
}

/** Contains response data for the listByRequest operation. */
export declare type ReportsListByRequestResponse = RequestReportCollection;

/** Optional parameters. */
export declare interface ReportsListBySubscriptionNextOptionalParams extends coreClient.OperationOptions {
    /** Number of records to return. */
    top?: number;
    /** Number of records to skip. */
    skip?: number;
    /** OData order by query option. */
    orderby?: string;
}

/** Contains response data for the listBySubscriptionNext operation. */
export declare type ReportsListBySubscriptionNextResponse = ReportCollection;

/** Optional parameters. */
export declare interface ReportsListBySubscriptionOptionalParams extends coreClient.OperationOptions {
    /** Number of records to return. */
    top?: number;
    /** Number of records to skip. */
    skip?: number;
    /** OData order by query option. */
    orderby?: string;
}

/** Contains response data for the listBySubscription operation. */
export declare type ReportsListBySubscriptionResponse = ReportCollection;

/** Optional parameters. */
export declare interface ReportsListByTimeNextOptionalParams extends coreClient.OperationOptions {
    /** Number of records to return. */
    top?: number;
    /** Number of records to skip. */
    skip?: number;
    /** OData order by query option. */
    orderby?: string;
}

/** Contains response data for the listByTimeNext operation. */
export declare type ReportsListByTimeNextResponse = ReportCollection;

/** Optional parameters. */
export declare interface ReportsListByTimeOptionalParams extends coreClient.OperationOptions {
    /** Number of records to return. */
    top?: number;
    /** Number of records to skip. */
    skip?: number;
    /** OData order by query option. */
    orderby?: string;
}

/** Contains response data for the listByTime operation. */
export declare type ReportsListByTimeResponse = ReportCollection;

/** Optional parameters. */
export declare interface ReportsListByUserNextOptionalParams extends coreClient.OperationOptions {
    /** Number of records to return. */
    top?: number;
    /** Number of records to skip. */
    skip?: number;
    /** OData order by query option. */
    orderby?: string;
}

/** Contains response data for the listByUserNext operation. */
export declare type ReportsListByUserNextResponse = ReportCollection;

/** Optional parameters. */
export declare interface ReportsListByUserOptionalParams extends coreClient.OperationOptions {
    /** Number of records to return. */
    top?: number;
    /** Number of records to skip. */
    skip?: number;
    /** OData order by query option. */
    orderby?: string;
}

/** Contains response data for the listByUser operation. */
export declare type ReportsListByUserResponse = ReportCollection;

/** Operation request/response representation details. */
export declare interface RepresentationContract {
    /** Specifies a registered or custom content type for this representation, e.g. application/xml. */
    contentType: string;
    /** Schema identifier. Applicable only if 'contentType' value is neither 'application/x-www-form-urlencoded' nor 'multipart/form-data'. */
    schemaId?: string;
    /** Type name defined by the schema. Applicable only if 'contentType' value is neither 'application/x-www-form-urlencoded' nor 'multipart/form-data'. */
    typeName?: string;
    /** Collection of form parameters. Required if 'contentType' value is either 'application/x-www-form-urlencoded' or 'multipart/form-data'.. */
    formParameters?: ParameterContract[];
    /** Exampled defined for the representation. */
    examples?: {
        [propertyName: string]: ParameterExampleContract;
    };
}

/** Operation request details. */
export declare interface RequestContract {
    /** Operation request description. */
    description?: string;
    /** Collection of operation request query parameters. */
    queryParameters?: ParameterContract[];
    /** Collection of operation request headers. */
    headers?: ParameterContract[];
    /** Collection of operation request representations. */
    representations?: RepresentationContract[];
}

/** Paged Report records list representation. */
export declare interface RequestReportCollection {
    /** Page values. */
    value?: RequestReportRecordContract[];
    /** Total record count number across all pages. */
    count?: number;
}

/** Request Report data. */
export declare interface RequestReportRecordContract {
    /** API identifier path. /apis/{apiId} */
    apiId?: string;
    /** Operation identifier path. /apis/{apiId}/operations/{operationId} */
    operationId?: string;
    /**
     * Product identifier path. /products/{productId}
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly productId?: string;
    /**
     * User identifier path. /users/{userId}
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly userId?: string;
    /** The HTTP method associated with this request.. */
    method?: string;
    /** The full URL associated with this request. */
    url?: string;
    /** The client IP address associated with this request. */
    ipAddress?: string;
    /** The HTTP status code received by the gateway as a result of forwarding this request to the backend. */
    backendResponseCode?: string;
    /** The HTTP status code returned by the gateway. */
    responseCode?: number;
    /** The size of the response returned by the gateway. */
    responseSize?: number;
    /** The date and time when this request was received by the gateway in ISO 8601 format. */
    timestamp?: Date;
    /** Specifies if response cache was involved in generating the response. If the value is none, the cache was not used. If the value is hit, cached response was returned. If the value is miss, the cache was used but lookup resulted in a miss and request was fulfilled by the backend. */
    cache?: string;
    /** The total time it took to process this request. */
    apiTime?: number;
    /** he time it took to forward this request to the backend and get the response back. */
    serviceTime?: number;
    /** Azure region where the gateway that processed this request is located. */
    apiRegion?: string;
    /** Subscription identifier path. /subscriptions/{subscriptionId} */
    subscriptionId?: string;
    /** Request Identifier. */
    requestId?: string;
    /** The size of this request.. */
    requestSize?: number;
}

/** Common fields that are returned in the response for all Azure Resource Manager resources */
export declare interface Resource {
    /**
     * Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly id?: string;
    /**
     * The name of the resource
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /**
     * The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly type?: string;
}

/** Resource location data properties. */
export declare interface ResourceLocationDataContract {
    /** A canonical name for the geographic or physical location. */
    name: string;
    /** The city or locality where the resource is located. */
    city?: string;
    /** The district, state, or province where the resource is located. */
    district?: string;
    /** The country or region where the resource is located. */
    countryOrRegion?: string;
}

/** Describes an available API Management SKU. */
export declare interface ResourceSku {
    /** Name of the Sku. */
    name?: SkuType;
}

/** Describes scaling information of a SKU. */
export declare interface ResourceSkuCapacity {
    /**
     * The minimum capacity.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly minimum?: number;
    /**
     * The maximum capacity that can be set.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly maximum?: number;
    /**
     * The default capacity.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly default?: number;
    /**
     * The scale type applicable to the sku.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly scaleType?: ResourceSkuCapacityScaleType;
}

/**
 * Defines values for ResourceSkuCapacityScaleType. \
 * {@link KnownResourceSkuCapacityScaleType} can be used interchangeably with ResourceSkuCapacityScaleType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **automatic**: Supported scale type automatic. \
 * **manual**: Supported scale type manual. \
 * **none**: Scaling not supported.
 */
export declare type ResourceSkuCapacityScaleType = string;

/** Describes an available API Management service SKU. */
export declare interface ResourceSkuResult {
    /**
     * The type of resource the SKU applies to.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly resourceType?: string;
    /**
     * Specifies API Management SKU.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly sku?: ResourceSku;
    /**
     * Specifies the number of API Management units.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly capacity?: ResourceSkuCapacity;
}

/** The API Management service SKUs operation response. */
export declare interface ResourceSkuResults {
    /** The list of skus available for the service. */
    value: ResourceSkuResult[];
    /** The uri to fetch the next page of API Management service Skus. */
    nextLink?: string;
}

/** Operation response details. */
export declare interface ResponseContract {
    /** Operation response HTTP status code. */
    statusCode: number;
    /** Operation response description. */
    description?: string;
    /** Collection of operation response representations. */
    representations?: RepresentationContract[];
    /** Collection of operation response headers. */
    headers?: ParameterContract[];
}

/** Sampling settings for Diagnostic. */
export declare interface SamplingSettings {
    /** Sampling type. */
    samplingType?: SamplingType;
    /** Rate of sampling for fixed-rate sampling. */
    percentage?: number;
}

/**
 * Defines values for SamplingType. \
 * {@link KnownSamplingType} can be used interchangeably with SamplingType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **fixed**: Fixed-rate sampling.
 */
export declare type SamplingType = string;

/** Save Tenant Configuration Contract details. */
export declare interface SaveConfigurationParameter {
    /** The name of the Git branch in which to commit the current configuration snapshot. */
    branch?: string;
    /** The value if true, the current configuration database is committed to the Git repository, even if the Git repository has newer changes that would be overwritten. */
    force?: boolean;
}

/** The response of the list schema operation. */
export declare interface SchemaCollection {
    /**
     * API Schema Contract value.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly value?: SchemaContract[];
    /** Total record count number. */
    count?: number;
    /**
     * Next page link if any.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextLink?: string;
}

/** Schema Contract details. */
export declare interface SchemaContract extends Resource {
    /** Must be a valid a media type used in a Content-Type header as defined in the RFC 2616. Media type of the schema document (e.g. application/json, application/xml). </br> - `Swagger` Schema use `application/vnd.ms-azure-apim.swagger.definitions+json` </br> - `WSDL` Schema use `application/vnd.ms-azure-apim.xsd+xml` </br> - `OpenApi` Schema use `application/vnd.oai.openapi.components+json` </br> - `WADL Schema` use `application/vnd.ms-azure-apim.wadl.grammars+xml`. */
    contentType?: string;
    /** Json escaped string defining the document representing the Schema. Used for schemas other than Swagger/OpenAPI. */
    value?: string;
    /** Types definitions. Used for OpenAPI v2 (Swagger) schemas only, null otherwise. */
    definitions?: Record<string, unknown>;
    /** Types definitions. Used for OpenAPI v3 schemas only, null otherwise. */
    components?: Record<string, unknown>;
}

/**
 * Defines values for SettingsTypeName. \
 * {@link KnownSettingsTypeName} can be used interchangeably with SettingsTypeName,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **public**
 */
export declare type SettingsTypeName = string;

/**
 * Defines values for Severity. \
 * {@link KnownSeverity} can be used interchangeably with Severity,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Error** \
 * **Warning**
 */
export declare type Severity = string;

/** Interface representing a SignInSettings. */
export declare interface SignInSettings {
    /**
     * Gets the entity state (Etag) version of the SignInSettings.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param options The options parameters.
     */
    getEntityTag(resourceGroupName: string, serviceName: string, options?: SignInSettingsGetEntityTagOptionalParams): Promise<SignInSettingsGetEntityTagResponse>;
    /**
     * Get Sign In Settings for the Portal
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, serviceName: string, options?: SignInSettingsGetOptionalParams): Promise<SignInSettingsGetResponse>;
    /**
     * Update Sign-In settings.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param ifMatch ETag of the Entity. ETag should match the current entity state from the header
     *                response of the GET request or it should be * for unconditional update.
     * @param parameters Update Sign-In settings.
     * @param options The options parameters.
     */
    update(resourceGroupName: string, serviceName: string, ifMatch: string, parameters: PortalSigninSettings, options?: SignInSettingsUpdateOptionalParams): Promise<void>;
    /**
     * Create or Update Sign-In settings.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param parameters Create or update parameters.
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName: string, serviceName: string, parameters: PortalSigninSettings, options?: SignInSettingsCreateOrUpdateOptionalParams): Promise<SignInSettingsCreateOrUpdateResponse>;
}

/** Optional parameters. */
export declare interface SignInSettingsCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
    /** ETag of the Entity. Not required when creating an entity, but required when updating an entity. */
    ifMatch?: string;
}

/** Contains response data for the createOrUpdate operation. */
export declare type SignInSettingsCreateOrUpdateResponse = PortalSigninSettings;

/** Defines headers for SignInSettings_getEntityTag operation. */
export declare interface SignInSettingsGetEntityTagHeaders {
    /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
    eTag?: string;
}

/** Optional parameters. */
export declare interface SignInSettingsGetEntityTagOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the getEntityTag operation. */
export declare type SignInSettingsGetEntityTagResponse = SignInSettingsGetEntityTagHeaders;

/** Defines headers for SignInSettings_get operation. */
export declare interface SignInSettingsGetHeaders {
    /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
    eTag?: string;
}

/** Optional parameters. */
export declare interface SignInSettingsGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type SignInSettingsGetResponse = SignInSettingsGetHeaders & PortalSigninSettings;

/** Optional parameters. */
export declare interface SignInSettingsUpdateOptionalParams extends coreClient.OperationOptions {
}

/** Interface representing a SignUpSettings. */
export declare interface SignUpSettings {
    /**
     * Gets the entity state (Etag) version of the SignUpSettings.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param options The options parameters.
     */
    getEntityTag(resourceGroupName: string, serviceName: string, options?: SignUpSettingsGetEntityTagOptionalParams): Promise<SignUpSettingsGetEntityTagResponse>;
    /**
     * Get Sign Up Settings for the Portal
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, serviceName: string, options?: SignUpSettingsGetOptionalParams): Promise<SignUpSettingsGetResponse>;
    /**
     * Update Sign-Up settings.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param ifMatch ETag of the Entity. ETag should match the current entity state from the header
     *                response of the GET request or it should be * for unconditional update.
     * @param parameters Update Sign-Up settings.
     * @param options The options parameters.
     */
    update(resourceGroupName: string, serviceName: string, ifMatch: string, parameters: PortalSignupSettings, options?: SignUpSettingsUpdateOptionalParams): Promise<void>;
    /**
     * Create or Update Sign-Up settings.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param parameters Create or update parameters.
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName: string, serviceName: string, parameters: PortalSignupSettings, options?: SignUpSettingsCreateOrUpdateOptionalParams): Promise<SignUpSettingsCreateOrUpdateResponse>;
}

/** Optional parameters. */
export declare interface SignUpSettingsCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
    /** ETag of the Entity. Not required when creating an entity, but required when updating an entity. */
    ifMatch?: string;
}

/** Contains response data for the createOrUpdate operation. */
export declare type SignUpSettingsCreateOrUpdateResponse = PortalSignupSettings;

/** Defines headers for SignUpSettings_getEntityTag operation. */
export declare interface SignUpSettingsGetEntityTagHeaders {
    /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
    eTag?: string;
}

/** Optional parameters. */
export declare interface SignUpSettingsGetEntityTagOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the getEntityTag operation. */
export declare type SignUpSettingsGetEntityTagResponse = SignUpSettingsGetEntityTagHeaders;

/** Defines headers for SignUpSettings_get operation. */
export declare interface SignUpSettingsGetHeaders {
    /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
    eTag?: string;
}

/** Optional parameters. */
export declare interface SignUpSettingsGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type SignUpSettingsGetResponse = SignUpSettingsGetHeaders & PortalSignupSettings;

/** Optional parameters. */
export declare interface SignUpSettingsUpdateOptionalParams extends coreClient.OperationOptions {
}

/**
 * Defines values for SkuType. \
 * {@link KnownSkuType} can be used interchangeably with SkuType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Developer**: Developer SKU of Api Management. \
 * **Standard**: Standard SKU of Api Management. \
 * **Premium**: Premium SKU of Api Management. \
 * **Basic**: Basic SKU of Api Management. \
 * **Consumption**: Consumption SKU of Api Management. \
 * **Isolated**: Isolated SKU of Api Management.
 */
export declare type SkuType = string;

/**
 * Defines values for SoapApiType. \
 * {@link KnownSoapApiType} can be used interchangeably with SoapApiType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **http**: Imports a SOAP API having a RESTful front end. \
 * **soap**: Imports the SOAP API having a SOAP front end. \
 * **websocket**: Imports the API having a Websocket front end. \
 * **graphql**: Imports the API having a GraphQL front end.
 */
export declare type SoapApiType = string;

/**
 * Defines values for State. \
 * {@link KnownState} can be used interchangeably with State,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **proposed**: The issue is proposed. \
 * **open**: The issue is opened. \
 * **removed**: The issue was removed. \
 * **resolved**: The issue is now resolved. \
 * **closed**: The issue was closed.
 */
export declare type State = string;

/** Interface representing a Subscription. */
export declare interface Subscription {
    /**
     * Lists all subscriptions of the API Management service instance.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param options The options parameters.
     */
    list(resourceGroupName: string, serviceName: string, options?: SubscriptionListOptionalParams): PagedAsyncIterableIterator<SubscriptionContract>;
    /**
     * Gets the entity state (Etag) version of the apimanagement subscription specified by its identifier.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param sid Subscription entity Identifier. The entity represents the association between a user and
     *            a product in API Management.
     * @param options The options parameters.
     */
    getEntityTag(resourceGroupName: string, serviceName: string, sid: string, options?: SubscriptionGetEntityTagOptionalParams): Promise<SubscriptionGetEntityTagResponse>;
    /**
     * Gets the specified Subscription entity.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param sid Subscription entity Identifier. The entity represents the association between a user and
     *            a product in API Management.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, serviceName: string, sid: string, options?: SubscriptionGetOptionalParams): Promise<SubscriptionGetResponse>;
    /**
     * Creates or updates the subscription of specified user to the specified product.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param sid Subscription entity Identifier. The entity represents the association between a user and
     *            a product in API Management.
     * @param parameters Create parameters.
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName: string, serviceName: string, sid: string, parameters: SubscriptionCreateParameters, options?: SubscriptionCreateOrUpdateOptionalParams): Promise<SubscriptionCreateOrUpdateResponse>;
    /**
     * Updates the details of a subscription specified by its identifier.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param sid Subscription entity Identifier. The entity represents the association between a user and
     *            a product in API Management.
     * @param ifMatch ETag of the Entity. ETag should match the current entity state from the header
     *                response of the GET request or it should be * for unconditional update.
     * @param parameters Update parameters.
     * @param options The options parameters.
     */
    update(resourceGroupName: string, serviceName: string, sid: string, ifMatch: string, parameters: SubscriptionUpdateParameters, options?: SubscriptionUpdateOptionalParams): Promise<SubscriptionUpdateResponse>;
    /**
     * Deletes the specified subscription.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param sid Subscription entity Identifier. The entity represents the association between a user and
     *            a product in API Management.
     * @param ifMatch ETag of the Entity. ETag should match the current entity state from the header
     *                response of the GET request or it should be * for unconditional update.
     * @param options The options parameters.
     */
    delete(resourceGroupName: string, serviceName: string, sid: string, ifMatch: string, options?: SubscriptionDeleteOptionalParams): Promise<void>;
    /**
     * Regenerates primary key of existing subscription of the API Management service instance.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param sid Subscription entity Identifier. The entity represents the association between a user and
     *            a product in API Management.
     * @param options The options parameters.
     */
    regeneratePrimaryKey(resourceGroupName: string, serviceName: string, sid: string, options?: SubscriptionRegeneratePrimaryKeyOptionalParams): Promise<void>;
    /**
     * Regenerates secondary key of existing subscription of the API Management service instance.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param sid Subscription entity Identifier. The entity represents the association between a user and
     *            a product in API Management.
     * @param options The options parameters.
     */
    regenerateSecondaryKey(resourceGroupName: string, serviceName: string, sid: string, options?: SubscriptionRegenerateSecondaryKeyOptionalParams): Promise<void>;
    /**
     * Gets the specified Subscription keys.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param sid Subscription entity Identifier. The entity represents the association between a user and
     *            a product in API Management.
     * @param options The options parameters.
     */
    listSecrets(resourceGroupName: string, serviceName: string, sid: string, options?: SubscriptionListSecretsOptionalParams): Promise<SubscriptionListSecretsResponse>;
}

/** Paged Subscriptions list representation. */
export declare interface SubscriptionCollection {
    /** Page values. */
    value?: SubscriptionContract[];
    /** Total record count number across all pages. */
    count?: number;
    /** Next page link if any. */
    nextLink?: string;
}

/** Subscription details. */
export declare interface SubscriptionContract extends Resource {
    /** The user resource identifier of the subscription owner. The value is a valid relative URL in the format of /users/{userId} where {userId} is a user identifier. */
    ownerId?: string;
    /** Scope like /products/{productId} or /apis or /apis/{apiId}. */
    scope?: string;
    /** The name of the subscription, or null if the subscription has no name. */
    displayName?: string;
    /** Subscription state. Possible states are * active – the subscription is active, * suspended – the subscription is blocked, and the subscriber cannot call any APIs of the product, * submitted – the subscription request has been made by the developer, but has not yet been approved or rejected, * rejected – the subscription request has been denied by an administrator, * cancelled – the subscription has been cancelled by the developer or administrator, * expired – the subscription reached its expiration date and was deactivated. */
    state?: SubscriptionState;
    /**
     * Subscription creation date. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard.
     *
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly createdDate?: Date;
    /**
     * Subscription activation date. The setting is for audit purposes only and the subscription is not automatically activated. The subscription lifecycle can be managed by using the `state` property. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard.
     *
     */
    startDate?: Date;
    /**
     * Subscription expiration date. The setting is for audit purposes only and the subscription is not automatically expired. The subscription lifecycle can be managed by using the `state` property. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard.
     *
     */
    expirationDate?: Date;
    /**
     * Date when subscription was cancelled or expired. The setting is for audit purposes only and the subscription is not automatically cancelled. The subscription lifecycle can be managed by using the `state` property. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard.
     *
     */
    endDate?: Date;
    /**
     * Upcoming subscription expiration notification date. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard.
     *
     */
    notificationDate?: Date;
    /** Subscription primary key. This property will not be filled on 'GET' operations! Use '/listSecrets' POST request to get the value. */
    primaryKey?: string;
    /** Subscription secondary key. This property will not be filled on 'GET' operations! Use '/listSecrets' POST request to get the value. */
    secondaryKey?: string;
    /** Optional subscription comment added by an administrator when the state is changed to the 'rejected'. */
    stateComment?: string;
    /** Determines whether tracing is enabled */
    allowTracing?: boolean;
}

/** Defines headers for Subscription_createOrUpdate operation. */
export declare interface SubscriptionCreateOrUpdateHeaders {
    /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
    eTag?: string;
}

/** Optional parameters. */
export declare interface SubscriptionCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
    /** ETag of the Entity. Not required when creating an entity, but required when updating an entity. */
    ifMatch?: string;
    /**
     * Notify change in Subscription State.
     *  - If false, do not send any email notification for change of state of subscription
     *  - If true, send email notification of change of state of subscription
     */
    notify?: boolean;
    /** Determines the type of application which send the create user request. Default is legacy publisher portal. */
    appType?: AppType;
}

/** Contains response data for the createOrUpdate operation. */
export declare type SubscriptionCreateOrUpdateResponse = SubscriptionCreateOrUpdateHeaders & SubscriptionContract;

/** Subscription create details. */
export declare interface SubscriptionCreateParameters {
    /** User (user id path) for whom subscription is being created in form /users/{userId} */
    ownerId?: string;
    /** Scope like /products/{productId} or /apis or /apis/{apiId}. */
    scope?: string;
    /** Subscription name. */
    displayName?: string;
    /** Primary subscription key. If not specified during request key will be generated automatically. */
    primaryKey?: string;
    /** Secondary subscription key. If not specified during request key will be generated automatically. */
    secondaryKey?: string;
    /** Initial subscription state. If no value is specified, subscription is created with Submitted state. Possible states are * active – the subscription is active, * suspended – the subscription is blocked, and the subscriber cannot call any APIs of the product, * submitted – the subscription request has been made by the developer, but has not yet been approved or rejected, * rejected – the subscription request has been denied by an administrator, * cancelled – the subscription has been cancelled by the developer or administrator, * expired – the subscription reached its expiration date and was deactivated. */
    state?: SubscriptionState;
    /** Determines whether tracing can be enabled */
    allowTracing?: boolean;
}

/** Optional parameters. */
export declare interface SubscriptionDeleteOptionalParams extends coreClient.OperationOptions {
}

/** Defines headers for Subscription_getEntityTag operation. */
export declare interface SubscriptionGetEntityTagHeaders {
    /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
    eTag?: string;
}

/** Optional parameters. */
export declare interface SubscriptionGetEntityTagOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the getEntityTag operation. */
export declare type SubscriptionGetEntityTagResponse = SubscriptionGetEntityTagHeaders;

/** Defines headers for Subscription_get operation. */
export declare interface SubscriptionGetHeaders {
    /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
    eTag?: string;
}

/** Optional parameters. */
export declare interface SubscriptionGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type SubscriptionGetResponse = SubscriptionGetHeaders & SubscriptionContract;

/** Subscription key parameter names details. */
export declare interface SubscriptionKeyParameterNamesContract {
    /** Subscription key header name. */
    header?: string;
    /** Subscription key query string parameter name. */
    query?: string;
}

/** Subscription keys. */
export declare interface SubscriptionKeysContract {
    /** Subscription primary key. */
    primaryKey?: string;
    /** Subscription secondary key. */
    secondaryKey?: string;
}

/** Optional parameters. */
export declare interface SubscriptionListNextOptionalParams extends coreClient.OperationOptions {
    /** |     Field     |     Usage     |     Supported operators     |     Supported functions     |</br>|-------------|-------------|-------------|-------------|</br>| name | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |</br>| displayName | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |</br>| stateComment | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |</br>| ownerId | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |</br>| scope | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |</br>| userId | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |</br>| productId | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |</br>| state | filter | eq |     |</br>| user | expand |     |     |</br> */
    filter?: string;
    /** Number of records to return. */
    top?: number;
    /** Number of records to skip. */
    skip?: number;
}

/** Contains response data for the listNext operation. */
export declare type SubscriptionListNextResponse = SubscriptionCollection;

/** Optional parameters. */
export declare interface SubscriptionListOptionalParams extends coreClient.OperationOptions {
    /** |     Field     |     Usage     |     Supported operators     |     Supported functions     |</br>|-------------|-------------|-------------|-------------|</br>| name | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |</br>| displayName | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |</br>| stateComment | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |</br>| ownerId | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |</br>| scope | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |</br>| userId | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |</br>| productId | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |</br>| state | filter | eq |     |</br>| user | expand |     |     |</br> */
    filter?: string;
    /** Number of records to return. */
    top?: number;
    /** Number of records to skip. */
    skip?: number;
}

/** Contains response data for the list operation. */
export declare type SubscriptionListResponse = SubscriptionCollection;

/** Defines headers for Subscription_listSecrets operation. */
export declare interface SubscriptionListSecretsHeaders {
    /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
    eTag?: string;
}

/** Optional parameters. */
export declare interface SubscriptionListSecretsOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listSecrets operation. */
export declare type SubscriptionListSecretsResponse = SubscriptionListSecretsHeaders & SubscriptionKeysContract;

/** Optional parameters. */
export declare interface SubscriptionRegeneratePrimaryKeyOptionalParams extends coreClient.OperationOptions {
}

/** Optional parameters. */
export declare interface SubscriptionRegenerateSecondaryKeyOptionalParams extends coreClient.OperationOptions {
}

/** Subscriptions delegation settings properties. */
export declare interface SubscriptionsDelegationSettingsProperties {
    /** Enable or disable delegation for subscriptions. */
    enabled?: boolean;
}

/** Defines values for SubscriptionState. */
export declare type SubscriptionState = "suspended" | "active" | "expired" | "submitted" | "rejected" | "cancelled";

/** Defines headers for Subscription_update operation. */
export declare interface SubscriptionUpdateHeaders {
    /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
    eTag?: string;
}

/** Optional parameters. */
export declare interface SubscriptionUpdateOptionalParams extends coreClient.OperationOptions {
    /**
     * Notify change in Subscription State.
     *  - If false, do not send any email notification for change of state of subscription
     *  - If true, send email notification of change of state of subscription
     */
    notify?: boolean;
    /** Determines the type of application which send the create user request. Default is legacy publisher portal. */
    appType?: AppType;
}

/** Subscription update details. */
export declare interface SubscriptionUpdateParameters {
    /** User identifier path: /users/{userId} */
    ownerId?: string;
    /** Scope like /products/{productId} or /apis or /apis/{apiId} */
    scope?: string;
    /** Subscription expiration date. The setting is for audit purposes only and the subscription is not automatically expired. The subscription lifecycle can be managed by using the `state` property. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard. */
    expirationDate?: Date;
    /** Subscription name. */
    displayName?: string;
    /** Primary subscription key. */
    primaryKey?: string;
    /** Secondary subscription key. */
    secondaryKey?: string;
    /** Subscription state. Possible states are * active – the subscription is active, * suspended – the subscription is blocked, and the subscriber cannot call any APIs of the product, * submitted – the subscription request has been made by the developer, but has not yet been approved or rejected, * rejected – the subscription request has been denied by an administrator, * cancelled – the subscription has been cancelled by the developer or administrator, * expired – the subscription reached its expiration date and was deactivated. */
    state?: SubscriptionState;
    /** Comments describing subscription state change by the administrator when the state is changed to the 'rejected'. */
    stateComment?: string;
    /** Determines whether tracing can be enabled */
    allowTracing?: boolean;
}

/** Contains response data for the update operation. */
export declare type SubscriptionUpdateResponse = SubscriptionUpdateHeaders & SubscriptionContract;

/** Metadata pertaining to creation and last modification of the resource. */
export declare interface SystemData {
    /** The identity that created the resource. */
    createdBy?: string;
    /** The type of identity that created the resource. */
    createdByType?: CreatedByType;
    /** The timestamp of resource creation (UTC). */
    createdAt?: Date;
    /** The identity that last modified the resource. */
    lastModifiedBy?: string;
    /** The type of identity that last modified the resource. */
    lastModifiedByType?: CreatedByType;
    /** The timestamp of resource last modification (UTC) */
    lastModifiedAt?: Date;
}

/** Interface representing a Tag. */
export declare interface Tag {
    /**
     * Lists all Tags associated with the Operation.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param apiId API revision identifier. Must be unique in the current API Management service instance.
     *              Non-current revision has ;rev=n as a suffix where n is the revision number.
     * @param operationId Operation identifier within an API. Must be unique in the current API Management
     *                    service instance.
     * @param options The options parameters.
     */
    listByOperation(resourceGroupName: string, serviceName: string, apiId: string, operationId: string, options?: TagListByOperationOptionalParams): PagedAsyncIterableIterator<TagContract>;
    /**
     * Lists all Tags associated with the API.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param apiId API revision identifier. Must be unique in the current API Management service instance.
     *              Non-current revision has ;rev=n as a suffix where n is the revision number.
     * @param options The options parameters.
     */
    listByApi(resourceGroupName: string, serviceName: string, apiId: string, options?: TagListByApiOptionalParams): PagedAsyncIterableIterator<TagContract>;
    /**
     * Lists all Tags associated with the Product.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param productId Product identifier. Must be unique in the current API Management service instance.
     * @param options The options parameters.
     */
    listByProduct(resourceGroupName: string, serviceName: string, productId: string, options?: TagListByProductOptionalParams): PagedAsyncIterableIterator<TagContract>;
    /**
     * Lists a collection of tags defined within a service instance.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param options The options parameters.
     */
    listByService(resourceGroupName: string, serviceName: string, options?: TagListByServiceOptionalParams): PagedAsyncIterableIterator<TagContract>;
    /**
     * Gets the entity state version of the tag specified by its identifier.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param apiId API revision identifier. Must be unique in the current API Management service instance.
     *              Non-current revision has ;rev=n as a suffix where n is the revision number.
     * @param operationId Operation identifier within an API. Must be unique in the current API Management
     *                    service instance.
     * @param tagId Tag identifier. Must be unique in the current API Management service instance.
     * @param options The options parameters.
     */
    getEntityStateByOperation(resourceGroupName: string, serviceName: string, apiId: string, operationId: string, tagId: string, options?: TagGetEntityStateByOperationOptionalParams): Promise<TagGetEntityStateByOperationResponse>;
    /**
     * Get tag associated with the Operation.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param apiId API revision identifier. Must be unique in the current API Management service instance.
     *              Non-current revision has ;rev=n as a suffix where n is the revision number.
     * @param operationId Operation identifier within an API. Must be unique in the current API Management
     *                    service instance.
     * @param tagId Tag identifier. Must be unique in the current API Management service instance.
     * @param options The options parameters.
     */
    getByOperation(resourceGroupName: string, serviceName: string, apiId: string, operationId: string, tagId: string, options?: TagGetByOperationOptionalParams): Promise<TagGetByOperationResponse>;
    /**
     * Assign tag to the Operation.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param apiId API revision identifier. Must be unique in the current API Management service instance.
     *              Non-current revision has ;rev=n as a suffix where n is the revision number.
     * @param operationId Operation identifier within an API. Must be unique in the current API Management
     *                    service instance.
     * @param tagId Tag identifier. Must be unique in the current API Management service instance.
     * @param options The options parameters.
     */
    assignToOperation(resourceGroupName: string, serviceName: string, apiId: string, operationId: string, tagId: string, options?: TagAssignToOperationOptionalParams): Promise<TagAssignToOperationResponse>;
    /**
     * Detach the tag from the Operation.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param apiId API revision identifier. Must be unique in the current API Management service instance.
     *              Non-current revision has ;rev=n as a suffix where n is the revision number.
     * @param operationId Operation identifier within an API. Must be unique in the current API Management
     *                    service instance.
     * @param tagId Tag identifier. Must be unique in the current API Management service instance.
     * @param options The options parameters.
     */
    detachFromOperation(resourceGroupName: string, serviceName: string, apiId: string, operationId: string, tagId: string, options?: TagDetachFromOperationOptionalParams): Promise<void>;
    /**
     * Gets the entity state version of the tag specified by its identifier.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param apiId API revision identifier. Must be unique in the current API Management service instance.
     *              Non-current revision has ;rev=n as a suffix where n is the revision number.
     * @param tagId Tag identifier. Must be unique in the current API Management service instance.
     * @param options The options parameters.
     */
    getEntityStateByApi(resourceGroupName: string, serviceName: string, apiId: string, tagId: string, options?: TagGetEntityStateByApiOptionalParams): Promise<TagGetEntityStateByApiResponse>;
    /**
     * Get tag associated with the API.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param apiId API revision identifier. Must be unique in the current API Management service instance.
     *              Non-current revision has ;rev=n as a suffix where n is the revision number.
     * @param tagId Tag identifier. Must be unique in the current API Management service instance.
     * @param options The options parameters.
     */
    getByApi(resourceGroupName: string, serviceName: string, apiId: string, tagId: string, options?: TagGetByApiOptionalParams): Promise<TagGetByApiResponse>;
    /**
     * Assign tag to the Api.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param apiId API revision identifier. Must be unique in the current API Management service instance.
     *              Non-current revision has ;rev=n as a suffix where n is the revision number.
     * @param tagId Tag identifier. Must be unique in the current API Management service instance.
     * @param options The options parameters.
     */
    assignToApi(resourceGroupName: string, serviceName: string, apiId: string, tagId: string, options?: TagAssignToApiOptionalParams): Promise<TagAssignToApiResponse>;
    /**
     * Detach the tag from the Api.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param apiId API revision identifier. Must be unique in the current API Management service instance.
     *              Non-current revision has ;rev=n as a suffix where n is the revision number.
     * @param tagId Tag identifier. Must be unique in the current API Management service instance.
     * @param options The options parameters.
     */
    detachFromApi(resourceGroupName: string, serviceName: string, apiId: string, tagId: string, options?: TagDetachFromApiOptionalParams): Promise<void>;
    /**
     * Gets the entity state version of the tag specified by its identifier.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param productId Product identifier. Must be unique in the current API Management service instance.
     * @param tagId Tag identifier. Must be unique in the current API Management service instance.
     * @param options The options parameters.
     */
    getEntityStateByProduct(resourceGroupName: string, serviceName: string, productId: string, tagId: string, options?: TagGetEntityStateByProductOptionalParams): Promise<TagGetEntityStateByProductResponse>;
    /**
     * Get tag associated with the Product.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param productId Product identifier. Must be unique in the current API Management service instance.
     * @param tagId Tag identifier. Must be unique in the current API Management service instance.
     * @param options The options parameters.
     */
    getByProduct(resourceGroupName: string, serviceName: string, productId: string, tagId: string, options?: TagGetByProductOptionalParams): Promise<TagGetByProductResponse>;
    /**
     * Assign tag to the Product.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param productId Product identifier. Must be unique in the current API Management service instance.
     * @param tagId Tag identifier. Must be unique in the current API Management service instance.
     * @param options The options parameters.
     */
    assignToProduct(resourceGroupName: string, serviceName: string, productId: string, tagId: string, options?: TagAssignToProductOptionalParams): Promise<TagAssignToProductResponse>;
    /**
     * Detach the tag from the Product.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param productId Product identifier. Must be unique in the current API Management service instance.
     * @param tagId Tag identifier. Must be unique in the current API Management service instance.
     * @param options The options parameters.
     */
    detachFromProduct(resourceGroupName: string, serviceName: string, productId: string, tagId: string, options?: TagDetachFromProductOptionalParams): Promise<void>;
    /**
     * Gets the entity state version of the tag specified by its identifier.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param tagId Tag identifier. Must be unique in the current API Management service instance.
     * @param options The options parameters.
     */
    getEntityState(resourceGroupName: string, serviceName: string, tagId: string, options?: TagGetEntityStateOptionalParams): Promise<TagGetEntityStateResponse>;
    /**
     * Gets the details of the tag specified by its identifier.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param tagId Tag identifier. Must be unique in the current API Management service instance.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, serviceName: string, tagId: string, options?: TagGetOptionalParams): Promise<TagGetResponse>;
    /**
     * Creates a tag.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param tagId Tag identifier. Must be unique in the current API Management service instance.
     * @param parameters Create parameters.
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName: string, serviceName: string, tagId: string, parameters: TagCreateUpdateParameters, options?: TagCreateOrUpdateOptionalParams): Promise<TagCreateOrUpdateResponse>;
    /**
     * Updates the details of the tag specified by its identifier.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param tagId Tag identifier. Must be unique in the current API Management service instance.
     * @param ifMatch ETag of the Entity. ETag should match the current entity state from the header
     *                response of the GET request or it should be * for unconditional update.
     * @param parameters Update parameters.
     * @param options The options parameters.
     */
    update(resourceGroupName: string, serviceName: string, tagId: string, ifMatch: string, parameters: TagCreateUpdateParameters, options?: TagUpdateOptionalParams): Promise<TagUpdateResponse>;
    /**
     * Deletes specific tag of the API Management service instance.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param tagId Tag identifier. Must be unique in the current API Management service instance.
     * @param ifMatch ETag of the Entity. ETag should match the current entity state from the header
     *                response of the GET request or it should be * for unconditional update.
     * @param options The options parameters.
     */
    delete(resourceGroupName: string, serviceName: string, tagId: string, ifMatch: string, options?: TagDeleteOptionalParams): Promise<void>;
}

/** Defines headers for Tag_assignToApi operation. */
export declare interface TagAssignToApiHeaders {
    /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
    eTag?: string;
}

/** Optional parameters. */
export declare interface TagAssignToApiOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the assignToApi operation. */
export declare type TagAssignToApiResponse = TagAssignToApiHeaders & TagContract;

/** Optional parameters. */
export declare interface TagAssignToOperationOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the assignToOperation operation. */
export declare type TagAssignToOperationResponse = TagContract;

/** Optional parameters. */
export declare interface TagAssignToProductOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the assignToProduct operation. */
export declare type TagAssignToProductResponse = TagContract;

/** Paged Tag list representation. */
export declare interface TagCollection {
    /** Page values. */
    value?: TagContract[];
    /** Total record count number across all pages. */
    count?: number;
    /** Next page link if any. */
    nextLink?: string;
}

/** Tag Contract details. */
export declare interface TagContract extends Resource {
    /** Tag name. */
    displayName?: string;
}

/** Defines headers for Tag_createOrUpdate operation. */
export declare interface TagCreateOrUpdateHeaders {
    /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
    eTag?: string;
}

/** Optional parameters. */
export declare interface TagCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
    /** ETag of the Entity. Not required when creating an entity, but required when updating an entity. */
    ifMatch?: string;
}

/** Contains response data for the createOrUpdate operation. */
export declare type TagCreateOrUpdateResponse = TagCreateOrUpdateHeaders & TagContract;

/** Parameters supplied to Create/Update Tag operations. */
export declare interface TagCreateUpdateParameters {
    /** Tag name. */
    displayName?: string;
}

/** Optional parameters. */
export declare interface TagDeleteOptionalParams extends coreClient.OperationOptions {
}

/** Parameters supplied to the Create TagDescription operation. */
export declare interface TagDescriptionBaseProperties {
    /** Description of the Tag. */
    description?: string;
    /** Absolute URL of external resources describing the tag. */
    externalDocsUrl?: string;
    /** Description of the external resources describing the tag. */
    externalDocsDescription?: string;
}

/** Paged TagDescription list representation. */
export declare interface TagDescriptionCollection {
    /** Page values. */
    value?: TagDescriptionContract[];
    /** Total record count number across all pages. */
    count?: number;
    /** Next page link if any. */
    nextLink?: string;
}

/** Contract details. */
export declare interface TagDescriptionContract extends Resource {
    /** Description of the Tag. */
    description?: string;
    /** Absolute URL of external resources describing the tag. */
    externalDocsUrl?: string;
    /** Description of the external resources describing the tag. */
    externalDocsDescription?: string;
    /** Identifier of the tag in the form of /tags/{tagId} */
    tagId?: string;
    /** Tag name. */
    displayName?: string;
}

/** TagDescription contract Properties. */
export declare interface TagDescriptionContractProperties extends TagDescriptionBaseProperties {
    /** Identifier of the tag in the form of /tags/{tagId} */
    tagId?: string;
    /** Tag name. */
    displayName?: string;
}

/** Parameters supplied to the Create TagDescription operation. */
export declare interface TagDescriptionCreateParameters {
    /** Description of the Tag. */
    description?: string;
    /** Absolute URL of external resources describing the tag. */
    externalDocsUrl?: string;
    /** Description of the external resources describing the tag. */
    externalDocsDescription?: string;
}

/** Optional parameters. */
export declare interface TagDetachFromApiOptionalParams extends coreClient.OperationOptions {
}

/** Optional parameters. */
export declare interface TagDetachFromOperationOptionalParams extends coreClient.OperationOptions {
}

/** Optional parameters. */
export declare interface TagDetachFromProductOptionalParams extends coreClient.OperationOptions {
}

/** Defines headers for Tag_getByApi operation. */
export declare interface TagGetByApiHeaders {
    /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
    eTag?: string;
}

/** Optional parameters. */
export declare interface TagGetByApiOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the getByApi operation. */
export declare type TagGetByApiResponse = TagGetByApiHeaders & TagContract;

/** Defines headers for Tag_getByOperation operation. */
export declare interface TagGetByOperationHeaders {
    /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
    eTag?: string;
}

/** Optional parameters. */
export declare interface TagGetByOperationOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the getByOperation operation. */
export declare type TagGetByOperationResponse = TagGetByOperationHeaders & TagContract;

/** Defines headers for Tag_getByProduct operation. */
export declare interface TagGetByProductHeaders {
    /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
    eTag?: string;
}

/** Optional parameters. */
export declare interface TagGetByProductOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the getByProduct operation. */
export declare type TagGetByProductResponse = TagGetByProductHeaders & TagContract;

/** Defines headers for Tag_getEntityStateByApi operation. */
export declare interface TagGetEntityStateByApiHeaders {
    /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
    eTag?: string;
}

/** Optional parameters. */
export declare interface TagGetEntityStateByApiOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the getEntityStateByApi operation. */
export declare type TagGetEntityStateByApiResponse = TagGetEntityStateByApiHeaders;

/** Defines headers for Tag_getEntityStateByOperation operation. */
export declare interface TagGetEntityStateByOperationHeaders {
    /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
    eTag?: string;
}

/** Optional parameters. */
export declare interface TagGetEntityStateByOperationOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the getEntityStateByOperation operation. */
export declare type TagGetEntityStateByOperationResponse = TagGetEntityStateByOperationHeaders;

/** Defines headers for Tag_getEntityStateByProduct operation. */
export declare interface TagGetEntityStateByProductHeaders {
    /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
    eTag?: string;
}

/** Optional parameters. */
export declare interface TagGetEntityStateByProductOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the getEntityStateByProduct operation. */
export declare type TagGetEntityStateByProductResponse = TagGetEntityStateByProductHeaders;

/** Defines headers for Tag_getEntityState operation. */
export declare interface TagGetEntityStateHeaders {
    /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
    eTag?: string;
}

/** Optional parameters. */
export declare interface TagGetEntityStateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the getEntityState operation. */
export declare type TagGetEntityStateResponse = TagGetEntityStateHeaders;

/** Defines headers for Tag_get operation. */
export declare interface TagGetHeaders {
    /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
    eTag?: string;
}

/** Optional parameters. */
export declare interface TagGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type TagGetResponse = TagGetHeaders & TagContract;

/** Optional parameters. */
export declare interface TagListByApiNextOptionalParams extends coreClient.OperationOptions {
    /** |     Field     |     Usage     |     Supported operators     |     Supported functions     |</br>|-------------|-------------|-------------|-------------|</br>| displayName | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |</br>| name | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |</br> */
    filter?: string;
    /** Number of records to return. */
    top?: number;
    /** Number of records to skip. */
    skip?: number;
}

/** Contains response data for the listByApiNext operation. */
export declare type TagListByApiNextResponse = TagCollection;

/** Optional parameters. */
export declare interface TagListByApiOptionalParams extends coreClient.OperationOptions {
    /** |     Field     |     Usage     |     Supported operators     |     Supported functions     |</br>|-------------|-------------|-------------|-------------|</br>| displayName | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |</br>| name | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |</br> */
    filter?: string;
    /** Number of records to return. */
    top?: number;
    /** Number of records to skip. */
    skip?: number;
}

/** Contains response data for the listByApi operation. */
export declare type TagListByApiResponse = TagCollection;

/** Optional parameters. */
export declare interface TagListByOperationNextOptionalParams extends coreClient.OperationOptions {
    /** |     Field     |     Usage     |     Supported operators     |     Supported functions     |</br>|-------------|-------------|-------------|-------------|</br>| displayName | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |</br>| name | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |</br> */
    filter?: string;
    /** Number of records to return. */
    top?: number;
    /** Number of records to skip. */
    skip?: number;
}

/** Contains response data for the listByOperationNext operation. */
export declare type TagListByOperationNextResponse = TagCollection;

/** Optional parameters. */
export declare interface TagListByOperationOptionalParams extends coreClient.OperationOptions {
    /** |     Field     |     Usage     |     Supported operators     |     Supported functions     |</br>|-------------|-------------|-------------|-------------|</br>| displayName | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |</br>| name | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |</br> */
    filter?: string;
    /** Number of records to return. */
    top?: number;
    /** Number of records to skip. */
    skip?: number;
}

/** Contains response data for the listByOperation operation. */
export declare type TagListByOperationResponse = TagCollection;

/** Optional parameters. */
export declare interface TagListByProductNextOptionalParams extends coreClient.OperationOptions {
    /** |     Field     |     Usage     |     Supported operators     |     Supported functions     |</br>|-------------|-------------|-------------|-------------|</br>| displayName | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |</br>| name | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |</br> */
    filter?: string;
    /** Number of records to return. */
    top?: number;
    /** Number of records to skip. */
    skip?: number;
}

/** Contains response data for the listByProductNext operation. */
export declare type TagListByProductNextResponse = TagCollection;

/** Optional parameters. */
export declare interface TagListByProductOptionalParams extends coreClient.OperationOptions {
    /** |     Field     |     Usage     |     Supported operators     |     Supported functions     |</br>|-------------|-------------|-------------|-------------|</br>| displayName | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |</br>| name | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |</br> */
    filter?: string;
    /** Number of records to return. */
    top?: number;
    /** Number of records to skip. */
    skip?: number;
}

/** Contains response data for the listByProduct operation. */
export declare type TagListByProductResponse = TagCollection;

/** Optional parameters. */
export declare interface TagListByServiceNextOptionalParams extends coreClient.OperationOptions {
    /** |     Field     |     Usage     |     Supported operators     |     Supported functions     |</br>|-------------|-------------|-------------|-------------|</br>| name | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |</br>| displayName | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |</br> */
    filter?: string;
    /** Number of records to return. */
    top?: number;
    /** Number of records to skip. */
    skip?: number;
    /** Scope like 'apis', 'products' or 'apis/{apiId} */
    scope?: string;
}

/** Contains response data for the listByServiceNext operation. */
export declare type TagListByServiceNextResponse = TagCollection;

/** Optional parameters. */
export declare interface TagListByServiceOptionalParams extends coreClient.OperationOptions {
    /** |     Field     |     Usage     |     Supported operators     |     Supported functions     |</br>|-------------|-------------|-------------|-------------|</br>| name | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |</br>| displayName | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |</br> */
    filter?: string;
    /** Number of records to return. */
    top?: number;
    /** Number of records to skip. */
    skip?: number;
    /** Scope like 'apis', 'products' or 'apis/{apiId} */
    scope?: string;
}

/** Contains response data for the listByService operation. */
export declare type TagListByServiceResponse = TagCollection;

/** Interface representing a TagResource. */
export declare interface TagResource {
    /**
     * Lists a collection of resources associated with tags.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param options The options parameters.
     */
    listByService(resourceGroupName: string, serviceName: string, options?: TagResourceListByServiceOptionalParams): PagedAsyncIterableIterator<TagResourceContract>;
}

/** Paged Tag list representation. */
export declare interface TagResourceCollection {
    /** Page values. */
    value?: TagResourceContract[];
    /** Total record count number across all pages. */
    count?: number;
    /** Next page link if any. */
    nextLink?: string;
}

/** TagResource contract properties. */
export declare interface TagResourceContract {
    /** Tag associated with the resource. */
    tag: TagResourceContractProperties;
    /** API associated with the tag. */
    api?: ApiTagResourceContractProperties;
    /** Operation associated with the tag. */
    operation?: OperationTagResourceContractProperties;
    /** Product associated with the tag. */
    product?: ProductTagResourceContractProperties;
}

/** Contract defining the Tag property in the Tag Resource Contract */
export declare interface TagResourceContractProperties {
    /** Tag identifier */
    id?: string;
    /** Tag Name */
    name?: string;
}

/** Optional parameters. */
export declare interface TagResourceListByServiceNextOptionalParams extends coreClient.OperationOptions {
    /** |     Field     |     Usage     |     Supported operators     |     Supported functions     |</br>|-------------|-------------|-------------|-------------|</br>| aid | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |</br>| name | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |</br>| displayName | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |</br>| apiName | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |</br>| apiRevision | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |</br>| path | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |</br>| description | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |</br>| serviceUrl | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |</br>| method | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |</br>| urlTemplate | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |</br>| terms | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |</br>| state | filter | eq |     |</br>| isCurrent | filter | eq |     |</br> */
    filter?: string;
    /** Number of records to return. */
    top?: number;
    /** Number of records to skip. */
    skip?: number;
}

/** Contains response data for the listByServiceNext operation. */
export declare type TagResourceListByServiceNextResponse = TagResourceCollection;

/** Optional parameters. */
export declare interface TagResourceListByServiceOptionalParams extends coreClient.OperationOptions {
    /** |     Field     |     Usage     |     Supported operators     |     Supported functions     |</br>|-------------|-------------|-------------|-------------|</br>| aid | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |</br>| name | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |</br>| displayName | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |</br>| apiName | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |</br>| apiRevision | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |</br>| path | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |</br>| description | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |</br>| serviceUrl | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |</br>| method | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |</br>| urlTemplate | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |</br>| terms | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |</br>| state | filter | eq |     |</br>| isCurrent | filter | eq |     |</br> */
    filter?: string;
    /** Number of records to return. */
    top?: number;
    /** Number of records to skip. */
    skip?: number;
}

/** Contains response data for the listByService operation. */
export declare type TagResourceListByServiceResponse = TagResourceCollection;

/** Defines headers for Tag_update operation. */
export declare interface TagUpdateHeaders {
    /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
    eTag?: string;
}

/** Optional parameters. */
export declare interface TagUpdateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the update operation. */
export declare type TagUpdateResponse = TagUpdateHeaders & TagContract;

/**
 * Defines values for TemplateName. \
 * {@link KnownTemplateName} can be used interchangeably with TemplateName,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **applicationApprovedNotificationMessage** \
 * **accountClosedDeveloper** \
 * **quotaLimitApproachingDeveloperNotificationMessage** \
 * **newDeveloperNotificationMessage** \
 * **emailChangeIdentityDefault** \
 * **inviteUserNotificationMessage** \
 * **newCommentNotificationMessage** \
 * **confirmSignUpIdentityDefault** \
 * **newIssueNotificationMessage** \
 * **purchaseDeveloperNotificationMessage** \
 * **passwordResetIdentityDefault** \
 * **passwordResetByAdminNotificationMessage** \
 * **rejectDeveloperNotificationMessage** \
 * **requestDeveloperNotificationMessage**
 */
export declare type TemplateName = string;

/** Interface representing a TenantAccess. */
export declare interface TenantAccess {
    /**
     * Returns list of access infos - for Git and Management endpoints.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param options The options parameters.
     */
    listByService(resourceGroupName: string, serviceName: string, options?: TenantAccessListByServiceOptionalParams): PagedAsyncIterableIterator<AccessInformationContract>;
    /**
     * Tenant access metadata
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param accessName The identifier of the Access configuration.
     * @param options The options parameters.
     */
    getEntityTag(resourceGroupName: string, serviceName: string, accessName: AccessIdName, options?: TenantAccessGetEntityTagOptionalParams): Promise<TenantAccessGetEntityTagResponse>;
    /**
     * Get tenant access information details without secrets.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param accessName The identifier of the Access configuration.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, serviceName: string, accessName: AccessIdName, options?: TenantAccessGetOptionalParams): Promise<TenantAccessGetResponse>;
    /**
     * Update tenant access information details.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param accessName The identifier of the Access configuration.
     * @param ifMatch ETag of the Entity. ETag should match the current entity state from the header
     *                response of the GET request or it should be * for unconditional update.
     * @param parameters Parameters supplied to retrieve the Tenant Access Information.
     * @param options The options parameters.
     */
    create(resourceGroupName: string, serviceName: string, accessName: AccessIdName, ifMatch: string, parameters: AccessInformationCreateParameters, options?: TenantAccessCreateOptionalParams): Promise<TenantAccessCreateResponse>;
    /**
     * Update tenant access information details.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param accessName The identifier of the Access configuration.
     * @param ifMatch ETag of the Entity. ETag should match the current entity state from the header
     *                response of the GET request or it should be * for unconditional update.
     * @param parameters Parameters supplied to retrieve the Tenant Access Information.
     * @param options The options parameters.
     */
    update(resourceGroupName: string, serviceName: string, accessName: AccessIdName, ifMatch: string, parameters: AccessInformationUpdateParameters, options?: TenantAccessUpdateOptionalParams): Promise<TenantAccessUpdateResponse>;
    /**
     * Regenerate primary access key
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param accessName The identifier of the Access configuration.
     * @param options The options parameters.
     */
    regeneratePrimaryKey(resourceGroupName: string, serviceName: string, accessName: AccessIdName, options?: TenantAccessRegeneratePrimaryKeyOptionalParams): Promise<void>;
    /**
     * Regenerate secondary access key
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param accessName The identifier of the Access configuration.
     * @param options The options parameters.
     */
    regenerateSecondaryKey(resourceGroupName: string, serviceName: string, accessName: AccessIdName, options?: TenantAccessRegenerateSecondaryKeyOptionalParams): Promise<void>;
    /**
     * Get tenant access information details.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param accessName The identifier of the Access configuration.
     * @param options The options parameters.
     */
    listSecrets(resourceGroupName: string, serviceName: string, accessName: AccessIdName, options?: TenantAccessListSecretsOptionalParams): Promise<TenantAccessListSecretsResponse>;
}

/** Defines headers for TenantAccess_create operation. */
export declare interface TenantAccessCreateHeaders {
    /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
    eTag?: string;
}

/** Optional parameters. */
export declare interface TenantAccessCreateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the create operation. */
export declare type TenantAccessCreateResponse = TenantAccessCreateHeaders & AccessInformationContract;

/** Defines headers for TenantAccess_getEntityTag operation. */
export declare interface TenantAccessGetEntityTagHeaders {
    /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
    eTag?: string;
}

/** Optional parameters. */
export declare interface TenantAccessGetEntityTagOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the getEntityTag operation. */
export declare type TenantAccessGetEntityTagResponse = TenantAccessGetEntityTagHeaders;

/** Defines headers for TenantAccess_get operation. */
export declare interface TenantAccessGetHeaders {
    /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
    eTag?: string;
}

/** Optional parameters. */
export declare interface TenantAccessGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type TenantAccessGetResponse = TenantAccessGetHeaders & AccessInformationContract;

/** Interface representing a TenantAccessGit. */
export declare interface TenantAccessGit {
    /**
     * Regenerate primary access key for GIT.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param accessName The identifier of the Access configuration.
     * @param options The options parameters.
     */
    regeneratePrimaryKey(resourceGroupName: string, serviceName: string, accessName: AccessIdName, options?: TenantAccessGitRegeneratePrimaryKeyOptionalParams): Promise<void>;
    /**
     * Regenerate secondary access key for GIT.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param accessName The identifier of the Access configuration.
     * @param options The options parameters.
     */
    regenerateSecondaryKey(resourceGroupName: string, serviceName: string, accessName: AccessIdName, options?: TenantAccessGitRegenerateSecondaryKeyOptionalParams): Promise<void>;
}

/** Optional parameters. */
export declare interface TenantAccessGitRegeneratePrimaryKeyOptionalParams extends coreClient.OperationOptions {
}

/** Optional parameters. */
export declare interface TenantAccessGitRegenerateSecondaryKeyOptionalParams extends coreClient.OperationOptions {
}

/** Optional parameters. */
export declare interface TenantAccessListByServiceNextOptionalParams extends coreClient.OperationOptions {
    /** Not used */
    filter?: string;
}

/** Contains response data for the listByServiceNext operation. */
export declare type TenantAccessListByServiceNextResponse = AccessInformationCollection;

/** Optional parameters. */
export declare interface TenantAccessListByServiceOptionalParams extends coreClient.OperationOptions {
    /** Not used */
    filter?: string;
}

/** Contains response data for the listByService operation. */
export declare type TenantAccessListByServiceResponse = AccessInformationCollection;

/** Defines headers for TenantAccess_listSecrets operation. */
export declare interface TenantAccessListSecretsHeaders {
    /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
    eTag?: string;
}

/** Optional parameters. */
export declare interface TenantAccessListSecretsOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listSecrets operation. */
export declare type TenantAccessListSecretsResponse = TenantAccessListSecretsHeaders & AccessInformationSecretsContract;

/** Optional parameters. */
export declare interface TenantAccessRegeneratePrimaryKeyOptionalParams extends coreClient.OperationOptions {
}

/** Optional parameters. */
export declare interface TenantAccessRegenerateSecondaryKeyOptionalParams extends coreClient.OperationOptions {
}

/** Defines headers for TenantAccess_update operation. */
export declare interface TenantAccessUpdateHeaders {
    /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
    eTag?: string;
}

/** Optional parameters. */
export declare interface TenantAccessUpdateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the update operation. */
export declare type TenantAccessUpdateResponse = TenantAccessUpdateHeaders & AccessInformationContract;

/** Interface representing a TenantConfiguration. */
export declare interface TenantConfiguration {
    /**
     * This operation applies changes from the specified Git branch to the configuration database. This is
     * a long running operation and could take several minutes to complete.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param configurationName The identifier of the Git Configuration Operation.
     * @param parameters Deploy Configuration parameters.
     * @param options The options parameters.
     */
    beginDeploy(resourceGroupName: string, serviceName: string, configurationName: ConfigurationIdName, parameters: DeployConfigurationParameters, options?: TenantConfigurationDeployOptionalParams): Promise<PollerLike<PollOperationState<TenantConfigurationDeployResponse>, TenantConfigurationDeployResponse>>;
    /**
     * This operation applies changes from the specified Git branch to the configuration database. This is
     * a long running operation and could take several minutes to complete.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param configurationName The identifier of the Git Configuration Operation.
     * @param parameters Deploy Configuration parameters.
     * @param options The options parameters.
     */
    beginDeployAndWait(resourceGroupName: string, serviceName: string, configurationName: ConfigurationIdName, parameters: DeployConfigurationParameters, options?: TenantConfigurationDeployOptionalParams): Promise<TenantConfigurationDeployResponse>;
    /**
     * This operation creates a commit with the current configuration snapshot to the specified branch in
     * the repository. This is a long running operation and could take several minutes to complete.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param configurationName The identifier of the Git Configuration Operation.
     * @param parameters Save Configuration parameters.
     * @param options The options parameters.
     */
    beginSave(resourceGroupName: string, serviceName: string, configurationName: ConfigurationIdName, parameters: SaveConfigurationParameter, options?: TenantConfigurationSaveOptionalParams): Promise<PollerLike<PollOperationState<TenantConfigurationSaveResponse>, TenantConfigurationSaveResponse>>;
    /**
     * This operation creates a commit with the current configuration snapshot to the specified branch in
     * the repository. This is a long running operation and could take several minutes to complete.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param configurationName The identifier of the Git Configuration Operation.
     * @param parameters Save Configuration parameters.
     * @param options The options parameters.
     */
    beginSaveAndWait(resourceGroupName: string, serviceName: string, configurationName: ConfigurationIdName, parameters: SaveConfigurationParameter, options?: TenantConfigurationSaveOptionalParams): Promise<TenantConfigurationSaveResponse>;
    /**
     * This operation validates the changes in the specified Git branch. This is a long running operation
     * and could take several minutes to complete.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param configurationName The identifier of the Git Configuration Operation.
     * @param parameters Validate Configuration parameters.
     * @param options The options parameters.
     */
    beginValidate(resourceGroupName: string, serviceName: string, configurationName: ConfigurationIdName, parameters: DeployConfigurationParameters, options?: TenantConfigurationValidateOptionalParams): Promise<PollerLike<PollOperationState<TenantConfigurationValidateResponse>, TenantConfigurationValidateResponse>>;
    /**
     * This operation validates the changes in the specified Git branch. This is a long running operation
     * and could take several minutes to complete.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param configurationName The identifier of the Git Configuration Operation.
     * @param parameters Validate Configuration parameters.
     * @param options The options parameters.
     */
    beginValidateAndWait(resourceGroupName: string, serviceName: string, configurationName: ConfigurationIdName, parameters: DeployConfigurationParameters, options?: TenantConfigurationValidateOptionalParams): Promise<TenantConfigurationValidateResponse>;
    /**
     * Gets the status of the most recent synchronization between the configuration database and the Git
     * repository.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param configurationName The identifier of the Git Configuration Operation.
     * @param options The options parameters.
     */
    getSyncState(resourceGroupName: string, serviceName: string, configurationName: ConfigurationIdName, options?: TenantConfigurationGetSyncStateOptionalParams): Promise<TenantConfigurationGetSyncStateResponse>;
}

/** Optional parameters. */
export declare interface TenantConfigurationDeployOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the deploy operation. */
export declare type TenantConfigurationDeployResponse = OperationResultContract;

/** Optional parameters. */
export declare interface TenantConfigurationGetSyncStateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the getSyncState operation. */
export declare type TenantConfigurationGetSyncStateResponse = TenantConfigurationSyncStateContract;

/** Optional parameters. */
export declare interface TenantConfigurationSaveOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the save operation. */
export declare type TenantConfigurationSaveResponse = OperationResultContract;

/** Result of Tenant Configuration Sync State. */
export declare interface TenantConfigurationSyncStateContract extends Resource {
    /** The name of Git branch. */
    branch?: string;
    /** The latest commit Id. */
    commitId?: string;
    /** value indicating if last sync was save (true) or deploy (false) operation. */
    isExport?: boolean;
    /** value indicating if last synchronization was later than the configuration change. */
    isSynced?: boolean;
    /** value indicating whether Git configuration access is enabled. */
    isGitEnabled?: boolean;
    /**
     * The date of the latest synchronization. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard.
     *
     */
    syncDate?: Date;
    /**
     * The date of the latest configuration change. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard.
     *
     */
    configurationChangeDate?: Date;
    /** Most recent tenant configuration operation identifier */
    lastOperationId?: string;
}

/** Optional parameters. */
export declare interface TenantConfigurationValidateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the validate operation. */
export declare type TenantConfigurationValidateResponse = OperationResultContract;

/** Interface representing a TenantSettings. */
export declare interface TenantSettings {
    /**
     * Public settings.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param options The options parameters.
     */
    listByService(resourceGroupName: string, serviceName: string, options?: TenantSettingsListByServiceOptionalParams): PagedAsyncIterableIterator<TenantSettingsContract>;
    /**
     * Get tenant settings.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param settingsType The identifier of the settings.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, serviceName: string, settingsType: SettingsTypeName, options?: TenantSettingsGetOptionalParams): Promise<TenantSettingsGetResponse>;
}

/** Paged AccessInformation list representation. */
export declare interface TenantSettingsCollection {
    /**
     * Page values.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly value?: TenantSettingsContract[];
    /**
     * Next page link if any.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextLink?: string;
}

/** Tenant Settings. */
export declare interface TenantSettingsContract extends Resource {
    /** Tenant settings */
    settings?: {
        [propertyName: string]: string;
    };
}

/** Defines headers for TenantSettings_get operation. */
export declare interface TenantSettingsGetHeaders {
    /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
    eTag?: string;
}

/** Optional parameters. */
export declare interface TenantSettingsGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type TenantSettingsGetResponse = TenantSettingsGetHeaders & TenantSettingsContract;

/** Optional parameters. */
export declare interface TenantSettingsListByServiceNextOptionalParams extends coreClient.OperationOptions {
    /** Not used */
    filter?: string;
}

/** Contains response data for the listByServiceNext operation. */
export declare type TenantSettingsListByServiceNextResponse = TenantSettingsCollection;

/** Optional parameters. */
export declare interface TenantSettingsListByServiceOptionalParams extends coreClient.OperationOptions {
    /** Not used */
    filter?: string;
}

/** Contains response data for the listByService operation. */
export declare type TenantSettingsListByServiceResponse = TenantSettingsCollection;

/** Terms of service contract properties. */
export declare interface TermsOfServiceProperties {
    /** A terms of service text. */
    text?: string;
    /** Display terms of service during a sign-up process. */
    enabled?: boolean;
    /** Ask user for consent to the terms of service. */
    consentRequired?: boolean;
}

/** OAuth acquire token request body parameter (www-url-form-encoded). */
export declare interface TokenBodyParameterContract {
    /** body parameter name. */
    name: string;
    /** body parameter value. */
    value: string;
}

/** Interface representing a User. */
export declare interface User {
    /**
     * Lists a collection of registered users in the specified service instance.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param options The options parameters.
     */
    listByService(resourceGroupName: string, serviceName: string, options?: UserListByServiceOptionalParams): PagedAsyncIterableIterator<UserContract>;
    /**
     * Gets the entity state (Etag) version of the user specified by its identifier.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param userId User identifier. Must be unique in the current API Management service instance.
     * @param options The options parameters.
     */
    getEntityTag(resourceGroupName: string, serviceName: string, userId: string, options?: UserGetEntityTagOptionalParams): Promise<UserGetEntityTagResponse>;
    /**
     * Gets the details of the user specified by its identifier.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param userId User identifier. Must be unique in the current API Management service instance.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, serviceName: string, userId: string, options?: UserGetOptionalParams): Promise<UserGetResponse>;
    /**
     * Creates or Updates a user.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param userId User identifier. Must be unique in the current API Management service instance.
     * @param parameters Create or update parameters.
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName: string, serviceName: string, userId: string, parameters: UserCreateParameters, options?: UserCreateOrUpdateOptionalParams): Promise<UserCreateOrUpdateResponse>;
    /**
     * Updates the details of the user specified by its identifier.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param userId User identifier. Must be unique in the current API Management service instance.
     * @param ifMatch ETag of the Entity. ETag should match the current entity state from the header
     *                response of the GET request or it should be * for unconditional update.
     * @param parameters Update parameters.
     * @param options The options parameters.
     */
    update(resourceGroupName: string, serviceName: string, userId: string, ifMatch: string, parameters: UserUpdateParameters, options?: UserUpdateOptionalParams): Promise<UserUpdateResponse>;
    /**
     * Deletes specific user.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param userId User identifier. Must be unique in the current API Management service instance.
     * @param ifMatch ETag of the Entity. ETag should match the current entity state from the header
     *                response of the GET request or it should be * for unconditional update.
     * @param options The options parameters.
     */
    delete(resourceGroupName: string, serviceName: string, userId: string, ifMatch: string, options?: UserDeleteOptionalParams): Promise<void>;
    /**
     * Retrieves a redirection URL containing an authentication token for signing a given user into the
     * developer portal.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param userId User identifier. Must be unique in the current API Management service instance.
     * @param options The options parameters.
     */
    generateSsoUrl(resourceGroupName: string, serviceName: string, userId: string, options?: UserGenerateSsoUrlOptionalParams): Promise<UserGenerateSsoUrlResponse>;
    /**
     * Gets the Shared Access Authorization Token for the User.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param userId User identifier. Must be unique in the current API Management service instance.
     * @param parameters Create Authorization Token parameters.
     * @param options The options parameters.
     */
    getSharedAccessToken(resourceGroupName: string, serviceName: string, userId: string, parameters: UserTokenParameters, options?: UserGetSharedAccessTokenOptionalParams): Promise<UserGetSharedAccessTokenResponse>;
}

/** Paged Users list representation. */
export declare interface UserCollection {
    /** Page values. */
    value?: UserContract[];
    /** Total record count number across all pages. */
    count?: number;
    /** Next page link if any. */
    nextLink?: string;
}

/** Interface representing a UserConfirmationPassword. */
export declare interface UserConfirmationPassword {
    /**
     * Sends confirmation
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param userId User identifier. Must be unique in the current API Management service instance.
     * @param options The options parameters.
     */
    send(resourceGroupName: string, serviceName: string, userId: string, options?: UserConfirmationPasswordSendOptionalParams): Promise<void>;
}

/** Optional parameters. */
export declare interface UserConfirmationPasswordSendOptionalParams extends coreClient.OperationOptions {
    /** Determines the type of application which send the create user request. Default is legacy publisher portal. */
    appType?: AppType;
}

/** User details. */
export declare interface UserContract extends Resource {
    /** Account state. Specifies whether the user is active or not. Blocked users are unable to sign into the developer portal or call any APIs of subscribed products. Default state is Active. */
    state?: UserState;
    /** Optional note about a user set by the administrator. */
    note?: string;
    /** Collection of user identities. */
    identities?: UserIdentityContract[];
    /** First name. */
    firstName?: string;
    /** Last name. */
    lastName?: string;
    /** Email address. */
    email?: string;
    /**
     * Date of user registration. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard.
     *
     */
    registrationDate?: Date;
    /**
     * Collection of groups user is part of.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly groups?: GroupContractProperties[];
}

/** User profile. */
export declare interface UserContractProperties extends UserEntityBaseParameters {
    /** First name. */
    firstName?: string;
    /** Last name. */
    lastName?: string;
    /** Email address. */
    email?: string;
    /**
     * Date of user registration. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard.
     *
     */
    registrationDate?: Date;
    /**
     * Collection of groups user is part of.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly groups?: GroupContractProperties[];
}

/** Defines headers for User_createOrUpdate operation. */
export declare interface UserCreateOrUpdateHeaders {
    /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
    eTag?: string;
}

/** Optional parameters. */
export declare interface UserCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
    /** ETag of the Entity. Not required when creating an entity, but required when updating an entity. */
    ifMatch?: string;
    /** Send an Email notification to the User. */
    notify?: boolean;
}

/** Contains response data for the createOrUpdate operation. */
export declare type UserCreateOrUpdateResponse = UserCreateOrUpdateHeaders & UserContract;

/** Parameters supplied to the Create User operation. */
export declare interface UserCreateParameterProperties extends UserEntityBaseParameters {
    /** Email address. Must not be empty and must be unique within the service instance. */
    email: string;
    /** First name. */
    firstName: string;
    /** Last name. */
    lastName: string;
    /** User Password. If no value is provided, a default password is generated. */
    password?: string;
    /** Determines the type of application which send the create user request. Default is legacy portal. */
    appType?: AppType;
    /** Determines the type of confirmation e-mail that will be sent to the newly created user. */
    confirmation?: Confirmation;
}

/** User create details. */
export declare interface UserCreateParameters {
    /** Account state. Specifies whether the user is active or not. Blocked users are unable to sign into the developer portal or call any APIs of subscribed products. Default state is Active. */
    state?: UserState;
    /** Optional note about a user set by the administrator. */
    note?: string;
    /** Collection of user identities. */
    identities?: UserIdentityContract[];
    /** Email address. Must not be empty and must be unique within the service instance. */
    email?: string;
    /** First name. */
    firstName?: string;
    /** Last name. */
    lastName?: string;
    /** User Password. If no value is provided, a default password is generated. */
    password?: string;
    /** Determines the type of application which send the create user request. Default is legacy portal. */
    appType?: AppType;
    /** Determines the type of confirmation e-mail that will be sent to the newly created user. */
    confirmation?: Confirmation;
}

/** Optional parameters. */
export declare interface UserDeleteOptionalParams extends coreClient.OperationOptions {
    /** Whether to delete user's subscription or not. */
    deleteSubscriptions?: boolean;
    /** Send an Account Closed Email notification to the User. */
    notify?: boolean;
    /** Determines the type of application which send the create user request. Default is legacy publisher portal. */
    appType?: AppType;
}

/** User Entity Base Parameters set. */
export declare interface UserEntityBaseParameters {
    /** Account state. Specifies whether the user is active or not. Blocked users are unable to sign into the developer portal or call any APIs of subscribed products. Default state is Active. */
    state?: UserState;
    /** Optional note about a user set by the administrator. */
    note?: string;
    /** Collection of user identities. */
    identities?: UserIdentityContract[];
}

/** Optional parameters. */
export declare interface UserGenerateSsoUrlOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the generateSsoUrl operation. */
export declare type UserGenerateSsoUrlResponse = GenerateSsoUrlResult;

/** Defines headers for User_getEntityTag operation. */
export declare interface UserGetEntityTagHeaders {
    /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
    eTag?: string;
}

/** Optional parameters. */
export declare interface UserGetEntityTagOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the getEntityTag operation. */
export declare type UserGetEntityTagResponse = UserGetEntityTagHeaders;

/** Defines headers for User_get operation. */
export declare interface UserGetHeaders {
    /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
    eTag?: string;
}

/** Optional parameters. */
export declare interface UserGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type UserGetResponse = UserGetHeaders & UserContract;

/** Optional parameters. */
export declare interface UserGetSharedAccessTokenOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the getSharedAccessToken operation. */
export declare type UserGetSharedAccessTokenResponse = UserTokenResult;

/** Interface representing a UserGroup. */
export declare interface UserGroup {
    /**
     * Lists all user groups.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param userId User identifier. Must be unique in the current API Management service instance.
     * @param options The options parameters.
     */
    list(resourceGroupName: string, serviceName: string, userId: string, options?: UserGroupListOptionalParams): PagedAsyncIterableIterator<GroupContract>;
}

/** Optional parameters. */
export declare interface UserGroupListNextOptionalParams extends coreClient.OperationOptions {
    /** |     Field     |     Usage     |     Supported operators     |     Supported functions     |</br>|-------------|------------------------|-----------------------------------|</br>| name | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |</br>| displayName | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |</br>| description | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |</br> */
    filter?: string;
    /** Number of records to return. */
    top?: number;
    /** Number of records to skip. */
    skip?: number;
}

/** Contains response data for the listNext operation. */
export declare type UserGroupListNextResponse = GroupCollection;

/** Optional parameters. */
export declare interface UserGroupListOptionalParams extends coreClient.OperationOptions {
    /** |     Field     |     Usage     |     Supported operators     |     Supported functions     |</br>|-------------|------------------------|-----------------------------------|</br>| name | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |</br>| displayName | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |</br>| description | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |</br> */
    filter?: string;
    /** Number of records to return. */
    top?: number;
    /** Number of records to skip. */
    skip?: number;
}

/** Contains response data for the list operation. */
export declare type UserGroupListResponse = GroupCollection;

/** Interface representing a UserIdentities. */
export declare interface UserIdentities {
    /**
     * List of all user identities.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param userId User identifier. Must be unique in the current API Management service instance.
     * @param options The options parameters.
     */
    list(resourceGroupName: string, serviceName: string, userId: string, options?: UserIdentitiesListOptionalParams): PagedAsyncIterableIterator<UserIdentityContract>;
}

/** Optional parameters. */
export declare interface UserIdentitiesListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type UserIdentitiesListNextResponse = UserIdentityCollection;

/** Optional parameters. */
export declare interface UserIdentitiesListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type UserIdentitiesListResponse = UserIdentityCollection;

/** List of Users Identity list representation. */
export declare interface UserIdentityCollection {
    /** User Identity values. */
    value?: UserIdentityContract[];
    /** Total record count number across all pages. */
    count?: number;
    /** Next page link if any. */
    nextLink?: string;
}

/** User identity details. */
export declare interface UserIdentityContract {
    /** Identity provider name. */
    provider?: string;
    /** Identifier value within provider. */
    id?: string;
}

export declare interface UserIdentityProperties {
    /** The principal id of user assigned identity. */
    principalId?: string;
    /** The client id of user assigned identity. */
    clientId?: string;
}

/** Optional parameters. */
export declare interface UserListByServiceNextOptionalParams extends coreClient.OperationOptions {
    /** |     Field     |     Usage     |     Supported operators     |     Supported functions     |</br>|-------------|-------------|-------------|-------------|</br>| name | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |</br>| firstName | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |</br>| lastName | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |</br>| email | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |</br>| state | filter | eq |     |</br>| registrationDate | filter | ge, le, eq, ne, gt, lt |     |</br>| note | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |</br>| groups | expand |     |     |</br> */
    filter?: string;
    /** Number of records to return. */
    top?: number;
    /** Number of records to skip. */
    skip?: number;
    /** Detailed Group in response. */
    expandGroups?: boolean;
}

/** Contains response data for the listByServiceNext operation. */
export declare type UserListByServiceNextResponse = UserCollection;

/** Optional parameters. */
export declare interface UserListByServiceOptionalParams extends coreClient.OperationOptions {
    /** |     Field     |     Usage     |     Supported operators     |     Supported functions     |</br>|-------------|-------------|-------------|-------------|</br>| name | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |</br>| firstName | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |</br>| lastName | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |</br>| email | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |</br>| state | filter | eq |     |</br>| registrationDate | filter | ge, le, eq, ne, gt, lt |     |</br>| note | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |</br>| groups | expand |     |     |</br> */
    filter?: string;
    /** Number of records to return. */
    top?: number;
    /** Number of records to skip. */
    skip?: number;
    /** Detailed Group in response. */
    expandGroups?: boolean;
}

/** Contains response data for the listByService operation. */
export declare type UserListByServiceResponse = UserCollection;

/**
 * Defines values for UserState. \
 * {@link KnownUserState} can be used interchangeably with UserState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **active**: User state is active. \
 * **blocked**: User is blocked. Blocked users cannot authenticate at developer portal or call API. \
 * **pending**: User account is pending. Requires identity confirmation before it can be made active. \
 * **deleted**: User account is closed. All identities and related entities are removed.
 */
export declare type UserState = string;

/** Interface representing a UserSubscription. */
export declare interface UserSubscription {
    /**
     * Lists the collection of subscriptions of the specified user.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param userId User identifier. Must be unique in the current API Management service instance.
     * @param options The options parameters.
     */
    list(resourceGroupName: string, serviceName: string, userId: string, options?: UserSubscriptionListOptionalParams): PagedAsyncIterableIterator<SubscriptionContract>;
    /**
     * Gets the specified Subscription entity associated with a particular user.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param userId User identifier. Must be unique in the current API Management service instance.
     * @param sid Subscription entity Identifier. The entity represents the association between a user and
     *            a product in API Management.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, serviceName: string, userId: string, sid: string, options?: UserSubscriptionGetOptionalParams): Promise<UserSubscriptionGetResponse>;
}

/** Defines headers for UserSubscription_get operation. */
export declare interface UserSubscriptionGetHeaders {
    /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
    eTag?: string;
}

/** Optional parameters. */
export declare interface UserSubscriptionGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type UserSubscriptionGetResponse = UserSubscriptionGetHeaders & SubscriptionContract;

/** Optional parameters. */
export declare interface UserSubscriptionListNextOptionalParams extends coreClient.OperationOptions {
    /** | Field     |     Usage     |     Supported operators    | Supported functions               |</br>|-------------|------------------------|-----------------------------------|</br>|name | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |</br>|displayName | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |</br>|stateComment | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |</br>|ownerId | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |</br>|scope | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |</br>|userId | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |</br>|productId | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |</br> */
    filter?: string;
    /** Number of records to return. */
    top?: number;
    /** Number of records to skip. */
    skip?: number;
}

/** Contains response data for the listNext operation. */
export declare type UserSubscriptionListNextResponse = SubscriptionCollection;

/** Optional parameters. */
export declare interface UserSubscriptionListOptionalParams extends coreClient.OperationOptions {
    /** | Field     |     Usage     |     Supported operators    | Supported functions               |</br>|-------------|------------------------|-----------------------------------|</br>|name | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |</br>|displayName | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |</br>|stateComment | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |</br>|ownerId | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |</br>|scope | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |</br>|userId | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |</br>|productId | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |</br> */
    filter?: string;
    /** Number of records to return. */
    top?: number;
    /** Number of records to skip. */
    skip?: number;
}

/** Contains response data for the list operation. */
export declare type UserSubscriptionListResponse = SubscriptionCollection;

/** Get User Token parameters. */
export declare interface UserTokenParameters {
    /** The Key to be used to generate token for user. */
    keyType?: KeyType_2;
    /**
     * The Expiry time of the Token. Maximum token expiry time is set to 30 days. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard.
     *
     */
    expiry?: Date;
}

/** Get User Token response details. */
export declare interface UserTokenResult {
    /** Shared Access Authorization token for the User. */
    value?: string;
}

/** Defines headers for User_update operation. */
export declare interface UserUpdateHeaders {
    /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
    eTag?: string;
}

/** Optional parameters. */
export declare interface UserUpdateOptionalParams extends coreClient.OperationOptions {
}

/** User update parameters. */
export declare interface UserUpdateParameters {
    /** Account state. Specifies whether the user is active or not. Blocked users are unable to sign into the developer portal or call any APIs of subscribed products. Default state is Active. */
    state?: UserState;
    /** Optional note about a user set by the administrator. */
    note?: string;
    /** Collection of user identities. */
    identities?: UserIdentityContract[];
    /** Email address. Must not be empty and must be unique within the service instance. */
    email?: string;
    /** User Password. */
    password?: string;
    /** First name. */
    firstName?: string;
    /** Last name. */
    lastName?: string;
}

/** Parameters supplied to the Update User operation. */
export declare interface UserUpdateParametersProperties extends UserEntityBaseParameters {
    /** Email address. Must not be empty and must be unique within the service instance. */
    email?: string;
    /** User Password. */
    password?: string;
    /** First name. */
    firstName?: string;
    /** Last name. */
    lastName?: string;
}

/** Contains response data for the update operation. */
export declare type UserUpdateResponse = UserUpdateHeaders & UserContract;

/**
 * Defines values for Verbosity. \
 * {@link KnownVerbosity} can be used interchangeably with Verbosity,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **verbose**: All the traces emitted by trace policies will be sent to the logger attached to this diagnostic instance. \
 * **information**: Traces with 'severity' set to 'information' and 'error' will be sent to the logger attached to this diagnostic instance. \
 * **error**: Only traces with 'severity' set to 'error' will be sent to the logger attached to this diagnostic instance.
 */
export declare type Verbosity = string;

/**
 * Defines values for VersioningScheme. \
 * {@link KnownVersioningScheme} can be used interchangeably with VersioningScheme,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Segment**: The API Version is passed in a path segment. \
 * **Query**: The API Version is passed in a query parameter. \
 * **Header**: The API Version is passed in a HTTP header.
 */
export declare type VersioningScheme = string;

/** Configuration of a virtual network to which API Management service is deployed. */
export declare interface VirtualNetworkConfiguration {
    /**
     * The virtual network ID. This is typically a GUID. Expect a null GUID by default.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly vnetid?: string;
    /**
     * The name of the subnet.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly subnetname?: string;
    /** The full resource ID of a subnet in a virtual network to deploy the API Management service in. */
    subnetResourceId?: string;
}

/**
 * Defines values for VirtualNetworkType. \
 * {@link KnownVirtualNetworkType} can be used interchangeably with VirtualNetworkType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **None**: The service is not part of any Virtual Network. \
 * **External**: The service is part of Virtual Network and it is accessible from Internet. \
 * **Internal**: The service is part of Virtual Network and it is only accessible from within the virtual network.
 */
export declare type VirtualNetworkType = string;

/** Properties of server X509Names. */
export declare interface X509CertificateName {
    /** Common Name of the Certificate. */
    name?: string;
    /** Thumbprint for the Issuer of the Certificate. */
    issuerCertificateThumbprint?: string;
}

export { }
