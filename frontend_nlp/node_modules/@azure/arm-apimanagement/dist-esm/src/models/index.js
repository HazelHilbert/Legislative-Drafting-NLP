/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/** Known values of {@link Protocol} that the service accepts. */
export var KnownProtocol;
(function (KnownProtocol) {
    /** Http */
    KnownProtocol["Http"] = "http";
    /** Https */
    KnownProtocol["Https"] = "https";
    /** Ws */
    KnownProtocol["Ws"] = "ws";
    /** Wss */
    KnownProtocol["Wss"] = "wss";
})(KnownProtocol || (KnownProtocol = {}));
/** Known values of {@link ApiVersionSetContractDetailsVersioningScheme} that the service accepts. */
export var KnownApiVersionSetContractDetailsVersioningScheme;
(function (KnownApiVersionSetContractDetailsVersioningScheme) {
    /** Segment */
    KnownApiVersionSetContractDetailsVersioningScheme["Segment"] = "Segment";
    /** Query */
    KnownApiVersionSetContractDetailsVersioningScheme["Query"] = "Query";
    /** Header */
    KnownApiVersionSetContractDetailsVersioningScheme["Header"] = "Header";
})(KnownApiVersionSetContractDetailsVersioningScheme || (KnownApiVersionSetContractDetailsVersioningScheme = {}));
/** Known values of {@link BearerTokenSendingMethods} that the service accepts. */
export var KnownBearerTokenSendingMethods;
(function (KnownBearerTokenSendingMethods) {
    /** Access token will be transmitted in the Authorization header using Bearer schema */
    KnownBearerTokenSendingMethods["AuthorizationHeader"] = "authorizationHeader";
    /** Access token will be transmitted as query parameters. */
    KnownBearerTokenSendingMethods["Query"] = "query";
})(KnownBearerTokenSendingMethods || (KnownBearerTokenSendingMethods = {}));
/** Known values of {@link ApiType} that the service accepts. */
export var KnownApiType;
(function (KnownApiType) {
    /** Http */
    KnownApiType["Http"] = "http";
    /** Soap */
    KnownApiType["Soap"] = "soap";
    /** Websocket */
    KnownApiType["Websocket"] = "websocket";
    /** Graphql */
    KnownApiType["Graphql"] = "graphql";
})(KnownApiType || (KnownApiType = {}));
/** Known values of {@link ContentFormat} that the service accepts. */
export var KnownContentFormat;
(function (KnownContentFormat) {
    /** The contents are inline and Content type is a WADL document. */
    KnownContentFormat["WadlXml"] = "wadl-xml";
    /** The WADL document is hosted on a publicly accessible internet address. */
    KnownContentFormat["WadlLinkJson"] = "wadl-link-json";
    /** The contents are inline and Content Type is a OpenAPI 2.0 JSON Document. */
    KnownContentFormat["SwaggerJson"] = "swagger-json";
    /** The OpenAPI 2.0 JSON document is hosted on a publicly accessible internet address. */
    KnownContentFormat["SwaggerLinkJson"] = "swagger-link-json";
    /** The contents are inline and the document is a WSDL/Soap document. */
    KnownContentFormat["Wsdl"] = "wsdl";
    /** The WSDL document is hosted on a publicly accessible internet address. */
    KnownContentFormat["WsdlLink"] = "wsdl-link";
    /** The contents are inline and Content Type is a OpenAPI 3.0 YAML Document. */
    KnownContentFormat["Openapi"] = "openapi";
    /** The contents are inline and Content Type is a OpenAPI 3.0 JSON Document. */
    KnownContentFormat["OpenapiJson"] = "openapi+json";
    /** The OpenAPI 3.0 YAML document is hosted on a publicly accessible internet address. */
    KnownContentFormat["OpenapiLink"] = "openapi-link";
    /** The OpenAPI 3.0 JSON document is hosted on a publicly accessible internet address. */
    KnownContentFormat["OpenapiJsonLink"] = "openapi+json-link";
    /** The GraphQL API endpoint hosted on a publicly accessible internet address. */
    KnownContentFormat["GraphqlLink"] = "graphql-link";
})(KnownContentFormat || (KnownContentFormat = {}));
/** Known values of {@link SoapApiType} that the service accepts. */
export var KnownSoapApiType;
(function (KnownSoapApiType) {
    /** Imports a SOAP API having a RESTful front end. */
    KnownSoapApiType["SoapToRest"] = "http";
    /** Imports the SOAP API having a SOAP front end. */
    KnownSoapApiType["SoapPassThrough"] = "soap";
    /** Imports the API having a Websocket front end. */
    KnownSoapApiType["WebSocket"] = "websocket";
    /** Imports the API having a GraphQL front end. */
    KnownSoapApiType["GraphQL"] = "graphql";
})(KnownSoapApiType || (KnownSoapApiType = {}));
/** Known values of {@link PolicyContentFormat} that the service accepts. */
export var KnownPolicyContentFormat;
(function (KnownPolicyContentFormat) {
    /** The contents are inline and Content type is an XML document. */
    KnownPolicyContentFormat["Xml"] = "xml";
    /** The policy XML document is hosted on a http endpoint accessible from the API Management service. */
    KnownPolicyContentFormat["XmlLink"] = "xml-link";
    /** The contents are inline and Content type is a non XML encoded policy document. */
    KnownPolicyContentFormat["Rawxml"] = "rawxml";
    /** The policy document is not Xml encoded and is hosted on a http endpoint accessible from the API Management service. */
    KnownPolicyContentFormat["RawxmlLink"] = "rawxml-link";
})(KnownPolicyContentFormat || (KnownPolicyContentFormat = {}));
/** Known values of {@link PolicyIdName} that the service accepts. */
export var KnownPolicyIdName;
(function (KnownPolicyIdName) {
    /** Policy */
    KnownPolicyIdName["Policy"] = "policy";
})(KnownPolicyIdName || (KnownPolicyIdName = {}));
/** Known values of {@link PolicyExportFormat} that the service accepts. */
export var KnownPolicyExportFormat;
(function (KnownPolicyExportFormat) {
    /** The contents are inline and Content type is an XML document. */
    KnownPolicyExportFormat["Xml"] = "xml";
    /** The contents are inline and Content type is a non XML encoded policy document. */
    KnownPolicyExportFormat["Rawxml"] = "rawxml";
})(KnownPolicyExportFormat || (KnownPolicyExportFormat = {}));
/** Known values of {@link AlwaysLog} that the service accepts. */
export var KnownAlwaysLog;
(function (KnownAlwaysLog) {
    /** Always log all erroneous request regardless of sampling settings. */
    KnownAlwaysLog["AllErrors"] = "allErrors";
})(KnownAlwaysLog || (KnownAlwaysLog = {}));
/** Known values of {@link SamplingType} that the service accepts. */
export var KnownSamplingType;
(function (KnownSamplingType) {
    /** Fixed-rate sampling. */
    KnownSamplingType["Fixed"] = "fixed";
})(KnownSamplingType || (KnownSamplingType = {}));
/** Known values of {@link DataMaskingMode} that the service accepts. */
export var KnownDataMaskingMode;
(function (KnownDataMaskingMode) {
    /** Mask the value of an entity. */
    KnownDataMaskingMode["Mask"] = "Mask";
    /** Hide the presence of an entity. */
    KnownDataMaskingMode["Hide"] = "Hide";
})(KnownDataMaskingMode || (KnownDataMaskingMode = {}));
/** Known values of {@link HttpCorrelationProtocol} that the service accepts. */
export var KnownHttpCorrelationProtocol;
(function (KnownHttpCorrelationProtocol) {
    /** Do not read and inject correlation headers. */
    KnownHttpCorrelationProtocol["None"] = "None";
    /** Inject Request-Id and Request-Context headers with request correlation data. See https://github.com/dotnet/corefx/blob/master/src/System.Diagnostics.DiagnosticSource/src/HttpCorrelationProtocol.md. */
    KnownHttpCorrelationProtocol["Legacy"] = "Legacy";
    /** Inject Trace Context headers. See https://w3c.github.io/trace-context. */
    KnownHttpCorrelationProtocol["W3C"] = "W3C";
})(KnownHttpCorrelationProtocol || (KnownHttpCorrelationProtocol = {}));
/** Known values of {@link Verbosity} that the service accepts. */
export var KnownVerbosity;
(function (KnownVerbosity) {
    /** All the traces emitted by trace policies will be sent to the logger attached to this diagnostic instance. */
    KnownVerbosity["Verbose"] = "verbose";
    /** Traces with 'severity' set to 'information' and 'error' will be sent to the logger attached to this diagnostic instance. */
    KnownVerbosity["Information"] = "information";
    /** Only traces with 'severity' set to 'error' will be sent to the logger attached to this diagnostic instance. */
    KnownVerbosity["Error"] = "error";
})(KnownVerbosity || (KnownVerbosity = {}));
/** Known values of {@link OperationNameFormat} that the service accepts. */
export var KnownOperationNameFormat;
(function (KnownOperationNameFormat) {
    /** API_NAME;rev=API_REVISION - OPERATION_NAME */
    KnownOperationNameFormat["Name"] = "Name";
    /** HTTP_VERB URL */
    KnownOperationNameFormat["Url"] = "Url";
})(KnownOperationNameFormat || (KnownOperationNameFormat = {}));
/** Known values of {@link State} that the service accepts. */
export var KnownState;
(function (KnownState) {
    /** The issue is proposed. */
    KnownState["Proposed"] = "proposed";
    /** The issue is opened. */
    KnownState["Open"] = "open";
    /** The issue was removed. */
    KnownState["Removed"] = "removed";
    /** The issue is now resolved. */
    KnownState["Resolved"] = "resolved";
    /** The issue was closed. */
    KnownState["Closed"] = "closed";
})(KnownState || (KnownState = {}));
/** Known values of {@link ExportFormat} that the service accepts. */
export var KnownExportFormat;
(function (KnownExportFormat) {
    /** Export the Api Definition in OpenAPI 2.0 Specification as JSON document to the Storage Blob. */
    KnownExportFormat["Swagger"] = "swagger-link";
    /** Export the Api Definition in WSDL Schema to Storage Blob. This is only supported for APIs of Type `soap` */
    KnownExportFormat["Wsdl"] = "wsdl-link";
    /** Export the Api Definition in WADL Schema to Storage Blob. */
    KnownExportFormat["Wadl"] = "wadl-link";
    /** Export the Api Definition in OpenAPI 3.0 Specification as YAML document to Storage Blob. */
    KnownExportFormat["Openapi"] = "openapi-link";
    /** Export the Api Definition in OpenAPI 3.0 Specification as JSON document to Storage Blob. */
    KnownExportFormat["OpenapiJson"] = "openapi+json-link";
})(KnownExportFormat || (KnownExportFormat = {}));
/** Known values of {@link ExportApi} that the service accepts. */
export var KnownExportApi;
(function (KnownExportApi) {
    /** True */
    KnownExportApi["True"] = "true";
})(KnownExportApi || (KnownExportApi = {}));
/** Known values of {@link ExportResultFormat} that the service accepts. */
export var KnownExportResultFormat;
(function (KnownExportResultFormat) {
    /** The API Definition is exported in OpenAPI Specification 2.0 format to the Storage Blob. */
    KnownExportResultFormat["Swagger"] = "swagger-link-json";
    /** The API Definition is exported in WSDL Schema to Storage Blob. This is only supported for APIs of Type `soap` */
    KnownExportResultFormat["Wsdl"] = "wsdl-link+xml";
    /** Export the API Definition in WADL Schema to Storage Blob. */
    KnownExportResultFormat["Wadl"] = "wadl-link-json";
    /** Export the API Definition in OpenAPI Specification 3.0 to Storage Blob. */
    KnownExportResultFormat["OpenApi"] = "openapi-link";
})(KnownExportResultFormat || (KnownExportResultFormat = {}));
/** Known values of {@link VersioningScheme} that the service accepts. */
export var KnownVersioningScheme;
(function (KnownVersioningScheme) {
    /** The API Version is passed in a path segment. */
    KnownVersioningScheme["Segment"] = "Segment";
    /** The API Version is passed in a query parameter. */
    KnownVersioningScheme["Query"] = "Query";
    /** The API Version is passed in a HTTP header. */
    KnownVersioningScheme["Header"] = "Header";
})(KnownVersioningScheme || (KnownVersioningScheme = {}));
/** Known values of {@link GrantType} that the service accepts. */
export var KnownGrantType;
(function (KnownGrantType) {
    /** Authorization Code Grant flow as described https://tools.ietf.org/html/rfc6749#section-4.1. */
    KnownGrantType["AuthorizationCode"] = "authorizationCode";
    /** Implicit Code Grant flow as described https://tools.ietf.org/html/rfc6749#section-4.2. */
    KnownGrantType["Implicit"] = "implicit";
    /** Resource Owner Password Grant flow as described https://tools.ietf.org/html/rfc6749#section-4.3. */
    KnownGrantType["ResourceOwnerPassword"] = "resourceOwnerPassword";
    /** Client Credentials Grant flow as described https://tools.ietf.org/html/rfc6749#section-4.4. */
    KnownGrantType["ClientCredentials"] = "clientCredentials";
})(KnownGrantType || (KnownGrantType = {}));
/** Known values of {@link ClientAuthenticationMethod} that the service accepts. */
export var KnownClientAuthenticationMethod;
(function (KnownClientAuthenticationMethod) {
    /** Basic Client Authentication method. */
    KnownClientAuthenticationMethod["Basic"] = "Basic";
    /** Body based Authentication method. */
    KnownClientAuthenticationMethod["Body"] = "Body";
})(KnownClientAuthenticationMethod || (KnownClientAuthenticationMethod = {}));
/** Known values of {@link BearerTokenSendingMethod} that the service accepts. */
export var KnownBearerTokenSendingMethod;
(function (KnownBearerTokenSendingMethod) {
    /** AuthorizationHeader */
    KnownBearerTokenSendingMethod["AuthorizationHeader"] = "authorizationHeader";
    /** Query */
    KnownBearerTokenSendingMethod["Query"] = "query";
})(KnownBearerTokenSendingMethod || (KnownBearerTokenSendingMethod = {}));
/** Known values of {@link BackendProtocol} that the service accepts. */
export var KnownBackendProtocol;
(function (KnownBackendProtocol) {
    /** The Backend is a RESTful service. */
    KnownBackendProtocol["Http"] = "http";
    /** The Backend is a SOAP service. */
    KnownBackendProtocol["Soap"] = "soap";
})(KnownBackendProtocol || (KnownBackendProtocol = {}));
/** Known values of {@link PreferredIPVersion} that the service accepts. */
export var KnownPreferredIPVersion;
(function (KnownPreferredIPVersion) {
    /** IPv4 */
    KnownPreferredIPVersion["IPv4"] = "IPv4";
})(KnownPreferredIPVersion || (KnownPreferredIPVersion = {}));
/** Known values of {@link ConnectivityCheckProtocol} that the service accepts. */
export var KnownConnectivityCheckProtocol;
(function (KnownConnectivityCheckProtocol) {
    /** TCP */
    KnownConnectivityCheckProtocol["TCP"] = "TCP";
    /** Http */
    KnownConnectivityCheckProtocol["Http"] = "HTTP";
    /** Https */
    KnownConnectivityCheckProtocol["Https"] = "HTTPS";
})(KnownConnectivityCheckProtocol || (KnownConnectivityCheckProtocol = {}));
/** Known values of {@link Method} that the service accepts. */
export var KnownMethod;
(function (KnownMethod) {
    /** GET */
    KnownMethod["GET"] = "GET";
    /** Post */
    KnownMethod["Post"] = "POST";
})(KnownMethod || (KnownMethod = {}));
/** Known values of {@link Origin} that the service accepts. */
export var KnownOrigin;
(function (KnownOrigin) {
    /** Local */
    KnownOrigin["Local"] = "Local";
    /** Inbound */
    KnownOrigin["Inbound"] = "Inbound";
    /** Outbound */
    KnownOrigin["Outbound"] = "Outbound";
})(KnownOrigin || (KnownOrigin = {}));
/** Known values of {@link Severity} that the service accepts. */
export var KnownSeverity;
(function (KnownSeverity) {
    /** Error */
    KnownSeverity["Error"] = "Error";
    /** Warning */
    KnownSeverity["Warning"] = "Warning";
})(KnownSeverity || (KnownSeverity = {}));
/** Known values of {@link IssueType} that the service accepts. */
export var KnownIssueType;
(function (KnownIssueType) {
    /** Unknown */
    KnownIssueType["Unknown"] = "Unknown";
    /** AgentStopped */
    KnownIssueType["AgentStopped"] = "AgentStopped";
    /** GuestFirewall */
    KnownIssueType["GuestFirewall"] = "GuestFirewall";
    /** DnsResolution */
    KnownIssueType["DnsResolution"] = "DnsResolution";
    /** SocketBind */
    KnownIssueType["SocketBind"] = "SocketBind";
    /** NetworkSecurityRule */
    KnownIssueType["NetworkSecurityRule"] = "NetworkSecurityRule";
    /** UserDefinedRoute */
    KnownIssueType["UserDefinedRoute"] = "UserDefinedRoute";
    /** PortThrottled */
    KnownIssueType["PortThrottled"] = "PortThrottled";
    /** Platform */
    KnownIssueType["Platform"] = "Platform";
})(KnownIssueType || (KnownIssueType = {}));
/** Known values of {@link ConnectionStatus} that the service accepts. */
export var KnownConnectionStatus;
(function (KnownConnectionStatus) {
    /** Unknown */
    KnownConnectionStatus["Unknown"] = "Unknown";
    /** Connected */
    KnownConnectionStatus["Connected"] = "Connected";
    /** Disconnected */
    KnownConnectionStatus["Disconnected"] = "Disconnected";
    /** Degraded */
    KnownConnectionStatus["Degraded"] = "Degraded";
})(KnownConnectionStatus || (KnownConnectionStatus = {}));
/** Known values of {@link SkuType} that the service accepts. */
export var KnownSkuType;
(function (KnownSkuType) {
    /** Developer SKU of Api Management. */
    KnownSkuType["Developer"] = "Developer";
    /** Standard SKU of Api Management. */
    KnownSkuType["Standard"] = "Standard";
    /** Premium SKU of Api Management. */
    KnownSkuType["Premium"] = "Premium";
    /** Basic SKU of Api Management. */
    KnownSkuType["Basic"] = "Basic";
    /** Consumption SKU of Api Management. */
    KnownSkuType["Consumption"] = "Consumption";
    /** Isolated SKU of Api Management. */
    KnownSkuType["Isolated"] = "Isolated";
})(KnownSkuType || (KnownSkuType = {}));
/** Known values of {@link ResourceSkuCapacityScaleType} that the service accepts. */
export var KnownResourceSkuCapacityScaleType;
(function (KnownResourceSkuCapacityScaleType) {
    /** Supported scale type automatic. */
    KnownResourceSkuCapacityScaleType["Automatic"] = "automatic";
    /** Supported scale type manual. */
    KnownResourceSkuCapacityScaleType["Manual"] = "manual";
    /** Scaling not supported. */
    KnownResourceSkuCapacityScaleType["None"] = "none";
})(KnownResourceSkuCapacityScaleType || (KnownResourceSkuCapacityScaleType = {}));
/** Known values of {@link AccessType} that the service accepts. */
export var KnownAccessType;
(function (KnownAccessType) {
    /** Use access key. */
    KnownAccessType["AccessKey"] = "AccessKey";
    /** Use system assigned managed identity. */
    KnownAccessType["SystemAssignedManagedIdentity"] = "SystemAssignedManagedIdentity";
    /** Use user assigned managed identity. */
    KnownAccessType["UserAssignedManagedIdentity"] = "UserAssignedManagedIdentity";
})(KnownAccessType || (KnownAccessType = {}));
/** Known values of {@link HostnameType} that the service accepts. */
export var KnownHostnameType;
(function (KnownHostnameType) {
    /** Proxy */
    KnownHostnameType["Proxy"] = "Proxy";
    /** Portal */
    KnownHostnameType["Portal"] = "Portal";
    /** Management */
    KnownHostnameType["Management"] = "Management";
    /** Scm */
    KnownHostnameType["Scm"] = "Scm";
    /** DeveloperPortal */
    KnownHostnameType["DeveloperPortal"] = "DeveloperPortal";
})(KnownHostnameType || (KnownHostnameType = {}));
/** Known values of {@link CertificateSource} that the service accepts. */
export var KnownCertificateSource;
(function (KnownCertificateSource) {
    /** Managed */
    KnownCertificateSource["Managed"] = "Managed";
    /** KeyVault */
    KnownCertificateSource["KeyVault"] = "KeyVault";
    /** Custom */
    KnownCertificateSource["Custom"] = "Custom";
    /** BuiltIn */
    KnownCertificateSource["BuiltIn"] = "BuiltIn";
})(KnownCertificateSource || (KnownCertificateSource = {}));
/** Known values of {@link CertificateStatus} that the service accepts. */
export var KnownCertificateStatus;
(function (KnownCertificateStatus) {
    /** Completed */
    KnownCertificateStatus["Completed"] = "Completed";
    /** Failed */
    KnownCertificateStatus["Failed"] = "Failed";
    /** InProgress */
    KnownCertificateStatus["InProgress"] = "InProgress";
})(KnownCertificateStatus || (KnownCertificateStatus = {}));
/** Known values of {@link PublicNetworkAccess} that the service accepts. */
export var KnownPublicNetworkAccess;
(function (KnownPublicNetworkAccess) {
    /** Enabled */
    KnownPublicNetworkAccess["Enabled"] = "Enabled";
    /** Disabled */
    KnownPublicNetworkAccess["Disabled"] = "Disabled";
})(KnownPublicNetworkAccess || (KnownPublicNetworkAccess = {}));
/** Known values of {@link PlatformVersion} that the service accepts. */
export var KnownPlatformVersion;
(function (KnownPlatformVersion) {
    /** Platform version cannot be determined, as compute platform is not deployed. */
    KnownPlatformVersion["Undetermined"] = "undetermined";
    /** Platform running the service on Single Tenant V1 platform. */
    KnownPlatformVersion["Stv1"] = "stv1";
    /** Platform running the service on Single Tenant V2 platform. */
    KnownPlatformVersion["Stv2"] = "stv2";
    /** Platform running the service on Multi Tenant V1 platform. */
    KnownPlatformVersion["Mtv1"] = "mtv1";
})(KnownPlatformVersion || (KnownPlatformVersion = {}));
/** Known values of {@link CertificateConfigurationStoreName} that the service accepts. */
export var KnownCertificateConfigurationStoreName;
(function (KnownCertificateConfigurationStoreName) {
    /** CertificateAuthority */
    KnownCertificateConfigurationStoreName["CertificateAuthority"] = "CertificateAuthority";
    /** Root */
    KnownCertificateConfigurationStoreName["Root"] = "Root";
})(KnownCertificateConfigurationStoreName || (KnownCertificateConfigurationStoreName = {}));
/** Known values of {@link VirtualNetworkType} that the service accepts. */
export var KnownVirtualNetworkType;
(function (KnownVirtualNetworkType) {
    /** The service is not part of any Virtual Network. */
    KnownVirtualNetworkType["None"] = "None";
    /** The service is part of Virtual Network and it is accessible from Internet. */
    KnownVirtualNetworkType["External"] = "External";
    /** The service is part of Virtual Network and it is only accessible from within the virtual network. */
    KnownVirtualNetworkType["Internal"] = "Internal";
})(KnownVirtualNetworkType || (KnownVirtualNetworkType = {}));
/** Known values of {@link PrivateEndpointServiceConnectionStatus} that the service accepts. */
export var KnownPrivateEndpointServiceConnectionStatus;
(function (KnownPrivateEndpointServiceConnectionStatus) {
    /** Pending */
    KnownPrivateEndpointServiceConnectionStatus["Pending"] = "Pending";
    /** Approved */
    KnownPrivateEndpointServiceConnectionStatus["Approved"] = "Approved";
    /** Rejected */
    KnownPrivateEndpointServiceConnectionStatus["Rejected"] = "Rejected";
})(KnownPrivateEndpointServiceConnectionStatus || (KnownPrivateEndpointServiceConnectionStatus = {}));
/** Known values of {@link ApimIdentityType} that the service accepts. */
export var KnownApimIdentityType;
(function (KnownApimIdentityType) {
    /** SystemAssigned */
    KnownApimIdentityType["SystemAssigned"] = "SystemAssigned";
    /** UserAssigned */
    KnownApimIdentityType["UserAssigned"] = "UserAssigned";
    /** SystemAssignedUserAssigned */
    KnownApimIdentityType["SystemAssignedUserAssigned"] = "SystemAssigned, UserAssigned";
    /** None */
    KnownApimIdentityType["None"] = "None";
})(KnownApimIdentityType || (KnownApimIdentityType = {}));
/** Known values of {@link CreatedByType} that the service accepts. */
export var KnownCreatedByType;
(function (KnownCreatedByType) {
    /** User */
    KnownCreatedByType["User"] = "User";
    /** Application */
    KnownCreatedByType["Application"] = "Application";
    /** ManagedIdentity */
    KnownCreatedByType["ManagedIdentity"] = "ManagedIdentity";
    /** Key */
    KnownCreatedByType["Key"] = "Key";
})(KnownCreatedByType || (KnownCreatedByType = {}));
/** Known values of {@link TemplateName} that the service accepts. */
export var KnownTemplateName;
(function (KnownTemplateName) {
    /** ApplicationApprovedNotificationMessage */
    KnownTemplateName["ApplicationApprovedNotificationMessage"] = "applicationApprovedNotificationMessage";
    /** AccountClosedDeveloper */
    KnownTemplateName["AccountClosedDeveloper"] = "accountClosedDeveloper";
    /** QuotaLimitApproachingDeveloperNotificationMessage */
    KnownTemplateName["QuotaLimitApproachingDeveloperNotificationMessage"] = "quotaLimitApproachingDeveloperNotificationMessage";
    /** NewDeveloperNotificationMessage */
    KnownTemplateName["NewDeveloperNotificationMessage"] = "newDeveloperNotificationMessage";
    /** EmailChangeIdentityDefault */
    KnownTemplateName["EmailChangeIdentityDefault"] = "emailChangeIdentityDefault";
    /** InviteUserNotificationMessage */
    KnownTemplateName["InviteUserNotificationMessage"] = "inviteUserNotificationMessage";
    /** NewCommentNotificationMessage */
    KnownTemplateName["NewCommentNotificationMessage"] = "newCommentNotificationMessage";
    /** ConfirmSignUpIdentityDefault */
    KnownTemplateName["ConfirmSignUpIdentityDefault"] = "confirmSignUpIdentityDefault";
    /** NewIssueNotificationMessage */
    KnownTemplateName["NewIssueNotificationMessage"] = "newIssueNotificationMessage";
    /** PurchaseDeveloperNotificationMessage */
    KnownTemplateName["PurchaseDeveloperNotificationMessage"] = "purchaseDeveloperNotificationMessage";
    /** PasswordResetIdentityDefault */
    KnownTemplateName["PasswordResetIdentityDefault"] = "passwordResetIdentityDefault";
    /** PasswordResetByAdminNotificationMessage */
    KnownTemplateName["PasswordResetByAdminNotificationMessage"] = "passwordResetByAdminNotificationMessage";
    /** RejectDeveloperNotificationMessage */
    KnownTemplateName["RejectDeveloperNotificationMessage"] = "rejectDeveloperNotificationMessage";
    /** RequestDeveloperNotificationMessage */
    KnownTemplateName["RequestDeveloperNotificationMessage"] = "requestDeveloperNotificationMessage";
})(KnownTemplateName || (KnownTemplateName = {}));
/** Known values of {@link UserState} that the service accepts. */
export var KnownUserState;
(function (KnownUserState) {
    /** User state is active. */
    KnownUserState["Active"] = "active";
    /** User is blocked. Blocked users cannot authenticate at developer portal or call API. */
    KnownUserState["Blocked"] = "blocked";
    /** User account is pending. Requires identity confirmation before it can be made active. */
    KnownUserState["Pending"] = "pending";
    /** User account is closed. All identities and related entities are removed. */
    KnownUserState["Deleted"] = "deleted";
})(KnownUserState || (KnownUserState = {}));
/** Known values of {@link IdentityProviderType} that the service accepts. */
export var KnownIdentityProviderType;
(function (KnownIdentityProviderType) {
    /** Facebook as Identity provider. */
    KnownIdentityProviderType["Facebook"] = "facebook";
    /** Google as Identity provider. */
    KnownIdentityProviderType["Google"] = "google";
    /** Microsoft Live as Identity provider. */
    KnownIdentityProviderType["Microsoft"] = "microsoft";
    /** Twitter as Identity provider. */
    KnownIdentityProviderType["Twitter"] = "twitter";
    /** Azure Active Directory as Identity provider. */
    KnownIdentityProviderType["Aad"] = "aad";
    /** Azure Active Directory B2C as Identity provider. */
    KnownIdentityProviderType["AadB2C"] = "aadB2C";
})(KnownIdentityProviderType || (KnownIdentityProviderType = {}));
/** Known values of {@link LoggerType} that the service accepts. */
export var KnownLoggerType;
(function (KnownLoggerType) {
    /** Azure Event Hub as log destination. */
    KnownLoggerType["AzureEventHub"] = "azureEventHub";
    /** Azure Application Insights as log destination. */
    KnownLoggerType["ApplicationInsights"] = "applicationInsights";
    /** Azure Monitor */
    KnownLoggerType["AzureMonitor"] = "azureMonitor";
})(KnownLoggerType || (KnownLoggerType = {}));
/** Known values of {@link ConnectivityStatusType} that the service accepts. */
export var KnownConnectivityStatusType;
(function (KnownConnectivityStatusType) {
    /** Initializing */
    KnownConnectivityStatusType["Initializing"] = "initializing";
    /** Success */
    KnownConnectivityStatusType["Success"] = "success";
    /** Failure */
    KnownConnectivityStatusType["Failure"] = "failure";
})(KnownConnectivityStatusType || (KnownConnectivityStatusType = {}));
/** Known values of {@link NotificationName} that the service accepts. */
export var KnownNotificationName;
(function (KnownNotificationName) {
    /** The following email recipients and users will receive email notifications about subscription requests for API products requiring approval. */
    KnownNotificationName["RequestPublisherNotificationMessage"] = "RequestPublisherNotificationMessage";
    /** The following email recipients and users will receive email notifications about new API product subscriptions. */
    KnownNotificationName["PurchasePublisherNotificationMessage"] = "PurchasePublisherNotificationMessage";
    /** The following email recipients and users will receive email notifications when new applications are submitted to the application gallery. */
    KnownNotificationName["NewApplicationNotificationMessage"] = "NewApplicationNotificationMessage";
    /** The following recipients will receive blind carbon copies of all emails sent to developers. */
    KnownNotificationName["BCC"] = "BCC";
    /** The following email recipients and users will receive email notifications when a new issue or comment is submitted on the developer portal. */
    KnownNotificationName["NewIssuePublisherNotificationMessage"] = "NewIssuePublisherNotificationMessage";
    /** The following email recipients and users will receive email notifications when developer closes his account. */
    KnownNotificationName["AccountClosedPublisher"] = "AccountClosedPublisher";
    /** The following email recipients and users will receive email notifications when subscription usage gets close to usage quota. */
    KnownNotificationName["QuotaLimitApproachingPublisherNotificationMessage"] = "QuotaLimitApproachingPublisherNotificationMessage";
})(KnownNotificationName || (KnownNotificationName = {}));
/** Known values of {@link PortalRevisionStatus} that the service accepts. */
export var KnownPortalRevisionStatus;
(function (KnownPortalRevisionStatus) {
    /** Portal's revision has been queued. */
    KnownPortalRevisionStatus["Pending"] = "pending";
    /** Portal's revision is being published. */
    KnownPortalRevisionStatus["Publishing"] = "publishing";
    /** Portal's revision publishing completed. */
    KnownPortalRevisionStatus["Completed"] = "completed";
    /** Portal's revision publishing failed. */
    KnownPortalRevisionStatus["Failed"] = "failed";
})(KnownPortalRevisionStatus || (KnownPortalRevisionStatus = {}));
/** Known values of {@link PrivateEndpointConnectionProvisioningState} that the service accepts. */
export var KnownPrivateEndpointConnectionProvisioningState;
(function (KnownPrivateEndpointConnectionProvisioningState) {
    /** Succeeded */
    KnownPrivateEndpointConnectionProvisioningState["Succeeded"] = "Succeeded";
    /** Creating */
    KnownPrivateEndpointConnectionProvisioningState["Creating"] = "Creating";
    /** Deleting */
    KnownPrivateEndpointConnectionProvisioningState["Deleting"] = "Deleting";
    /** Failed */
    KnownPrivateEndpointConnectionProvisioningState["Failed"] = "Failed";
})(KnownPrivateEndpointConnectionProvisioningState || (KnownPrivateEndpointConnectionProvisioningState = {}));
/** Known values of {@link SettingsTypeName} that the service accepts. */
export var KnownSettingsTypeName;
(function (KnownSettingsTypeName) {
    /** Public */
    KnownSettingsTypeName["Public"] = "public";
})(KnownSettingsTypeName || (KnownSettingsTypeName = {}));
/** Known values of {@link AppType} that the service accepts. */
export var KnownAppType;
(function (KnownAppType) {
    /** User create request was sent by legacy developer portal. */
    KnownAppType["Portal"] = "portal";
    /** User create request was sent by new developer portal. */
    KnownAppType["DeveloperPortal"] = "developerPortal";
})(KnownAppType || (KnownAppType = {}));
/** Known values of {@link AccessIdName} that the service accepts. */
export var KnownAccessIdName;
(function (KnownAccessIdName) {
    /** Access */
    KnownAccessIdName["Access"] = "access";
    /** GitAccess */
    KnownAccessIdName["GitAccess"] = "gitAccess";
})(KnownAccessIdName || (KnownAccessIdName = {}));
/** Known values of {@link ConfigurationIdName} that the service accepts. */
export var KnownConfigurationIdName;
(function (KnownConfigurationIdName) {
    /** Configuration */
    KnownConfigurationIdName["Configuration"] = "configuration";
})(KnownConfigurationIdName || (KnownConfigurationIdName = {}));
/** Known values of {@link Confirmation} that the service accepts. */
export var KnownConfirmation;
(function (KnownConfirmation) {
    /** Send an e-mail to the user confirming they have successfully signed up. */
    KnownConfirmation["Signup"] = "signup";
    /** Send an e-mail inviting the user to sign-up and complete registration. */
    KnownConfirmation["Invite"] = "invite";
})(KnownConfirmation || (KnownConfirmation = {}));
//# sourceMappingURL=index.js.map