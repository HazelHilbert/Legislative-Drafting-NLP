/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { ApiCreateOrUpdateParameter as ApiCreateOrUpdateParameterMapper, ApiUpdateContract as ApiUpdateContractMapper, ApiReleaseContract as ApiReleaseContractMapper, OperationContract as OperationContractMapper, OperationUpdateContract as OperationUpdateContractMapper, PolicyContract as PolicyContractMapper, TagCreateUpdateParameters as TagCreateUpdateParametersMapper, SchemaContract as SchemaContractMapper, DiagnosticContract as DiagnosticContractMapper, IssueContract as IssueContractMapper, IssueUpdateContract as IssueUpdateContractMapper, IssueCommentContract as IssueCommentContractMapper, IssueAttachmentContract as IssueAttachmentContractMapper, TagDescriptionCreateParameters as TagDescriptionCreateParametersMapper, ApiVersionSetContract as ApiVersionSetContractMapper, ApiVersionSetUpdateParameters as ApiVersionSetUpdateParametersMapper, AuthorizationServerContract as AuthorizationServerContractMapper, AuthorizationServerUpdateContract as AuthorizationServerUpdateContractMapper, BackendContract as BackendContractMapper, BackendUpdateParameters as BackendUpdateParametersMapper, BackendReconnectContract as BackendReconnectContractMapper, CacheContract as CacheContractMapper, CacheUpdateParameters as CacheUpdateParametersMapper, CertificateCreateOrUpdateParameters as CertificateCreateOrUpdateParametersMapper, ConnectivityCheckRequest as ConnectivityCheckRequestMapper, ApiManagementServiceBackupRestoreParameters as ApiManagementServiceBackupRestoreParametersMapper, ApiManagementServiceResource as ApiManagementServiceResourceMapper, ApiManagementServiceUpdateParameters as ApiManagementServiceUpdateParametersMapper, ApiManagementServiceCheckNameAvailabilityParameters as ApiManagementServiceCheckNameAvailabilityParametersMapper, ApiManagementServiceApplyNetworkConfigurationParameters as ApiManagementServiceApplyNetworkConfigurationParametersMapper, EmailTemplateUpdateParameters as EmailTemplateUpdateParametersMapper, GatewayContract as GatewayContractMapper, GatewayKeyRegenerationRequestContract as GatewayKeyRegenerationRequestContractMapper, GatewayTokenRequestContract as GatewayTokenRequestContractMapper, GatewayHostnameConfigurationContract as GatewayHostnameConfigurationContractMapper, AssociationContract as AssociationContractMapper, GatewayCertificateAuthorityContract as GatewayCertificateAuthorityContractMapper, GroupCreateParameters as GroupCreateParametersMapper, GroupUpdateParameters as GroupUpdateParametersMapper, IdentityProviderCreateContract as IdentityProviderCreateContractMapper, IdentityProviderUpdateParameters as IdentityProviderUpdateParametersMapper, LoggerContract as LoggerContractMapper, LoggerUpdateContract as LoggerUpdateContractMapper, NamedValueCreateContract as NamedValueCreateContractMapper, NamedValueUpdateParameters as NamedValueUpdateParametersMapper, OpenidConnectProviderContract as OpenidConnectProviderContractMapper, OpenidConnectProviderUpdateContract as OpenidConnectProviderUpdateContractMapper, PortalRevisionContract as PortalRevisionContractMapper, PortalSigninSettings as PortalSigninSettingsMapper, PortalSignupSettings as PortalSignupSettingsMapper, PortalDelegationSettings as PortalDelegationSettingsMapper, PrivateEndpointConnectionRequest as PrivateEndpointConnectionRequestMapper, ProductContract as ProductContractMapper, ProductUpdateParameters as ProductUpdateParametersMapper, QuotaCounterValueUpdateContract as QuotaCounterValueUpdateContractMapper, SubscriptionCreateParameters as SubscriptionCreateParametersMapper, SubscriptionUpdateParameters as SubscriptionUpdateParametersMapper, AccessInformationCreateParameters as AccessInformationCreateParametersMapper, AccessInformationUpdateParameters as AccessInformationUpdateParametersMapper, DeployConfigurationParameters as DeployConfigurationParametersMapper, SaveConfigurationParameter as SaveConfigurationParameterMapper, UserCreateParameters as UserCreateParametersMapper, UserUpdateParameters as UserUpdateParametersMapper, UserTokenParameters as UserTokenParametersMapper } from "../models/mappers";
export const accept = {
    parameterPath: "accept",
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Accept",
        type: {
            name: "String"
        }
    }
};
export const $host = {
    parameterPath: "$host",
    mapper: {
        serializedName: "$host",
        required: true,
        xmlName: "$host",
        type: {
            name: "String"
        }
    },
    skipEncoding: true
};
export const resourceGroupName = {
    parameterPath: "resourceGroupName",
    mapper: {
        serializedName: "resourceGroupName",
        required: true,
        xmlName: "resourceGroupName",
        type: {
            name: "String"
        }
    }
};
export const serviceName = {
    parameterPath: "serviceName",
    mapper: {
        constraints: {
            Pattern: new RegExp("^[a-zA-Z](?:[a-zA-Z0-9-]*[a-zA-Z0-9])?$"),
            MaxLength: 50,
            MinLength: 1
        },
        serializedName: "serviceName",
        required: true,
        xmlName: "serviceName",
        type: {
            name: "String"
        }
    }
};
export const filter = {
    parameterPath: ["options", "filter"],
    mapper: {
        serializedName: "$filter",
        xmlName: "$filter",
        type: {
            name: "String"
        }
    }
};
export const top = {
    parameterPath: ["options", "top"],
    mapper: {
        constraints: {
            InclusiveMinimum: 1
        },
        serializedName: "$top",
        xmlName: "$top",
        type: {
            name: "Number"
        }
    }
};
export const skip = {
    parameterPath: ["options", "skip"],
    mapper: {
        constraints: {
            InclusiveMinimum: 0
        },
        serializedName: "$skip",
        xmlName: "$skip",
        type: {
            name: "Number"
        }
    }
};
export const tags = {
    parameterPath: ["options", "tags"],
    mapper: {
        serializedName: "tags",
        xmlName: "tags",
        type: {
            name: "String"
        }
    }
};
export const expandApiVersionSet = {
    parameterPath: ["options", "expandApiVersionSet"],
    mapper: {
        serializedName: "expandApiVersionSet",
        xmlName: "expandApiVersionSet",
        type: {
            name: "Boolean"
        }
    }
};
export const apiVersion = {
    parameterPath: "apiVersion",
    mapper: {
        defaultValue: "2021-08-01",
        isConstant: true,
        serializedName: "api-version",
        type: {
            name: "String"
        }
    }
};
export const subscriptionId = {
    parameterPath: "subscriptionId",
    mapper: {
        serializedName: "subscriptionId",
        required: true,
        xmlName: "subscriptionId",
        type: {
            name: "String"
        }
    }
};
export const apiId = {
    parameterPath: "apiId",
    mapper: {
        constraints: {
            Pattern: new RegExp("^[^*#&+:<>?]+$"),
            MaxLength: 256,
            MinLength: 1
        },
        serializedName: "apiId",
        required: true,
        xmlName: "apiId",
        type: {
            name: "String"
        }
    }
};
export const contentType = {
    parameterPath: ["options", "contentType"],
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Content-Type",
        type: {
            name: "String"
        }
    }
};
export const parameters = {
    parameterPath: "parameters",
    mapper: ApiCreateOrUpdateParameterMapper
};
export const ifMatch = {
    parameterPath: ["options", "ifMatch"],
    mapper: {
        serializedName: "If-Match",
        xmlName: "If-Match",
        type: {
            name: "String"
        }
    }
};
export const parameters1 = {
    parameterPath: "parameters",
    mapper: ApiUpdateContractMapper
};
export const ifMatch1 = {
    parameterPath: "ifMatch",
    mapper: {
        serializedName: "If-Match",
        required: true,
        xmlName: "If-Match",
        type: {
            name: "String"
        }
    }
};
export const deleteRevisions = {
    parameterPath: ["options", "deleteRevisions"],
    mapper: {
        serializedName: "deleteRevisions",
        xmlName: "deleteRevisions",
        type: {
            name: "Boolean"
        }
    }
};
export const includeNotTaggedApis = {
    parameterPath: ["options", "includeNotTaggedApis"],
    mapper: {
        serializedName: "includeNotTaggedApis",
        xmlName: "includeNotTaggedApis",
        type: {
            name: "Boolean"
        }
    }
};
export const nextLink = {
    parameterPath: "nextLink",
    mapper: {
        serializedName: "nextLink",
        required: true,
        xmlName: "nextLink",
        type: {
            name: "String"
        }
    },
    skipEncoding: true
};
export const apiId1 = {
    parameterPath: "apiId",
    mapper: {
        constraints: {
            MaxLength: 80,
            MinLength: 1
        },
        serializedName: "apiId",
        required: true,
        xmlName: "apiId",
        type: {
            name: "String"
        }
    }
};
export const releaseId = {
    parameterPath: "releaseId",
    mapper: {
        constraints: {
            Pattern: new RegExp("^[^*#&+:<>?]+$"),
            MaxLength: 80,
            MinLength: 1
        },
        serializedName: "releaseId",
        required: true,
        xmlName: "releaseId",
        type: {
            name: "String"
        }
    }
};
export const parameters2 = {
    parameterPath: "parameters",
    mapper: ApiReleaseContractMapper
};
export const operationId = {
    parameterPath: "operationId",
    mapper: {
        constraints: {
            MaxLength: 80,
            MinLength: 1
        },
        serializedName: "operationId",
        required: true,
        xmlName: "operationId",
        type: {
            name: "String"
        }
    }
};
export const parameters3 = {
    parameterPath: "parameters",
    mapper: OperationContractMapper
};
export const parameters4 = {
    parameterPath: "parameters",
    mapper: OperationUpdateContractMapper
};
export const policyId = {
    parameterPath: "policyId",
    mapper: {
        serializedName: "policyId",
        required: true,
        xmlName: "policyId",
        type: {
            name: "String"
        }
    }
};
export const format = {
    parameterPath: ["options", "format"],
    mapper: {
        defaultValue: "xml",
        serializedName: "format",
        xmlName: "format",
        type: {
            name: "String"
        }
    }
};
export const parameters5 = {
    parameterPath: "parameters",
    mapper: PolicyContractMapper
};
export const tagId = {
    parameterPath: "tagId",
    mapper: {
        constraints: {
            Pattern: new RegExp("^[^*#&+:<>?]+$"),
            MaxLength: 80,
            MinLength: 1
        },
        serializedName: "tagId",
        required: true,
        xmlName: "tagId",
        type: {
            name: "String"
        }
    }
};
export const productId = {
    parameterPath: "productId",
    mapper: {
        constraints: {
            MaxLength: 256,
            MinLength: 1
        },
        serializedName: "productId",
        required: true,
        xmlName: "productId",
        type: {
            name: "String"
        }
    }
};
export const scope = {
    parameterPath: ["options", "scope"],
    mapper: {
        serializedName: "scope",
        xmlName: "scope",
        type: {
            name: "String"
        }
    }
};
export const parameters6 = {
    parameterPath: "parameters",
    mapper: TagCreateUpdateParametersMapper
};
export const accept1 = {
    parameterPath: "accept",
    mapper: {
        defaultValue: "application/json, application/vnd.ms-azure-apim.policy+xml, application/vnd.ms-azure-apim.policy.raw+xml",
        isConstant: true,
        serializedName: "Accept",
        type: {
            name: "String"
        }
    }
};
export const schemaId = {
    parameterPath: "schemaId",
    mapper: {
        constraints: {
            Pattern: new RegExp("^[^*#&+:<>?]+$"),
            MaxLength: 80,
            MinLength: 1
        },
        serializedName: "schemaId",
        required: true,
        xmlName: "schemaId",
        type: {
            name: "String"
        }
    }
};
export const parameters7 = {
    parameterPath: "parameters",
    mapper: SchemaContractMapper
};
export const force = {
    parameterPath: ["options", "force"],
    mapper: {
        serializedName: "force",
        xmlName: "force",
        type: {
            name: "Boolean"
        }
    }
};
export const diagnosticId = {
    parameterPath: "diagnosticId",
    mapper: {
        constraints: {
            Pattern: new RegExp("^[^*#&+:<>?]+$"),
            MaxLength: 80,
            MinLength: 1
        },
        serializedName: "diagnosticId",
        required: true,
        xmlName: "diagnosticId",
        type: {
            name: "String"
        }
    }
};
export const parameters8 = {
    parameterPath: "parameters",
    mapper: DiagnosticContractMapper
};
export const expandCommentsAttachments = {
    parameterPath: ["options", "expandCommentsAttachments"],
    mapper: {
        serializedName: "expandCommentsAttachments",
        xmlName: "expandCommentsAttachments",
        type: {
            name: "Boolean"
        }
    }
};
export const issueId = {
    parameterPath: "issueId",
    mapper: {
        constraints: {
            Pattern: new RegExp("^[^*#&+:<>?]+$"),
            MaxLength: 256,
            MinLength: 1
        },
        serializedName: "issueId",
        required: true,
        xmlName: "issueId",
        type: {
            name: "String"
        }
    }
};
export const parameters9 = {
    parameterPath: "parameters",
    mapper: IssueContractMapper
};
export const parameters10 = {
    parameterPath: "parameters",
    mapper: IssueUpdateContractMapper
};
export const commentId = {
    parameterPath: "commentId",
    mapper: {
        constraints: {
            Pattern: new RegExp("^[^*#&+:<>?]+$"),
            MaxLength: 256,
            MinLength: 1
        },
        serializedName: "commentId",
        required: true,
        xmlName: "commentId",
        type: {
            name: "String"
        }
    }
};
export const parameters11 = {
    parameterPath: "parameters",
    mapper: IssueCommentContractMapper
};
export const attachmentId = {
    parameterPath: "attachmentId",
    mapper: {
        constraints: {
            Pattern: new RegExp("^[^*#&+:<>?]+$"),
            MaxLength: 256,
            MinLength: 1
        },
        serializedName: "attachmentId",
        required: true,
        xmlName: "attachmentId",
        type: {
            name: "String"
        }
    }
};
export const parameters12 = {
    parameterPath: "parameters",
    mapper: IssueAttachmentContractMapper
};
export const tagDescriptionId = {
    parameterPath: "tagDescriptionId",
    mapper: {
        constraints: {
            Pattern: new RegExp("^[^*#&+:<>?]+$"),
            MaxLength: 80,
            MinLength: 1
        },
        serializedName: "tagDescriptionId",
        required: true,
        xmlName: "tagDescriptionId",
        type: {
            name: "String"
        }
    }
};
export const parameters13 = {
    parameterPath: "parameters",
    mapper: TagDescriptionCreateParametersMapper
};
export const includeNotTaggedOperations = {
    parameterPath: ["options", "includeNotTaggedOperations"],
    mapper: {
        serializedName: "includeNotTaggedOperations",
        xmlName: "includeNotTaggedOperations",
        type: {
            name: "Boolean"
        }
    }
};
export const format1 = {
    parameterPath: "format",
    mapper: {
        serializedName: "format",
        required: true,
        xmlName: "format",
        type: {
            name: "String"
        }
    }
};
export const exportParam = {
    parameterPath: "exportParam",
    mapper: {
        serializedName: "export",
        required: true,
        xmlName: "export",
        type: {
            name: "String"
        }
    }
};
export const versionSetId = {
    parameterPath: "versionSetId",
    mapper: {
        constraints: {
            Pattern: new RegExp("^[^*#&+:<>?]+$"),
            MaxLength: 80,
            MinLength: 1
        },
        serializedName: "versionSetId",
        required: true,
        xmlName: "versionSetId",
        type: {
            name: "String"
        }
    }
};
export const parameters14 = {
    parameterPath: "parameters",
    mapper: ApiVersionSetContractMapper
};
export const parameters15 = {
    parameterPath: "parameters",
    mapper: ApiVersionSetUpdateParametersMapper
};
export const authsid = {
    parameterPath: "authsid",
    mapper: {
        constraints: {
            Pattern: new RegExp("^[^*#&+:<>?]+$"),
            MaxLength: 80,
            MinLength: 1
        },
        serializedName: "authsid",
        required: true,
        xmlName: "authsid",
        type: {
            name: "String"
        }
    }
};
export const parameters16 = {
    parameterPath: "parameters",
    mapper: AuthorizationServerContractMapper
};
export const parameters17 = {
    parameterPath: "parameters",
    mapper: AuthorizationServerUpdateContractMapper
};
export const backendId = {
    parameterPath: "backendId",
    mapper: {
        constraints: {
            MaxLength: 80,
            MinLength: 1
        },
        serializedName: "backendId",
        required: true,
        xmlName: "backendId",
        type: {
            name: "String"
        }
    }
};
export const parameters18 = {
    parameterPath: "parameters",
    mapper: BackendContractMapper
};
export const parameters19 = {
    parameterPath: "parameters",
    mapper: BackendUpdateParametersMapper
};
export const parameters20 = {
    parameterPath: ["options", "parameters"],
    mapper: BackendReconnectContractMapper
};
export const cacheId = {
    parameterPath: "cacheId",
    mapper: {
        constraints: {
            Pattern: new RegExp("^[^*#&+:<>?]+$"),
            MaxLength: 80,
            MinLength: 1
        },
        serializedName: "cacheId",
        required: true,
        xmlName: "cacheId",
        type: {
            name: "String"
        }
    }
};
export const parameters21 = {
    parameterPath: "parameters",
    mapper: CacheContractMapper
};
export const parameters22 = {
    parameterPath: "parameters",
    mapper: CacheUpdateParametersMapper
};
export const isKeyVaultRefreshFailed = {
    parameterPath: ["options", "isKeyVaultRefreshFailed"],
    mapper: {
        serializedName: "isKeyVaultRefreshFailed",
        xmlName: "isKeyVaultRefreshFailed",
        type: {
            name: "Boolean"
        }
    }
};
export const certificateId = {
    parameterPath: "certificateId",
    mapper: {
        constraints: {
            Pattern: new RegExp("^[^*#&+:<>?]+$"),
            MaxLength: 80,
            MinLength: 1
        },
        serializedName: "certificateId",
        required: true,
        xmlName: "certificateId",
        type: {
            name: "String"
        }
    }
};
export const parameters23 = {
    parameterPath: "parameters",
    mapper: CertificateCreateOrUpdateParametersMapper
};
export const connectivityCheckRequestParams = {
    parameterPath: "connectivityCheckRequestParams",
    mapper: ConnectivityCheckRequestMapper
};
export const contentTypeId = {
    parameterPath: "contentTypeId",
    mapper: {
        constraints: {
            MaxLength: 80,
            MinLength: 1
        },
        serializedName: "contentTypeId",
        required: true,
        xmlName: "contentTypeId",
        type: {
            name: "String"
        }
    }
};
export const contentItemId = {
    parameterPath: "contentItemId",
    mapper: {
        constraints: {
            MaxLength: 80,
            MinLength: 1
        },
        serializedName: "contentItemId",
        required: true,
        xmlName: "contentItemId",
        type: {
            name: "String"
        }
    }
};
export const location = {
    parameterPath: "location",
    mapper: {
        serializedName: "location",
        required: true,
        xmlName: "location",
        type: {
            name: "String"
        }
    }
};
export const parameters24 = {
    parameterPath: "parameters",
    mapper: ApiManagementServiceBackupRestoreParametersMapper
};
export const parameters25 = {
    parameterPath: "parameters",
    mapper: ApiManagementServiceResourceMapper
};
export const parameters26 = {
    parameterPath: "parameters",
    mapper: ApiManagementServiceUpdateParametersMapper
};
export const parameters27 = {
    parameterPath: "parameters",
    mapper: ApiManagementServiceCheckNameAvailabilityParametersMapper
};
export const parameters28 = {
    parameterPath: ["options", "parameters"],
    mapper: ApiManagementServiceApplyNetworkConfigurationParametersMapper
};
export const templateName = {
    parameterPath: "templateName",
    mapper: {
        serializedName: "templateName",
        required: true,
        xmlName: "templateName",
        type: {
            name: "String"
        }
    }
};
export const parameters29 = {
    parameterPath: "parameters",
    mapper: EmailTemplateUpdateParametersMapper
};
export const gatewayId = {
    parameterPath: "gatewayId",
    mapper: {
        constraints: {
            MaxLength: 80,
            MinLength: 1
        },
        serializedName: "gatewayId",
        required: true,
        xmlName: "gatewayId",
        type: {
            name: "String"
        }
    }
};
export const parameters30 = {
    parameterPath: "parameters",
    mapper: GatewayContractMapper
};
export const parameters31 = {
    parameterPath: "parameters",
    mapper: GatewayKeyRegenerationRequestContractMapper
};
export const parameters32 = {
    parameterPath: "parameters",
    mapper: GatewayTokenRequestContractMapper
};
export const hcId = {
    parameterPath: "hcId",
    mapper: {
        constraints: {
            MaxLength: 80,
            MinLength: 1
        },
        serializedName: "hcId",
        required: true,
        xmlName: "hcId",
        type: {
            name: "String"
        }
    }
};
export const parameters33 = {
    parameterPath: "parameters",
    mapper: GatewayHostnameConfigurationContractMapper
};
export const parameters34 = {
    parameterPath: ["options", "parameters"],
    mapper: AssociationContractMapper
};
export const parameters35 = {
    parameterPath: "parameters",
    mapper: GatewayCertificateAuthorityContractMapper
};
export const groupId = {
    parameterPath: "groupId",
    mapper: {
        constraints: {
            MaxLength: 256,
            MinLength: 1
        },
        serializedName: "groupId",
        required: true,
        xmlName: "groupId",
        type: {
            name: "String"
        }
    }
};
export const parameters36 = {
    parameterPath: "parameters",
    mapper: GroupCreateParametersMapper
};
export const parameters37 = {
    parameterPath: "parameters",
    mapper: GroupUpdateParametersMapper
};
export const userId = {
    parameterPath: "userId",
    mapper: {
        constraints: {
            MaxLength: 80,
            MinLength: 1
        },
        serializedName: "userId",
        required: true,
        xmlName: "userId",
        type: {
            name: "String"
        }
    }
};
export const identityProviderName = {
    parameterPath: "identityProviderName",
    mapper: {
        serializedName: "identityProviderName",
        required: true,
        xmlName: "identityProviderName",
        type: {
            name: "String"
        }
    }
};
export const parameters38 = {
    parameterPath: "parameters",
    mapper: IdentityProviderCreateContractMapper
};
export const parameters39 = {
    parameterPath: "parameters",
    mapper: IdentityProviderUpdateParametersMapper
};
export const loggerId = {
    parameterPath: "loggerId",
    mapper: {
        constraints: {
            Pattern: new RegExp("^[^*#&+:<>?]+$"),
            MaxLength: 256
        },
        serializedName: "loggerId",
        required: true,
        xmlName: "loggerId",
        type: {
            name: "String"
        }
    }
};
export const parameters40 = {
    parameterPath: "parameters",
    mapper: LoggerContractMapper
};
export const parameters41 = {
    parameterPath: "parameters",
    mapper: LoggerUpdateContractMapper
};
export const namedValueId = {
    parameterPath: "namedValueId",
    mapper: {
        constraints: {
            Pattern: new RegExp("^[^*#&+:<>?]+$"),
            MaxLength: 256
        },
        serializedName: "namedValueId",
        required: true,
        xmlName: "namedValueId",
        type: {
            name: "String"
        }
    }
};
export const parameters42 = {
    parameterPath: "parameters",
    mapper: NamedValueCreateContractMapper
};
export const parameters43 = {
    parameterPath: "parameters",
    mapper: NamedValueUpdateParametersMapper
};
export const locationName = {
    parameterPath: "locationName",
    mapper: {
        constraints: {
            MinLength: 1
        },
        serializedName: "locationName",
        required: true,
        xmlName: "locationName",
        type: {
            name: "String"
        }
    }
};
export const notificationName = {
    parameterPath: "notificationName",
    mapper: {
        serializedName: "notificationName",
        required: true,
        xmlName: "notificationName",
        type: {
            name: "String"
        }
    }
};
export const email = {
    parameterPath: "email",
    mapper: {
        serializedName: "email",
        required: true,
        xmlName: "email",
        type: {
            name: "String"
        }
    }
};
export const opid = {
    parameterPath: "opid",
    mapper: {
        constraints: {
            Pattern: new RegExp("^[^*#&+:<>?]+$"),
            MaxLength: 256
        },
        serializedName: "opid",
        required: true,
        xmlName: "opid",
        type: {
            name: "String"
        }
    }
};
export const parameters44 = {
    parameterPath: "parameters",
    mapper: OpenidConnectProviderContractMapper
};
export const parameters45 = {
    parameterPath: "parameters",
    mapper: OpenidConnectProviderUpdateContractMapper
};
export const scope1 = {
    parameterPath: ["options", "scope"],
    mapper: {
        serializedName: "scope",
        xmlName: "scope",
        type: {
            name: "Enum",
            allowedValues: ["Tenant", "Product", "Api", "Operation", "All"]
        }
    }
};
export const portalRevisionId = {
    parameterPath: "portalRevisionId",
    mapper: {
        constraints: {
            MaxLength: 256,
            MinLength: 1
        },
        serializedName: "portalRevisionId",
        required: true,
        xmlName: "portalRevisionId",
        type: {
            name: "String"
        }
    }
};
export const parameters46 = {
    parameterPath: "parameters",
    mapper: PortalRevisionContractMapper
};
export const parameters47 = {
    parameterPath: "parameters",
    mapper: PortalSigninSettingsMapper
};
export const parameters48 = {
    parameterPath: "parameters",
    mapper: PortalSignupSettingsMapper
};
export const parameters49 = {
    parameterPath: "parameters",
    mapper: PortalDelegationSettingsMapper
};
export const privateEndpointConnectionName = {
    parameterPath: "privateEndpointConnectionName",
    mapper: {
        serializedName: "privateEndpointConnectionName",
        required: true,
        xmlName: "privateEndpointConnectionName",
        type: {
            name: "String"
        }
    }
};
export const privateEndpointConnectionRequest = {
    parameterPath: "privateEndpointConnectionRequest",
    mapper: PrivateEndpointConnectionRequestMapper
};
export const privateLinkSubResourceName = {
    parameterPath: "privateLinkSubResourceName",
    mapper: {
        serializedName: "privateLinkSubResourceName",
        required: true,
        xmlName: "privateLinkSubResourceName",
        type: {
            name: "String"
        }
    }
};
export const expandGroups = {
    parameterPath: ["options", "expandGroups"],
    mapper: {
        serializedName: "expandGroups",
        xmlName: "expandGroups",
        type: {
            name: "Boolean"
        }
    }
};
export const parameters50 = {
    parameterPath: "parameters",
    mapper: ProductContractMapper
};
export const parameters51 = {
    parameterPath: "parameters",
    mapper: ProductUpdateParametersMapper
};
export const deleteSubscriptions = {
    parameterPath: ["options", "deleteSubscriptions"],
    mapper: {
        serializedName: "deleteSubscriptions",
        xmlName: "deleteSubscriptions",
        type: {
            name: "Boolean"
        }
    }
};
export const includeNotTaggedProducts = {
    parameterPath: ["options", "includeNotTaggedProducts"],
    mapper: {
        serializedName: "includeNotTaggedProducts",
        xmlName: "includeNotTaggedProducts",
        type: {
            name: "Boolean"
        }
    }
};
export const quotaCounterKey = {
    parameterPath: "quotaCounterKey",
    mapper: {
        serializedName: "quotaCounterKey",
        required: true,
        xmlName: "quotaCounterKey",
        type: {
            name: "String"
        }
    }
};
export const parameters52 = {
    parameterPath: "parameters",
    mapper: QuotaCounterValueUpdateContractMapper
};
export const quotaPeriodKey = {
    parameterPath: "quotaPeriodKey",
    mapper: {
        serializedName: "quotaPeriodKey",
        required: true,
        xmlName: "quotaPeriodKey",
        type: {
            name: "String"
        }
    }
};
export const filter1 = {
    parameterPath: "filter",
    mapper: {
        serializedName: "$filter",
        required: true,
        xmlName: "$filter",
        type: {
            name: "String"
        }
    }
};
export const orderby = {
    parameterPath: ["options", "orderby"],
    mapper: {
        serializedName: "$orderby",
        xmlName: "$orderby",
        type: {
            name: "String"
        }
    }
};
export const interval = {
    parameterPath: "interval",
    mapper: {
        serializedName: "interval",
        required: true,
        xmlName: "interval",
        type: {
            name: "TimeSpan"
        }
    }
};
export const settingsType = {
    parameterPath: "settingsType",
    mapper: {
        serializedName: "settingsType",
        required: true,
        xmlName: "settingsType",
        type: {
            name: "String"
        }
    }
};
export const sid = {
    parameterPath: "sid",
    mapper: {
        constraints: {
            Pattern: new RegExp("^[^*#&+:<>?]+$"),
            MaxLength: 256
        },
        serializedName: "sid",
        required: true,
        xmlName: "sid",
        type: {
            name: "String"
        }
    }
};
export const parameters53 = {
    parameterPath: "parameters",
    mapper: SubscriptionCreateParametersMapper
};
export const notify = {
    parameterPath: ["options", "notify"],
    mapper: {
        serializedName: "notify",
        xmlName: "notify",
        type: {
            name: "Boolean"
        }
    }
};
export const appType = {
    parameterPath: ["options", "appType"],
    mapper: {
        serializedName: "appType",
        xmlName: "appType",
        type: {
            name: "String"
        }
    }
};
export const parameters54 = {
    parameterPath: "parameters",
    mapper: SubscriptionUpdateParametersMapper
};
export const accessName = {
    parameterPath: "accessName",
    mapper: {
        serializedName: "accessName",
        required: true,
        xmlName: "accessName",
        type: {
            name: "String"
        }
    }
};
export const parameters55 = {
    parameterPath: "parameters",
    mapper: AccessInformationCreateParametersMapper
};
export const parameters56 = {
    parameterPath: "parameters",
    mapper: AccessInformationUpdateParametersMapper
};
export const parameters57 = {
    parameterPath: "parameters",
    mapper: DeployConfigurationParametersMapper
};
export const configurationName = {
    parameterPath: "configurationName",
    mapper: {
        serializedName: "configurationName",
        required: true,
        xmlName: "configurationName",
        type: {
            name: "String"
        }
    }
};
export const parameters58 = {
    parameterPath: "parameters",
    mapper: SaveConfigurationParameterMapper
};
export const parameters59 = {
    parameterPath: "parameters",
    mapper: UserCreateParametersMapper
};
export const parameters60 = {
    parameterPath: "parameters",
    mapper: UserUpdateParametersMapper
};
export const parameters61 = {
    parameterPath: "parameters",
    mapper: UserTokenParametersMapper
};
//# sourceMappingURL=parameters.js.map