/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { __awaiter } from "tslib";
import * as coreClient from "@azure/core-client";
import * as coreRestPipeline from "@azure/core-rest-pipeline";
import { LroEngine } from "@azure/core-lro";
import { LroImpl } from "./lroImpl";
import { ApiImpl, ApiRevisionImpl, ApiReleaseImpl, ApiOperationImpl, ApiOperationPolicyImpl, TagImpl, ApiProductImpl, ApiPolicyImpl, ApiSchemaImpl, ApiDiagnosticImpl, ApiIssueImpl, ApiIssueCommentImpl, ApiIssueAttachmentImpl, ApiTagDescriptionImpl, OperationOperationsImpl, ApiExportImpl, ApiVersionSetImpl, AuthorizationServerImpl, BackendImpl, CacheImpl, CertificateImpl, ContentTypeImpl, ContentItemImpl, DeletedServicesImpl, ApiManagementOperationsImpl, ApiManagementServiceSkusImpl, ApiManagementServiceImpl, DiagnosticImpl, EmailTemplateImpl, GatewayImpl, GatewayHostnameConfigurationImpl, GatewayApiImpl, GatewayCertificateAuthorityImpl, GroupImpl, GroupUserImpl, IdentityProviderImpl, IssueImpl, LoggerImpl, NamedValueImpl, NetworkStatusImpl, NotificationImpl, NotificationRecipientUserImpl, NotificationRecipientEmailImpl, OpenIdConnectProviderImpl, OutboundNetworkDependenciesEndpointsImpl, PolicyImpl, PolicyDescriptionImpl, PortalRevisionImpl, PortalSettingsImpl, SignInSettingsImpl, SignUpSettingsImpl, DelegationSettingsImpl, PrivateEndpointConnectionOperationsImpl, ProductImpl, ProductApiImpl, ProductGroupImpl, ProductSubscriptionsImpl, ProductPolicyImpl, QuotaByCounterKeysImpl, QuotaByPeriodKeysImpl, RegionImpl, ReportsImpl, TenantSettingsImpl, ApiManagementSkusImpl, SubscriptionImpl, TagResourceImpl, TenantAccessImpl, TenantAccessGitImpl, TenantConfigurationImpl, UserImpl, UserGroupImpl, UserSubscriptionImpl, UserIdentitiesImpl, UserConfirmationPasswordImpl } from "./operations";
import * as Parameters from "./models/parameters";
import * as Mappers from "./models/mappers";
export class ApiManagementClient extends coreClient.ServiceClient {
    /**
     * Initializes a new instance of the ApiManagementClient class.
     * @param credentials Subscription credentials which uniquely identify client subscription.
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription.
     *                       The subscription ID forms part of the URI for every service call.
     * @param options The parameter options
     */
    constructor(credentials, subscriptionId, options) {
        var _a, _b;
        if (credentials === undefined) {
            throw new Error("'credentials' cannot be null");
        }
        if (subscriptionId === undefined) {
            throw new Error("'subscriptionId' cannot be null");
        }
        // Initializing default values for options
        if (!options) {
            options = {};
        }
        const defaults = {
            requestContentType: "application/json; charset=utf-8",
            credential: credentials
        };
        const packageDetails = `azsdk-js-arm-apimanagement/8.1.2`;
        const userAgentPrefix = options.userAgentOptions && options.userAgentOptions.userAgentPrefix
            ? `${options.userAgentOptions.userAgentPrefix} ${packageDetails}`
            : `${packageDetails}`;
        if (!options.credentialScopes) {
            options.credentialScopes = ["https://management.azure.com/.default"];
        }
        const optionsWithDefaults = Object.assign(Object.assign(Object.assign({}, defaults), options), { userAgentOptions: {
                userAgentPrefix
            }, baseUri: (_b = (_a = options.endpoint) !== null && _a !== void 0 ? _a : options.baseUri) !== null && _b !== void 0 ? _b : "https://management.azure.com" });
        super(optionsWithDefaults);
        let bearerTokenAuthenticationPolicyFound = false;
        if ((options === null || options === void 0 ? void 0 : options.pipeline) && options.pipeline.getOrderedPolicies().length > 0) {
            const pipelinePolicies = options.pipeline.getOrderedPolicies();
            bearerTokenAuthenticationPolicyFound = pipelinePolicies.some((pipelinePolicy) => pipelinePolicy.name ===
                coreRestPipeline.bearerTokenAuthenticationPolicyName);
        }
        if (!options ||
            !options.pipeline ||
            options.pipeline.getOrderedPolicies().length == 0 ||
            !bearerTokenAuthenticationPolicyFound) {
            this.pipeline.removePolicy({
                name: coreRestPipeline.bearerTokenAuthenticationPolicyName
            });
            this.pipeline.addPolicy(coreRestPipeline.bearerTokenAuthenticationPolicy({
                credential: credentials,
                scopes: `${optionsWithDefaults.credentialScopes}`,
                challengeCallbacks: {
                    authorizeRequestOnChallenge: coreClient.authorizeRequestOnClaimChallenge
                }
            }));
        }
        // Parameter assignments
        this.subscriptionId = subscriptionId;
        // Assigning values to Constant parameters
        this.$host = options.$host || "https://management.azure.com";
        this.apiVersion = options.apiVersion || "2021-08-01";
        this.api = new ApiImpl(this);
        this.apiRevision = new ApiRevisionImpl(this);
        this.apiRelease = new ApiReleaseImpl(this);
        this.apiOperation = new ApiOperationImpl(this);
        this.apiOperationPolicy = new ApiOperationPolicyImpl(this);
        this.tag = new TagImpl(this);
        this.apiProduct = new ApiProductImpl(this);
        this.apiPolicy = new ApiPolicyImpl(this);
        this.apiSchema = new ApiSchemaImpl(this);
        this.apiDiagnostic = new ApiDiagnosticImpl(this);
        this.apiIssue = new ApiIssueImpl(this);
        this.apiIssueComment = new ApiIssueCommentImpl(this);
        this.apiIssueAttachment = new ApiIssueAttachmentImpl(this);
        this.apiTagDescription = new ApiTagDescriptionImpl(this);
        this.operationOperations = new OperationOperationsImpl(this);
        this.apiExport = new ApiExportImpl(this);
        this.apiVersionSet = new ApiVersionSetImpl(this);
        this.authorizationServer = new AuthorizationServerImpl(this);
        this.backend = new BackendImpl(this);
        this.cache = new CacheImpl(this);
        this.certificate = new CertificateImpl(this);
        this.contentType = new ContentTypeImpl(this);
        this.contentItem = new ContentItemImpl(this);
        this.deletedServices = new DeletedServicesImpl(this);
        this.apiManagementOperations = new ApiManagementOperationsImpl(this);
        this.apiManagementServiceSkus = new ApiManagementServiceSkusImpl(this);
        this.apiManagementService = new ApiManagementServiceImpl(this);
        this.diagnostic = new DiagnosticImpl(this);
        this.emailTemplate = new EmailTemplateImpl(this);
        this.gateway = new GatewayImpl(this);
        this.gatewayHostnameConfiguration = new GatewayHostnameConfigurationImpl(this);
        this.gatewayApi = new GatewayApiImpl(this);
        this.gatewayCertificateAuthority = new GatewayCertificateAuthorityImpl(this);
        this.group = new GroupImpl(this);
        this.groupUser = new GroupUserImpl(this);
        this.identityProvider = new IdentityProviderImpl(this);
        this.issue = new IssueImpl(this);
        this.logger = new LoggerImpl(this);
        this.namedValue = new NamedValueImpl(this);
        this.networkStatus = new NetworkStatusImpl(this);
        this.notification = new NotificationImpl(this);
        this.notificationRecipientUser = new NotificationRecipientUserImpl(this);
        this.notificationRecipientEmail = new NotificationRecipientEmailImpl(this);
        this.openIdConnectProvider = new OpenIdConnectProviderImpl(this);
        this.outboundNetworkDependenciesEndpoints = new OutboundNetworkDependenciesEndpointsImpl(this);
        this.policy = new PolicyImpl(this);
        this.policyDescription = new PolicyDescriptionImpl(this);
        this.portalRevision = new PortalRevisionImpl(this);
        this.portalSettings = new PortalSettingsImpl(this);
        this.signInSettings = new SignInSettingsImpl(this);
        this.signUpSettings = new SignUpSettingsImpl(this);
        this.delegationSettings = new DelegationSettingsImpl(this);
        this.privateEndpointConnectionOperations = new PrivateEndpointConnectionOperationsImpl(this);
        this.product = new ProductImpl(this);
        this.productApi = new ProductApiImpl(this);
        this.productGroup = new ProductGroupImpl(this);
        this.productSubscriptions = new ProductSubscriptionsImpl(this);
        this.productPolicy = new ProductPolicyImpl(this);
        this.quotaByCounterKeys = new QuotaByCounterKeysImpl(this);
        this.quotaByPeriodKeys = new QuotaByPeriodKeysImpl(this);
        this.region = new RegionImpl(this);
        this.reports = new ReportsImpl(this);
        this.tenantSettings = new TenantSettingsImpl(this);
        this.apiManagementSkus = new ApiManagementSkusImpl(this);
        this.subscription = new SubscriptionImpl(this);
        this.tagResource = new TagResourceImpl(this);
        this.tenantAccess = new TenantAccessImpl(this);
        this.tenantAccessGit = new TenantAccessGitImpl(this);
        this.tenantConfiguration = new TenantConfigurationImpl(this);
        this.user = new UserImpl(this);
        this.userGroup = new UserGroupImpl(this);
        this.userSubscription = new UserSubscriptionImpl(this);
        this.userIdentities = new UserIdentitiesImpl(this);
        this.userConfirmationPassword = new UserConfirmationPasswordImpl(this);
        this.addCustomApiVersionPolicy(options.apiVersion);
    }
    /** A function that adds a policy that sets the api-version (or equivalent) to reflect the library version. */
    addCustomApiVersionPolicy(apiVersion) {
        if (!apiVersion) {
            return;
        }
        const apiVersionPolicy = {
            name: "CustomApiVersionPolicy",
            sendRequest(request, next) {
                return __awaiter(this, void 0, void 0, function* () {
                    const param = request.url.split("?");
                    if (param.length > 1) {
                        const newParams = param[1].split("&").map((item) => {
                            if (item.indexOf("api-version") > -1) {
                                return "api-version=" + apiVersion;
                            }
                            else {
                                return item;
                            }
                        });
                        request.url = param[0] + "?" + newParams.join("&");
                    }
                    return next(request);
                });
            }
        };
        this.pipeline.addPolicy(apiVersionPolicy);
    }
    /**
     * Performs a connectivity check between the API Management service and a given destination, and
     * returns metrics for the connection, as well as errors encountered while trying to establish it.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param connectivityCheckRequestParams Connectivity Check request parameters.
     * @param options The options parameters.
     */
    beginPerformConnectivityCheckAsync(resourceGroupName, serviceName, connectivityCheckRequestParams, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => __awaiter(this, void 0, void 0, function* () {
                return this.sendOperationRequest(args, spec);
            });
            const sendOperation = (args, spec) => __awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = new LroImpl(sendOperation, {
                resourceGroupName,
                serviceName,
                connectivityCheckRequestParams,
                options
            }, performConnectivityCheckAsyncOperationSpec);
            const poller = new LroEngine(lro, {
                resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
                lroResourceLocationConfig: "location"
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Performs a connectivity check between the API Management service and a given destination, and
     * returns metrics for the connection, as well as errors encountered while trying to establish it.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param connectivityCheckRequestParams Connectivity Check request parameters.
     * @param options The options parameters.
     */
    beginPerformConnectivityCheckAsyncAndWait(resourceGroupName, serviceName, connectivityCheckRequestParams, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginPerformConnectivityCheckAsync(resourceGroupName, serviceName, connectivityCheckRequestParams, options);
            return poller.pollUntilDone();
        });
    }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);
const performConnectivityCheckAsyncOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/connectivityCheck",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: Mappers.ConnectivityCheckResponse
        },
        201: {
            bodyMapper: Mappers.ConnectivityCheckResponse
        },
        202: {
            bodyMapper: Mappers.ConnectivityCheckResponse
        },
        204: {
            bodyMapper: Mappers.ConnectivityCheckResponse
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    requestBody: Parameters.connectivityCheckRequestParams,
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.resourceGroupName,
        Parameters.serviceName,
        Parameters.subscriptionId
    ],
    headerParameters: [Parameters.accept, Parameters.contentType],
    mediaType: "json",
    serializer
};
//# sourceMappingURL=apiManagementClient.js.map