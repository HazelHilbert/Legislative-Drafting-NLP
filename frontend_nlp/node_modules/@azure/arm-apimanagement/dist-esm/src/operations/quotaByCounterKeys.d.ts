import { QuotaByCounterKeys } from "../operationsInterfaces";
import { ApiManagementClient } from "../apiManagementClient";
import { QuotaByCounterKeysListByServiceOptionalParams, QuotaByCounterKeysListByServiceResponse, QuotaCounterValueUpdateContract, QuotaByCounterKeysUpdateOptionalParams, QuotaByCounterKeysUpdateResponse } from "../models";
/** Class containing QuotaByCounterKeys operations. */
export declare class QuotaByCounterKeysImpl implements QuotaByCounterKeys {
    private readonly client;
    /**
     * Initialize a new instance of the class QuotaByCounterKeys class.
     * @param client Reference to the service client
     */
    constructor(client: ApiManagementClient);
    /**
     * Lists a collection of current quota counter periods associated with the counter-key configured in
     * the policy on the specified service instance. The api does not support paging yet.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param quotaCounterKey Quota counter key identifier.This is the result of expression defined in
     *                        counter-key attribute of the quota-by-key policy.For Example, if you specify counter-key="boo" in
     *                        the policy, then it’s accessible by "boo" counter key. But if it’s defined as
     *                        counter-key="@("b"+"a")" then it will be accessible by "ba" key
     * @param options The options parameters.
     */
    listByService(resourceGroupName: string, serviceName: string, quotaCounterKey: string, options?: QuotaByCounterKeysListByServiceOptionalParams): Promise<QuotaByCounterKeysListByServiceResponse>;
    /**
     * Updates all the quota counter values specified with the existing quota counter key to a value in the
     * specified service instance. This should be used for reset of the quota counter values.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param quotaCounterKey Quota counter key identifier.This is the result of expression defined in
     *                        counter-key attribute of the quota-by-key policy.For Example, if you specify counter-key="boo" in
     *                        the policy, then it’s accessible by "boo" counter key. But if it’s defined as
     *                        counter-key="@("b"+"a")" then it will be accessible by "ba" key
     * @param parameters The value of the quota counter to be applied to all quota counter periods.
     * @param options The options parameters.
     */
    update(resourceGroupName: string, serviceName: string, quotaCounterKey: string, parameters: QuotaCounterValueUpdateContract, options?: QuotaByCounterKeysUpdateOptionalParams): Promise<QuotaByCounterKeysUpdateResponse>;
}
//# sourceMappingURL=quotaByCounterKeys.d.ts.map