import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { IdentityProvider } from "../operationsInterfaces";
import { ApiManagementClient } from "../apiManagementClient";
import { IdentityProviderContract, IdentityProviderListByServiceOptionalParams, IdentityProviderType, IdentityProviderGetEntityTagOptionalParams, IdentityProviderGetEntityTagResponse, IdentityProviderGetOptionalParams, IdentityProviderGetResponse, IdentityProviderCreateContract, IdentityProviderCreateOrUpdateOptionalParams, IdentityProviderCreateOrUpdateResponse, IdentityProviderUpdateParameters, IdentityProviderUpdateOptionalParams, IdentityProviderUpdateResponse, IdentityProviderDeleteOptionalParams, IdentityProviderListSecretsOptionalParams, IdentityProviderListSecretsResponse } from "../models";
/** Class containing IdentityProvider operations. */
export declare class IdentityProviderImpl implements IdentityProvider {
    private readonly client;
    /**
     * Initialize a new instance of the class IdentityProvider class.
     * @param client Reference to the service client
     */
    constructor(client: ApiManagementClient);
    /**
     * Lists a collection of Identity Provider configured in the specified service instance.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param options The options parameters.
     */
    listByService(resourceGroupName: string, serviceName: string, options?: IdentityProviderListByServiceOptionalParams): PagedAsyncIterableIterator<IdentityProviderContract>;
    private listByServicePagingPage;
    private listByServicePagingAll;
    /**
     * Lists a collection of Identity Provider configured in the specified service instance.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param options The options parameters.
     */
    private _listByService;
    /**
     * Gets the entity state (Etag) version of the identityProvider specified by its identifier.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param identityProviderName Identity Provider Type identifier.
     * @param options The options parameters.
     */
    getEntityTag(resourceGroupName: string, serviceName: string, identityProviderName: IdentityProviderType, options?: IdentityProviderGetEntityTagOptionalParams): Promise<IdentityProviderGetEntityTagResponse>;
    /**
     * Gets the configuration details of the identity Provider configured in specified service instance.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param identityProviderName Identity Provider Type identifier.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, serviceName: string, identityProviderName: IdentityProviderType, options?: IdentityProviderGetOptionalParams): Promise<IdentityProviderGetResponse>;
    /**
     * Creates or Updates the IdentityProvider configuration.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param identityProviderName Identity Provider Type identifier.
     * @param parameters Create parameters.
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName: string, serviceName: string, identityProviderName: IdentityProviderType, parameters: IdentityProviderCreateContract, options?: IdentityProviderCreateOrUpdateOptionalParams): Promise<IdentityProviderCreateOrUpdateResponse>;
    /**
     * Updates an existing IdentityProvider configuration.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param identityProviderName Identity Provider Type identifier.
     * @param ifMatch ETag of the Entity. ETag should match the current entity state from the header
     *                response of the GET request or it should be * for unconditional update.
     * @param parameters Update parameters.
     * @param options The options parameters.
     */
    update(resourceGroupName: string, serviceName: string, identityProviderName: IdentityProviderType, ifMatch: string, parameters: IdentityProviderUpdateParameters, options?: IdentityProviderUpdateOptionalParams): Promise<IdentityProviderUpdateResponse>;
    /**
     * Deletes the specified identity provider configuration.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param identityProviderName Identity Provider Type identifier.
     * @param ifMatch ETag of the Entity. ETag should match the current entity state from the header
     *                response of the GET request or it should be * for unconditional update.
     * @param options The options parameters.
     */
    delete(resourceGroupName: string, serviceName: string, identityProviderName: IdentityProviderType, ifMatch: string, options?: IdentityProviderDeleteOptionalParams): Promise<void>;
    /**
     * Gets the client secret details of the Identity Provider.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param identityProviderName Identity Provider Type identifier.
     * @param options The options parameters.
     */
    listSecrets(resourceGroupName: string, serviceName: string, identityProviderName: IdentityProviderType, options?: IdentityProviderListSecretsOptionalParams): Promise<IdentityProviderListSecretsResponse>;
    /**
     * ListByServiceNext
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param nextLink The nextLink from the previous successful call to the ListByService method.
     * @param options The options parameters.
     */
    private _listByServiceNext;
}
//# sourceMappingURL=identityProvider.d.ts.map