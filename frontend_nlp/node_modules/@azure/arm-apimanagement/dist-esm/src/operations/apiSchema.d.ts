import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { ApiSchema } from "../operationsInterfaces";
import { ApiManagementClient } from "../apiManagementClient";
import { PollerLike, PollOperationState } from "@azure/core-lro";
import { SchemaContract, ApiSchemaListByApiOptionalParams, ApiSchemaGetEntityTagOptionalParams, ApiSchemaGetEntityTagResponse, ApiSchemaGetOptionalParams, ApiSchemaGetResponse, ApiSchemaCreateOrUpdateOptionalParams, ApiSchemaCreateOrUpdateResponse, ApiSchemaDeleteOptionalParams } from "../models";
/** Class containing ApiSchema operations. */
export declare class ApiSchemaImpl implements ApiSchema {
    private readonly client;
    /**
     * Initialize a new instance of the class ApiSchema class.
     * @param client Reference to the service client
     */
    constructor(client: ApiManagementClient);
    /**
     * Get the schema configuration at the API level.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param apiId API revision identifier. Must be unique in the current API Management service instance.
     *              Non-current revision has ;rev=n as a suffix where n is the revision number.
     * @param options The options parameters.
     */
    listByApi(resourceGroupName: string, serviceName: string, apiId: string, options?: ApiSchemaListByApiOptionalParams): PagedAsyncIterableIterator<SchemaContract>;
    private listByApiPagingPage;
    private listByApiPagingAll;
    /**
     * Get the schema configuration at the API level.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param apiId API revision identifier. Must be unique in the current API Management service instance.
     *              Non-current revision has ;rev=n as a suffix where n is the revision number.
     * @param options The options parameters.
     */
    private _listByApi;
    /**
     * Gets the entity state (Etag) version of the schema specified by its identifier.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param apiId API revision identifier. Must be unique in the current API Management service instance.
     *              Non-current revision has ;rev=n as a suffix where n is the revision number.
     * @param schemaId Schema identifier within an API. Must be unique in the current API Management
     *                 service instance.
     * @param options The options parameters.
     */
    getEntityTag(resourceGroupName: string, serviceName: string, apiId: string, schemaId: string, options?: ApiSchemaGetEntityTagOptionalParams): Promise<ApiSchemaGetEntityTagResponse>;
    /**
     * Get the schema configuration at the API level.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param apiId API revision identifier. Must be unique in the current API Management service instance.
     *              Non-current revision has ;rev=n as a suffix where n is the revision number.
     * @param schemaId Schema identifier within an API. Must be unique in the current API Management
     *                 service instance.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, serviceName: string, apiId: string, schemaId: string, options?: ApiSchemaGetOptionalParams): Promise<ApiSchemaGetResponse>;
    /**
     * Creates or updates schema configuration for the API.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param apiId API revision identifier. Must be unique in the current API Management service instance.
     *              Non-current revision has ;rev=n as a suffix where n is the revision number.
     * @param schemaId Schema identifier within an API. Must be unique in the current API Management
     *                 service instance.
     * @param parameters The schema contents to apply.
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName: string, serviceName: string, apiId: string, schemaId: string, parameters: SchemaContract, options?: ApiSchemaCreateOrUpdateOptionalParams): Promise<PollerLike<PollOperationState<ApiSchemaCreateOrUpdateResponse>, ApiSchemaCreateOrUpdateResponse>>;
    /**
     * Creates or updates schema configuration for the API.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param apiId API revision identifier. Must be unique in the current API Management service instance.
     *              Non-current revision has ;rev=n as a suffix where n is the revision number.
     * @param schemaId Schema identifier within an API. Must be unique in the current API Management
     *                 service instance.
     * @param parameters The schema contents to apply.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName: string, serviceName: string, apiId: string, schemaId: string, parameters: SchemaContract, options?: ApiSchemaCreateOrUpdateOptionalParams): Promise<ApiSchemaCreateOrUpdateResponse>;
    /**
     * Deletes the schema configuration at the Api.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param apiId API revision identifier. Must be unique in the current API Management service instance.
     *              Non-current revision has ;rev=n as a suffix where n is the revision number.
     * @param schemaId Schema identifier within an API. Must be unique in the current API Management
     *                 service instance.
     * @param ifMatch ETag of the Entity. ETag should match the current entity state from the header
     *                response of the GET request or it should be * for unconditional update.
     * @param options The options parameters.
     */
    delete(resourceGroupName: string, serviceName: string, apiId: string, schemaId: string, ifMatch: string, options?: ApiSchemaDeleteOptionalParams): Promise<void>;
    /**
     * ListByApiNext
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param apiId API revision identifier. Must be unique in the current API Management service instance.
     *              Non-current revision has ;rev=n as a suffix where n is the revision number.
     * @param nextLink The nextLink from the previous successful call to the ListByApi method.
     * @param options The options parameters.
     */
    private _listByApiNext;
}
//# sourceMappingURL=apiSchema.d.ts.map