import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { EmailTemplate } from "../operationsInterfaces";
import { ApiManagementClient } from "../apiManagementClient";
import { EmailTemplateContract, EmailTemplateListByServiceOptionalParams, TemplateName, EmailTemplateGetEntityTagOptionalParams, EmailTemplateGetEntityTagResponse, EmailTemplateGetOptionalParams, EmailTemplateGetResponse, EmailTemplateUpdateParameters, EmailTemplateCreateOrUpdateOptionalParams, EmailTemplateCreateOrUpdateResponse, EmailTemplateUpdateOptionalParams, EmailTemplateUpdateResponse, EmailTemplateDeleteOptionalParams } from "../models";
/** Class containing EmailTemplate operations. */
export declare class EmailTemplateImpl implements EmailTemplate {
    private readonly client;
    /**
     * Initialize a new instance of the class EmailTemplate class.
     * @param client Reference to the service client
     */
    constructor(client: ApiManagementClient);
    /**
     * Gets all email templates
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param options The options parameters.
     */
    listByService(resourceGroupName: string, serviceName: string, options?: EmailTemplateListByServiceOptionalParams): PagedAsyncIterableIterator<EmailTemplateContract>;
    private listByServicePagingPage;
    private listByServicePagingAll;
    /**
     * Gets all email templates
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param options The options parameters.
     */
    private _listByService;
    /**
     * Gets the entity state (Etag) version of the email template specified by its identifier.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param templateName Email Template Name Identifier.
     * @param options The options parameters.
     */
    getEntityTag(resourceGroupName: string, serviceName: string, templateName: TemplateName, options?: EmailTemplateGetEntityTagOptionalParams): Promise<EmailTemplateGetEntityTagResponse>;
    /**
     * Gets the details of the email template specified by its identifier.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param templateName Email Template Name Identifier.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, serviceName: string, templateName: TemplateName, options?: EmailTemplateGetOptionalParams): Promise<EmailTemplateGetResponse>;
    /**
     * Updates an Email Template.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param templateName Email Template Name Identifier.
     * @param parameters Email Template update parameters.
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName: string, serviceName: string, templateName: TemplateName, parameters: EmailTemplateUpdateParameters, options?: EmailTemplateCreateOrUpdateOptionalParams): Promise<EmailTemplateCreateOrUpdateResponse>;
    /**
     * Updates API Management email template
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param templateName Email Template Name Identifier.
     * @param ifMatch ETag of the Entity. ETag should match the current entity state from the header
     *                response of the GET request or it should be * for unconditional update.
     * @param parameters Update parameters.
     * @param options The options parameters.
     */
    update(resourceGroupName: string, serviceName: string, templateName: TemplateName, ifMatch: string, parameters: EmailTemplateUpdateParameters, options?: EmailTemplateUpdateOptionalParams): Promise<EmailTemplateUpdateResponse>;
    /**
     * Reset the Email Template to default template provided by the API Management service instance.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param templateName Email Template Name Identifier.
     * @param ifMatch ETag of the Entity. ETag should match the current entity state from the header
     *                response of the GET request or it should be * for unconditional update.
     * @param options The options parameters.
     */
    delete(resourceGroupName: string, serviceName: string, templateName: TemplateName, ifMatch: string, options?: EmailTemplateDeleteOptionalParams): Promise<void>;
    /**
     * ListByServiceNext
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param nextLink The nextLink from the previous successful call to the ListByService method.
     * @param options The options parameters.
     */
    private _listByServiceNext;
}
//# sourceMappingURL=emailTemplate.d.ts.map