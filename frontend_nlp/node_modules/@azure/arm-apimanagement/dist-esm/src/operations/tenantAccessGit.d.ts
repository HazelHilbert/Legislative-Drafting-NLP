import { TenantAccessGit } from "../operationsInterfaces";
import { ApiManagementClient } from "../apiManagementClient";
import { AccessIdName, TenantAccessGitRegeneratePrimaryKeyOptionalParams, TenantAccessGitRegenerateSecondaryKeyOptionalParams } from "../models";
/** Class containing TenantAccessGit operations. */
export declare class TenantAccessGitImpl implements TenantAccessGit {
    private readonly client;
    /**
     * Initialize a new instance of the class TenantAccessGit class.
     * @param client Reference to the service client
     */
    constructor(client: ApiManagementClient);
    /**
     * Regenerate primary access key for GIT.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param accessName The identifier of the Access configuration.
     * @param options The options parameters.
     */
    regeneratePrimaryKey(resourceGroupName: string, serviceName: string, accessName: AccessIdName, options?: TenantAccessGitRegeneratePrimaryKeyOptionalParams): Promise<void>;
    /**
     * Regenerate secondary access key for GIT.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param accessName The identifier of the Access configuration.
     * @param options The options parameters.
     */
    regenerateSecondaryKey(resourceGroupName: string, serviceName: string, accessName: AccessIdName, options?: TenantAccessGitRegenerateSecondaryKeyOptionalParams): Promise<void>;
}
//# sourceMappingURL=tenantAccessGit.d.ts.map