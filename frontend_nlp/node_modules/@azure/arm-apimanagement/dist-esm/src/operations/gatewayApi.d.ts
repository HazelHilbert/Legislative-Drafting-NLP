import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { GatewayApi } from "../operationsInterfaces";
import { ApiManagementClient } from "../apiManagementClient";
import { ApiContract, GatewayApiListByServiceOptionalParams, GatewayApiGetEntityTagOptionalParams, GatewayApiGetEntityTagResponse, GatewayApiCreateOrUpdateOptionalParams, GatewayApiCreateOrUpdateResponse, GatewayApiDeleteOptionalParams } from "../models";
/** Class containing GatewayApi operations. */
export declare class GatewayApiImpl implements GatewayApi {
    private readonly client;
    /**
     * Initialize a new instance of the class GatewayApi class.
     * @param client Reference to the service client
     */
    constructor(client: ApiManagementClient);
    /**
     * Lists a collection of the APIs associated with a gateway.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param gatewayId Gateway entity identifier. Must be unique in the current API Management service
     *                  instance. Must not have value 'managed'
     * @param options The options parameters.
     */
    listByService(resourceGroupName: string, serviceName: string, gatewayId: string, options?: GatewayApiListByServiceOptionalParams): PagedAsyncIterableIterator<ApiContract>;
    private listByServicePagingPage;
    private listByServicePagingAll;
    /**
     * Lists a collection of the APIs associated with a gateway.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param gatewayId Gateway entity identifier. Must be unique in the current API Management service
     *                  instance. Must not have value 'managed'
     * @param options The options parameters.
     */
    private _listByService;
    /**
     * Checks that API entity specified by identifier is associated with the Gateway entity.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param gatewayId Gateway entity identifier. Must be unique in the current API Management service
     *                  instance. Must not have value 'managed'
     * @param apiId API identifier. Must be unique in the current API Management service instance.
     * @param options The options parameters.
     */
    getEntityTag(resourceGroupName: string, serviceName: string, gatewayId: string, apiId: string, options?: GatewayApiGetEntityTagOptionalParams): Promise<GatewayApiGetEntityTagResponse>;
    /**
     * Adds an API to the specified Gateway.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param gatewayId Gateway entity identifier. Must be unique in the current API Management service
     *                  instance. Must not have value 'managed'
     * @param apiId API identifier. Must be unique in the current API Management service instance.
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName: string, serviceName: string, gatewayId: string, apiId: string, options?: GatewayApiCreateOrUpdateOptionalParams): Promise<GatewayApiCreateOrUpdateResponse>;
    /**
     * Deletes the specified API from the specified Gateway.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param gatewayId Gateway entity identifier. Must be unique in the current API Management service
     *                  instance. Must not have value 'managed'
     * @param apiId API identifier. Must be unique in the current API Management service instance.
     * @param options The options parameters.
     */
    delete(resourceGroupName: string, serviceName: string, gatewayId: string, apiId: string, options?: GatewayApiDeleteOptionalParams): Promise<void>;
    /**
     * ListByServiceNext
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param gatewayId Gateway entity identifier. Must be unique in the current API Management service
     *                  instance. Must not have value 'managed'
     * @param nextLink The nextLink from the previous successful call to the ListByService method.
     * @param options The options parameters.
     */
    private _listByServiceNext;
}
//# sourceMappingURL=gatewayApi.d.ts.map