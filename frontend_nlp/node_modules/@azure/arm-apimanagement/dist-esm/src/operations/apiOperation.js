/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { __asyncDelegator, __asyncGenerator, __asyncValues, __await } from "tslib";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
/// <reference lib="esnext.asynciterable" />
/** Class containing ApiOperation operations. */
export class ApiOperationImpl {
    /**
     * Initialize a new instance of the class ApiOperation class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Lists a collection of the operations for the specified API.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param apiId API revision identifier. Must be unique in the current API Management service instance.
     *              Non-current revision has ;rev=n as a suffix where n is the revision number.
     * @param options The options parameters.
     */
    listByApi(resourceGroupName, serviceName, apiId, options) {
        const iter = this.listByApiPagingAll(resourceGroupName, serviceName, apiId, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: () => {
                return this.listByApiPagingPage(resourceGroupName, serviceName, apiId, options);
            }
        };
    }
    listByApiPagingPage(resourceGroupName, serviceName, apiId, options) {
        return __asyncGenerator(this, arguments, function* listByApiPagingPage_1() {
            let result = yield __await(this._listByApi(resourceGroupName, serviceName, apiId, options));
            yield yield __await(result.value || []);
            let continuationToken = result.nextLink;
            while (continuationToken) {
                result = yield __await(this._listByApiNext(resourceGroupName, serviceName, apiId, continuationToken, options));
                continuationToken = result.nextLink;
                yield yield __await(result.value || []);
            }
        });
    }
    listByApiPagingAll(resourceGroupName, serviceName, apiId, options) {
        return __asyncGenerator(this, arguments, function* listByApiPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = __asyncValues(this.listByApiPagingPage(resourceGroupName, serviceName, apiId, options)), _c; _c = yield __await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield __await(yield* __asyncDelegator(__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield __await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Lists a collection of the operations for the specified API.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param apiId API revision identifier. Must be unique in the current API Management service instance.
     *              Non-current revision has ;rev=n as a suffix where n is the revision number.
     * @param options The options parameters.
     */
    _listByApi(resourceGroupName, serviceName, apiId, options) {
        return this.client.sendOperationRequest({ resourceGroupName, serviceName, apiId, options }, listByApiOperationSpec);
    }
    /**
     * Gets the entity state (Etag) version of the API operation specified by its identifier.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param apiId API revision identifier. Must be unique in the current API Management service instance.
     *              Non-current revision has ;rev=n as a suffix where n is the revision number.
     * @param operationId Operation identifier within an API. Must be unique in the current API Management
     *                    service instance.
     * @param options The options parameters.
     */
    getEntityTag(resourceGroupName, serviceName, apiId, operationId, options) {
        return this.client.sendOperationRequest({ resourceGroupName, serviceName, apiId, operationId, options }, getEntityTagOperationSpec);
    }
    /**
     * Gets the details of the API Operation specified by its identifier.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param apiId API revision identifier. Must be unique in the current API Management service instance.
     *              Non-current revision has ;rev=n as a suffix where n is the revision number.
     * @param operationId Operation identifier within an API. Must be unique in the current API Management
     *                    service instance.
     * @param options The options parameters.
     */
    get(resourceGroupName, serviceName, apiId, operationId, options) {
        return this.client.sendOperationRequest({ resourceGroupName, serviceName, apiId, operationId, options }, getOperationSpec);
    }
    /**
     * Creates a new operation in the API or updates an existing one.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param apiId API revision identifier. Must be unique in the current API Management service instance.
     *              Non-current revision has ;rev=n as a suffix where n is the revision number.
     * @param operationId Operation identifier within an API. Must be unique in the current API Management
     *                    service instance.
     * @param parameters Create parameters.
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName, serviceName, apiId, operationId, parameters, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            serviceName,
            apiId,
            operationId,
            parameters,
            options
        }, createOrUpdateOperationSpec);
    }
    /**
     * Updates the details of the operation in the API specified by its identifier.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param apiId API revision identifier. Must be unique in the current API Management service instance.
     *              Non-current revision has ;rev=n as a suffix where n is the revision number.
     * @param operationId Operation identifier within an API. Must be unique in the current API Management
     *                    service instance.
     * @param ifMatch ETag of the Entity. ETag should match the current entity state from the header
     *                response of the GET request or it should be * for unconditional update.
     * @param parameters API Operation Update parameters.
     * @param options The options parameters.
     */
    update(resourceGroupName, serviceName, apiId, operationId, ifMatch, parameters, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            serviceName,
            apiId,
            operationId,
            ifMatch,
            parameters,
            options
        }, updateOperationSpec);
    }
    /**
     * Deletes the specified operation in the API.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param apiId API revision identifier. Must be unique in the current API Management service instance.
     *              Non-current revision has ;rev=n as a suffix where n is the revision number.
     * @param operationId Operation identifier within an API. Must be unique in the current API Management
     *                    service instance.
     * @param ifMatch ETag of the Entity. ETag should match the current entity state from the header
     *                response of the GET request or it should be * for unconditional update.
     * @param options The options parameters.
     */
    delete(resourceGroupName, serviceName, apiId, operationId, ifMatch, options) {
        return this.client.sendOperationRequest({ resourceGroupName, serviceName, apiId, operationId, ifMatch, options }, deleteOperationSpec);
    }
    /**
     * ListByApiNext
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param apiId API revision identifier. Must be unique in the current API Management service instance.
     *              Non-current revision has ;rev=n as a suffix where n is the revision number.
     * @param nextLink The nextLink from the previous successful call to the ListByApi method.
     * @param options The options parameters.
     */
    _listByApiNext(resourceGroupName, serviceName, apiId, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, serviceName, apiId, nextLink, options }, listByApiNextOperationSpec);
    }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);
const listByApiOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{apiId}/operations",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.OperationCollection
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    queryParameters: [
        Parameters.filter,
        Parameters.top,
        Parameters.skip,
        Parameters.tags,
        Parameters.apiVersion
    ],
    urlParameters: [
        Parameters.$host,
        Parameters.resourceGroupName,
        Parameters.serviceName,
        Parameters.subscriptionId,
        Parameters.apiId
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const getEntityTagOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{apiId}/operations/{operationId}",
    httpMethod: "HEAD",
    responses: {
        200: {
            headersMapper: Mappers.ApiOperationGetEntityTagHeaders
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.resourceGroupName,
        Parameters.serviceName,
        Parameters.subscriptionId,
        Parameters.apiId,
        Parameters.operationId
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const getOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{apiId}/operations/{operationId}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.OperationContract,
            headersMapper: Mappers.ApiOperationGetHeaders
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.resourceGroupName,
        Parameters.serviceName,
        Parameters.subscriptionId,
        Parameters.apiId,
        Parameters.operationId
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const createOrUpdateOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{apiId}/operations/{operationId}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: Mappers.OperationContract,
            headersMapper: Mappers.ApiOperationCreateOrUpdateHeaders
        },
        201: {
            bodyMapper: Mappers.OperationContract,
            headersMapper: Mappers.ApiOperationCreateOrUpdateHeaders
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    requestBody: Parameters.parameters3,
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.resourceGroupName,
        Parameters.serviceName,
        Parameters.subscriptionId,
        Parameters.apiId,
        Parameters.operationId
    ],
    headerParameters: [
        Parameters.accept,
        Parameters.contentType,
        Parameters.ifMatch
    ],
    mediaType: "json",
    serializer
};
const updateOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{apiId}/operations/{operationId}",
    httpMethod: "PATCH",
    responses: {
        200: {
            bodyMapper: Mappers.OperationContract,
            headersMapper: Mappers.ApiOperationUpdateHeaders
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    requestBody: Parameters.parameters4,
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.resourceGroupName,
        Parameters.serviceName,
        Parameters.subscriptionId,
        Parameters.apiId,
        Parameters.operationId
    ],
    headerParameters: [
        Parameters.accept,
        Parameters.contentType,
        Parameters.ifMatch1
    ],
    mediaType: "json",
    serializer
};
const deleteOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{apiId}/operations/{operationId}",
    httpMethod: "DELETE",
    responses: {
        200: {},
        204: {},
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.resourceGroupName,
        Parameters.serviceName,
        Parameters.subscriptionId,
        Parameters.apiId,
        Parameters.operationId
    ],
    headerParameters: [Parameters.accept, Parameters.ifMatch1],
    serializer
};
const listByApiNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.OperationCollection
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    queryParameters: [
        Parameters.filter,
        Parameters.top,
        Parameters.skip,
        Parameters.tags,
        Parameters.apiVersion
    ],
    urlParameters: [
        Parameters.$host,
        Parameters.resourceGroupName,
        Parameters.serviceName,
        Parameters.subscriptionId,
        Parameters.apiId,
        Parameters.nextLink
    ],
    headerParameters: [Parameters.accept],
    serializer
};
//# sourceMappingURL=apiOperation.js.map