/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
/** Class containing ApiPolicy operations. */
export class ApiPolicyImpl {
    /**
     * Initialize a new instance of the class ApiPolicy class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Get the policy configuration at the API level.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param apiId API revision identifier. Must be unique in the current API Management service instance.
     *              Non-current revision has ;rev=n as a suffix where n is the revision number.
     * @param options The options parameters.
     */
    listByApi(resourceGroupName, serviceName, apiId, options) {
        return this.client.sendOperationRequest({ resourceGroupName, serviceName, apiId, options }, listByApiOperationSpec);
    }
    /**
     * Gets the entity state (Etag) version of the API policy specified by its identifier.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param apiId API revision identifier. Must be unique in the current API Management service instance.
     *              Non-current revision has ;rev=n as a suffix where n is the revision number.
     * @param policyId The identifier of the Policy.
     * @param options The options parameters.
     */
    getEntityTag(resourceGroupName, serviceName, apiId, policyId, options) {
        return this.client.sendOperationRequest({ resourceGroupName, serviceName, apiId, policyId, options }, getEntityTagOperationSpec);
    }
    /**
     * Get the policy configuration at the API level.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param apiId API revision identifier. Must be unique in the current API Management service instance.
     *              Non-current revision has ;rev=n as a suffix where n is the revision number.
     * @param policyId The identifier of the Policy.
     * @param options The options parameters.
     */
    get(resourceGroupName, serviceName, apiId, policyId, options) {
        return this.client.sendOperationRequest({ resourceGroupName, serviceName, apiId, policyId, options }, getOperationSpec);
    }
    /**
     * Creates or updates policy configuration for the API.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param apiId API revision identifier. Must be unique in the current API Management service instance.
     *              Non-current revision has ;rev=n as a suffix where n is the revision number.
     * @param policyId The identifier of the Policy.
     * @param parameters The policy contents to apply.
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName, serviceName, apiId, policyId, parameters, options) {
        return this.client.sendOperationRequest({ resourceGroupName, serviceName, apiId, policyId, parameters, options }, createOrUpdateOperationSpec);
    }
    /**
     * Deletes the policy configuration at the Api.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param apiId API revision identifier. Must be unique in the current API Management service instance.
     *              Non-current revision has ;rev=n as a suffix where n is the revision number.
     * @param policyId The identifier of the Policy.
     * @param ifMatch ETag of the Entity. ETag should match the current entity state from the header
     *                response of the GET request or it should be * for unconditional update.
     * @param options The options parameters.
     */
    delete(resourceGroupName, serviceName, apiId, policyId, ifMatch, options) {
        return this.client.sendOperationRequest({ resourceGroupName, serviceName, apiId, policyId, ifMatch, options }, deleteOperationSpec);
    }
}
// Operation Specifications
const xmlSerializer = coreClient.createSerializer(Mappers, /* isXml */ true);
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);
const listByApiOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{apiId}/policies",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.PolicyCollection
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.resourceGroupName,
        Parameters.serviceName,
        Parameters.subscriptionId,
        Parameters.apiId
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const getEntityTagOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{apiId}/policies/{policyId}",
    httpMethod: "HEAD",
    responses: {
        200: {
            headersMapper: Mappers.ApiPolicyGetEntityTagHeaders
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.resourceGroupName,
        Parameters.serviceName,
        Parameters.subscriptionId,
        Parameters.apiId,
        Parameters.policyId
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const getOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{apiId}/policies/{policyId}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.PolicyContract,
            headersMapper: Mappers.ApiPolicyGetHeaders
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    queryParameters: [Parameters.apiVersion, Parameters.format],
    urlParameters: [
        Parameters.$host,
        Parameters.resourceGroupName,
        Parameters.serviceName,
        Parameters.subscriptionId,
        Parameters.apiId,
        Parameters.policyId
    ],
    headerParameters: [Parameters.accept1],
    isXML: true,
    serializer: xmlSerializer
};
const createOrUpdateOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{apiId}/policies/{policyId}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: Mappers.PolicyContract,
            headersMapper: Mappers.ApiPolicyCreateOrUpdateHeaders
        },
        201: {
            bodyMapper: Mappers.PolicyContract,
            headersMapper: Mappers.ApiPolicyCreateOrUpdateHeaders
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    requestBody: Parameters.parameters5,
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.resourceGroupName,
        Parameters.serviceName,
        Parameters.subscriptionId,
        Parameters.apiId,
        Parameters.policyId
    ],
    headerParameters: [
        Parameters.accept,
        Parameters.contentType,
        Parameters.ifMatch
    ],
    mediaType: "json",
    serializer
};
const deleteOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{apiId}/policies/{policyId}",
    httpMethod: "DELETE",
    responses: {
        200: {},
        204: {},
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.resourceGroupName,
        Parameters.serviceName,
        Parameters.subscriptionId,
        Parameters.apiId,
        Parameters.policyId
    ],
    headerParameters: [Parameters.accept, Parameters.ifMatch1],
    serializer
};
//# sourceMappingURL=apiPolicy.js.map