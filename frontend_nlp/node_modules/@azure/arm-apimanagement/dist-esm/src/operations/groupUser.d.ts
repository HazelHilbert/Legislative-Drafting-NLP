import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { GroupUser } from "../operationsInterfaces";
import { ApiManagementClient } from "../apiManagementClient";
import { UserContract, GroupUserListOptionalParams, GroupUserCheckEntityExistsOptionalParams, GroupUserCheckEntityExistsResponse, GroupUserCreateOptionalParams, GroupUserCreateResponse, GroupUserDeleteOptionalParams } from "../models";
/** Class containing GroupUser operations. */
export declare class GroupUserImpl implements GroupUser {
    private readonly client;
    /**
     * Initialize a new instance of the class GroupUser class.
     * @param client Reference to the service client
     */
    constructor(client: ApiManagementClient);
    /**
     * Lists a collection of user entities associated with the group.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param groupId Group identifier. Must be unique in the current API Management service instance.
     * @param options The options parameters.
     */
    list(resourceGroupName: string, serviceName: string, groupId: string, options?: GroupUserListOptionalParams): PagedAsyncIterableIterator<UserContract>;
    private listPagingPage;
    private listPagingAll;
    /**
     * Lists a collection of user entities associated with the group.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param groupId Group identifier. Must be unique in the current API Management service instance.
     * @param options The options parameters.
     */
    private _list;
    /**
     * Checks that user entity specified by identifier is associated with the group entity.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param groupId Group identifier. Must be unique in the current API Management service instance.
     * @param userId User identifier. Must be unique in the current API Management service instance.
     * @param options The options parameters.
     */
    checkEntityExists(resourceGroupName: string, serviceName: string, groupId: string, userId: string, options?: GroupUserCheckEntityExistsOptionalParams): Promise<GroupUserCheckEntityExistsResponse>;
    /**
     * Add existing user to existing group
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param groupId Group identifier. Must be unique in the current API Management service instance.
     * @param userId User identifier. Must be unique in the current API Management service instance.
     * @param options The options parameters.
     */
    create(resourceGroupName: string, serviceName: string, groupId: string, userId: string, options?: GroupUserCreateOptionalParams): Promise<GroupUserCreateResponse>;
    /**
     * Remove existing user from existing group.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param groupId Group identifier. Must be unique in the current API Management service instance.
     * @param userId User identifier. Must be unique in the current API Management service instance.
     * @param options The options parameters.
     */
    delete(resourceGroupName: string, serviceName: string, groupId: string, userId: string, options?: GroupUserDeleteOptionalParams): Promise<void>;
    /**
     * ListNext
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param groupId Group identifier. Must be unique in the current API Management service instance.
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    private _listNext;
}
//# sourceMappingURL=groupUser.d.ts.map