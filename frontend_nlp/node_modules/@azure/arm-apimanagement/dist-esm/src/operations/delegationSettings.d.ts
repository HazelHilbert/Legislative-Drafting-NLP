import { DelegationSettings } from "../operationsInterfaces";
import { ApiManagementClient } from "../apiManagementClient";
import { DelegationSettingsGetEntityTagOptionalParams, DelegationSettingsGetEntityTagResponse, DelegationSettingsGetOptionalParams, DelegationSettingsGetResponse, PortalDelegationSettings, DelegationSettingsUpdateOptionalParams, DelegationSettingsCreateOrUpdateOptionalParams, DelegationSettingsCreateOrUpdateResponse, DelegationSettingsListSecretsOptionalParams, DelegationSettingsListSecretsResponse } from "../models";
/** Class containing DelegationSettings operations. */
export declare class DelegationSettingsImpl implements DelegationSettings {
    private readonly client;
    /**
     * Initialize a new instance of the class DelegationSettings class.
     * @param client Reference to the service client
     */
    constructor(client: ApiManagementClient);
    /**
     * Gets the entity state (Etag) version of the DelegationSettings.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param options The options parameters.
     */
    getEntityTag(resourceGroupName: string, serviceName: string, options?: DelegationSettingsGetEntityTagOptionalParams): Promise<DelegationSettingsGetEntityTagResponse>;
    /**
     * Get Delegation Settings for the Portal.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, serviceName: string, options?: DelegationSettingsGetOptionalParams): Promise<DelegationSettingsGetResponse>;
    /**
     * Update Delegation settings.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param ifMatch ETag of the Entity. ETag should match the current entity state from the header
     *                response of the GET request or it should be * for unconditional update.
     * @param parameters Update Delegation settings.
     * @param options The options parameters.
     */
    update(resourceGroupName: string, serviceName: string, ifMatch: string, parameters: PortalDelegationSettings, options?: DelegationSettingsUpdateOptionalParams): Promise<void>;
    /**
     * Create or Update Delegation settings.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param parameters Create or update parameters.
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName: string, serviceName: string, parameters: PortalDelegationSettings, options?: DelegationSettingsCreateOrUpdateOptionalParams): Promise<DelegationSettingsCreateOrUpdateResponse>;
    /**
     * Gets the secret validation key of the DelegationSettings.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param options The options parameters.
     */
    listSecrets(resourceGroupName: string, serviceName: string, options?: DelegationSettingsListSecretsOptionalParams): Promise<DelegationSettingsListSecretsResponse>;
}
//# sourceMappingURL=delegationSettings.d.ts.map