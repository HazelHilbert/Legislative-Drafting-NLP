import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { Product } from "../operationsInterfaces";
import { ApiManagementClient } from "../apiManagementClient";
import { ProductContract, ProductListByServiceOptionalParams, TagResourceContract, ProductListByTagsOptionalParams, ProductGetEntityTagOptionalParams, ProductGetEntityTagResponse, ProductGetOptionalParams, ProductGetResponse, ProductCreateOrUpdateOptionalParams, ProductCreateOrUpdateResponse, ProductUpdateParameters, ProductUpdateOptionalParams, ProductUpdateResponse, ProductDeleteOptionalParams } from "../models";
/** Class containing Product operations. */
export declare class ProductImpl implements Product {
    private readonly client;
    /**
     * Initialize a new instance of the class Product class.
     * @param client Reference to the service client
     */
    constructor(client: ApiManagementClient);
    /**
     * Lists a collection of products in the specified service instance.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param options The options parameters.
     */
    listByService(resourceGroupName: string, serviceName: string, options?: ProductListByServiceOptionalParams): PagedAsyncIterableIterator<ProductContract>;
    private listByServicePagingPage;
    private listByServicePagingAll;
    /**
     * Lists a collection of products associated with tags.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param options The options parameters.
     */
    listByTags(resourceGroupName: string, serviceName: string, options?: ProductListByTagsOptionalParams): PagedAsyncIterableIterator<TagResourceContract>;
    private listByTagsPagingPage;
    private listByTagsPagingAll;
    /**
     * Lists a collection of products in the specified service instance.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param options The options parameters.
     */
    private _listByService;
    /**
     * Gets the entity state (Etag) version of the product specified by its identifier.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param productId Product identifier. Must be unique in the current API Management service instance.
     * @param options The options parameters.
     */
    getEntityTag(resourceGroupName: string, serviceName: string, productId: string, options?: ProductGetEntityTagOptionalParams): Promise<ProductGetEntityTagResponse>;
    /**
     * Gets the details of the product specified by its identifier.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param productId Product identifier. Must be unique in the current API Management service instance.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, serviceName: string, productId: string, options?: ProductGetOptionalParams): Promise<ProductGetResponse>;
    /**
     * Creates or Updates a product.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param productId Product identifier. Must be unique in the current API Management service instance.
     * @param parameters Create or update parameters.
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName: string, serviceName: string, productId: string, parameters: ProductContract, options?: ProductCreateOrUpdateOptionalParams): Promise<ProductCreateOrUpdateResponse>;
    /**
     * Update existing product details.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param productId Product identifier. Must be unique in the current API Management service instance.
     * @param ifMatch ETag of the Entity. ETag should match the current entity state from the header
     *                response of the GET request or it should be * for unconditional update.
     * @param parameters Update parameters.
     * @param options The options parameters.
     */
    update(resourceGroupName: string, serviceName: string, productId: string, ifMatch: string, parameters: ProductUpdateParameters, options?: ProductUpdateOptionalParams): Promise<ProductUpdateResponse>;
    /**
     * Delete product.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param productId Product identifier. Must be unique in the current API Management service instance.
     * @param ifMatch ETag of the Entity. ETag should match the current entity state from the header
     *                response of the GET request or it should be * for unconditional update.
     * @param options The options parameters.
     */
    delete(resourceGroupName: string, serviceName: string, productId: string, ifMatch: string, options?: ProductDeleteOptionalParams): Promise<void>;
    /**
     * Lists a collection of products associated with tags.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param options The options parameters.
     */
    private _listByTags;
    /**
     * ListByServiceNext
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param nextLink The nextLink from the previous successful call to the ListByService method.
     * @param options The options parameters.
     */
    private _listByServiceNext;
    /**
     * ListByTagsNext
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param nextLink The nextLink from the previous successful call to the ListByTags method.
     * @param options The options parameters.
     */
    private _listByTagsNext;
}
//# sourceMappingURL=product.d.ts.map