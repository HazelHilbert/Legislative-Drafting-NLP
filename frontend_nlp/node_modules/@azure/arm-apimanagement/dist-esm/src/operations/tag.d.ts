import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { Tag } from "../operationsInterfaces";
import { ApiManagementClient } from "../apiManagementClient";
import { TagContract, TagListByOperationOptionalParams, TagListByApiOptionalParams, TagListByProductOptionalParams, TagListByServiceOptionalParams, TagGetEntityStateByOperationOptionalParams, TagGetEntityStateByOperationResponse, TagGetByOperationOptionalParams, TagGetByOperationResponse, TagAssignToOperationOptionalParams, TagAssignToOperationResponse, TagDetachFromOperationOptionalParams, TagGetEntityStateByApiOptionalParams, TagGetEntityStateByApiResponse, TagGetByApiOptionalParams, TagGetByApiResponse, TagAssignToApiOptionalParams, TagAssignToApiResponse, TagDetachFromApiOptionalParams, TagGetEntityStateByProductOptionalParams, TagGetEntityStateByProductResponse, TagGetByProductOptionalParams, TagGetByProductResponse, TagAssignToProductOptionalParams, TagAssignToProductResponse, TagDetachFromProductOptionalParams, TagGetEntityStateOptionalParams, TagGetEntityStateResponse, TagGetOptionalParams, TagGetResponse, TagCreateUpdateParameters, TagCreateOrUpdateOptionalParams, TagCreateOrUpdateResponse, TagUpdateOptionalParams, TagUpdateResponse, TagDeleteOptionalParams } from "../models";
/** Class containing Tag operations. */
export declare class TagImpl implements Tag {
    private readonly client;
    /**
     * Initialize a new instance of the class Tag class.
     * @param client Reference to the service client
     */
    constructor(client: ApiManagementClient);
    /**
     * Lists all Tags associated with the Operation.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param apiId API revision identifier. Must be unique in the current API Management service instance.
     *              Non-current revision has ;rev=n as a suffix where n is the revision number.
     * @param operationId Operation identifier within an API. Must be unique in the current API Management
     *                    service instance.
     * @param options The options parameters.
     */
    listByOperation(resourceGroupName: string, serviceName: string, apiId: string, operationId: string, options?: TagListByOperationOptionalParams): PagedAsyncIterableIterator<TagContract>;
    private listByOperationPagingPage;
    private listByOperationPagingAll;
    /**
     * Lists all Tags associated with the API.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param apiId API revision identifier. Must be unique in the current API Management service instance.
     *              Non-current revision has ;rev=n as a suffix where n is the revision number.
     * @param options The options parameters.
     */
    listByApi(resourceGroupName: string, serviceName: string, apiId: string, options?: TagListByApiOptionalParams): PagedAsyncIterableIterator<TagContract>;
    private listByApiPagingPage;
    private listByApiPagingAll;
    /**
     * Lists all Tags associated with the Product.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param productId Product identifier. Must be unique in the current API Management service instance.
     * @param options The options parameters.
     */
    listByProduct(resourceGroupName: string, serviceName: string, productId: string, options?: TagListByProductOptionalParams): PagedAsyncIterableIterator<TagContract>;
    private listByProductPagingPage;
    private listByProductPagingAll;
    /**
     * Lists a collection of tags defined within a service instance.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param options The options parameters.
     */
    listByService(resourceGroupName: string, serviceName: string, options?: TagListByServiceOptionalParams): PagedAsyncIterableIterator<TagContract>;
    private listByServicePagingPage;
    private listByServicePagingAll;
    /**
     * Lists all Tags associated with the Operation.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param apiId API revision identifier. Must be unique in the current API Management service instance.
     *              Non-current revision has ;rev=n as a suffix where n is the revision number.
     * @param operationId Operation identifier within an API. Must be unique in the current API Management
     *                    service instance.
     * @param options The options parameters.
     */
    private _listByOperation;
    /**
     * Gets the entity state version of the tag specified by its identifier.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param apiId API revision identifier. Must be unique in the current API Management service instance.
     *              Non-current revision has ;rev=n as a suffix where n is the revision number.
     * @param operationId Operation identifier within an API. Must be unique in the current API Management
     *                    service instance.
     * @param tagId Tag identifier. Must be unique in the current API Management service instance.
     * @param options The options parameters.
     */
    getEntityStateByOperation(resourceGroupName: string, serviceName: string, apiId: string, operationId: string, tagId: string, options?: TagGetEntityStateByOperationOptionalParams): Promise<TagGetEntityStateByOperationResponse>;
    /**
     * Get tag associated with the Operation.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param apiId API revision identifier. Must be unique in the current API Management service instance.
     *              Non-current revision has ;rev=n as a suffix where n is the revision number.
     * @param operationId Operation identifier within an API. Must be unique in the current API Management
     *                    service instance.
     * @param tagId Tag identifier. Must be unique in the current API Management service instance.
     * @param options The options parameters.
     */
    getByOperation(resourceGroupName: string, serviceName: string, apiId: string, operationId: string, tagId: string, options?: TagGetByOperationOptionalParams): Promise<TagGetByOperationResponse>;
    /**
     * Assign tag to the Operation.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param apiId API revision identifier. Must be unique in the current API Management service instance.
     *              Non-current revision has ;rev=n as a suffix where n is the revision number.
     * @param operationId Operation identifier within an API. Must be unique in the current API Management
     *                    service instance.
     * @param tagId Tag identifier. Must be unique in the current API Management service instance.
     * @param options The options parameters.
     */
    assignToOperation(resourceGroupName: string, serviceName: string, apiId: string, operationId: string, tagId: string, options?: TagAssignToOperationOptionalParams): Promise<TagAssignToOperationResponse>;
    /**
     * Detach the tag from the Operation.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param apiId API revision identifier. Must be unique in the current API Management service instance.
     *              Non-current revision has ;rev=n as a suffix where n is the revision number.
     * @param operationId Operation identifier within an API. Must be unique in the current API Management
     *                    service instance.
     * @param tagId Tag identifier. Must be unique in the current API Management service instance.
     * @param options The options parameters.
     */
    detachFromOperation(resourceGroupName: string, serviceName: string, apiId: string, operationId: string, tagId: string, options?: TagDetachFromOperationOptionalParams): Promise<void>;
    /**
     * Lists all Tags associated with the API.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param apiId API revision identifier. Must be unique in the current API Management service instance.
     *              Non-current revision has ;rev=n as a suffix where n is the revision number.
     * @param options The options parameters.
     */
    private _listByApi;
    /**
     * Gets the entity state version of the tag specified by its identifier.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param apiId API revision identifier. Must be unique in the current API Management service instance.
     *              Non-current revision has ;rev=n as a suffix where n is the revision number.
     * @param tagId Tag identifier. Must be unique in the current API Management service instance.
     * @param options The options parameters.
     */
    getEntityStateByApi(resourceGroupName: string, serviceName: string, apiId: string, tagId: string, options?: TagGetEntityStateByApiOptionalParams): Promise<TagGetEntityStateByApiResponse>;
    /**
     * Get tag associated with the API.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param apiId API revision identifier. Must be unique in the current API Management service instance.
     *              Non-current revision has ;rev=n as a suffix where n is the revision number.
     * @param tagId Tag identifier. Must be unique in the current API Management service instance.
     * @param options The options parameters.
     */
    getByApi(resourceGroupName: string, serviceName: string, apiId: string, tagId: string, options?: TagGetByApiOptionalParams): Promise<TagGetByApiResponse>;
    /**
     * Assign tag to the Api.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param apiId API revision identifier. Must be unique in the current API Management service instance.
     *              Non-current revision has ;rev=n as a suffix where n is the revision number.
     * @param tagId Tag identifier. Must be unique in the current API Management service instance.
     * @param options The options parameters.
     */
    assignToApi(resourceGroupName: string, serviceName: string, apiId: string, tagId: string, options?: TagAssignToApiOptionalParams): Promise<TagAssignToApiResponse>;
    /**
     * Detach the tag from the Api.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param apiId API revision identifier. Must be unique in the current API Management service instance.
     *              Non-current revision has ;rev=n as a suffix where n is the revision number.
     * @param tagId Tag identifier. Must be unique in the current API Management service instance.
     * @param options The options parameters.
     */
    detachFromApi(resourceGroupName: string, serviceName: string, apiId: string, tagId: string, options?: TagDetachFromApiOptionalParams): Promise<void>;
    /**
     * Lists all Tags associated with the Product.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param productId Product identifier. Must be unique in the current API Management service instance.
     * @param options The options parameters.
     */
    private _listByProduct;
    /**
     * Gets the entity state version of the tag specified by its identifier.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param productId Product identifier. Must be unique in the current API Management service instance.
     * @param tagId Tag identifier. Must be unique in the current API Management service instance.
     * @param options The options parameters.
     */
    getEntityStateByProduct(resourceGroupName: string, serviceName: string, productId: string, tagId: string, options?: TagGetEntityStateByProductOptionalParams): Promise<TagGetEntityStateByProductResponse>;
    /**
     * Get tag associated with the Product.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param productId Product identifier. Must be unique in the current API Management service instance.
     * @param tagId Tag identifier. Must be unique in the current API Management service instance.
     * @param options The options parameters.
     */
    getByProduct(resourceGroupName: string, serviceName: string, productId: string, tagId: string, options?: TagGetByProductOptionalParams): Promise<TagGetByProductResponse>;
    /**
     * Assign tag to the Product.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param productId Product identifier. Must be unique in the current API Management service instance.
     * @param tagId Tag identifier. Must be unique in the current API Management service instance.
     * @param options The options parameters.
     */
    assignToProduct(resourceGroupName: string, serviceName: string, productId: string, tagId: string, options?: TagAssignToProductOptionalParams): Promise<TagAssignToProductResponse>;
    /**
     * Detach the tag from the Product.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param productId Product identifier. Must be unique in the current API Management service instance.
     * @param tagId Tag identifier. Must be unique in the current API Management service instance.
     * @param options The options parameters.
     */
    detachFromProduct(resourceGroupName: string, serviceName: string, productId: string, tagId: string, options?: TagDetachFromProductOptionalParams): Promise<void>;
    /**
     * Lists a collection of tags defined within a service instance.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param options The options parameters.
     */
    private _listByService;
    /**
     * Gets the entity state version of the tag specified by its identifier.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param tagId Tag identifier. Must be unique in the current API Management service instance.
     * @param options The options parameters.
     */
    getEntityState(resourceGroupName: string, serviceName: string, tagId: string, options?: TagGetEntityStateOptionalParams): Promise<TagGetEntityStateResponse>;
    /**
     * Gets the details of the tag specified by its identifier.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param tagId Tag identifier. Must be unique in the current API Management service instance.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, serviceName: string, tagId: string, options?: TagGetOptionalParams): Promise<TagGetResponse>;
    /**
     * Creates a tag.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param tagId Tag identifier. Must be unique in the current API Management service instance.
     * @param parameters Create parameters.
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName: string, serviceName: string, tagId: string, parameters: TagCreateUpdateParameters, options?: TagCreateOrUpdateOptionalParams): Promise<TagCreateOrUpdateResponse>;
    /**
     * Updates the details of the tag specified by its identifier.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param tagId Tag identifier. Must be unique in the current API Management service instance.
     * @param ifMatch ETag of the Entity. ETag should match the current entity state from the header
     *                response of the GET request or it should be * for unconditional update.
     * @param parameters Update parameters.
     * @param options The options parameters.
     */
    update(resourceGroupName: string, serviceName: string, tagId: string, ifMatch: string, parameters: TagCreateUpdateParameters, options?: TagUpdateOptionalParams): Promise<TagUpdateResponse>;
    /**
     * Deletes specific tag of the API Management service instance.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param tagId Tag identifier. Must be unique in the current API Management service instance.
     * @param ifMatch ETag of the Entity. ETag should match the current entity state from the header
     *                response of the GET request or it should be * for unconditional update.
     * @param options The options parameters.
     */
    delete(resourceGroupName: string, serviceName: string, tagId: string, ifMatch: string, options?: TagDeleteOptionalParams): Promise<void>;
    /**
     * ListByOperationNext
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param apiId API revision identifier. Must be unique in the current API Management service instance.
     *              Non-current revision has ;rev=n as a suffix where n is the revision number.
     * @param operationId Operation identifier within an API. Must be unique in the current API Management
     *                    service instance.
     * @param nextLink The nextLink from the previous successful call to the ListByOperation method.
     * @param options The options parameters.
     */
    private _listByOperationNext;
    /**
     * ListByApiNext
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param apiId API revision identifier. Must be unique in the current API Management service instance.
     *              Non-current revision has ;rev=n as a suffix where n is the revision number.
     * @param nextLink The nextLink from the previous successful call to the ListByApi method.
     * @param options The options parameters.
     */
    private _listByApiNext;
    /**
     * ListByProductNext
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param productId Product identifier. Must be unique in the current API Management service instance.
     * @param nextLink The nextLink from the previous successful call to the ListByProduct method.
     * @param options The options parameters.
     */
    private _listByProductNext;
    /**
     * ListByServiceNext
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param nextLink The nextLink from the previous successful call to the ListByService method.
     * @param options The options parameters.
     */
    private _listByServiceNext;
}
//# sourceMappingURL=tag.d.ts.map