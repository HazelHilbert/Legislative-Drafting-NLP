/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { __asyncValues, __awaiter } from "tslib";
import { env, Recorder, delay, isPlaybackMode, } from "@azure-tools/test-recorder";
import { createTestCredential } from "@azure-tools/test-credential";
import { assert } from "chai";
import { ApiManagementClient } from "../src/apiManagementClient";
const replaceableVariables = {
    AZURE_CLIENT_ID: "azure_client_id",
    AZURE_CLIENT_SECRET: "azure_client_secret",
    AZURE_TENANT_ID: "88888888-8888-8888-8888-888888888888",
    SUBSCRIPTION_ID: "azure_subscription_id"
};
const recorderOptions = {
    envSetupForPlayback: replaceableVariables
};
export const testPollingOptions = {
    updateIntervalInMs: isPlaybackMode() ? 0 : undefined,
};
describe("Apimanagement test", () => {
    let recorder;
    let subscriptionId;
    let client;
    let location;
    let resourceGroupName;
    let serviceName;
    beforeEach(function () {
        return __awaiter(this, void 0, void 0, function* () {
            recorder = new Recorder(this.currentTest);
            yield recorder.start(recorderOptions);
            subscriptionId = env.SUBSCRIPTION_ID || '';
            // This is an example of how the environment variables are used
            const credential = createTestCredential();
            client = new ApiManagementClient(credential, subscriptionId, recorder.configureClientOptions({}));
            location = "eastus";
            resourceGroupName = "myjstest";
            serviceName = "myserviceyyy1";
        });
    });
    afterEach(function () {
        return __awaiter(this, void 0, void 0, function* () {
            yield recorder.stop();
        });
    });
    function sleep(ms) {
        return new Promise(resolve => setTimeout(resolve, ms));
    }
    it("apiManagementService create test", function () {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield client.apiManagementService.beginCreateOrUpdateAndWait(resourceGroupName, serviceName, {
                location: location,
                sku: {
                    name: "Standard",
                    capacity: 1
                },
                publisherEmail: "foo@contoso.com",
                publisherName: "foo"
            }, testPollingOptions);
            assert.equal(res.name, serviceName);
        });
    }).timeout(3600000);
    it("apiManagementService get test", function () {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield client.apiManagementService.get(resourceGroupName, serviceName);
            assert.equal(res.name, serviceName);
        });
    });
    it("apiManagementService listByResourceGroup test", function () {
        var e_1, _a;
        return __awaiter(this, void 0, void 0, function* () {
            const resArray = new Array();
            try {
                for (var _b = __asyncValues(client.apiManagementService.listByResourceGroup(resourceGroupName)), _c; _c = yield _b.next(), !_c.done;) {
                    let item = _c.value;
                    resArray.push(item);
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield _a.call(_b);
                }
                finally { if (e_1) throw e_1.error; }
            }
            assert.equal(resArray.length, 1);
        });
    });
    it("apiManagementService update test", function () {
        return __awaiter(this, void 0, void 0, function* () {
            // this.timeout(3600000);
            let count = 0;
            while (count < 20) {
                count++;
                const res = yield client.apiManagementService.get(resourceGroupName, serviceName);
                if (res.provisioningState == "Succeeded") {
                    const res = yield client.apiManagementService.beginUpdateAndWait(resourceGroupName, serviceName, {
                        customProperties: {
                            "Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Protocols.Tls10": "false"
                        }
                    }, testPollingOptions);
                    assert.equal(res.type, "Microsoft.ApiManagement/service");
                    break;
                }
                else {
                    // The resource is activating
                    yield delay(300000);
                }
            }
        });
    }).timeout(3600000);
    it("apiManagementService delete test", function () {
        var e_2, _a;
        return __awaiter(this, void 0, void 0, function* () {
            let count = 0;
            while (count < 20) {
                count++;
                const res = yield client.apiManagementService.get(resourceGroupName, serviceName);
                if (res.provisioningState == "Succeeded") {
                    const res = yield client.apiManagementService.beginDeleteAndWait(resourceGroupName, serviceName, testPollingOptions);
                    const purge_resource = yield client.deletedServices.beginPurgeAndWait(serviceName, location, testPollingOptions);
                    const resArray = new Array();
                    try {
                        for (var _b = (e_2 = void 0, __asyncValues(client.apiManagementService.listByResourceGroup(resourceGroupName))), _c; _c = yield _b.next(), !_c.done;) {
                            let item = _c.value;
                            resArray.push(item);
                        }
                    }
                    catch (e_2_1) { e_2 = { error: e_2_1 }; }
                    finally {
                        try {
                            if (_c && !_c.done && (_a = _b.return)) yield _a.call(_b);
                        }
                        finally { if (e_2) throw e_2.error; }
                    }
                    assert.equal(resArray.length, 0);
                    break;
                }
                else {
                    // The resource is activating
                    yield delay(300000);
                }
            }
        });
    }).timeout(3600000);
});
//# sourceMappingURL=apimanagement_examples.js.map