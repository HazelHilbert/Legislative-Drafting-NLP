{"version":3,"file":"BrowserPerformanceClient.js","sources":["../../src/telemetry/BrowserPerformanceClient.ts"],"sourcesContent":["/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport {\r\n    Logger,\r\n    PerformanceEvent,\r\n    PerformanceEvents,\r\n    IPerformanceClient,\r\n    PerformanceClient,\r\n    IPerformanceMeasurement,\r\n    InProgressPerformanceEvent,\r\n    ApplicationTelemetry,\r\n    SubMeasurement,\r\n    PreQueueEvent\r\n} from \"@azure/msal-common\";\r\nimport { CryptoOptions } from \"../config/Configuration\";\r\nimport { BrowserCrypto } from \"../crypto/BrowserCrypto\";\r\nimport { GuidGenerator } from \"../crypto/GuidGenerator\";\r\nimport { BrowserPerformanceMeasurement } from \"./BrowserPerformanceMeasurement\";\r\n\r\nexport class BrowserPerformanceClient extends PerformanceClient implements IPerformanceClient {\r\n    private browserCrypto: BrowserCrypto;\r\n    private guidGenerator: GuidGenerator;\r\n\r\n    constructor(clientId: string, authority: string, logger: Logger, libraryName: string, libraryVersion: string, applicationTelemetry: ApplicationTelemetry, cryptoOptions: CryptoOptions) {\r\n        super(clientId, authority, logger, libraryName, libraryVersion, applicationTelemetry);\r\n        this.browserCrypto = new BrowserCrypto(this.logger, cryptoOptions);\r\n        this.guidGenerator = new GuidGenerator(this.browserCrypto);\r\n    }\r\n\r\n    startPerformanceMeasuremeant(measureName: string, correlationId: string): IPerformanceMeasurement {\r\n        return new BrowserPerformanceMeasurement(measureName, correlationId);\r\n    }\r\n\r\n    generateId() : string {\r\n        return this.guidGenerator.generateGuid();\r\n    }\r\n\r\n    private getPageVisibility(): string | null {\r\n        return document.visibilityState?.toString() || null;\r\n    }\r\n\r\n    private deleteIncompleteSubMeasurements(inProgressEvent: InProgressPerformanceEvent): void {\r\n        const rootEvent = this.eventsByCorrelationId.get(inProgressEvent.event.correlationId);\r\n        const isRootEvent = rootEvent && rootEvent.eventId === inProgressEvent.event.eventId;\r\n        const incompleteMeasurements: SubMeasurement[] = [];\r\n        if (isRootEvent && rootEvent?.incompleteSubMeasurements) {\r\n            rootEvent.incompleteSubMeasurements.forEach((subMeasurement) => {\r\n                incompleteMeasurements.push({...subMeasurement});\r\n            });\r\n        }\r\n        // Clean up remaining marks for incomplete sub-measurements\r\n        if (incompleteMeasurements.length > 0) {\r\n            BrowserPerformanceMeasurement.flushMeasurements(inProgressEvent.event.correlationId, incompleteMeasurements);\r\n        }\r\n    }\r\n\r\n    supportsBrowserPerformanceNow(): boolean {\r\n        return typeof window !== \"undefined\" &&\r\n            typeof window.performance !== \"undefined\" &&\r\n            typeof window.performance.now === \"function\";\r\n    }\r\n\r\n    /**\r\n     * Starts measuring performance for a given operation. Returns a function that should be used to end the measurement.\r\n     * Also captures browser page visibilityState.\r\n     *\r\n     * @param {PerformanceEvents} measureName\r\n     * @param {?string} [correlationId]\r\n     * @returns {((event?: Partial<PerformanceEvent>) => PerformanceEvent| null)}\r\n     */\r\n    startMeasurement(measureName: PerformanceEvents, correlationId?: string): InProgressPerformanceEvent {\r\n        // Capture page visibilityState and then invoke start/end measurement\r\n        const startPageVisibility = this.getPageVisibility();\r\n\r\n        const inProgressEvent = super.startMeasurement(measureName, correlationId);\r\n\r\n        return {\r\n            ...inProgressEvent,\r\n            endMeasurement: (event?: Partial<PerformanceEvent>): PerformanceEvent | null => {\r\n                const res = inProgressEvent.endMeasurement({\r\n                    startPageVisibility,\r\n                    endPageVisibility: this.getPageVisibility(),\r\n                    ...event\r\n                });\r\n                this.deleteIncompleteSubMeasurements(inProgressEvent);\r\n\r\n                return res;\r\n            },\r\n            discardMeasurement: () => {\r\n                inProgressEvent.discardMeasurement();\r\n                this.deleteIncompleteSubMeasurements(inProgressEvent);\r\n                inProgressEvent.measurement.flushMeasurement();\r\n            }\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Adds pre-queue time to preQueueTimeByCorrelationId map.\r\n     * @param {PerformanceEvents} eventName\r\n     * @param {?string} correlationId\r\n     * @returns\r\n     */\r\n    setPreQueueTime(eventName: PerformanceEvents, correlationId?: string): void {\r\n        if (!this.supportsBrowserPerformanceNow()) {\r\n            this.logger.trace(`BrowserPerformanceClient: window performance API not available, unable to set telemetry queue time for ${eventName}`);\r\n            return;\r\n        }\r\n\r\n        if (!correlationId) {\r\n            this.logger.trace(`BrowserPerformanceClient: correlationId for ${eventName} not provided, unable to set telemetry queue time`);\r\n            return;\r\n        }\r\n\r\n        const preQueueEvent: PreQueueEvent | undefined = this.preQueueTimeByCorrelationId.get(correlationId);\r\n        /**\r\n         * Manually complete queue measurement if there is an incomplete pre-queue event.\r\n         * Incomplete pre-queue events are instrumentation bugs that should be fixed.\r\n         */\r\n        if (preQueueEvent) {\r\n            this.logger.trace(`BrowserPerformanceClient: Incomplete pre-queue ${preQueueEvent.name} found`, correlationId);\r\n            this.addQueueMeasurement(preQueueEvent.name, correlationId, undefined, true);\r\n        }\r\n        this.preQueueTimeByCorrelationId.set(correlationId, { name: eventName, time: window.performance.now() });\r\n    }\r\n\r\n    /**\r\n     * Calculates and adds queue time measurement for given performance event.\r\n     *\r\n     * @param {PerformanceEvents} eventName\r\n     * @param {?string} correlationId\r\n     * @param {?number} queueTime\r\n     * @param {?boolean} manuallyCompleted - indicator for manually completed queue measurements\r\n     * @returns\r\n     */\r\n    addQueueMeasurement(eventName: PerformanceEvents, correlationId?: string, queueTime?: number, manuallyCompleted?: boolean): void {\r\n        if (!this.supportsBrowserPerformanceNow()) {\r\n            this.logger.trace(`BrowserPerformanceClient: window performance API not available, unable to add queue measurement for ${eventName}`);\r\n            return;\r\n        }\r\n\r\n        if (!correlationId) {\r\n            this.logger.trace(`BrowserPerformanceClient: correlationId for ${eventName} not provided, unable to add queue measurement`);\r\n            return;\r\n        }\r\n\r\n        const preQueueTime = super.getPreQueueTime(eventName, correlationId);\r\n        if (!preQueueTime) {\r\n            return;\r\n        }\r\n\r\n        const currentTime = window.performance.now();\r\n        const resQueueTime = queueTime || super.calculateQueuedTime(preQueueTime, currentTime);\r\n\r\n        return super.addQueueMeasurement(eventName, correlationId, resQueueTime, manuallyCompleted);\r\n    }\r\n}\r\n"],"names":[],"mappings":"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"}