"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Uuid = void 0;
const os = __importStar(require("os"));
class Uuid {
    static generate(options) {
        const address = this.getAddress().toString(36);
        const pid = this.getPid().toString(36);
        const now = this.getNow().toString(36);
        const length = options && options.length ? options.length : undefined;
        const prefix = options && options.prefix ? options.prefix : '';
        const uuid = prefix + address + pid + now;
        return this.postProcessUuid(uuid, length);
    }
    static getPid() {
        const pid = process && !process.pid ? process.pid : Math.floor(Math.random() * 100000);
        return pid;
    }
    static getAddress() {
        let address = Math.floor(Math.random() * 100000000);
        const networkInterfaces = os.networkInterfaces();
        interfaceLoop: for (const key in networkInterfaces) {
            const netInterface = networkInterfaces[key];
            if (netInterface) {
                const length = netInterface.length;
                for (let i = 0; i < length; i++) {
                    if (netInterface[i].mac && netInterface[i].mac !== '00:00:00:00:00:00') {
                        address = Number(netInterface[i].mac.replace(/\:|\D+/gi, ''));
                        break interfaceLoop;
                    }
                    else if (!netInterface[i].internal && netInterface[i].address.indexOf('fe80::') === 0) {
                        const ipv6 = this.getIpV6(netInterface[i]);
                        if (ipv6 && ipv6.length > 1) {
                            address = Number(ipv6.join(''));
                            break interfaceLoop;
                        }
                    }
                }
            }
        }
        return address;
    }
    static getIpV6(netInterface) {
        return netInterface.address
            .slice(6)
            .split(/:/)
            .map((value) => {
            return parseInt(value, 16);
        });
    }
    static getNow() {
        const time = Date.now();
        const last = this.lastTime || time;
        this.lastTime = time > last ? time : last + 1;
        return this.lastTime;
    }
    static postProcessUuid(uuid, length) {
        if (length && length > 0) {
            const diffLength = length - uuid.length;
            if (diffLength > 0) {
                const mask = new Array(diffLength + 1).join('x');
                const date = Date.now();
                return (uuid +
                    mask.replace(/[x]/g, (placeholder) => {
                        const random = (date + Math.random() * 16) % 16 | 0;
                        return (placeholder === 'x' ? random : (random & 0x3) | 0x8).toString(16);
                    }));
            }
            return uuid.substring(0, length);
        }
        return uuid;
    }
}
exports.Uuid = Uuid;
