"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
exports.environmentManager = void 0;
const tslib_1 = require("tslib");
const teamsfx_api_1 = require("@microsoft/teamsfx-api");
const ajv_1 = tslib_1.__importDefault(require("ajv"));
const draft6MetaSchema = tslib_1.__importStar(require("ajv/dist/refs/json-schema-draft-06.json"));
const fs_extra_1 = tslib_1.__importDefault(require("fs-extra"));
const envUtil_1 = require("../component/utils/envUtil");
const common_1 = require("../error/common");
const environmentName_1 = require("./environmentName");
class EnvironmentManager {
    constructor() {
        this.ajv = new ajv_1.default();
        this.ajv.addMetaSchema(draft6MetaSchema);
    }
    async listAllEnvConfigs(projectPath) {
        if (!(await fs_extra_1.default.pathExists(projectPath))) {
            return teamsfx_api_1.err(new common_1.FileNotFoundError("EnvironmentManager", projectPath));
        }
        const allEnvsRes = await envUtil_1.envUtil.listEnv(projectPath);
        if (allEnvsRes.isErr())
            return teamsfx_api_1.err(allEnvsRes.error);
        return teamsfx_api_1.ok(allEnvsRes.value);
    }
    async listRemoteEnvConfigs(projectPath, returnErrorIfEmpty = false) {
        if (!(await fs_extra_1.default.pathExists(projectPath))) {
            return teamsfx_api_1.err(new common_1.FileNotFoundError("EnvironmentManager", projectPath));
        }
        const allEnvsRes = await envUtil_1.envUtil.listEnv(projectPath);
        if (allEnvsRes.isErr())
            return teamsfx_api_1.err(allEnvsRes.error);
        const remoteEnvs = allEnvsRes.value.filter((env) => environmentName_1.environmentNameManager.isRemoteEnvironment(env));
        if (remoteEnvs.length === 0 && returnErrorIfEmpty)
            return teamsfx_api_1.err(new common_1.NoEnvFilesError("EnvironmentManager"));
        return teamsfx_api_1.ok(remoteEnvs);
    }
    async hasTestToolEnv(projectPath) {
        if (!(await fs_extra_1.default.pathExists(projectPath))) {
            return false;
        }
        const allEnvsRes = await envUtil_1.envUtil.listEnv(projectPath);
        if (allEnvsRes.isErr())
            return false;
        return allEnvsRes.value.includes(environmentName_1.environmentNameManager.getTestToolEnvName());
    }
    async getExistingNonRemoteEnvs(projectPath) {
        return [
            ...((await this.hasTestToolEnv(projectPath))
                ? [environmentName_1.environmentNameManager.getTestToolEnvName()]
                : []),
            environmentName_1.environmentNameManager.getLocalEnvName(),
        ];
    }
}
exports.environmentManager = new EnvironmentManager();
//# sourceMappingURL=environment.js.map