// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AppIdNotExist = exports.FailedToLoadManifestId = exports.NotAllowedMigrationError = exports.VideoFilterAppRemoteNotSupportedError = exports.NpmInstallError = exports.FailedToParseResourceIdError = exports.AbandonedProjectError = exports.IncompatibleProjectError = exports.UpgradeV3CanceledError = exports.ObjectIsUndefinedError = exports.ProjectEnvAlreadyExistError = exports.InvalidEnvNameError = exports.InvalidInputError = exports.NoProjectOpenedError = exports.CopyFileError = exports.MigrationError = exports.UpgradeSource = exports.CoreSource = void 0;
const teamsfx_api_1 = require("@microsoft/teamsfx-api");
const localizeUtils_1 = require("../common/localizeUtils");
exports.CoreSource = "Core";
exports.UpgradeSource = "Upgrade";
function MigrationError(e, name, helpLink) {
    return new teamsfx_api_1.UserError({
        name: name,
        source: exports.UpgradeSource,
        error: e,
        // the link show to user will be helpLink+ # + source + name
        helpLink: helpLink,
    });
}
exports.MigrationError = MigrationError;
function CopyFileError(e) {
    return new teamsfx_api_1.SystemError({
        name: "CopyFileError",
        source: exports.CoreSource,
        error: e,
    });
}
exports.CopyFileError = CopyFileError;
class NoProjectOpenedError extends teamsfx_api_1.UserError {
    constructor() {
        super({
            message: localizeUtils_1.getDefaultString("error.NoProjectOpenedError"),
            displayMessage: localizeUtils_1.getLocalizedString("error.NoProjectOpenedError"),
            source: exports.CoreSource,
        });
    }
}
exports.NoProjectOpenedError = NoProjectOpenedError;
function InvalidInputError(reason, inputs) {
    const txt = inputs ? `${reason}, inputs: ${JSON.stringify(inputs)}` : reason;
    return new teamsfx_api_1.UserError(exports.CoreSource, "InvalidInput", localizeUtils_1.getDefaultString("error.InvalidInputError", txt), localizeUtils_1.getLocalizedString("error.InvalidInputError", txt));
}
exports.InvalidInputError = InvalidInputError;
function InvalidEnvNameError() {
    return new teamsfx_api_1.UserError(exports.CoreSource, "InvalidEnvNameError", localizeUtils_1.getDefaultString("error.InvalidEnvNameError"), localizeUtils_1.getLocalizedString("error.InvalidEnvNameError"));
}
exports.InvalidEnvNameError = InvalidEnvNameError;
function ProjectEnvAlreadyExistError(env) {
    return new teamsfx_api_1.UserError(exports.CoreSource, "ProjectEnvAlreadyExistError", localizeUtils_1.getDefaultString("error.ProjectEnvAlreadyExistError", env), localizeUtils_1.getLocalizedString("error.ProjectEnvAlreadyExistError", env));
}
exports.ProjectEnvAlreadyExistError = ProjectEnvAlreadyExistError;
class ObjectIsUndefinedError extends teamsfx_api_1.SystemError {
    constructor(name) {
        super(exports.CoreSource, new.target.name, localizeUtils_1.getDefaultString("error.NotImplementedError", name), localizeUtils_1.getLocalizedString("error.NotImplementedError", name));
    }
}
exports.ObjectIsUndefinedError = ObjectIsUndefinedError;
function UpgradeV3CanceledError() {
    return new teamsfx_api_1.UserError(exports.CoreSource, "UserCancel", // @see tools.isUserCancelError()
    localizeUtils_1.getDefaultString("error.UpgradeV3CanceledError"), localizeUtils_1.getLocalizedString("error.UpgradeV3CanceledError"));
}
exports.UpgradeV3CanceledError = UpgradeV3CanceledError;
function IncompatibleProjectError(messageKey) {
    return new teamsfx_api_1.UserError(exports.CoreSource, "IncompatibleProject", localizeUtils_1.getDefaultString(messageKey), localizeUtils_1.getLocalizedString(messageKey));
}
exports.IncompatibleProjectError = IncompatibleProjectError;
function AbandonedProjectError() {
    return new teamsfx_api_1.UserError(exports.CoreSource, "AbandonedProject", localizeUtils_1.getDefaultString("core.migrationV3.abandonedProject"), localizeUtils_1.getLocalizedString("core.migrationV3.abandonedProject"));
}
exports.AbandonedProjectError = AbandonedProjectError;
function FailedToParseResourceIdError(name, resourceId) {
    return new teamsfx_api_1.UserError(exports.CoreSource, "FailedToParseResourceIdError", localizeUtils_1.getDefaultString("error.FailedToParseResourceIdError", name, resourceId), localizeUtils_1.getLocalizedString("error.FailedToParseResourceIdError", name, resourceId));
}
exports.FailedToParseResourceIdError = FailedToParseResourceIdError;
function NpmInstallError(path, e) {
    return new teamsfx_api_1.SystemError({ error: e, source: exports.CoreSource });
}
exports.NpmInstallError = NpmInstallError;
class VideoFilterAppRemoteNotSupportedError extends teamsfx_api_1.UserError {
    constructor() {
        super({
            source: exports.CoreSource,
            name: VideoFilterAppRemoteNotSupportedError.name,
            message: localizeUtils_1.getLocalizedString("error.VideoFilterAppNotRemoteSupported"),
            displayMessage: localizeUtils_1.getLocalizedString("error.VideoFilterAppNotRemoteSupported"),
        });
    }
}
exports.VideoFilterAppRemoteNotSupportedError = VideoFilterAppRemoteNotSupportedError;
class NotAllowedMigrationError extends teamsfx_api_1.UserError {
    constructor() {
        super({
            source: exports.CoreSource,
            name: NotAllowedMigrationError.name,
            message: localizeUtils_1.getLocalizedString("core.migrationV3.notAllowedMigration"),
            displayMessage: localizeUtils_1.getLocalizedString("core.migrationV3.notAllowedMigration"),
        });
    }
}
exports.NotAllowedMigrationError = NotAllowedMigrationError;
class FailedToLoadManifestId extends teamsfx_api_1.UserError {
    constructor(manifestPath) {
        super({
            source: exports.CoreSource,
            name: FailedToLoadManifestId.name,
            message: localizeUtils_1.getDefaultString("error.core.failedToLoadManifestId", manifestPath),
            displayMessage: localizeUtils_1.getLocalizedString("error.core.failedToLoadManifestId", manifestPath),
        });
    }
}
exports.FailedToLoadManifestId = FailedToLoadManifestId;
class AppIdNotExist extends teamsfx_api_1.UserError {
    constructor(appId) {
        super({
            source: exports.CoreSource,
            name: AppIdNotExist.name,
            message: localizeUtils_1.getDefaultString("error.core.appIdNotExist", appId),
            displayMessage: localizeUtils_1.getLocalizedString("error.core.appIdNotExist", appId),
        });
    }
}
exports.AppIdNotExist = AppIdNotExist;
//# sourceMappingURL=error.js.map