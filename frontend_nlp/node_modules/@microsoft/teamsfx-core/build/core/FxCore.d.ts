import { ApiOperation, CoreCallbackEvent, CreateProjectResult, CryptoProvider, Func, FxError, IQTreeNode, Inputs, InputsWithProjectPath, OpenAIPluginManifest, Result, Stage, TeamsAppInputs, Tools } from "@microsoft/teamsfx-api";
import { DotenvParseOutput } from "dotenv";
import "reflect-metadata";
import { ListCollaboratorResult, PermissionsResult } from "../common/permissionInterface";
import { ILifecycle } from "../component/configManager/interface";
import "../component/driver/index";
import { DriverContext } from "../component/driver/interface/commonArgs";
import "../component/driver/script/scriptDriver";
import { ErrorResult } from "../component/generator/copilotPlugin/helper";
import { ValidateTeamsAppInputs } from "../question";
import { CoreHookContext, PreProvisionResForVS, VersionCheckRes } from "./types";
import "../component/feature/sso";
export declare type CoreCallbackFunc = (name: string, err?: FxError, data?: any) => void | Promise<void>;
export declare class FxCore {
    constructor(tools: Tools);
    /**
     * @todo this's a really primitive implement. Maybe could use Subscription Model to
     * refactor later.
     */
    on(event: CoreCallbackEvent, callback: CoreCallbackFunc): void;
    createProject(inputs: Inputs): Promise<Result<CreateProjectResult, FxError>>;
    /**
     * lifecycle command: create new sample project
     */
    createSampleProject(inputs: Inputs): Promise<Result<CreateProjectResult, FxError>>;
    /**
     * lifecycle commands: provision
     */
    provisionResources(inputs: Inputs, ctx?: CoreHookContext): Promise<Result<undefined, FxError>>;
    /**
     * lifecycle commands: deploy
     */
    deployArtifacts(inputs: Inputs, ctx?: CoreHookContext): Promise<Result<undefined, FxError>>;
    localDebug(inputs: Inputs): Promise<Result<undefined, FxError>>;
    /**
     * none lifecycle command, v3 only
     */
    deployAadManifest(inputs: Inputs): Promise<Result<undefined, FxError>>;
    /**
     * none lifecycle command, v3 only
     */
    addWebpart(inputs: Inputs): Promise<Result<undefined, FxError>>;
    /**
     * lifecycle command: publish
     */
    publishApplication(inputs: Inputs, ctx?: CoreHookContext): Promise<Result<undefined, FxError>>;
    /**
     * most commands will be deprecated in V3
     */
    executeUserTask(func: Func, inputs: Inputs): Promise<Result<any, FxError>>;
    /**
     * v3 only none lifecycle command
     */
    buildAadManifest(inputs: Inputs): Promise<Result<undefined, FxError>>;
    /**
     * v3 only none lifecycle command
     */
    deployTeamsManifest(inputs: Inputs, ctx?: CoreHookContext): Promise<Result<undefined, FxError>>;
    /******
     * CLI v3 commands
     */
    updateTeamsAppCLIV3(inputs: TeamsAppInputs): Promise<Result<undefined, FxError>>;
    /******
     * CLI v3 commands
     */
    validateTeamsAppCLIV3(inputs: TeamsAppInputs): Promise<Result<undefined, FxError>>;
    /******
     * CLI v3 commands
     */
    packageTeamsAppCLIV3(inputs: TeamsAppInputs): Promise<Result<undefined, FxError>>;
    /******
     * CLI v3 commands
     */
    publishTeamsAppCLIV3(inputs: TeamsAppInputs): Promise<Result<undefined, FxError>>;
    /**
     * v3 only none lifecycle command
     */
    validateApplication(inputs: ValidateTeamsAppInputs): Promise<Result<any, FxError>>;
    /**
     * v3 only none lifecycle command
     */
    validateManifest(inputs: ValidateTeamsAppInputs): Promise<Result<any, FxError>>;
    /**
     * v3 only none lifecycle command
     */
    validateAppPackage(inputs: ValidateTeamsAppInputs): Promise<Result<any, FxError>>;
    /**
     * v3 only none lifecycle command
     */
    createAppPackage(inputs: Inputs): Promise<Result<any, FxError>>;
    /**
     * get url to preview the app, may prompt to select env, hub and Teams manifest
     * v3 only none lifecycle command
     * @param {Inputs} inputs
     * @returns the url to preview the app
     */
    previewWithManifest(inputs: Inputs): Promise<Result<string, FxError>>;
    /**
     * Warning: this API only works for CLI_HELP, it has no business with interactive run for CLI!
     */
    getQuestions(stage: Stage, inputs: Inputs): Result<IQTreeNode | undefined, FxError>;
    /**
     * get all dot envs
     */
    getDotEnvs(inputs: InputsWithProjectPath): Promise<Result<{
        [name: string]: DotenvParseOutput;
    }, FxError>>;
    /**
     * given projectPath and filePath, return whether the filePath is a env file
     */
    isEnvFile(projectPath: string, inputFile: string): Promise<Result<boolean, FxError>>;
    /**
     * get projectId
     */
    getProjectId(projectPath: string): Promise<Result<string, FxError>>;
    /**
     * @description get projectId and version from yml
     */
    getProjectMetadata(projectPath: string): Promise<Result<{
        version?: string;
        projectId?: string;
    }, FxError>>;
    /**
     * get Teams App Name from yml
     */
    getTeamsAppName(projectPath: string): Promise<Result<string, FxError>>;
    /**
     * get project info
     */
    getProjectInfo(projectPath: string, env: string): Promise<Result<{
        projectId: string;
        teamsAppId: string;
        teamsAppName: string;
        m365TenantId: string;
    }, FxError>>;
    grantPermission(inputs: Inputs): Promise<Result<PermissionsResult, FxError>>;
    /**
     * none lifecycle command
     */
    checkPermission(inputs: Inputs): Promise<Result<PermissionsResult, FxError>>;
    /**
     * none lifecycle command
     */
    listCollaborator(inputs: Inputs): Promise<Result<ListCollaboratorResult, FxError>>;
    getSelectedEnv(inputs: Inputs): Promise<Result<string | undefined, FxError>>;
    createLocalCrypto(projectPath: string): Promise<Result<CryptoProvider, FxError>>;
    /**
     * only for vs code extension
     */
    encrypt(plaintext: string, inputs: Inputs): Promise<Result<string, FxError>>;
    /**
     * only for vs code extension
     */
    decrypt(ciphertext: string, inputs: Inputs): Promise<Result<string, FxError>>;
    createEnv(inputs: Inputs): Promise<Result<undefined, FxError>>;
    createEnvCopyV3(targetEnvName: string, sourceEnvName: string, projectPath: string): Promise<Result<undefined, FxError>>;
    phantomMigrationV3(inputs: Inputs): Promise<Result<undefined, FxError>>;
    innerMigrationV3(inputs: Inputs): Result<undefined, FxError>;
    projectVersionCheck(inputs: Inputs): Promise<Result<VersionCheckRes, FxError>>;
    apply(inputs: Inputs, templatePath: string, lifecycleName: string): Promise<Result<undefined, FxError>>;
    runLifecycle(lifecycle: ILifecycle, driverContext: DriverContext, env: string): Promise<Result<undefined, FxError>>;
    preProvisionForVS(inputs: Inputs): Promise<Result<PreProvisionResForVS, FxError>>;
    preCheckYmlAndEnvForVS(inputs: Inputs): Promise<Result<undefined, FxError>>;
    publishInDeveloperPortal(inputs: Inputs): Promise<Result<undefined, FxError>>;
    injectCreateAPIKeyAction(ymlPath: string, authName: string, specRelativePath: string): Promise<void>;
    copilotPluginAddAPI(inputs: Inputs): Promise<Result<undefined, FxError>>;
    copilotPluginLoadOpenAIManifest(inputs: Inputs): Promise<Result<OpenAIPluginManifest, FxError>>;
    copilotPluginListOperations(inputs: Inputs): Promise<Result<ApiOperation[], ErrorResult[]>>;
}
//# sourceMappingURL=FxCore.d.ts.map