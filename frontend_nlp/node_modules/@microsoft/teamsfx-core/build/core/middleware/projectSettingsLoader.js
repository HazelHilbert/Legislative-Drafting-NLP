"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
exports.getProjectSettingPathV2 = exports.getProjectSettingsPath = exports.shouldIgnored = exports.loadProjectSettingsByProjectPathV2 = void 0;
const tslib_1 = require("tslib");
const fs = tslib_1.__importStar(require("fs-extra"));
const path = tslib_1.__importStar(require("path"));
const uuid = tslib_1.__importStar(require("uuid"));
const teamsfx_api_1 = require("@microsoft/teamsfx-api");
const projectSettingsHelper_1 = require("../../common/projectSettingsHelper");
const telemetry_1 = require("../../common/telemetry");
const versionMetadata_1 = require("../../common/versionMetadata");
const migrate_1 = require("../../component/migrate");
const globalVars_1 = require("../globalVars");
// export this for V2 -> V3 migration purpose
async function loadProjectSettingsByProjectPathV2(projectPath) {
    const settingsFile = getProjectSettingPathV2(projectPath);
    const projectSettings = await fs.readJson(settingsFile);
    if (!projectSettings.projectId) {
        projectSettings.projectId = uuid.v4();
        telemetry_1.sendTelemetryEvent(telemetry_1.Component.core, telemetry_1.TelemetryEvent.FillProjectId, {
            [telemetry_1.TelemetryProperty.ProjectId]: projectSettings.projectId,
        });
    }
    globalVars_1.globalVars.isVS = projectSettingsHelper_1.isVSProject(projectSettings);
    return teamsfx_api_1.ok(migrate_1.convertProjectSettingsV2ToV3(projectSettings, projectPath));
}
exports.loadProjectSettingsByProjectPathV2 = loadProjectSettingsByProjectPathV2;
function shouldIgnored(ctx) {
    const inputs = ctx.arguments[ctx.arguments.length - 1];
    const method = ctx.method;
    let isCreate = false;
    if (method === "getQuestions") {
        const task = ctx.arguments[0];
        isCreate = task === teamsfx_api_1.Stage.create;
    }
    return teamsfx_api_1.StaticPlatforms.includes(inputs.platform) || isCreate || inputs.ignoreLockByUT;
}
exports.shouldIgnored = shouldIgnored;
function getProjectSettingsPath(projectPath) {
    return path.resolve(projectPath, versionMetadata_1.MetadataV3.configFile);
}
exports.getProjectSettingsPath = getProjectSettingsPath;
function getProjectSettingPathV2(projectPath) {
    return path.resolve(projectPath, versionMetadata_1.MetadataV2.configFolder, "configs", versionMetadata_1.MetadataV2.configFile);
}
exports.getProjectSettingPathV2 = getProjectSettingPathV2;
//# sourceMappingURL=projectSettingsLoader.js.map