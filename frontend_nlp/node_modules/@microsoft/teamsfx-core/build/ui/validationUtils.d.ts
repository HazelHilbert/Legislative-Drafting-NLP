import { ConditionFunc, Inputs, MultiSelectQuestion, OptionItem, Question, SingleSelectQuestion, StaticOptions, ValidationSchema } from "@microsoft/teamsfx-api";
declare class ValidationUtils {
    validateInputForSingleSelectQuestion(question: SingleSelectQuestion, value: string | OptionItem, inputs: Inputs): Promise<string | undefined>;
    validateInputForMultipleSelectQuestion(question: MultiSelectQuestion, value: string[] | OptionItem[], inputs: Inputs): Promise<string | undefined>;
    formatInvalidInputError(key: string, value: string | OptionItem, options: StaticOptions): string;
    formatInvalidOptionsError(options: StaticOptions): string;
    isAllowedValue(key: string, value: string | OptionItem, options: StaticOptions, returnObject?: boolean): string | undefined;
    /**
     * validate value against question model definition
     */
    validateInputs(question: Question, value: string | string[] | OptionItem | OptionItem[], inputs: Inputs): Promise<string | undefined>;
}
export declare const validationUtils: ValidationUtils;
/**
 * A function to return a validation function according the validation schema
 * @param validation validation schema
 * @param inputs object to carry all user inputs
 * @returns a validation function
 */
export declare function getValidationFunction<T extends string | string[] | undefined>(validation: ValidationSchema, inputs: Inputs): (input: T) => string | undefined | Promise<string | undefined>;
/**
 * Implementation of validation function
 * @param validSchema validation schema
 * @param value value to validate
 * @param inputs user inputs object, which works as the context of the validation
 * @returns A human-readable string which is presented as diagnostic message.
 * Return `undefined` when 'value' is valid.
 */
export declare function validate<T extends string | string[] | OptionItem | OptionItem[] | undefined>(validSchema: ValidationSchema | ConditionFunc, value: T, inputs?: Inputs): Promise<string | undefined>;
export {};
//# sourceMappingURL=validationUtils.d.ts.map