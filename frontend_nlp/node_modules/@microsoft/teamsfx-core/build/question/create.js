"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
exports.createProjectCliHelpNode = exports.createSampleProjectQuestionNode = exports.createProjectQuestionNode = exports.capabilitySubTree = exports.apiOperationQuestion = exports.openAIPluginManifestLocationQuestion = exports.apiSpecLocationQuestion = exports.RuntimeOptions = exports.appNameQuestion = exports.AppNamePattern = exports.folderQuestion = exports.programmingLanguageQuestion = exports.ProgrammingLanguage = exports.getLanguageOptions = exports.officeAddinHostingQuestion = exports.getTemplate = exports.SPFxImportFolderQuestion = exports.SPFxVersionOptionIds = exports.SPFxWebpartNameQuestion = exports.SPFxFrameworkQuestion = exports.SPFxPackageSelectQuestion = exports.NotificationTriggerOptions = exports.meArchitectureQuestion = exports.MeArchitectureOptions = exports.capabilityQuestion = exports.CapabilityOptions = exports.ProjectTypeOptions = exports.ScratchOptions = void 0;
const tslib_1 = require("tslib");
const teamsfx_api_1 = require("@microsoft/teamsfx-api");
const fs_extra_1 = tslib_1.__importDefault(require("fs-extra"));
const jsonschema = tslib_1.__importStar(require("jsonschema"));
const lodash_1 = require("lodash");
const os = tslib_1.__importStar(require("os"));
const path = tslib_1.__importStar(require("path"));
const constants_1 = require("../common/constants");
const featureFlags_1 = require("../common/featureFlags");
const localizeUtils_1 = require("../common/localizeUtils");
const samples_1 = require("../common/samples");
const utils_1 = require("../common/utils");
const developerPortalScaffoldUtils_1 = require("../component/developerPortalScaffoldUtils");
const utils_2 = require("../component/driver/teamsApp/utils/utils");
const helper_1 = require("../component/generator/copilotPlugin/helper");
const projectsJsonData_1 = tslib_1.__importDefault(require("../component/generator/officeAddin/config/projectsJsonData"));
const error_1 = require("../component/generator/spfx/error");
const spfxGenerator_1 = require("../component/generator/spfx/spfxGenerator");
const constants_2 = require("../component/generator/spfx/utils/constants");
const utils_3 = require("../component/generator/spfx/utils/utils");
const utils_4 = require("../component/utils");
const error_2 = require("../error");
const questionNames_1 = require("./questionNames");
const util_1 = require("./util");
const constants_3 = require("./constants");
const correlator_1 = require("../common/correlator");
class ScratchOptions {
    static yes() {
        return {
            id: "yes",
            label: localizeUtils_1.getLocalizedString("core.ScratchOptionYes.label"),
            detail: localizeUtils_1.getLocalizedString("core.ScratchOptionYes.detail"),
        };
    }
    static no() {
        return {
            id: "no",
            label: localizeUtils_1.getLocalizedString("core.ScratchOptionNo.label"),
            detail: localizeUtils_1.getLocalizedString("core.ScratchOptionNo.detail"),
        };
    }
    static all() {
        return [ScratchOptions.yes(), ScratchOptions.no()];
    }
}
exports.ScratchOptions = ScratchOptions;
class ProjectTypeOptions {
    static tab(platform) {
        return {
            id: "tab-type",
            label: `${platform === teamsfx_api_1.Platform.VSCode ? "$(browser) " : ""}${localizeUtils_1.getLocalizedString("core.TabOption.label")}`,
            detail: localizeUtils_1.getLocalizedString("core.createProjectQuestion.projectType.tab.detail"),
        };
    }
    static bot(platform) {
        return {
            id: "bot-type",
            label: `${platform === teamsfx_api_1.Platform.VSCode ? "$(hubot) " : ""}${localizeUtils_1.getLocalizedString("core.createProjectQuestion.projectType.bot.label")}`,
            detail: localizeUtils_1.getLocalizedString("core.createProjectQuestion.projectType.bot.detail"),
        };
    }
    static me(platform) {
        return {
            id: "me-type",
            label: `${platform === teamsfx_api_1.Platform.VSCode ? "$(symbol-keyword) " : ""}${localizeUtils_1.getLocalizedString("core.MessageExtensionOption.label")}`,
            detail: featureFlags_1.isCopilotPluginEnabled()
                ? localizeUtils_1.getLocalizedString("core.createProjectQuestion.projectType.messageExtension.copilotEnabled.detail")
                : localizeUtils_1.getLocalizedString("core.createProjectQuestion.projectType.messageExtension.detail"),
        };
    }
    static outlookAddin(platform) {
        return {
            id: "outlook-addin-type",
            label: `${platform === teamsfx_api_1.Platform.VSCode ? "$(mail) " : ""}${localizeUtils_1.getLocalizedString("core.createProjectQuestion.projectType.outlookAddin.label")}`,
            detail: localizeUtils_1.getLocalizedString("core.createProjectQuestion.projectType.outlookAddin.detail"),
        };
    }
    static copilotPlugin(platform) {
        return {
            id: "copilot-plugin-type",
            label: `${platform === teamsfx_api_1.Platform.VSCode ? "$(sparkle) " : ""}${localizeUtils_1.getLocalizedString("core.createProjectQuestion.projectType.copilotPlugin.label")}`,
            detail: localizeUtils_1.getLocalizedString("core.createProjectQuestion.projectType.copilotPlugin.detail"),
        };
    }
}
exports.ProjectTypeOptions = ProjectTypeOptions;
function projectTypeQuestion() {
    const staticOptions = [
        ProjectTypeOptions.bot(teamsfx_api_1.Platform.CLI),
        ProjectTypeOptions.tab(teamsfx_api_1.Platform.CLI),
        ProjectTypeOptions.me(teamsfx_api_1.Platform.CLI),
        ProjectTypeOptions.outlookAddin(teamsfx_api_1.Platform.CLI),
    ];
    return {
        name: questionNames_1.QuestionNames.ProjectType,
        title: localizeUtils_1.getLocalizedString("core.createProjectQuestion.title"),
        type: "singleSelect",
        staticOptions: staticOptions,
        dynamicOptions: (inputs) => {
            var _a;
            let staticOptions;
            if (featureFlags_1.isApiCopilotPluginEnabled()) {
                staticOptions = [
                    ProjectTypeOptions.copilotPlugin(inputs.platform),
                    ProjectTypeOptions.bot(inputs.platform),
                    ProjectTypeOptions.tab(inputs.platform),
                    ProjectTypeOptions.me(inputs.platform),
                ];
            }
            else {
                staticOptions = [
                    ProjectTypeOptions.bot(inputs.platform),
                    ProjectTypeOptions.tab(inputs.platform),
                    ProjectTypeOptions.me(inputs.platform),
                ];
            }
            if (developerPortalScaffoldUtils_1.isFromDevPortal(inputs)) {
                const projectType = (_a = developerPortalScaffoldUtils_1.getProjectTypeAndCapability(inputs.teamsAppFromTdp)) === null || _a === void 0 ? void 0 : _a.projectType;
                if (projectType) {
                    return [projectType];
                }
            }
            else {
                staticOptions.push(ProjectTypeOptions.outlookAddin(inputs.platform));
            }
            return staticOptions;
        },
        placeholder: localizeUtils_1.getLocalizedString("core.getCreateNewOrFromSampleQuestion.placeholder"),
        forgetLastValue: true,
        skipSingleOption: true,
    };
}
class CapabilityOptions {
    // bot
    static basicBot() {
        return {
            id: "bot",
            label: `${localizeUtils_1.getLocalizedString("core.BotNewUIOption.label")}`,
            detail: localizeUtils_1.getLocalizedString("core.BotNewUIOption.detail"),
        };
    }
    static notificationBot() {
        return {
            // For default option, id and cliName must be the same
            id: "notification",
            label: `${localizeUtils_1.getLocalizedString("core.NotificationOption.label")}`,
            detail: localizeUtils_1.getLocalizedString("core.NotificationOption.detail"),
            data: "https://aka.ms/teamsfx-send-notification",
            buttons: [
                {
                    iconPath: "file-symlink-file",
                    tooltip: localizeUtils_1.getLocalizedString("core.option.github"),
                    command: "fx-extension.openTutorial",
                },
            ],
        };
    }
    static commandBot() {
        return {
            // id must match cli `yargsHelp`
            id: "command-bot",
            label: `${localizeUtils_1.getLocalizedString("core.CommandAndResponseOption.label")}`,
            detail: localizeUtils_1.getLocalizedString("core.CommandAndResponseOption.detail"),
            data: "https://aka.ms/teamsfx-create-command",
            buttons: [
                {
                    iconPath: "file-symlink-file",
                    tooltip: localizeUtils_1.getLocalizedString("core.option.github"),
                    command: "fx-extension.openTutorial",
                },
            ],
        };
    }
    static workflowBot(inputs) {
        const item = {
            // id must match cli `yargsHelp`
            id: "workflow-bot",
            label: `${localizeUtils_1.getLocalizedString("core.WorkflowOption.label")}`,
            detail: localizeUtils_1.getLocalizedString("core.WorkflowOption.detail"),
            data: "https://aka.ms/teamsfx-create-workflow",
            buttons: [
                {
                    iconPath: "file-symlink-file",
                    tooltip: localizeUtils_1.getLocalizedString("core.option.github"),
                    command: "fx-extension.openTutorial",
                },
            ],
        };
        if (inputs === null || inputs === void 0 ? void 0 : inputs.inProductDoc) {
            item.data = "cardActionResponse";
            item.buttons = [
                {
                    iconPath: "file-code",
                    tooltip: localizeUtils_1.getLocalizedString("core.option.inProduct"),
                    command: "fx-extension.openTutorial",
                },
            ];
        }
        return item;
    }
    //tab
    static nonSsoTab() {
        return {
            id: "tab-non-sso",
            label: `${localizeUtils_1.getLocalizedString("core.TabNonSso.label")}`,
            detail: localizeUtils_1.getLocalizedString("core.TabNonSso.detail"),
            description: localizeUtils_1.getLocalizedString("core.createProjectQuestion.option.description.worksInOutlookM365"),
        };
    }
    static tab() {
        return {
            id: "tab",
            label: localizeUtils_1.getLocalizedString("core.TabOption.label"),
            description: localizeUtils_1.getLocalizedString("core.TabOption.description"),
            detail: localizeUtils_1.getLocalizedString("core.TabOption.detail"),
        };
    }
    static m365SsoLaunchPage() {
        return {
            id: "sso-launch-page",
            label: `${localizeUtils_1.getLocalizedString("core.M365SsoLaunchPageOptionItem.label")}`,
            detail: localizeUtils_1.getLocalizedString("core.M365SsoLaunchPageOptionItem.detail"),
            description: localizeUtils_1.getLocalizedString("core.createProjectQuestion.option.description.worksInOutlookM365"),
        };
    }
    static dashboardTab() {
        return {
            id: "dashboard-tab",
            label: `${localizeUtils_1.getLocalizedString("core.DashboardOption.label")}`,
            detail: localizeUtils_1.getLocalizedString("core.DashboardOption.detail"),
            description: localizeUtils_1.getLocalizedString("core.createProjectQuestion.option.description.worksInOutlookM365"),
            data: "https://aka.ms/teamsfx-dashboard-app",
            buttons: [
                {
                    iconPath: "file-symlink-file",
                    tooltip: localizeUtils_1.getLocalizedString("core.option.github"),
                    command: "fx-extension.openTutorial",
                },
            ],
        };
    }
    static SPFxTab() {
        return {
            id: "tab-spfx",
            label: localizeUtils_1.getLocalizedString("core.TabSPFxOption.labelNew"),
            description: localizeUtils_1.getLocalizedString("core.createProjectQuestion.option.description.worksInOutlookM365"),
            detail: localizeUtils_1.getLocalizedString("core.TabSPFxOption.detailNew"),
        };
    }
    //message extension
    static linkUnfurling() {
        return {
            id: "link-unfurling",
            label: `${localizeUtils_1.getLocalizedString("core.LinkUnfurlingOption.label")}`,
            detail: localizeUtils_1.getLocalizedString("core.LinkUnfurlingOption.detail"),
            description: localizeUtils_1.getLocalizedString("core.createProjectQuestion.option.description.worksInOutlook"),
        };
    }
    static m365SearchMe() {
        return {
            id: "search-app",
            label: `${localizeUtils_1.getLocalizedString("core.M365SearchAppOptionItem.label")}`,
            detail: featureFlags_1.isCopilotPluginEnabled()
                ? localizeUtils_1.getLocalizedString("core.M365SearchAppOptionItem.copilot.detail")
                : localizeUtils_1.getLocalizedString("core.M365SearchAppOptionItem.detail"),
        };
    }
    static SearchMe() {
        return {
            id: "search-message-extension",
            label: `${localizeUtils_1.getLocalizedString("core.M365SearchAppOptionItem.label")}`,
            detail: localizeUtils_1.getLocalizedString("core.SearchAppOptionItem.detail"),
        };
    }
    static collectFormMe() {
        return {
            id: "collect-form-message-extension",
            label: `${localizeUtils_1.getLocalizedString("core.MessageExtensionOption.labelNew")}`,
            detail: localizeUtils_1.getLocalizedString("core.MessageExtensionOption.detail"),
        };
    }
    static me() {
        return {
            id: "message-extension",
            label: localizeUtils_1.getLocalizedString("core.MessageExtensionOption.label"),
            description: localizeUtils_1.getLocalizedString("core.MessageExtensionOption.description"),
            detail: localizeUtils_1.getLocalizedString("core.MessageExtensionOption.detail"),
        };
    }
    static bots(inputs, includeAssistant) {
        return [
            CapabilityOptions.basicBot(),
            CapabilityOptions.aiBot(),
            ...(includeAssistant === true ? [CapabilityOptions.aiAssistantBot()] : []),
            CapabilityOptions.notificationBot(),
            CapabilityOptions.commandBot(),
            CapabilityOptions.workflowBot(inputs),
        ];
    }
    static tabs() {
        return [
            CapabilityOptions.nonSsoTab(),
            CapabilityOptions.m365SsoLaunchPage(),
            CapabilityOptions.dashboardTab(),
            CapabilityOptions.SPFxTab(),
        ];
    }
    static dotnetCaps(inputs) {
        return [
            ...CapabilityOptions.copilotPlugins(),
            ...CapabilityOptions.bots(),
            CapabilityOptions.nonSsoTab(),
            CapabilityOptions.tab(),
            ...CapabilityOptions.collectMECaps(),
        ];
    }
    /**
     * Collect all capabilities for message extension, including dotnet and nodejs.
     * @returns OptionItem[] capability list
     */
    static collectMECaps() {
        return [
            CapabilityOptions.m365SearchMe(),
            CapabilityOptions.collectFormMe(),
            CapabilityOptions.SearchMe(),
            CapabilityOptions.linkUnfurling(),
        ];
    }
    static mes(inputs) {
        return inputs !== undefined && getRuntime(inputs) === RuntimeOptions.DotNet().id
            ? [
                CapabilityOptions.SearchMe(),
                CapabilityOptions.collectFormMe(),
                CapabilityOptions.linkUnfurling(),
            ]
            : [
                CapabilityOptions.m365SearchMe(),
                CapabilityOptions.collectFormMe(),
                CapabilityOptions.linkUnfurling(),
            ];
    }
    static copilotPlugins() {
        return [
            CapabilityOptions.copilotPluginNewApi(),
            CapabilityOptions.copilotPluginApiSpec(),
            CapabilityOptions.copilotPluginOpenAIPlugin(),
        ];
    }
    /**
     * static capability list, which does not depend on any feature flags
     */
    static staticAll(inputs) {
        const capabilityOptions = [
            ...CapabilityOptions.bots(inputs, true),
            ...CapabilityOptions.tabs(),
            ...CapabilityOptions.collectMECaps(),
            ...CapabilityOptions.copilotPlugins(),
        ];
        return capabilityOptions;
    }
    /**
     * dynamic capability list, which depends on feature flags
     */
    static all(inputs) {
        const capabilityOptions = [
            ...CapabilityOptions.bots(inputs, true),
            ...CapabilityOptions.tabs(),
            ...CapabilityOptions.collectMECaps(),
        ];
        if (featureFlags_1.isApiCopilotPluginEnabled()) {
            capabilityOptions.push(...CapabilityOptions.copilotPlugins());
        }
        return capabilityOptions;
    }
    static officeAddinImport() {
        return {
            id: "import",
            label: localizeUtils_1.getLocalizedString("core.importAddin.label"),
            detail: localizeUtils_1.getLocalizedString("core.importAddin.detail"),
            description: localizeUtils_1.getLocalizedString("core.createProjectQuestion.option.description.previewOnWindow"),
        };
    }
    static officeAddinItems() {
        return officeAddinJsonData.getProjectTemplateNames().map((template) => ({
            id: template,
            label: localizeUtils_1.getLocalizedString(officeAddinJsonData.getProjectDisplayName(template)),
            detail: localizeUtils_1.getLocalizedString(officeAddinJsonData.getProjectDetails(template)),
            description: localizeUtils_1.getLocalizedString("core.createProjectQuestion.option.description.previewOnWindow"),
        }));
    }
    static nonSsoTabAndBot() {
        return {
            id: "TabNonSsoAndBot",
            label: "", // No need to set display name as this option won't be shown in UI
        };
    }
    static botAndMe() {
        return {
            id: "BotAndMessageExtension",
            label: "", // No need to set display name as this option won't be shown in UI
        };
    }
    // copilot plugin
    static copilotPluginNewApi() {
        return {
            id: constants_3.copilotPluginNewApiOptionId,
            label: localizeUtils_1.getLocalizedString("core.createProjectQuestion.capability.copilotPluginNewApiOption.label"),
            detail: localizeUtils_1.getLocalizedString("core.createProjectQuestion.capability.copilotPluginNewApiOption.detail"),
        };
    }
    static copilotPluginApiSpec() {
        return {
            id: constants_3.copilotPluginApiSpecOptionId,
            label: localizeUtils_1.getLocalizedString("core.createProjectQuestion.capability.copilotPluginApiSpecOption.label"),
            detail: localizeUtils_1.getLocalizedString("core.createProjectQuestion.capability.copilotPluginApiSpecOption.detail"),
        };
    }
    static copilotPluginOpenAIPlugin() {
        return {
            id: constants_3.copilotPluginOpenAIPluginOptionId,
            label: localizeUtils_1.getLocalizedString("core.createProjectQuestion.capability.copilotPluginAIPluginOption.label"),
            detail: localizeUtils_1.getLocalizedString("core.createProjectQuestion.capability.copilotPluginAIPluginOption.detail"),
        };
    }
    static aiBot() {
        return {
            id: "ai-bot",
            label: localizeUtils_1.getLocalizedString("core.aiBotOption.label"),
            detail: localizeUtils_1.getLocalizedString("core.aiBotOption.detail"),
        };
    }
    static aiAssistantBot() {
        return {
            id: "ai-assistant-bot",
            label: localizeUtils_1.getLocalizedString("core.aiAssistantBotOption.label"),
            detail: localizeUtils_1.getLocalizedString("core.aiAssistantBotOption.detail"),
            description: localizeUtils_1.getLocalizedString("core.createProjectQuestion.option.description.preview"),
        };
    }
}
exports.CapabilityOptions = CapabilityOptions;
function capabilityQuestion() {
    return {
        name: questionNames_1.QuestionNames.Capabilities,
        title: (inputs) => {
            const projectType = inputs[questionNames_1.QuestionNames.ProjectType];
            switch (projectType) {
                case ProjectTypeOptions.bot().id:
                    return localizeUtils_1.getLocalizedString("core.createProjectQuestion.projectType.bot.title");
                case ProjectTypeOptions.tab().id:
                    return localizeUtils_1.getLocalizedString("core.createProjectQuestion.projectType.tab.title");
                case ProjectTypeOptions.me().id:
                    return localizeUtils_1.getLocalizedString("core.createProjectQuestion.projectType.messageExtension.title");
                case ProjectTypeOptions.outlookAddin().id:
                    return localizeUtils_1.getLocalizedString("core.createProjectQuestion.projectType.outlookAddin.title");
                case ProjectTypeOptions.copilotPlugin().id:
                    return localizeUtils_1.getLocalizedString("core.createProjectQuestion.projectType.copilotPlugin.title");
                default:
                    return localizeUtils_1.getLocalizedString("core.createCapabilityQuestion.titleNew");
            }
        },
        cliDescription: "Specifies the Microsoft Teams App capability.",
        cliName: questionNames_1.CliQuestionName.Capability,
        cliShortName: "c",
        cliChoiceListCommand: "teamsfx list templates",
        type: "singleSelect",
        staticOptions: CapabilityOptions.staticAll(),
        dynamicOptions: (inputs) => {
            var _a;
            // from dev portal
            if (developerPortalScaffoldUtils_1.isFromDevPortal(inputs)) {
                const capability = (_a = developerPortalScaffoldUtils_1.getProjectTypeAndCapability(inputs.teamsAppFromTdp)) === null || _a === void 0 ? void 0 : _a.templateId;
                if (capability) {
                    return [capability];
                }
            }
            // dotnet capabilities
            if (getRuntime(inputs) === RuntimeOptions.DotNet().id) {
                return CapabilityOptions.dotnetCaps(inputs);
            }
            if (inputs.nonInteractive && inputs.platform === teamsfx_api_1.Platform.CLI) {
                //cli non-interactive mode the choice list is the same as staticOptions
                return CapabilityOptions.all(inputs);
            }
            // nodejs capabilities
            const projectType = inputs[questionNames_1.QuestionNames.ProjectType];
            if (projectType === ProjectTypeOptions.bot().id) {
                return CapabilityOptions.bots(inputs, true);
            }
            else if (projectType === ProjectTypeOptions.tab().id) {
                return CapabilityOptions.tabs();
            }
            else if (projectType === ProjectTypeOptions.me().id) {
                return CapabilityOptions.mes();
            }
            else if (projectType === ProjectTypeOptions.outlookAddin().id) {
                return [...CapabilityOptions.officeAddinItems(), CapabilityOptions.officeAddinImport()];
            }
            else if (projectType === ProjectTypeOptions.copilotPlugin().id) {
                return CapabilityOptions.copilotPlugins();
            }
            else {
                return CapabilityOptions.all(inputs);
            }
        },
        placeholder: (inputs) => {
            if (inputs[questionNames_1.QuestionNames.ProjectType] === ProjectTypeOptions.copilotPlugin().id) {
                return localizeUtils_1.getLocalizedString("core.createProjectQuestion.projectType.copilotPlugin.placeholder");
            }
            return localizeUtils_1.getLocalizedString("core.createCapabilityQuestion.placeholder");
        },
        forgetLastValue: true,
        skipSingleOption: true,
    };
}
exports.capabilityQuestion = capabilityQuestion;
class MeArchitectureOptions {
    static botMe() {
        return {
            id: "bot",
            label: localizeUtils_1.getLocalizedString("core.createProjectQuestion.capability.botMessageExtension.label"),
            detail: localizeUtils_1.getLocalizedString("core.createProjectQuestion.capability.botMessageExtension.detail"),
            description: localizeUtils_1.getLocalizedString("core.createProjectQuestion.option.description.worksInOutlook"),
        };
    }
    static botPlugin() {
        return {
            id: "bot-plugin",
            label: localizeUtils_1.getLocalizedString("core.createProjectQuestion.capability.botMessageExtension.label"),
            detail: localizeUtils_1.getLocalizedString("core.createProjectQuestion.capability.botMessageExtension.detail"),
            description: localizeUtils_1.getLocalizedString("core.createProjectQuestion.option.description.worksInOutlookCopilot"),
        };
    }
    static newApi() {
        return {
            id: "new-api",
            label: localizeUtils_1.getLocalizedString("core.createProjectQuestion.capability.copilotPluginNewApiOption.label"),
            detail: localizeUtils_1.getLocalizedString("core.createProjectQuestion.capability.copilotPluginNewApiOption.detail"),
        };
    }
    static apiSpec() {
        return {
            id: "api-spec",
            label: localizeUtils_1.getLocalizedString("core.createProjectQuestion.capability.copilotPluginApiSpecOption.label"),
            detail: localizeUtils_1.getLocalizedString("core.createProjectQuestion.capability.copilotPluginApiSpecOption.detail"),
        };
    }
    static all() {
        return [
            MeArchitectureOptions.newApi(),
            MeArchitectureOptions.apiSpec(),
            featureFlags_1.isCopilotPluginEnabled() ? MeArchitectureOptions.botPlugin() : MeArchitectureOptions.botMe(),
        ];
    }
    static staticAll() {
        return [
            MeArchitectureOptions.newApi(),
            MeArchitectureOptions.apiSpec(),
            MeArchitectureOptions.botPlugin(),
            MeArchitectureOptions.botMe(),
        ];
    }
}
exports.MeArchitectureOptions = MeArchitectureOptions;
function meArchitectureQuestion() {
    return {
        name: questionNames_1.QuestionNames.MeArchitectureType,
        title: localizeUtils_1.getLocalizedString("core.createProjectQuestion.meArchitecture.title"),
        cliDescription: "Architecture of Search Based Message Extension.",
        cliShortName: "m",
        type: "singleSelect",
        staticOptions: MeArchitectureOptions.staticAll(),
        dynamicOptions: (inputs) => {
            return MeArchitectureOptions.all();
        },
        default: MeArchitectureOptions.newApi().id,
        placeholder: localizeUtils_1.getLocalizedString("core.createProjectQuestion.projectType.copilotPlugin.placeholder"),
        forgetLastValue: true,
        skipSingleOption: true,
    };
}
exports.meArchitectureQuestion = meArchitectureQuestion;
var HostType;
(function (HostType) {
    HostType["AppService"] = "app-service";
    HostType["Functions"] = "azure-functions";
})(HostType || (HostType = {}));
const NotificationTriggers = {
    HTTP: "http",
    TIMER: "timer",
};
class NotificationTriggerOptions {
    static appService() {
        return {
            id: "http-restify",
            hostType: HostType.AppService,
            label: localizeUtils_1.getLocalizedString("plugins.bot.triggers.http-restify.label"),
            description: localizeUtils_1.getLocalizedString("plugins.bot.triggers.http-restify.description"),
            detail: localizeUtils_1.getLocalizedString("plugins.bot.triggers.http-restify.detail"),
        };
    }
    static appServiceForVS() {
        return {
            id: "http-webapi",
            hostType: HostType.AppService,
            label: localizeUtils_1.getLocalizedString("plugins.bot.triggers.http-webapi.label"),
            description: localizeUtils_1.getLocalizedString("plugins.bot.triggers.http-webapi.description"),
            detail: localizeUtils_1.getLocalizedString("plugins.bot.triggers.http-webapi.detail"),
        };
    }
    // NOTE: id must be the sample as cliName to prevent parsing error for CLI default value.
    static functionsTimerTrigger() {
        return {
            id: "timer-functions",
            hostType: HostType.Functions,
            triggers: [NotificationTriggers.TIMER],
            label: localizeUtils_1.getLocalizedString("plugins.bot.triggers.timer-functions.label"),
            description: localizeUtils_1.getLocalizedString("plugins.bot.triggers.timer-functions.description"),
            detail: localizeUtils_1.getLocalizedString("plugins.bot.triggers.timer-functions.detail"),
        };
    }
    static functionsHttpAndTimerTrigger() {
        return {
            id: "http-and-timer-functions",
            hostType: HostType.Functions,
            triggers: [NotificationTriggers.HTTP, NotificationTriggers.TIMER],
            label: localizeUtils_1.getLocalizedString("plugins.bot.triggers.http-and-timer-functions.label"),
            description: localizeUtils_1.getLocalizedString("plugins.bot.triggers.http-and-timer-functions.description"),
            detail: localizeUtils_1.getLocalizedString("plugins.bot.triggers.http-and-timer-functions.detail"),
        };
    }
    static functionsHttpTrigger() {
        return {
            id: "http-functions",
            hostType: HostType.Functions,
            triggers: [NotificationTriggers.HTTP],
            label: localizeUtils_1.getLocalizedString("plugins.bot.triggers.http-functions.label"),
            description: localizeUtils_1.getLocalizedString("plugins.bot.triggers.http-functions.description"),
            detail: localizeUtils_1.getLocalizedString("plugins.bot.triggers.http-functions.detail"),
        };
    }
    static functionsTriggers() {
        return [
            NotificationTriggerOptions.functionsHttpAndTimerTrigger(),
            NotificationTriggerOptions.functionsHttpTrigger(),
            NotificationTriggerOptions.functionsTimerTrigger(),
        ];
    }
    static all() {
        return [
            NotificationTriggerOptions.appService(),
            NotificationTriggerOptions.appServiceForVS(),
            NotificationTriggerOptions.functionsHttpAndTimerTrigger(),
            NotificationTriggerOptions.functionsHttpTrigger(),
            NotificationTriggerOptions.functionsTimerTrigger(),
        ];
    }
}
exports.NotificationTriggerOptions = NotificationTriggerOptions;
function getRuntime(inputs) {
    let runtime = RuntimeOptions.NodeJS().id;
    if (featureFlags_1.isCLIDotNetEnabled()) {
        runtime = inputs[questionNames_1.QuestionNames.Runtime] || runtime;
    }
    else {
        if ((inputs === null || inputs === void 0 ? void 0 : inputs.platform) === teamsfx_api_1.Platform.VS) {
            runtime = RuntimeOptions.DotNet().id;
        }
    }
    return runtime;
}
function botTriggerQuestion() {
    return {
        name: questionNames_1.QuestionNames.BotTrigger,
        title: localizeUtils_1.getLocalizedString("plugins.bot.questionHostTypeTrigger.title"),
        cliDescription: "Specifies the trigger for `Chat Notification Message` app template.",
        cliShortName: "t",
        type: "singleSelect",
        staticOptions: NotificationTriggerOptions.all(),
        dynamicOptions: (inputs) => {
            const runtime = getRuntime(inputs);
            return [
                runtime === RuntimeOptions.DotNet().id
                    ? NotificationTriggerOptions.appServiceForVS()
                    : NotificationTriggerOptions.appService(),
                ...NotificationTriggerOptions.functionsTriggers(),
            ];
        },
        default: (inputs) => {
            const runtime = getRuntime(inputs);
            return runtime === RuntimeOptions.DotNet().id
                ? NotificationTriggerOptions.appServiceForVS().id
                : NotificationTriggerOptions.appService().id;
        },
        placeholder: localizeUtils_1.getLocalizedString("plugins.bot.questionHostTypeTrigger.placeholder"),
    };
}
function SPFxSolutionQuestion() {
    return {
        type: "singleSelect",
        name: questionNames_1.QuestionNames.SPFxSolution,
        title: localizeUtils_1.getLocalizedString("plugins.spfx.questions.spfxSolution.title"),
        cliDescription: "Create a new or import an existing SharePoint Framework solution.",
        cliShortName: "s",
        staticOptions: [
            {
                id: "new",
                label: localizeUtils_1.getLocalizedString("plugins.spfx.questions.spfxSolution.createNew"),
                detail: localizeUtils_1.getLocalizedString("plugins.spfx.questions.spfxSolution.createNew.detail"),
            },
            {
                id: "import",
                label: localizeUtils_1.getLocalizedString("plugins.spfx.questions.spfxSolution.importExisting"),
                detail: localizeUtils_1.getLocalizedString("plugins.spfx.questions.spfxSolution.importExisting.detail"),
            },
        ],
        default: "new",
    };
}
function SPFxPackageSelectQuestion() {
    return {
        type: "singleSelect",
        name: questionNames_1.QuestionNames.SPFxInstallPackage,
        title: localizeUtils_1.getLocalizedString("plugins.spfx.questions.packageSelect.title"),
        cliDescription: "Install the latest version of SharePoint Framework.",
        staticOptions: [],
        placeholder: localizeUtils_1.getLocalizedString("plugins.spfx.questions.packageSelect.placeholder"),
        dynamicOptions: async (inputs) => {
            const versions = await Promise.all([
                utils_3.Utils.findGloballyInstalledVersion(undefined, constants_2.Constants.GeneratorPackageName, 0, false),
                utils_3.Utils.findLatestVersion(undefined, constants_2.Constants.GeneratorPackageName, 5),
                utils_3.Utils.findGloballyInstalledVersion(undefined, constants_2.Constants.YeomanPackageName, 0, false),
            ]);
            inputs.globalSpfxPackageVersion = versions[0];
            inputs.latestSpfxPackageVersion = versions[1];
            inputs.globalYeomanPackageVersion = versions[2];
            return [
                {
                    id: SPFxVersionOptionIds.installLocally,
                    label: versions[1] !== undefined
                        ? localizeUtils_1.getLocalizedString("plugins.spfx.questions.packageSelect.installLocally.withVersion.label", "v" + versions[1])
                        : localizeUtils_1.getLocalizedString("plugins.spfx.questions.packageSelect.installLocally.noVersion.label"),
                },
                {
                    id: SPFxVersionOptionIds.globalPackage,
                    label: versions[0] !== undefined
                        ? localizeUtils_1.getLocalizedString("plugins.spfx.questions.packageSelect.useGlobalPackage.withVersion.label", "v" + versions[0])
                        : localizeUtils_1.getLocalizedString("plugins.spfx.questions.packageSelect.useGlobalPackage.noVersion.label"),
                    description: localizeUtils_1.getLocalizedString("plugins.spfx.questions.packageSelect.useGlobalPackage.detail", constants_2.Constants.RecommendedLowestSpfxVersion),
                },
            ];
        },
        default: SPFxVersionOptionIds.installLocally,
        validation: {
            validFunc: (input, previousInputs) => {
                if (input === SPFxVersionOptionIds.globalPackage) {
                    const hasPackagesInstalled = !!previousInputs &&
                        !!previousInputs.globalSpfxPackageVersion &&
                        !!previousInputs.globalYeomanPackageVersion;
                    if (!hasPackagesInstalled) {
                        return Promise.reject(error_1.DevEnvironmentSetupError());
                    }
                }
                return Promise.resolve(undefined);
            },
        },
        isBoolean: true,
    };
}
exports.SPFxPackageSelectQuestion = SPFxPackageSelectQuestion;
function SPFxFrameworkQuestion() {
    return {
        type: "singleSelect",
        name: questionNames_1.QuestionNames.SPFxFramework,
        cliShortName: "k",
        cliDescription: "Framework.",
        title: localizeUtils_1.getLocalizedString("plugins.spfx.questions.framework.title"),
        staticOptions: [
            { id: "react", label: "React" },
            { id: "minimal", label: "Minimal" },
            { id: "none", label: "None" },
        ],
        placeholder: "Select an option",
        default: "react",
    };
}
exports.SPFxFrameworkQuestion = SPFxFrameworkQuestion;
function SPFxWebpartNameQuestion() {
    return {
        type: "text",
        name: questionNames_1.QuestionNames.SPFxWebpartName,
        cliShortName: "w",
        cliDescription: "Name for SharePoint Framework Web Part.",
        title: localizeUtils_1.getLocalizedString("plugins.spfx.questions.webpartName"),
        default: constants_2.Constants.DEFAULT_WEBPART_NAME,
        validation: {
            validFunc: async (input, previousInputs) => {
                const schema = {
                    pattern: "^[a-zA-Z_][a-zA-Z0-9_]*$",
                };
                const validateRes = jsonschema.validate(input, schema);
                if (validateRes.errors && validateRes.errors.length > 0) {
                    return localizeUtils_1.getLocalizedString("plugins.spfx.questions.webpartName.error.notMatch", input, schema.pattern);
                }
                if (previousInputs &&
                    ((previousInputs.stage === teamsfx_api_1.Stage.addWebpart &&
                        previousInputs[questionNames_1.QuestionNames.SPFxFolder]) ||
                        ((previousInputs === null || previousInputs === void 0 ? void 0 : previousInputs.stage) === teamsfx_api_1.Stage.addFeature && (previousInputs === null || previousInputs === void 0 ? void 0 : previousInputs.projectPath)))) {
                    const webpartFolder = path.join(previousInputs[questionNames_1.QuestionNames.SPFxFolder], "src", "webparts", input);
                    if (await fs_extra_1.default.pathExists(webpartFolder)) {
                        return localizeUtils_1.getLocalizedString("plugins.spfx.questions.webpartName.error.duplicate", webpartFolder);
                    }
                }
                return undefined;
            },
        },
    };
}
exports.SPFxWebpartNameQuestion = SPFxWebpartNameQuestion;
var SPFxVersionOptionIds;
(function (SPFxVersionOptionIds) {
    SPFxVersionOptionIds["installLocally"] = "true";
    SPFxVersionOptionIds["globalPackage"] = "false";
})(SPFxVersionOptionIds = exports.SPFxVersionOptionIds || (exports.SPFxVersionOptionIds = {}));
function SPFxImportFolderQuestion(hasDefaultFunc = false) {
    return {
        type: "folder",
        name: questionNames_1.QuestionNames.SPFxFolder,
        title: localizeUtils_1.getLocalizedString("core.spfxFolder.title"),
        cliDescription: "Directory or Path that contains the existing SharePoint Framework solution.",
        placeholder: localizeUtils_1.getLocalizedString("core.spfxFolder.placeholder"),
        default: hasDefaultFunc
            ? (inputs) => {
                if (inputs.projectPath)
                    return path.join(inputs.projectPath, "src");
                return undefined;
            }
            : undefined,
    };
}
exports.SPFxImportFolderQuestion = SPFxImportFolderQuestion;
const getTemplate = (inputs) => {
    const capabilities = inputs[questionNames_1.QuestionNames.Capabilities];
    const templates = officeAddinJsonData.getProjectTemplateNames();
    const foundTemplate = templates.find((template) => {
        return capabilities && capabilities.includes(template);
    });
    return foundTemplate !== null && foundTemplate !== void 0 ? foundTemplate : "";
};
exports.getTemplate = getTemplate;
function officeAddinHostingQuestion() {
    const OfficeHostQuestion = {
        type: "singleSelect",
        name: questionNames_1.QuestionNames.OfficeAddinHost,
        title: "Add-in Host",
        staticOptions: [],
        dynamicOptions: (inputs) => {
            const template = exports.getTemplate(inputs);
            const getHostTemplateNames = officeAddinJsonData.getHostTemplateNames(template);
            const options = getHostTemplateNames.map((host) => ({
                label: officeAddinJsonData.getHostDisplayName(host),
                id: host,
            }));
            return options.length > 0 ? options : [{ label: "No Options", id: "No Options" }];
        },
        default: (inputs) => {
            const template = exports.getTemplate(inputs);
            const options = officeAddinJsonData.getHostTemplateNames(template);
            return options[0] || "No Options";
        },
        skipSingleOption: true,
    };
    return OfficeHostQuestion;
}
exports.officeAddinHostingQuestion = officeAddinHostingQuestion;
const officeAddinJsonData = new projectsJsonData_1.default();
function getLanguageOptions(inputs) {
    const runtime = getRuntime(inputs);
    // dotnet runtime only supports C#
    if (runtime === RuntimeOptions.DotNet().id) {
        return [{ id: "csharp", label: "C#" }];
    }
    // office addin supports language defined in officeAddinJsonData
    const projectType = inputs[questionNames_1.QuestionNames.ProjectType];
    if (projectType === ProjectTypeOptions.outlookAddin().id) {
        const template = exports.getTemplate(inputs);
        const supportedTypes = officeAddinJsonData.getSupportedScriptTypes(template);
        const options = supportedTypes.map((language) => ({ label: language, id: language }));
        return options.length > 0 ? options : [{ label: "No Options", id: "No Options" }];
    }
    const capabilities = inputs[questionNames_1.QuestionNames.Capabilities];
    // SPFx only supports typescript
    if (capabilities === CapabilityOptions.SPFxTab().id) {
        return [{ id: "typescript", label: "TypeScript" }];
    }
    // other case
    return [
        { id: "javascript", label: "JavaScript" },
        { id: "typescript", label: "TypeScript" },
    ];
}
exports.getLanguageOptions = getLanguageOptions;
var ProgrammingLanguage;
(function (ProgrammingLanguage) {
    ProgrammingLanguage["JS"] = "javascript";
    ProgrammingLanguage["TS"] = "typescript";
    ProgrammingLanguage["CSharp"] = "csharp";
})(ProgrammingLanguage = exports.ProgrammingLanguage || (exports.ProgrammingLanguage = {}));
function programmingLanguageQuestion() {
    const programmingLanguageQuestion = {
        name: questionNames_1.QuestionNames.ProgrammingLanguage,
        cliShortName: "l",
        title: "Programming Language",
        type: "singleSelect",
        staticOptions: [
            { id: ProgrammingLanguage.JS, label: "JavaScript" },
            { id: ProgrammingLanguage.TS, label: "TypeScript" },
            { id: ProgrammingLanguage.CSharp, label: "C#" },
        ],
        dynamicOptions: getLanguageOptions,
        default: (inputs) => {
            return getLanguageOptions(inputs)[0].id;
        },
        placeholder: (inputs) => {
            const runtime = getRuntime(inputs);
            // dotnet
            if (runtime === RuntimeOptions.DotNet().id) {
                return "";
            }
            // office addin
            const projectType = inputs[questionNames_1.QuestionNames.ProjectType];
            if (projectType === ProjectTypeOptions.outlookAddin().id) {
                const template = exports.getTemplate(inputs);
                const options = officeAddinJsonData.getSupportedScriptTypes(template);
                return options[0] || "No Options";
            }
            const capabilities = inputs[questionNames_1.QuestionNames.Capabilities];
            // SPFx
            if (capabilities === CapabilityOptions.SPFxTab().id) {
                return localizeUtils_1.getLocalizedString("core.ProgrammingLanguageQuestion.placeholder.spfx");
            }
            // other
            return localizeUtils_1.getLocalizedString("core.ProgrammingLanguageQuestion.placeholder");
        },
        skipSingleOption: true,
    };
    return programmingLanguageQuestion;
}
exports.programmingLanguageQuestion = programmingLanguageQuestion;
function folderQuestion() {
    return {
        type: "folder",
        name: questionNames_1.QuestionNames.Folder,
        cliShortName: "f",
        title: (inputs) => teamsfx_api_1.CLIPlatforms.includes(inputs.platform)
            ? "Directory where the project folder will be created in"
            : localizeUtils_1.getLocalizedString("core.question.workspaceFolder.title"),
        cliDescription: "Directory where the project folder will be created in.",
        placeholder: localizeUtils_1.getLocalizedString("core.question.workspaceFolder.placeholder"),
        default: (inputs) => teamsfx_api_1.CLIPlatforms.includes(inputs.platform)
            ? "./"
            : path.join(os.homedir(), constants_1.ConstantString.RootFolder),
    };
}
exports.folderQuestion = folderQuestion;
exports.AppNamePattern = '^(?=(.*[\\da-zA-Z]){2})[a-zA-Z][^"<>:\\?/*&|\u0000-\u001F]*[^"\\s.<>:\\?/*&|\u0000-\u001F]$';
function appNameQuestion() {
    const question = {
        type: "text",
        name: questionNames_1.QuestionNames.AppName,
        cliShortName: "n",
        title: "Application name",
        required: true,
        default: async (inputs) => {
            var _a, _b;
            let defaultName = undefined;
            if ((_a = inputs.teamsAppFromTdp) === null || _a === void 0 ? void 0 : _a.appName) {
                defaultName = utils_1.convertToAlphanumericOnly((_b = inputs.teamsAppFromTdp) === null || _b === void 0 ? void 0 : _b.appName);
            }
            else if (inputs[questionNames_1.QuestionNames.SPFxSolution] == "import") {
                defaultName = await spfxGenerator_1.SPFxGenerator.getSolutionName(inputs[questionNames_1.QuestionNames.SPFxFolder]);
            }
            else if (inputs.openAIPluginManifest) {
                defaultName = inputs.openAIPluginManifest.name_for_human;
            }
            return defaultName;
        },
        validation: {
            validFunc: async (input, previousInputs) => {
                const schema = {
                    pattern: exports.AppNamePattern,
                    maxLength: 30,
                };
                const appName = input;
                const validateResult = jsonschema.validate(appName, schema);
                if (validateResult.errors && validateResult.errors.length > 0) {
                    if (validateResult.errors[0].name === "pattern") {
                        return localizeUtils_1.getLocalizedString("core.QuestionAppName.validation.pattern");
                    }
                    if (validateResult.errors[0].name === "maxLength") {
                        return localizeUtils_1.getLocalizedString("core.QuestionAppName.validation.maxlength");
                    }
                }
                if (previousInputs && previousInputs.folder) {
                    const folder = previousInputs.folder;
                    if (folder) {
                        const projectPath = path.resolve(folder, appName);
                        const exists = await fs_extra_1.default.pathExists(projectPath);
                        if (exists)
                            return localizeUtils_1.getLocalizedString("core.QuestionAppName.validation.pathExist", projectPath);
                    }
                }
                return undefined;
            },
        },
        placeholder: "Application name",
    };
    return question;
}
exports.appNameQuestion = appNameQuestion;
function sampleSelectQuestion() {
    return {
        type: "singleSelect",
        name: questionNames_1.QuestionNames.Samples,
        cliName: "sample-name",
        cliDescription: "Specifies the Microsoft Teams App sample name.",
        cliChoiceListCommand: "teamsfx list samples",
        skipValidation: true,
        cliType: "argument",
        title: localizeUtils_1.getLocalizedString("core.SampleSelect.title"),
        staticOptions: [
            "hello-world-tab-with-backend",
            "graph-toolkit-contact-exporter",
            "bot-sso",
            "todo-list-SPFx",
            "hello-world-in-meeting",
            "todo-list-with-Azure-backend-M365",
            "NPM-search-connector-M365",
            "bot-proactive-messaging-teamsfx",
            "adaptive-card-notification",
            "incoming-webhook-notification",
            "stocks-update-notification-bot",
            "query-org-user-with-message-extension-sso",
            "team-central-dashboard",
            "graph-connector-app",
            "graph-toolkit-one-productivity-hub",
            "todo-list-with-Azure-backend",
            "share-now",
            "hello-world-teams-tab-and-outlook-add-in",
            "outlook-add-in-set-signature",
            "developer-assist-dashboard",
            "live-share-dice-roller",
            "teams-chef-bot",
            "spfx-productivity-dashboard",
            "react-retail-dashboard",
            "sso-enabled-tab-via-apim-proxy",
            "large-scale-notification",
            "graph-connector-bot",
        ],
        dynamicOptions: async () => {
            await samples_1.sampleProvider.fetchSampleConfig();
            return samples_1.sampleProvider.SampleCollection.samples.map((sample) => {
                return {
                    id: sample.id,
                    label: sample.title,
                    description: `${sample.time} • ${sample.configuration}`,
                    detail: sample.shortDescription,
                };
            });
        },
        placeholder: localizeUtils_1.getLocalizedString("core.SampleSelect.placeholder"),
        buttons: [
            {
                icon: "library",
                tooltip: localizeUtils_1.getLocalizedString("core.SampleSelect.buttons.viewSamples"),
                command: "fx-extension.openSamples",
            },
        ],
    };
}
class RuntimeOptions {
    static NodeJS() {
        return {
            id: "node",
            label: "Node.js",
            detail: localizeUtils_1.getLocalizedString("core.RuntimeOptionNodeJS.detail"),
        };
    }
    static DotNet() {
        return {
            id: "dotnet",
            label: ".NET Core",
            detail: localizeUtils_1.getLocalizedString("core.RuntimeOptionDotNet.detail"),
        };
    }
}
exports.RuntimeOptions = RuntimeOptions;
function runtimeQuestion() {
    return {
        type: "singleSelect",
        name: questionNames_1.QuestionNames.Runtime,
        title: localizeUtils_1.getLocalizedString("core.getRuntimeQuestion.title"),
        staticOptions: [RuntimeOptions.NodeJS(), RuntimeOptions.DotNet()],
        default: RuntimeOptions.NodeJS().id,
        placeholder: localizeUtils_1.getLocalizedString("core.getRuntimeQuestion.placeholder"),
        cliHidden: true,
    };
}
const defaultTabLocalHostUrl = "https://localhost:53000/index.html#/tab";
const tabContentUrlOptionItem = (tab) => {
    return {
        id: tab.name,
        label: tab.name,
        detail: localizeUtils_1.getLocalizedString("core.updateContentUrlOption.description", tab.contentUrl, defaultTabLocalHostUrl),
    };
};
const tabWebsiteUrlOptionItem = (tab) => {
    return {
        id: tab.name,
        label: tab.name,
        detail: localizeUtils_1.getLocalizedString("core.updateWebsiteUrlOption.description", tab.websiteUrl, defaultTabLocalHostUrl),
    };
};
function getTabWebsiteOptions(inputs) {
    const appDefinition = inputs.teamsAppFromTdp;
    if (appDefinition === null || appDefinition === void 0 ? void 0 : appDefinition.staticTabs) {
        const tabsWithWebsiteUrls = appDefinition.staticTabs.filter((o) => !!o.websiteUrl);
        if (tabsWithWebsiteUrls.length > 0) {
            return tabsWithWebsiteUrls.map((o) => tabWebsiteUrlOptionItem(o));
        }
    }
    return [];
}
function selectTabWebsiteUrlQuestion() {
    return {
        type: "multiSelect",
        name: questionNames_1.QuestionNames.ReplaceWebsiteUrl,
        title: localizeUtils_1.getLocalizedString("core.updateWebsiteUrlQuestion.title"),
        staticOptions: [],
        dynamicOptions: getTabWebsiteOptions,
        default: (inputs) => {
            const options = getTabWebsiteOptions(inputs);
            return options.map((o) => o.id);
        },
        placeholder: localizeUtils_1.getLocalizedString("core.updateUrlQuestion.placeholder"),
        forgetLastValue: true,
    };
}
function getTabContentUrlOptions(inputs) {
    const appDefinition = inputs.teamsAppFromTdp;
    if (appDefinition === null || appDefinition === void 0 ? void 0 : appDefinition.staticTabs) {
        const tabsWithContentUrls = appDefinition.staticTabs.filter((o) => !!o.contentUrl);
        if (tabsWithContentUrls.length > 0) {
            return tabsWithContentUrls.map((o) => tabContentUrlOptionItem(o));
        }
    }
    return [];
}
const selectTabsContentUrlQuestion = () => {
    return {
        type: "multiSelect",
        name: questionNames_1.QuestionNames.ReplaceContentUrl,
        title: localizeUtils_1.getLocalizedString("core.updateContentUrlQuestion.title"),
        staticOptions: [],
        dynamicOptions: getTabContentUrlOptions,
        default: (inputs) => {
            const options = getTabContentUrlOptions(inputs);
            return options.map((o) => o.id);
        },
        placeholder: localizeUtils_1.getLocalizedString("core.updateUrlQuestion.placeholder"),
        forgetLastValue: true,
    };
};
const answerToRepaceBotId = "bot";
const answerToReplaceMessageExtensionBotId = "messageExtension";
const botOptionItem = (isMessageExtension, botId) => {
    return {
        id: isMessageExtension ? answerToReplaceMessageExtensionBotId : answerToRepaceBotId,
        label: isMessageExtension
            ? localizeUtils_1.getLocalizedString("core.updateBotIdForMessageExtension.label")
            : localizeUtils_1.getLocalizedString("core.updateBotIdForBot.label"),
        detail: isMessageExtension
            ? localizeUtils_1.getLocalizedString("core.updateBotIdForMessageExtension.description", botId)
            : localizeUtils_1.getLocalizedString("core.updateBotIdForBot.description", botId),
    };
};
function getBotIdAndMeId(appDefinition) {
    const bots = appDefinition.bots;
    const messageExtensions = appDefinition.messagingExtensions;
    // can add only one bot. If existing, the length is 1.
    const botId = !!bots && bots.length > 0 ? bots[0].botId : undefined;
    // can add only one message extension. If existing, the length is 1.
    const messageExtensionId = !!messageExtensions && messageExtensions.length > 0 ? messageExtensions[0].botId : undefined;
    return [botId, messageExtensionId];
}
function getBotOptions(inputs) {
    const appDefinition = inputs.teamsAppFromTdp;
    if (!appDefinition)
        return [];
    const [botId, messageExtensionId] = getBotIdAndMeId(appDefinition);
    const options = [];
    if (botId) {
        options.push(botOptionItem(false, botId));
    }
    if (messageExtensionId) {
        options.push(botOptionItem(true, messageExtensionId));
    }
    return options;
}
function selectBotIdsQuestion() {
    // const statcOptions: OptionItem[] = [];
    // statcOptions.push(botOptionItem(false, "000000-0000-0000"));
    // statcOptions.push(botOptionItem(true, "000000-0000-0000"));
    return {
        type: "multiSelect",
        name: questionNames_1.QuestionNames.ReplaceBotIds,
        title: localizeUtils_1.getLocalizedString("core.updateBotIdsQuestion.title"),
        staticOptions: [],
        dynamicOptions: getBotOptions,
        default: (inputs) => {
            const options = getBotOptions(inputs);
            return options.map((o) => o.id);
        },
        placeholder: localizeUtils_1.getLocalizedString("core.updateBotIdsQuestion.placeholder"),
        forgetLastValue: true,
    };
}
const maximumLengthOfDetailsErrorMessageInInputBox = 90;
function apiSpecLocationQuestion(includeExistingAPIs = true) {
    const correlationId = correlator_1.Correlator.getId(); // This is a workaround for VSCode which will loose correlation id when user accepts the value.
    const validationOnAccept = async (input, inputs) => {
        try {
            if (!inputs) {
                throw new Error("inputs is undefined"); // should never happen
            }
            const context = utils_4.createContextV3();
            const res = await helper_1.listOperations(context, undefined, input.trim(), inputs[questionNames_1.QuestionNames.ManifestPath], includeExistingAPIs, false, inputs.platform === teamsfx_api_1.Platform.VSCode ? correlationId : undefined);
            if (res.isOk()) {
                inputs.supportedApisFromApiSpec = res.value;
            }
            else {
                const errors = res.error;
                if (inputs.platform === teamsfx_api_1.Platform.CLI) {
                    return errors.map((e) => e.content).join("\n");
                }
                if (errors.length === 1 &&
                    errors[0].content.length <= maximumLengthOfDetailsErrorMessageInInputBox) {
                    return errors[0].content;
                }
                else {
                    return localizeUtils_1.getLocalizedString("core.createProjectQuestion.apiSpec.multipleValidationErrors.vscode.message");
                }
            }
        }
        catch (e) {
            const error = error_2.assembleError(e);
            throw error;
        }
    };
    return {
        type: "singleFileOrText",
        name: questionNames_1.QuestionNames.ApiSpecLocation,
        cliShortName: "a",
        cliDescription: "OpenAPI description document location.",
        title: localizeUtils_1.getLocalizedString("core.createProjectQuestion.apiSpec.title"),
        forgetLastValue: true,
        inputBoxConfig: {
            type: "innerText",
            title: localizeUtils_1.getLocalizedString("core.createProjectQuestion.apiSpec.title"),
            placeholder: localizeUtils_1.getLocalizedString("core.createProjectQuestion.apiSpec.placeholder"),
            name: "input-api-spec-url",
            step: 2,
            validation: {
                validFunc: (input, inputs) => {
                    const result = util_1.isValidHttpUrl(input.trim())
                        ? undefined
                        : (inputs === null || inputs === void 0 ? void 0 : inputs.platform) === teamsfx_api_1.Platform.CLI
                            ? "Please enter a valid HTTP URL without authentication to access your OpenAPI description document or enter a file path of your local OpenAPI description document."
                            : localizeUtils_1.getLocalizedString("core.createProjectQuestion.invalidUrl.message");
                    return Promise.resolve(result);
                },
            },
        },
        inputOptionItem: {
            id: "input",
            label: localizeUtils_1.getLocalizedString("core.createProjectQuestion.apiSpecInputUrl.label"),
        },
        filters: {
            files: ["json", "yml", "yaml"],
        },
        validation: {
            validFunc: async (input, inputs) => {
                if (!util_1.isValidHttpUrl(input.trim()) && !(await fs_extra_1.default.pathExists(input.trim()))) {
                    return "Please enter a valid HTTP URL without authentication to access your OpenAPI description document or enter a file path of your local OpenAPI description document.";
                }
                return await validationOnAccept(input, inputs);
            },
        },
    };
}
exports.apiSpecLocationQuestion = apiSpecLocationQuestion;
function openAIPluginManifestLocationQuestion() {
    // export for unit test
    const correlationId = correlator_1.Correlator.getId(); // This is a workaround for VSCode which will loose correlation id when user accepts the value.
    return {
        type: "text",
        name: questionNames_1.QuestionNames.OpenAIPluginManifest,
        cliShortName: "m",
        title: localizeUtils_1.getLocalizedString("core.createProjectQuestion.OpenAIPluginDomain"),
        placeholder: localizeUtils_1.getLocalizedString("core.createProjectQuestion.OpenAIPluginDomain.placeholder"),
        cliDescription: "OpenAI plugin website domain or manifest URL.",
        forgetLastValue: true,
        validation: {
            validFunc: (input) => {
                const pattern = /(https?:\/\/)?([a-z0-9-]+(\.[a-z0-9-]+)*)(:[0-9]{1,5})?(\/)?$/i;
                const match = pattern.test(input);
                const result = match
                    ? undefined
                    : localizeUtils_1.getLocalizedString("core.createProjectQuestion.invalidUrl.message");
                return Promise.resolve(result);
            },
        },
        additionalValidationOnAccept: {
            validFunc: async (input, inputs) => {
                if (!inputs) {
                    throw new Error("inputs is undefined"); // should never happen
                }
                let manifest;
                try {
                    manifest = await helper_1.OpenAIPluginManifestHelper.loadOpenAIPluginManifest(input);
                    inputs.openAIPluginManifest = manifest;
                }
                catch (e) {
                    const error = error_2.assembleError(e);
                    return error.message;
                }
                const context = utils_4.createContextV3();
                try {
                    const res = await helper_1.listOperations(context, manifest, inputs[questionNames_1.QuestionNames.ApiSpecLocation], undefined, true, true, inputs.platform === teamsfx_api_1.Platform.VSCode ? correlationId : undefined);
                    if (res.isOk()) {
                        inputs.supportedApisFromApiSpec = res.value;
                    }
                    else {
                        const errors = res.error;
                        if (inputs.platform === teamsfx_api_1.Platform.CLI) {
                            return errors.map((e) => e.content).join("\n");
                        }
                        if (errors.length === 1 &&
                            errors[0].content.length <= maximumLengthOfDetailsErrorMessageInInputBox) {
                            return errors[0].content;
                        }
                        else {
                            return localizeUtils_1.getLocalizedString("core.createProjectQuestion.openAiPluginManifest.multipleValidationErrors.vscode.message");
                        }
                    }
                }
                catch (e) {
                    const error = error_2.assembleError(e);
                    throw error;
                }
            },
        },
    };
}
exports.openAIPluginManifestLocationQuestion = openAIPluginManifestLocationQuestion;
function apiOperationQuestion(includeExistingAPIs = true) {
    // export for unit test
    return {
        type: "multiSelect",
        name: questionNames_1.QuestionNames.ApiOperation,
        title: localizeUtils_1.getLocalizedString("core.createProjectQuestion.apiSpec.operation.title"),
        cliDescription: "Select Operation(s) Teams Can Interact with.",
        cliShortName: "o",
        placeholder: includeExistingAPIs
            ? featureFlags_1.isApiKeyEnabled()
                ? localizeUtils_1.getLocalizedString("core.createProjectQuestion.apiSpec.operation.apikey.placeholder")
                : localizeUtils_1.getLocalizedString("core.createProjectQuestion.apiSpec.operation.placeholder")
            : localizeUtils_1.getLocalizedString("core.createProjectQuestion.apiSpec.operation.placeholder.skipExisting"),
        forgetLastValue: true,
        staticOptions: [],
        validation: {
            validFunc: (input, inputs) => {
                if (input.length < 1 || input.length > 10) {
                    return localizeUtils_1.getLocalizedString("core.createProjectQuestion.apiSpec.operation.invalidMessage", input.length, 10);
                }
                const operations = inputs === null || inputs === void 0 ? void 0 : inputs.supportedApisFromApiSpec;
                const authNames = new Set();
                const serverUrls = new Set();
                for (const inputItem of input) {
                    const operation = operations.find((op) => op.id === inputItem);
                    if (operation) {
                        if (operation.data.authName) {
                            authNames.add(operation.data.authName);
                            serverUrls.add(operation.data.serverUrl);
                        }
                    }
                }
                if (authNames.size > 1) {
                    return localizeUtils_1.getLocalizedString("core.createProjectQuestion.apiSpec.operation.multipleAuth", Array.from(authNames).join(", "));
                }
                if (serverUrls.size > 1) {
                    return localizeUtils_1.getLocalizedString("core.createProjectQuestion.apiSpec.operation.multipleServer", Array.from(serverUrls).join(", "));
                }
            },
        },
        dynamicOptions: (inputs) => {
            if (!inputs.supportedApisFromApiSpec) {
                throw new error_2.EmptyOptionError(questionNames_1.QuestionNames.ApiOperation, "question");
            }
            const operations = inputs.supportedApisFromApiSpec;
            return operations;
        },
    };
}
exports.apiOperationQuestion = apiOperationQuestion;
function capabilitySubTree() {
    const node = {
        data: capabilityQuestion(),
        children: [
            {
                // Notification bot trigger sub-tree
                condition: { equals: CapabilityOptions.notificationBot().id },
                data: botTriggerQuestion(),
            },
            {
                // SPFx sub-tree
                condition: { equals: CapabilityOptions.SPFxTab().id },
                data: SPFxSolutionQuestion(),
                children: [
                    {
                        data: { type: "group" },
                        children: [
                            { data: SPFxPackageSelectQuestion() },
                            { data: SPFxFrameworkQuestion() },
                            { data: SPFxWebpartNameQuestion() },
                        ],
                        condition: { equals: "new" },
                    },
                    {
                        data: SPFxImportFolderQuestion(),
                        condition: { equals: "import" },
                    },
                ],
            },
            {
                // office addin import sub-tree
                condition: { equals: CapabilityOptions.officeAddinImport().id },
                data: { type: "group", name: questionNames_1.QuestionNames.OfficeAddinImport },
                children: [
                    {
                        data: {
                            type: "folder",
                            name: questionNames_1.QuestionNames.OfficeAddinFolder,
                            title: "Existing add-in project folder",
                        },
                    },
                    {
                        data: {
                            type: "singleFile",
                            name: questionNames_1.QuestionNames.OfficeAddinManifest,
                            title: "Select import project manifest file",
                        },
                    },
                ],
            },
            {
                // office addin other items sub-tree
                condition: {
                    enum: CapabilityOptions.officeAddinItems().map((i) => i.id),
                },
                data: officeAddinHostingQuestion(),
            },
            {
                // Search ME sub-tree
                condition: { equals: CapabilityOptions.m365SearchMe().id },
                data: meArchitectureQuestion(),
            },
            {
                // API ME from API Spec or Copilot plugin from API spec or AI Plugin
                condition: (inputs) => {
                    return (inputs[questionNames_1.QuestionNames.Capabilities] === CapabilityOptions.copilotPluginApiSpec().id ||
                        inputs[questionNames_1.QuestionNames.Capabilities] ===
                            CapabilityOptions.copilotPluginOpenAIPlugin().id ||
                        inputs[questionNames_1.QuestionNames.MeArchitectureType] === MeArchitectureOptions.apiSpec().id);
                },
                data: { type: "group", name: questionNames_1.QuestionNames.CopilotPluginExistingApi },
                children: [
                    {
                        condition: (inputs) => {
                            return (inputs[questionNames_1.QuestionNames.Capabilities] ===
                                CapabilityOptions.copilotPluginApiSpec().id ||
                                inputs[questionNames_1.QuestionNames.MeArchitectureType] === MeArchitectureOptions.apiSpec().id);
                        },
                        data: apiSpecLocationQuestion(),
                    },
                    {
                        condition: { equals: CapabilityOptions.copilotPluginOpenAIPlugin().id },
                        data: openAIPluginManifestLocationQuestion(),
                    },
                    {
                        data: apiOperationQuestion(),
                    },
                ],
            },
            {
                // programming language
                data: programmingLanguageQuestion(),
                condition: (inputs) => {
                    return (!!inputs[questionNames_1.QuestionNames.Capabilities] &&
                        inputs[questionNames_1.QuestionNames.Capabilities] !== CapabilityOptions.copilotPluginApiSpec().id &&
                        inputs[questionNames_1.QuestionNames.Capabilities] !==
                            CapabilityOptions.copilotPluginOpenAIPlugin().id &&
                        inputs[questionNames_1.QuestionNames.MeArchitectureType] !== MeArchitectureOptions.apiSpec().id);
                },
            },
            {
                // root folder
                data: folderQuestion(),
            },
            {
                // app name
                data: appNameQuestion(),
            },
        ],
    };
    return node;
}
exports.capabilitySubTree = capabilitySubTree;
function createProjectQuestionNode() {
    const createProjectQuestion = {
        data: { type: "group" },
        children: [
            {
                condition: (inputs) => featureFlags_1.isCLIDotNetEnabled() && teamsfx_api_1.CLIPlatforms.includes(inputs.platform),
                data: runtimeQuestion(),
            },
            {
                condition: (inputs) => inputs.platform === teamsfx_api_1.Platform.VSCode || inputs.platform === teamsfx_api_1.Platform.CLI,
                data: projectTypeQuestion(),
                cliOptionDisabled: "self",
            },
            capabilitySubTree(),
            {
                condition: (inputs) => inputs.teamsAppFromTdp && utils_2.isPersonalApp(inputs.teamsAppFromTdp),
                data: { type: "group", name: questionNames_1.QuestionNames.RepalceTabUrl },
                cliOptionDisabled: "all",
                inputsDisabled: "all",
                children: [
                    {
                        condition: (inputs) => {
                            var _a;
                            return (((_a = inputs.teamsAppFromTdp) === null || _a === void 0 ? void 0 : _a.staticTabs.filter((o) => !!o.websiteUrl)) || []).length >
                                0;
                        },
                        data: selectTabWebsiteUrlQuestion(),
                    },
                    {
                        condition: (inputs) => {
                            var _a;
                            return (((_a = inputs.teamsAppFromTdp) === null || _a === void 0 ? void 0 : _a.staticTabs.filter((o) => !!o.contentUrl)) || []).length >
                                0;
                        },
                        data: selectTabsContentUrlQuestion(),
                    },
                ],
            },
            {
                condition: (inputs) => {
                    const appDef = inputs.teamsAppFromTdp;
                    return appDef && utils_2.needBotCode(appDef);
                },
                data: selectBotIdsQuestion(),
                cliOptionDisabled: "all",
                inputsDisabled: "all",
            },
        ],
    };
    return createProjectQuestion;
}
exports.createProjectQuestionNode = createProjectQuestionNode;
function createSampleProjectQuestionNode() {
    return {
        data: sampleSelectQuestion(),
        children: [
            {
                data: folderQuestion(),
            },
        ],
    };
}
exports.createSampleProjectQuestionNode = createSampleProjectQuestionNode;
function createProjectCliHelpNode() {
    const node = lodash_1.cloneDeep(createProjectQuestionNode());
    const deleteNames = [
        questionNames_1.QuestionNames.ProjectType,
        questionNames_1.QuestionNames.OfficeAddinImport,
        questionNames_1.QuestionNames.OfficeAddinHost,
        questionNames_1.QuestionNames.RepalceTabUrl,
        questionNames_1.QuestionNames.ReplaceBotIds,
        questionNames_1.QuestionNames.Samples,
    ];
    if (!featureFlags_1.isCLIDotNetEnabled()) {
        deleteNames.push(questionNames_1.QuestionNames.Runtime);
    }
    if (!featureFlags_1.isApiCopilotPluginEnabled()) {
        deleteNames.push(questionNames_1.QuestionNames.CopilotPluginExistingApi);
    }
    trimQuestionTreeForCliHelp(node, deleteNames);
    return node;
}
exports.createProjectCliHelpNode = createProjectCliHelpNode;
function trimQuestionTreeForCliHelp(node, deleteNames) {
    if (node.children) {
        node.children = node.children.filter((child) => !child.data.name || !deleteNames.includes(child.data.name));
        for (const child of node.children) {
            trimQuestionTreeForCliHelp(child, deleteNames);
        }
    }
}
function pickSubTree(node, name) {
    if (node.data.name === name) {
        return node;
    }
    let found;
    if (node.children) {
        for (const child of node.children) {
            found = pickSubTree(child, name);
            if (found)
                return found;
        }
    }
    return undefined;
}
//# sourceMappingURL=create.js.map