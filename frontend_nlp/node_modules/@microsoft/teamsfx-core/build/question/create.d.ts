import { FolderQuestion, IQTreeNode, Inputs, MultiSelectQuestion, OptionItem, Platform, SingleFileOrInputQuestion, SingleSelectQuestion, TextInputQuestion } from "@microsoft/teamsfx-api";
export declare class ScratchOptions {
    static yes(): OptionItem;
    static no(): OptionItem;
    static all(): OptionItem[];
}
export declare class ProjectTypeOptions {
    static tab(platform?: Platform): OptionItem;
    static bot(platform?: Platform): OptionItem;
    static me(platform?: Platform): OptionItem;
    static outlookAddin(platform?: Platform): OptionItem;
    static copilotPlugin(platform?: Platform): OptionItem;
}
export declare class CapabilityOptions {
    static basicBot(): OptionItem;
    static notificationBot(): OptionItem;
    static commandBot(): OptionItem;
    static workflowBot(inputs?: Inputs): OptionItem;
    static nonSsoTab(): OptionItem;
    static tab(): OptionItem;
    static m365SsoLaunchPage(): OptionItem;
    static dashboardTab(): OptionItem;
    static SPFxTab(): OptionItem;
    static linkUnfurling(): OptionItem;
    static m365SearchMe(): OptionItem;
    static SearchMe(): OptionItem;
    static collectFormMe(): OptionItem;
    static me(): OptionItem;
    static bots(inputs?: Inputs, includeAssistant?: boolean): OptionItem[];
    static tabs(): OptionItem[];
    static dotnetCaps(inputs?: Inputs): OptionItem[];
    /**
     * Collect all capabilities for message extension, including dotnet and nodejs.
     * @returns OptionItem[] capability list
     */
    static collectMECaps(): OptionItem[];
    static mes(inputs?: Inputs): OptionItem[];
    static copilotPlugins(): OptionItem[];
    /**
     * static capability list, which does not depend on any feature flags
     */
    static staticAll(inputs?: Inputs): OptionItem[];
    /**
     * dynamic capability list, which depends on feature flags
     */
    static all(inputs?: Inputs): OptionItem[];
    static officeAddinImport(): OptionItem;
    static officeAddinItems(): OptionItem[];
    static nonSsoTabAndBot(): OptionItem;
    static botAndMe(): OptionItem;
    static copilotPluginNewApi(): OptionItem;
    static copilotPluginApiSpec(): OptionItem;
    static copilotPluginOpenAIPlugin(): OptionItem;
    static aiBot(): OptionItem;
    static aiAssistantBot(): OptionItem;
}
export declare function capabilityQuestion(): SingleSelectQuestion;
export declare class MeArchitectureOptions {
    static botMe(): OptionItem;
    static botPlugin(): OptionItem;
    static newApi(): OptionItem;
    static apiSpec(): OptionItem;
    static all(): OptionItem[];
    static staticAll(): OptionItem[];
}
export declare function meArchitectureQuestion(): SingleSelectQuestion;
declare enum HostType {
    AppService = "app-service",
    Functions = "azure-functions"
}
declare const NotificationTriggers: {
    readonly HTTP: "http";
    readonly TIMER: "timer";
};
declare type NotificationTrigger = typeof NotificationTriggers[keyof typeof NotificationTriggers];
interface HostTypeTriggerOptionItem extends OptionItem {
    hostType: HostType;
    triggers?: NotificationTrigger[];
}
export declare class NotificationTriggerOptions {
    static appService(): HostTypeTriggerOptionItem;
    static appServiceForVS(): HostTypeTriggerOptionItem;
    static functionsTimerTrigger(): HostTypeTriggerOptionItem;
    static functionsHttpAndTimerTrigger(): HostTypeTriggerOptionItem;
    static functionsHttpTrigger(): HostTypeTriggerOptionItem;
    static functionsTriggers(): HostTypeTriggerOptionItem[];
    static all(): HostTypeTriggerOptionItem[];
}
export declare function SPFxPackageSelectQuestion(): SingleSelectQuestion;
export declare function SPFxFrameworkQuestion(): SingleSelectQuestion;
export declare function SPFxWebpartNameQuestion(): TextInputQuestion;
export declare enum SPFxVersionOptionIds {
    installLocally = "true",
    globalPackage = "false"
}
export declare function SPFxImportFolderQuestion(hasDefaultFunc?: boolean): FolderQuestion;
export declare const getTemplate: (inputs: Inputs) => string;
export declare function officeAddinHostingQuestion(): SingleSelectQuestion;
export declare function getLanguageOptions(inputs: Inputs): OptionItem[];
export declare enum ProgrammingLanguage {
    JS = "javascript",
    TS = "typescript",
    CSharp = "csharp"
}
export declare function programmingLanguageQuestion(): SingleSelectQuestion;
export declare function folderQuestion(): FolderQuestion;
export declare const AppNamePattern = "^(?=(.*[\\da-zA-Z]){2})[a-zA-Z][^\"<>:\\?/*&|\0-\u001F]*[^\"\\s.<>:\\?/*&|\0-\u001F]$";
export declare function appNameQuestion(): TextInputQuestion;
export declare class RuntimeOptions {
    static NodeJS(): OptionItem;
    static DotNet(): OptionItem;
}
export declare function apiSpecLocationQuestion(includeExistingAPIs?: boolean): SingleFileOrInputQuestion;
export declare function openAIPluginManifestLocationQuestion(): TextInputQuestion;
export declare function apiOperationQuestion(includeExistingAPIs?: boolean): MultiSelectQuestion;
export declare function capabilitySubTree(): IQTreeNode;
export declare function createProjectQuestionNode(): IQTreeNode;
export declare function createSampleProjectQuestionNode(): IQTreeNode;
export declare function createProjectCliHelpNode(): IQTreeNode;
export {};
//# sourceMappingURL=create.d.ts.map