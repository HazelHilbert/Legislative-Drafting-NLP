// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.sendErrorTelemetryThenReturnError = exports.ensureComponentConnections = exports.createDriverContext = exports.createContextV3 = void 0;
const teamsfx_api_1 = require("@microsoft/teamsfx-api");
const lodash_1 = require("lodash");
const globalVars_1 = require("../core/globalVars");
const constants_1 = require("./constants");
const workflow_1 = require("./workflow");
function createContextV3() {
    const context = {
        userInteraction: globalVars_1.TOOLS.ui,
        logProvider: globalVars_1.TOOLS.logProvider,
        telemetryReporter: globalVars_1.TOOLS.telemetryReporter,
        tokenProvider: globalVars_1.TOOLS.tokenProvider,
    };
    return context;
}
exports.createContextV3 = createContextV3;
function createDriverContext(inputs) {
    const driverContext = {
        azureAccountProvider: globalVars_1.TOOLS.tokenProvider.azureAccountProvider,
        m365TokenProvider: globalVars_1.TOOLS.tokenProvider.m365TokenProvider,
        ui: globalVars_1.TOOLS.ui,
        progressBar: undefined,
        logProvider: globalVars_1.TOOLS.logProvider,
        telemetryReporter: globalVars_1.TOOLS.telemetryReporter,
        projectPath: inputs.projectPath,
        platform: inputs.platform,
    };
    return driverContext;
}
exports.createDriverContext = createDriverContext;
const ComponentConnections = {
    [constants_1.ComponentNames.AzureWebApp]: [
        constants_1.ComponentNames.Identity,
        constants_1.ComponentNames.AzureSQL,
        constants_1.ComponentNames.KeyVault,
        constants_1.ComponentNames.AadApp,
        constants_1.ComponentNames.TeamsTab,
        constants_1.ComponentNames.TeamsBot,
        constants_1.ComponentNames.TeamsApi,
    ],
    [constants_1.ComponentNames.Function]: [
        constants_1.ComponentNames.Identity,
        constants_1.ComponentNames.AzureSQL,
        constants_1.ComponentNames.KeyVault,
        constants_1.ComponentNames.AadApp,
        constants_1.ComponentNames.TeamsTab,
        constants_1.ComponentNames.TeamsBot,
        constants_1.ComponentNames.TeamsApi,
    ],
    [constants_1.ComponentNames.APIM]: [constants_1.ComponentNames.TeamsTab, constants_1.ComponentNames.TeamsBot],
};
function ensureComponentConnections(settingsV3) {
    var _a;
    const exists = (c) => workflow_1.getComponent(settingsV3, c) !== undefined;
    const existingConfigNames = Object.keys(ComponentConnections).filter(exists);
    for (const configName of existingConfigNames) {
        const existingResources = ComponentConnections[configName].filter(exists);
        const configs = settingsV3.components.filter((c) => c.name === configName);
        for (const config of configs) {
            config.connections = lodash_1.cloneDeep(existingResources);
        }
    }
    if (workflow_1.getComponent(settingsV3, constants_1.ComponentNames.TeamsApi) &&
        workflow_1.getComponent(settingsV3, constants_1.ComponentNames.APIM)) {
        const functionConfig = workflow_1.getComponentByScenario(settingsV3, constants_1.ComponentNames.Function, constants_1.Scenarios.Api);
        (_a = functionConfig === null || functionConfig === void 0 ? void 0 : functionConfig.connections) === null || _a === void 0 ? void 0 : _a.push(constants_1.ComponentNames.APIM);
    }
}
exports.ensureComponentConnections = ensureComponentConnections;
function sendErrorTelemetryThenReturnError(eventName, error, reporter, properties, measurements, errorProps) {
    if (!properties) {
        properties = {};
    }
    if (constants_1.SolutionTelemetryProperty.Component in properties === false) {
        properties[constants_1.SolutionTelemetryProperty.Component] = constants_1.SolutionTelemetryComponentName;
    }
    properties[constants_1.SolutionTelemetryProperty.Success] = "no";
    if (error instanceof teamsfx_api_1.UserError) {
        properties["error-type"] = "user";
    }
    else {
        properties["error-type"] = "system";
    }
    properties["error-code"] = `${error.source}.${error.name}`;
    properties["error-message"] = error.message;
    reporter === null || reporter === void 0 ? void 0 : reporter.sendTelemetryErrorEvent(eventName, properties, measurements, errorProps);
    return error;
}
exports.sendErrorTelemetryThenReturnError = sendErrorTelemetryThenReturnError;
//# sourceMappingURL=utils.js.map