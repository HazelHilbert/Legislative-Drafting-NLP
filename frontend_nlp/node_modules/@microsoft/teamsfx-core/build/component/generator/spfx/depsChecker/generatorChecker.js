"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
exports.GeneratorChecker = void 0;
const tslib_1 = require("tslib");
const fs = tslib_1.__importStar(require("fs-extra"));
const path = tslib_1.__importStar(require("path"));
const os = tslib_1.__importStar(require("os"));
const teamsfx_api_1 = require("@microsoft/teamsfx-api");
const telemetry_helper_1 = require("../utils/telemetry-helper");
const telemetryEvents_1 = require("../utils/telemetryEvents");
const error_1 = require("../error");
const cpUtils_1 = require("../../../../common/deps-checker/util/cpUtils");
const constants_1 = require("../utils/constants");
const utils_1 = require("../utils/utils");
const name = constants_1.Constants.GeneratorPackageName;
const displayName = `${name}@${constants_1.Constants.LatestVersion}`;
const timeout = 6 * 60 * 1000;
class GeneratorChecker {
    constructor(logger) {
        this._logger = logger;
    }
    async ensureLatestDependency(ctx) {
        telemetry_helper_1.telemetryHelper.sendSuccessEvent(ctx, telemetryEvents_1.TelemetryEvents.EnsureLatestSharepointGeneratorStart);
        try {
            void this._logger.info(`${displayName} not found, installing...`);
            await this.install();
            void this._logger.info(`Successfully installed ${displayName}`);
            telemetry_helper_1.telemetryHelper.sendSuccessEvent(ctx, telemetryEvents_1.TelemetryEvents.EnsureLatestSharepointGenerator);
        }
        catch (error) {
            telemetry_helper_1.telemetryHelper.sendErrorEvent(ctx, telemetryEvents_1.TelemetryEvents.EnsureLatestSharepointGenerator, error, {
                [telemetryEvents_1.TelemetryProperty.EnsureLatestSharepointGeneratorReason]: error.name,
            });
            // eslint-disable-next-line @typescript-eslint/restrict-template-expressions
            this._logger.error(`Failed to install ${displayName}, error = '${error}'`);
            return teamsfx_api_1.err(error);
        }
        return teamsfx_api_1.ok(true);
    }
    async isLatestInstalled(loadedLatestVersion) {
        try {
            const generatorVersion = await this.queryVersion();
            const latestGeneratorVersion = loadedLatestVersion !== null && loadedLatestVersion !== void 0 ? loadedLatestVersion : (await this.findLatestVersion(5));
            const hasSentinel = await fs.pathExists(this.getSentinelPath());
            return !!latestGeneratorVersion && generatorVersion === latestGeneratorVersion && hasSentinel;
        }
        catch (error) {
            return false;
        }
    }
    async install() {
        void this._logger.info("Start installing...");
        await this.cleanup();
        await this.installGenerator();
        void this._logger.info("Validating package...");
        if (!(await this.validate())) {
            void this._logger.debug(`Failed to validate ${name}, cleaning up...`);
            await this.cleanup();
            throw error_1.DependencyValidateError(name);
        }
    }
    getSpGeneratorPath() {
        return `"${path.join(this.getDefaultInstallPath(), "node_modules", "@microsoft", "generator-sharepoint", "lib", "generators", "app", "index.js")}"`;
    }
    async findGloballyInstalledVersion(timeoutInSeconds) {
        return await utils_1.Utils.findGloballyInstalledVersion(this._logger, name, timeoutInSeconds !== null && timeoutInSeconds !== void 0 ? timeoutInSeconds : 0);
    }
    async findLatestVersion(timeoutInSeconds) {
        return await utils_1.Utils.findLatestVersion(this._logger, name, timeoutInSeconds !== null && timeoutInSeconds !== void 0 ? timeoutInSeconds : 0);
    }
    async validate() {
        return await fs.pathExists(this.getSentinelPath());
    }
    getDefaultInstallPath() {
        return path.join(os.homedir(), `.${teamsfx_api_1.ConfigFolderName}`, "bin", "spGenerator");
    }
    getSentinelPath() {
        return path.join(os.homedir(), `.${teamsfx_api_1.ConfigFolderName}`, "spGenerator-sentinel");
    }
    async queryVersion() {
        var _a;
        const packagePath = path.join(this.getDefaultInstallPath(), "node_modules", "@microsoft", "generator-sharepoint", "package.json");
        if (await fs.pathExists(packagePath)) {
            const packageJson = await fs.readJson(packagePath);
            return (_a = packageJson.version) !== null && _a !== void 0 ? _a : undefined;
        }
        return undefined;
    }
    async cleanup() {
        try {
            const legacyDirectory = path.join(os.homedir(), `.${teamsfx_api_1.ConfigFolderName}`, "bin", "spfx");
            if (fs.existsSync(legacyDirectory)) {
                await fs.emptyDir(legacyDirectory);
                await fs.rmdir(legacyDirectory);
            }
            await fs.emptyDir(this.getDefaultInstallPath());
            await fs.remove(this.getSentinelPath());
        }
        catch (err) {
            // eslint-disable-next-line @typescript-eslint/restrict-template-expressions
            this._logger.error(`Failed to clean up path: ${this.getDefaultInstallPath()}, error: ${err}`);
        }
    }
    async installGenerator() {
        try {
            const version = constants_1.Constants.LatestVersion;
            await fs.ensureDir(path.join(this.getDefaultInstallPath(), "node_modules"));
            await cpUtils_1.cpUtils.executeCommand(undefined, this._logger, { timeout: timeout, shell: false }, utils_1.getExecCommand("npm"), "install", `${name}@${version}`, "--prefix", `${this.getDefaultInstallPath()}`, "--no-audit", "--global-style");
            await fs.ensureFile(this.getSentinelPath());
        }
        catch (error) {
            void this._logger.error(`Failed to execute npm install ${displayName}`);
            throw error_1.NpmInstallError(error);
        }
    }
}
exports.GeneratorChecker = GeneratorChecker;
//# sourceMappingURL=generatorChecker.js.map