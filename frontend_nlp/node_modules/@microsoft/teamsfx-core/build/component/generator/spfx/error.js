// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PathAlreadyExistsError = exports.ImportSPFxSolutionError = exports.UpdateSPFxTemplateError = exports.RetrieveSPFxInfoError = exports.CopyExistingSPFxSolutionError = exports.YoGeneratorScaffoldError = exports.LatestPackageInstallError = exports.DevEnvironmentSetupError = exports.DependencyValidateError = exports.NpmInstallError = exports.ScaffoldError = void 0;
const teamsfx_api_1 = require("@microsoft/teamsfx-api");
const constants_1 = require("./utils/constants");
const localizeUtils_1 = require("../../../common/localizeUtils");
function ScaffoldError(error) {
    if (error instanceof teamsfx_api_1.UserError || error instanceof teamsfx_api_1.SystemError) {
        return error;
    }
    else {
        return new teamsfx_api_1.SystemError({
            error: error,
            source: constants_1.Constants.PLUGIN_NAME,
            name: "SPFxScaffoldError",
        });
    }
}
exports.ScaffoldError = ScaffoldError;
function NpmInstallError(error) {
    return new teamsfx_api_1.SystemError(constants_1.Constants.PLUGIN_NAME, "NpmInstallFailed", localizeUtils_1.getDefaultString("plugins.spfx.error.npmInstallFailed", error.message), localizeUtils_1.getLocalizedString("plugins.spfx.error.npmInstallFailed", error.message));
}
exports.NpmInstallError = NpmInstallError;
function DependencyValidateError(dependency) {
    return new teamsfx_api_1.SystemError(constants_1.Constants.PLUGIN_NAME, "InvalidDependency", localizeUtils_1.getDefaultString("plugins.spfx.error.invalidDependency", dependency), localizeUtils_1.getLocalizedString("plugins.spfx.error.invalidDependency", dependency));
}
exports.DependencyValidateError = DependencyValidateError;
function DevEnvironmentSetupError() {
    return new teamsfx_api_1.UserError({
        source: constants_1.Constants.PLUGIN_NAME,
        name: "DevEnvironmentSetupError",
        message: localizeUtils_1.getDefaultString("plugins.spfx.error.devEnvironmentNotSetup"),
        displayMessage: localizeUtils_1.getLocalizedString("plugins.spfx.error.devEnvironmentNotSetup"),
        helpLink: constants_1.Constants.SetUpDevEnvironmentHelpLink,
    });
}
exports.DevEnvironmentSetupError = DevEnvironmentSetupError;
function LatestPackageInstallError() {
    const fxFolderPath = "HOME/.fx";
    return new teamsfx_api_1.SystemError(constants_1.Constants.PLUGIN_NAME, "LatestPackageInstallFailed", localizeUtils_1.getDefaultString("plugins.spfx.error.installLatestDependencyError", fxFolderPath, constants_1.Constants.SetUpDevEnvironmentHelpLink), localizeUtils_1.getLocalizedString("plugins.spfx.error.installLatestDependencyError", fxFolderPath, constants_1.Constants.SetUpDevEnvironmentHelpLink));
}
exports.LatestPackageInstallError = LatestPackageInstallError;
function YoGeneratorScaffoldError() {
    return new teamsfx_api_1.UserError({
        source: constants_1.Constants.PLUGIN_NAME,
        name: "ScaffoldFailed",
        message: localizeUtils_1.getDefaultString("plugins.spfx.error.scaffoldError", "command:fx-extension.showOutputChannel"),
        displayMessage: localizeUtils_1.getLocalizedString("plugins.spfx.error.scaffoldError", "command:fx-extension.showOutputChannel"),
        helpLink: constants_1.Constants.ScaffoldHelpLink,
    });
}
exports.YoGeneratorScaffoldError = YoGeneratorScaffoldError;
function CopyExistingSPFxSolutionError(e) {
    return new teamsfx_api_1.UserError({
        source: constants_1.Constants.PLUGIN_NAME,
        name: "CopyExistingSPFxSolutioinFailed",
        message: localizeUtils_1.getDefaultString("plugins.spfx.error.import.copySPFxSolution", e.message),
        displayMessage: localizeUtils_1.getLocalizedString("plugins.spfx.error.import.copySPFxSolution", e.message),
        helpLink: constants_1.Constants.IMPORT_HELP_LINK,
    });
}
exports.CopyExistingSPFxSolutionError = CopyExistingSPFxSolutionError;
function RetrieveSPFxInfoError() {
    return new teamsfx_api_1.UserError({
        source: constants_1.Constants.PLUGIN_NAME,
        name: "RetrieveSPFxInfoFailed",
        message: localizeUtils_1.getDefaultString("plugins.spfx.error.import.retrieveSolutionInfo"),
        displayMessage: localizeUtils_1.getLocalizedString("plugins.spfx.error.import.retrieveSolutionInfo"),
        helpLink: constants_1.Constants.IMPORT_HELP_LINK,
    });
}
exports.RetrieveSPFxInfoError = RetrieveSPFxInfoError;
function UpdateSPFxTemplateError(e) {
    return new teamsfx_api_1.UserError({
        source: constants_1.Constants.PLUGIN_NAME,
        name: "UpdateSPFxTemplateFailed",
        message: localizeUtils_1.getDefaultString("plugins.spfx.error.import.updateSPFxTemplate", e.message),
        displayMessage: localizeUtils_1.getLocalizedString("plugins.spfx.error.import.updateSPFxTemplate", e.message),
        helpLink: constants_1.Constants.IMPORT_HELP_LINK,
    });
}
exports.UpdateSPFxTemplateError = UpdateSPFxTemplateError;
function ImportSPFxSolutionError(e) {
    return new teamsfx_api_1.UserError({
        source: constants_1.Constants.PLUGIN_NAME,
        name: "ImportSPFxSolutionFailed",
        message: localizeUtils_1.getDefaultString("plugins.spfx.error.import.common", e.message),
        displayMessage: localizeUtils_1.getLocalizedString("plugins.spfx.error.import.common", e.message),
        helpLink: constants_1.Constants.IMPORT_HELP_LINK,
    });
}
exports.ImportSPFxSolutionError = ImportSPFxSolutionError;
function PathAlreadyExistsError(path) {
    return new teamsfx_api_1.UserError({
        source: constants_1.Constants.PLUGIN_NAME,
        name: "PathAlreadyExists",
        message: localizeUtils_1.getDefaultString("core.QuestionAppName.validation.pathExist", path),
        displayMessage: localizeUtils_1.getLocalizedString("core.QuestionAppName.validation.pathExist", path),
    });
}
exports.PathAlreadyExistsError = PathAlreadyExistsError;
//# sourceMappingURL=error.js.map