/// <reference types="node" />
import { SampleConfig } from "../../common/samples";
import AdmZip from "adm-zip";
import { AxiosResponse, CancelToken } from "axios";
export declare function sendRequestWithRetry<T>(requestFn: () => Promise<AxiosResponse<T>>, tryLimits: number): Promise<AxiosResponse<T>>;
export declare function sendRequestWithTimeout<T>(requestFn: (cancelToken: CancelToken) => Promise<AxiosResponse<T>>, timeoutInMs: number, tryLimits?: number): Promise<AxiosResponse<T>>;
export declare function fetchTemplateZipUrl(name: string, tryLimits?: number, timeoutInMs?: number): Promise<string>;
export declare function fetchZipFromUrl(url: string, tryLimits?: number, timeoutInMs?: number): Promise<AdmZip>;
export declare function unzip(zip: AdmZip, dstPath: string, nameReplaceFn?: (filePath: string, data: Buffer) => string, dataReplaceFn?: (filePath: string, data: Buffer) => Buffer | string, filterFn?: (filePath: string) => boolean): Promise<string[]>;
export declare function renderTemplateFileData(fileName: string, fileData: Buffer, variables?: {
    [key: string]: string;
}): string | Buffer;
export declare function renderTemplateFileName(fileName: string, fileData: Buffer, variables?: {
    [key: string]: string;
}): string;
export declare function getSampleInfoFromName(sampleName: string): SampleConfig;
export declare function zipFolder(folderPath: string): AdmZip;
export declare function downloadDirectory(sampleInfo: SampleUrlInfo, dstPath: string, concurrencyLimits?: number, retryLimits?: number): Promise<string[]>;
export declare type SampleUrlInfo = {
    owner: string;
    repository: string;
    ref: string;
    dir: string;
};
export declare function parseSampleUrl(url: string): SampleUrlInfo;
export declare function runWithLimitedConcurrency<T>(items: T[], callback: (arg: T) => any, concurrencyLimit: number): Promise<void>;
export declare function convertToLangKey(programmingLanguage: string): string;
//# sourceMappingURL=utils.d.ts.map