"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
exports.DownloadDirectoryActionSeq = exports.SampleActionSeq = exports.TemplateActionSeq = exports.unzipAction = exports.fetchTemplateFromLocalAction = exports.fetchZipFromUrlAction = exports.fetchTemplateUrlWithTagAction = exports.downloadDirectoryAction = exports.fetchTemplateZipFromSourceCodeAction = exports.GeneratorActionName = void 0;
const tslib_1 = require("tslib");
const adm_zip_1 = tslib_1.__importDefault(require("adm-zip"));
const fs_extra_1 = tslib_1.__importDefault(require("fs-extra"));
const path_1 = tslib_1.__importDefault(require("path"));
const constants_1 = require("../../common/constants");
const folder_1 = require("../../folder");
const error_1 = require("./error");
const utils_1 = require("./utils");
var GeneratorActionName;
(function (GeneratorActionName) {
    GeneratorActionName["FetchTemplateZipFromSourceCode"] = "FetchTemplateZipFromSourceCodeAction";
    GeneratorActionName["FetchTemplateUrlWithTag"] = "FetchTemplatesUrlWithTag";
    GeneratorActionName["FetchZipFromUrl"] = "FetchZipFromUrl";
    GeneratorActionName["FetchTemplateZipFromLocal"] = "FetchTemplateZipFromLocal";
    GeneratorActionName["DownloadDirectory"] = "DownloadDirectory";
    GeneratorActionName["Unzip"] = "Unzip";
})(GeneratorActionName = exports.GeneratorActionName || (exports.GeneratorActionName = {}));
// * This action is only for debug purpose
exports.fetchTemplateZipFromSourceCodeAction = {
    name: GeneratorActionName.FetchTemplateZipFromSourceCode,
    run: (context) => {
        const isDebugMode = () => {
            const DebugTemplateFlag = process.env[constants_1.FeatureFlagName.DebugTemplate];
            return (DebugTemplateFlag === null || DebugTemplateFlag === void 0 ? void 0 : DebugTemplateFlag.toLowerCase()) === "true" && process.env.NODE_ENV === "development";
        };
        if (!isDebugMode()) {
            return Promise.resolve();
        }
        if (context.zip) {
            return Promise.resolve();
        }
        context.logProvider.debug(`Fetching template zip from source code: ${JSON.stringify(context)}`);
        //! This path only works in debug mode
        const templateSourceCodePath = path_1.default.resolve(__dirname, "../../../../../", "templates", context.name);
        context.zip = utils_1.zipFolder(templateSourceCodePath);
        return Promise.resolve();
    },
};
exports.downloadDirectoryAction = {
    name: GeneratorActionName.DownloadDirectory,
    run: async (context) => {
        context.logProvider.debug(`Downloading sample by directory: ${JSON.stringify(context)}`);
        if (!context.sampleInfo) {
            throw new error_1.MissKeyError("sampleInfo");
        }
        context.outputs = await utils_1.downloadDirectory(context.sampleInfo, context.destination);
    },
};
exports.fetchTemplateUrlWithTagAction = {
    name: GeneratorActionName.FetchTemplateUrlWithTag,
    run: async (context) => {
        if (context.zip || context.url || context.cancelDownloading) {
            return;
        }
        context.logProvider.debug(`Fetching template url with tag: ${JSON.stringify(context)}`);
        context.url = await utils_1.fetchTemplateZipUrl(context.name, context.tryLimits, context.timeoutInMs);
    },
};
exports.fetchZipFromUrlAction = {
    name: GeneratorActionName.FetchZipFromUrl,
    run: async (context) => {
        if (context.zip || context.cancelDownloading) {
            return;
        }
        context.logProvider.debug(`Fetching zip from url: ${JSON.stringify(context)}`);
        if (!context.url) {
            throw new error_1.MissKeyError("url");
        }
        context.zip = await utils_1.fetchZipFromUrl(context.url, context.tryLimits, context.timeoutInMs);
    },
};
exports.fetchTemplateFromLocalAction = {
    name: GeneratorActionName.FetchTemplateZipFromLocal,
    run: async (context) => {
        var _a;
        if ((_a = context.outputs) === null || _a === void 0 ? void 0 : _a.length) {
            return;
        }
        context.logProvider.debug(`Fetching zip from local: ${JSON.stringify(context)}`);
        context.fallback = true;
        const fallbackPath = path_1.default.join(folder_1.getTemplatesFolder(), "fallback");
        const fileName = `${context.name}.zip`;
        const zipPath = path_1.default.join(fallbackPath, fileName);
        const data = await fs_extra_1.default.readFile(zipPath);
        context.zip = new adm_zip_1.default(data);
        context.outputs = await utils_1.unzip(context.zip, context.destination, context.fileNameReplaceFn, context.fileDataReplaceFn, context.filterFn);
    },
};
exports.unzipAction = {
    name: GeneratorActionName.Unzip,
    run: async (context) => {
        if (!context.zip) {
            return;
        }
        context.logProvider.debug(`Unzipping: ${JSON.stringify(context)}`);
        context.outputs = await utils_1.unzip(context.zip, context.destination, context.fileNameReplaceFn, context.fileDataReplaceFn, context.filterFn);
    },
};
exports.TemplateActionSeq = [
    exports.fetchTemplateZipFromSourceCodeAction,
    exports.fetchTemplateUrlWithTagAction,
    exports.fetchZipFromUrlAction,
    exports.unzipAction,
    exports.fetchTemplateFromLocalAction,
];
exports.SampleActionSeq = [exports.fetchZipFromUrlAction, exports.unzipAction];
exports.DownloadDirectoryActionSeq = [exports.downloadDirectoryAction];
//# sourceMappingURL=generatorAction.js.map