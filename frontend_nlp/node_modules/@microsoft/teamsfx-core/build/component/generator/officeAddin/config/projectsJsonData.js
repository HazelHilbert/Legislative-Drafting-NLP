"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const lodash_1 = tslib_1.__importDefault(require("lodash"));
const projectProperties_1 = require("./projectProperties");
class projectsJsonData {
    constructor() {
        this.projectJsonData = projectProperties_1.projectProperties;
    }
    getProjectDisplayName(projectType) {
        return this.projectJsonData.projectTypes[lodash_1.default.toLower(projectType)].displayname;
    }
    getProjectDetails(projectType) {
        return this.projectJsonData.projectTypes[lodash_1.default.toLower(projectType)].detail;
    }
    getParsedProjectJsonData() {
        return this.projectJsonData;
    }
    getProjectTemplateNames() {
        const projectTemplates = [];
        for (const key in this.projectJsonData.projectTypes) {
            projectTemplates.push(key);
        }
        return projectTemplates;
    }
    projectBothScriptTypes(projectType) {
        return (this.projectJsonData.projectTypes[lodash_1.default.toLower(projectType)].templates.javascript != undefined &&
            this.projectJsonData.projectTypes[lodash_1.default.toLower(projectType)].templates.typescript != undefined);
    }
    getManifestPath(projectType) {
        return this.projectJsonData.projectTypes[projectType].manifestPath;
    }
    getHostTemplateNames(projectType) {
        let hosts = [];
        if (projectType) {
            for (const key in this.projectJsonData.projectTypes) {
                if (key === projectType) {
                    hosts = this.projectJsonData.projectTypes[key].supportedHosts;
                }
            }
        }
        return hosts;
    }
    getSupportedScriptTypes(projectType) {
        const scriptTypes = [];
        if (projectType) {
            for (const template in this.projectJsonData.projectTypes[projectType].templates) {
                let scriptType = "";
                if (template === "javascript") {
                    scriptType = "JavaScript";
                }
                else if (template === "typescript") {
                    scriptType = "TypeScript";
                }
                scriptTypes.push(scriptType);
            }
        }
        return scriptTypes;
    }
    getHostDisplayName(hostKey) {
        for (const key in this.projectJsonData.hostTypes) {
            if (lodash_1.default.toLower(hostKey) == key) {
                return this.projectJsonData.hostTypes[key].displayname;
            }
        }
        return undefined;
    }
    getProjectTemplateRepository(projectTypeKey, scriptType) {
        for (const key in this.projectJsonData.projectTypes) {
            if (lodash_1.default.toLower(projectTypeKey) == key) {
                if (projectTypeKey == "manifest") {
                    return this.projectJsonData.projectTypes[key].templates.manifestonly.repository;
                }
                else {
                    return this.projectJsonData.projectTypes[key].templates[scriptType].repository;
                }
            }
        }
        return undefined;
    }
    getProjectTemplateBranchName(projectTypeKey, scriptType, prerelease) {
        for (const key in this.projectJsonData.projectTypes) {
            if (lodash_1.default.toLower(projectTypeKey) == key) {
                if (projectTypeKey == "manifest") {
                    return this.projectJsonData.projectTypes.manifest.templates.branch;
                }
                else {
                    if (prerelease) {
                        return this.projectJsonData.projectTypes[key].templates[scriptType].prerelease;
                    }
                    else {
                        return this.projectJsonData.projectTypes[key].templates[scriptType].branch;
                    }
                }
            }
        }
        return undefined;
    }
    getProjectRepoAndBranch(projectTypeKey, scriptType, prerelease) {
        scriptType = scriptType === "TypeScript" ? "typescript" : "javascript";
        const repoBranchInfo = {
            repo: null,
            branch: null,
        };
        repoBranchInfo.repo = this.getProjectTemplateRepository(projectTypeKey, scriptType);
        repoBranchInfo.branch = repoBranchInfo.repo
            ? this.getProjectTemplateBranchName(projectTypeKey, scriptType, prerelease)
            : undefined;
        return repoBranchInfo;
    }
}
exports.default = projectsJsonData;
//# sourceMappingURL=projectsJsonData.js.map