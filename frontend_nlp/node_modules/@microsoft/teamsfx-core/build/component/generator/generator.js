"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
exports.sampleDefaultOnActionError = exports.templateDefaultOnActionError = exports.Generator = void 0;
const tslib_1 = require("tslib");
const lib_1 = require("@feathersjs/hooks/lib");
const teamsfx_api_1 = require("@microsoft/teamsfx-api");
const fs_extra_1 = tslib_1.__importDefault(require("fs-extra"));
const lodash_1 = require("lodash");
const telemetry_1 = require("../../common/telemetry");
const utils_1 = require("../../common/utils");
const componentError_1 = require("../error/componentError");
const messages_1 = require("../messages");
const actionExecutionMW_1 = require("../middleware/actionExecutionMW");
const constant_1 = require("./constant");
const error_1 = require("./error");
const generatorAction_1 = require("./generatorAction");
const utils_2 = require("./utils");
const samples_1 = require("../../common/samples");
const featureFlags_1 = require("../../common/featureFlags");
const utils_3 = require("../../common/spec-parser/utils");
class Generator {
    static getDefaultVariables(appName, safeProjectNameFromVS, apiKeyAuthData) {
        var _a, _b, _c;
        const safeProjectName = safeProjectNameFromVS !== null && safeProjectNameFromVS !== void 0 ? safeProjectNameFromVS : utils_1.convertToAlphanumericOnly(appName);
        const safeRegistrationIdEnvName = utils_3.getSafeRegistrationIdEnvName((_a = apiKeyAuthData === null || apiKeyAuthData === void 0 ? void 0 : apiKeyAuthData.registrationIdEnvName) !== null && _a !== void 0 ? _a : "");
        return {
            appName: appName,
            ProjectName: appName,
            SafeProjectName: safeProjectName,
            SafeProjectNameLowerCase: safeProjectName.toLocaleLowerCase(),
            ApiSpecAuthName: (_b = apiKeyAuthData === null || apiKeyAuthData === void 0 ? void 0 : apiKeyAuthData.authName) !== null && _b !== void 0 ? _b : "",
            ApiSpecAuthRegistrationIdEnvName: safeRegistrationIdEnvName,
            ApiSpecPath: (_c = apiKeyAuthData === null || apiKeyAuthData === void 0 ? void 0 : apiKeyAuthData.openapiSpecPath) !== null && _c !== void 0 ? _c : "",
            enableTestToolByDefault: featureFlags_1.enableTestToolByDefault() ? "true" : "",
        };
    }
    static async generateTemplate(ctx, destinationPath, scenario, language, actionContext) {
        var _a, _b, _c;
        const replaceMap = (_a = ctx.templateVariables) !== null && _a !== void 0 ? _a : {};
        const generatorContext = {
            name: language !== null && language !== void 0 ? language : constant_1.commonTemplateName,
            destination: destinationPath,
            logProvider: ctx.logProvider,
            fileNameReplaceFn: (fileName, fileData) => utils_2.renderTemplateFileName(fileName, fileData, replaceMap)
                .replace(/\\/g, "/")
                .replace(`${scenario}/`, ""),
            fileDataReplaceFn: (fileName, fileData) => utils_2.renderTemplateFileData(fileName, fileData, replaceMap),
            filterFn: (fileName) => fileName.replace(/\\/g, "/").startsWith(`${scenario}/`),
            onActionError: templateDefaultOnActionError,
        };
        const templateName = `${scenario}-${generatorContext.name}`;
        lodash_1.merge(actionContext === null || actionContext === void 0 ? void 0 : actionContext.telemetryProps, {
            [telemetry_1.TelemetryProperty.TemplateName]: templateName,
        });
        await ((_b = actionContext === null || actionContext === void 0 ? void 0 : actionContext.progressBar) === null || _b === void 0 ? void 0 : _b.next(messages_1.ProgressMessages.generateTemplate));
        ctx.logProvider.debug(`Downloading app template "${templateName}" to ${destinationPath}`);
        await this.generate(generatorContext, generatorAction_1.TemplateActionSeq);
        lodash_1.merge(actionContext === null || actionContext === void 0 ? void 0 : actionContext.telemetryProps, {
            [telemetry_1.TelemetryProperty.Fallback]: generatorContext.fallback ? "true" : "false", // Track fallback cases.
        });
        if (!((_c = generatorContext.outputs) === null || _c === void 0 ? void 0 : _c.length)) {
            return teamsfx_api_1.err(new error_1.TemplateNotFoundError(scenario).toFxError());
        }
        return teamsfx_api_1.ok(undefined);
    }
    static async generateSample(ctx, destinationPath, sampleName, actionContext) {
        var _a, _b;
        lodash_1.merge(actionContext === null || actionContext === void 0 ? void 0 : actionContext.telemetryProps, {
            [telemetry_1.TelemetryProperty.SampleAppName]: sampleName,
            [telemetry_1.TelemetryProperty.SampleDownloadDirectory]: "true",
        });
        await samples_1.sampleProvider.fetchSampleConfig();
        const sample = utils_2.getSampleInfoFromName(sampleName);
        // sample doesn't need replace function. Replacing projectId will be handled by core.
        const generatorContext = {
            name: sampleName,
            destination: destinationPath,
            logProvider: ctx.logProvider,
            sampleInfo: sample.downloadUrlInfo,
            timeoutInMs: constant_1.sampleDefaultTimeoutInMs,
            onActionError: sampleDefaultOnActionError,
        };
        await ((_a = actionContext === null || actionContext === void 0 ? void 0 : actionContext.progressBar) === null || _a === void 0 ? void 0 : _a.next(messages_1.ProgressMessages.generateSample(sampleName)));
        ctx.logProvider.debug(`Downloading sample "${sampleName}" to ${destinationPath}`);
        await this.generate(generatorContext, generatorAction_1.DownloadDirectoryActionSeq);
        if (!((_b = generatorContext.outputs) === null || _b === void 0 ? void 0 : _b.length)) {
            return teamsfx_api_1.err(new error_1.SampleNotFoundError(sampleName).toFxError());
        }
        return teamsfx_api_1.ok(undefined);
    }
    static async generate(context, actions) {
        var _a, _b;
        for (const action of actions) {
            try {
                await ((_a = context.onActionStart) === null || _a === void 0 ? void 0 : _a.call(context, action, context));
                await action.run(context);
                await ((_b = context.onActionEnd) === null || _b === void 0 ? void 0 : _b.call(context, action, context));
            }
            catch (e) {
                if (!context.onActionError) {
                    throw e;
                }
                if (e instanceof Error)
                    await context.onActionError(action, context, e);
            }
        }
    }
}
tslib_1.__decorate([
    lib_1.hooks([
        actionExecutionMW_1.ActionExecutionMW({
            enableProgressBar: true,
            progressTitle: messages_1.ProgressTitles.create,
            progressSteps: 1,
            componentName: constant_1.componentName,
            errorSource: constant_1.errorSource,
            enableTelemetry: true,
            telemetryEventName: telemetry_1.TelemetryEvent.GenerateTemplate,
        }),
    ]),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, String, String, String, Object]),
    tslib_1.__metadata("design:returntype", Promise)
], Generator, "generateTemplate", null);
tslib_1.__decorate([
    lib_1.hooks([
        actionExecutionMW_1.ActionExecutionMW({
            enableProgressBar: true,
            progressTitle: messages_1.ProgressTitles.create,
            progressSteps: 1,
            componentName: constant_1.componentName,
            errorSource: constant_1.errorSource,
            enableTelemetry: true,
            telemetryEventName: telemetry_1.TelemetryEvent.GenerateSample,
        }),
    ]),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, String, String, Object]),
    tslib_1.__metadata("design:returntype", Promise)
], Generator, "generateSample", null);
exports.Generator = Generator;
function templateDefaultOnActionError(action, context, error) {
    switch (action.name) {
        case generatorAction_1.GeneratorActionName.FetchTemplateUrlWithTag:
        case generatorAction_1.GeneratorActionName.FetchZipFromUrl:
            context.cancelDownloading = true;
            if (!(error instanceof error_1.CancelDownloading)) {
                context.logProvider.info(error.message);
                context.logProvider.info(messages_1.LogMessages.getTemplateFromLocal);
            }
            break;
        case generatorAction_1.GeneratorActionName.FetchTemplateZipFromLocal:
            context.logProvider.error(error.message);
            return Promise.reject(new error_1.TemplateZipFallbackError().toFxError());
        case generatorAction_1.GeneratorActionName.Unzip:
            context.logProvider.error(error.message);
            return Promise.reject(new error_1.UnzipError().toFxError());
        default:
            return Promise.reject(new Error(error.message));
    }
    return Promise.resolve();
}
exports.templateDefaultOnActionError = templateDefaultOnActionError;
async function sampleDefaultOnActionError(action, context, error) {
    context.logProvider.error(error.message);
    switch (action.name) {
        case generatorAction_1.GeneratorActionName.DownloadDirectory:
            if (await fs_extra_1.default.pathExists(context.destination)) {
                await fs_extra_1.default.rm(context.destination, { recursive: true });
            }
            if (error instanceof componentError_1.BaseComponentInnerError)
                throw error.toFxError();
            else if (error.message.includes("403")) {
                throw new error_1.DownloadSampleApiLimitError(context.url).toFxError();
            }
            else {
                throw new error_1.DownloadSampleNetworkError(context.url).toFxError();
            }
        case generatorAction_1.GeneratorActionName.FetchZipFromUrl:
            throw new error_1.FetchZipFromUrlError(context.url, error).toFxError();
        case generatorAction_1.GeneratorActionName.Unzip:
            throw new error_1.UnzipError().toFxError();
        default:
            throw new Error(error.message);
    }
}
exports.sampleDefaultOnActionError = sampleDefaultOnActionError;
//# sourceMappingURL=generator.js.map