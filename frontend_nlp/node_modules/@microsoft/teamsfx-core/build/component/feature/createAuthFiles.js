"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
exports.createAuthFiles = void 0;
const tslib_1 = require("tslib");
const teamsfx_api_1 = require("@microsoft/teamsfx-api");
const adm_zip_1 = tslib_1.__importDefault(require("adm-zip"));
const fs_extra_1 = tslib_1.__importDefault(require("fs-extra"));
const path_1 = tslib_1.__importDefault(require("path"));
const localizeUtils_1 = require("../../common/localizeUtils");
const utils_1 = require("../generator/utils");
const common_1 = require("../../error/common");
const folder_1 = require("../../folder");
const constants_1 = require("../constants");
async function createAuthFiles(input) {
    const projectPath = input.projectPath;
    if (!projectPath) {
        const e = new teamsfx_api_1.SystemError(constants_1.SolutionSource, constants_1.SolutionError.InvalidProjectPath, localizeUtils_1.getLocalizedString("core.addSsoFiles.emptyProjectPath"));
        return teamsfx_api_1.err(e);
    }
    const projectFolderExists = await fs_extra_1.default.pathExists(projectPath);
    if (!projectFolderExists) {
        const e = new common_1.FileNotFoundError("aad", projectPath);
        return teamsfx_api_1.err(e);
    }
    const authFolder = path_1.default.join(projectPath, constants_1.AddSsoParameters.V3AuthFolder);
    try {
        const authFolderExists = await fs_extra_1.default.pathExists(authFolder);
        if (!authFolderExists) {
            await fs_extra_1.default.ensureDir(authFolder);
        }
        const templateFolder = folder_1.getTemplatesFolder();
        const v3TemplateFolder = path_1.default.join(templateFolder, constants_1.AddSsoParameters.filePath, constants_1.AddSsoParameters.V3);
        const sampleZip = new adm_zip_1.default();
        sampleZip.addLocalFolder(v3TemplateFolder);
        await utils_1.unzip(sampleZip, authFolder);
        return teamsfx_api_1.ok(undefined);
    }
    catch (error) {
        if (await fs_extra_1.default.pathExists(authFolder)) {
            await fs_extra_1.default.remove(authFolder);
        }
        const e = new teamsfx_api_1.SystemError(constants_1.SolutionSource, constants_1.SolutionError.FailedToCreateAuthFiles, localizeUtils_1.getLocalizedString("core.addSsoFiles.FailedToCreateAuthFiles", error.message));
        return teamsfx_api_1.err(e);
    }
}
exports.createAuthFiles = createAuthFiles;
//# sourceMappingURL=createAuthFiles.js.map