"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
exports.convertManifestTemplateToV2 = exports.convertManifestTemplateToV3 = exports.convertProjectSettingsV2ToV3 = exports.EnvStateMigrationComponentNames = void 0;
const fs_extra_1 = require("fs-extra");
const lodash_1 = require("lodash");
const path_1 = require("path");
const projectSettingsHelper_1 = require("../common/projectSettingsHelper");
const create_1 = require("../question/create");
const constants_1 = require("./constants");
const utils_1 = require("./utils");
const workflow_1 = require("./workflow");
exports.EnvStateMigrationComponentNames = [
    ["solution", "solution"],
    ["fx-resource-appstudio", constants_1.ComponentNames.AppManifest],
    ["fx-resource-identity", constants_1.ComponentNames.Identity],
    ["fx-resource-azure-sql", constants_1.ComponentNames.AzureSQL],
    ["fx-resource-aad-app-for-teams", constants_1.ComponentNames.AadApp],
    ["fx-resource-function", constants_1.ComponentNames.TeamsApi],
    ["fx-resource-apim", constants_1.ComponentNames.APIM],
    ["fx-resource-key-vault", constants_1.ComponentNames.KeyVault],
    ["fx-resource-bot", constants_1.ComponentNames.TeamsBot],
    ["fx-resource-frontend-hosting", constants_1.ComponentNames.TeamsTab],
    ["fx-resource-simple-auth", constants_1.ComponentNames.SimpleAuth],
];
function convertProjectSettingsV2ToV3(settingsV2, projectPath) {
    var _a, _b, _c, _d;
    const settingsV3 = lodash_1.cloneDeep(settingsV2);
    const solutionSettings = settingsV2.solutionSettings;
    if (solutionSettings && (!settingsV3.components || settingsV3.components.length === 0)) {
        settingsV3.components = [];
        const isVS = projectSettingsHelper_1.isVSProject(settingsV2);
        const hasAAD = solutionSettings.activeResourcePlugins.includes("fx-resource-aad-app-for-teams");
        if (hasAAD) {
            settingsV3.components.push({
                name: constants_1.ComponentNames.AadApp,
                provision: true,
                deploy: true,
            });
        }
        if (solutionSettings.activeResourcePlugins.includes("fx-resource-frontend-hosting")) {
            const hostingComponent = isVS ? constants_1.ComponentNames.AzureWebApp : constants_1.ComponentNames.AzureStorage;
            const existsAuthStartFile = fs_extra_1.pathExistsSync(path_1.join(projectPath, "tabs", "public", "auth-start.html"));
            const tabSSO = solutionSettings.capabilities.includes("TabSSO") ||
                solutionSettings.capabilities.includes("SSO") ||
                existsAuthStartFile;
            if (isVS) {
                const teamsTab = {
                    hosting: hostingComponent,
                    name: "teams-tab",
                    build: true,
                    provision: true,
                    folder: "",
                    artifactFolder: "bin\\Release\\net6.0\\win-x86\\publish",
                    sso: tabSSO,
                    deploy: true,
                };
                settingsV3.components.push(teamsTab);
            }
            else {
                const teamsTab = {
                    hosting: hostingComponent,
                    name: "teams-tab",
                    build: true,
                    provision: true,
                    folder: "tabs",
                    sso: tabSSO,
                    deploy: true,
                };
                settingsV3.components.push(teamsTab);
            }
            const hostingConfig = workflow_1.getComponent(settingsV3, hostingComponent);
            if (hostingConfig) {
                hostingConfig.connections = hostingConfig.connections || [];
                hostingConfig.connections.push("teams-tab");
            }
            else {
                settingsV3.components.push({
                    name: hostingComponent,
                    connections: ["teams-tab"],
                    provision: true,
                });
            }
        }
        if (solutionSettings.activeResourcePlugins.includes("fx-resource-spfx")) {
            const teamsTab = {
                hosting: "spfx",
                name: "teams-tab",
                build: true,
                provision: true,
                folder: "SPFx",
                deploy: true,
            };
            settingsV3.components.push(teamsTab);
            settingsV3.components.push({
                name: "spfx",
                provision: true,
            });
        }
        if (solutionSettings.activeResourcePlugins.includes("fx-resource-bot")) {
            const hostType = (_b = (_a = settingsV2.pluginSettings) === null || _a === void 0 ? void 0 : _a["fx-resource-bot"]) === null || _b === void 0 ? void 0 : _b["host-type"];
            let botCapabilities = (_d = (_c = settingsV2.pluginSettings) === null || _c === void 0 ? void 0 : _c["fx-resource-bot"]) === null || _d === void 0 ? void 0 : _d["capabilities"];
            if (solutionSettings.capabilities.includes(create_1.CapabilityOptions.me().id) &&
                !(botCapabilities === null || botCapabilities === void 0 ? void 0 : botCapabilities.includes("message-extension"))) {
                botCapabilities = botCapabilities || [];
                botCapabilities.push("message-extension");
            }
            const isHostingFunction = hostType === "azure-functions";
            const hostingComponent = isHostingFunction
                ? constants_1.ComponentNames.Function
                : constants_1.ComponentNames.AzureWebApp;
            if (isVS) {
                const teamsBot = {
                    name: "teams-bot",
                    hosting: hostingComponent,
                    build: true,
                    provision: true,
                    folder: "",
                    artifactFolder: "bin\\Release\\net6.0\\win-x86\\publish",
                    capabilities: botCapabilities,
                    sso: solutionSettings.capabilities.includes("BotSSO"),
                    deploy: true,
                };
                settingsV3.components.push(teamsBot);
            }
            else {
                const teamsBot = {
                    hosting: hostingComponent,
                    name: "teams-bot",
                    build: true,
                    provision: true,
                    folder: "bot",
                    capabilities: botCapabilities,
                    sso: solutionSettings.capabilities.includes("BotSSO"),
                    deploy: true,
                };
                settingsV3.components.push(teamsBot);
            }
            const hostingConfig = workflow_1.getComponent(settingsV3, hostingComponent);
            if (hostingConfig) {
                hostingConfig.connections = hostingConfig.connections || [];
                hostingConfig.connections.push("teams-bot");
            }
            else {
                settingsV3.components.push({
                    name: hostingComponent,
                    connections: ["teams-bot"],
                    provision: true,
                    scenario: "Bot",
                });
            }
            settingsV3.components.push({
                name: constants_1.ComponentNames.BotService,
                provision: true,
            });
        }
        if (solutionSettings.activeResourcePlugins.includes("fx-resource-identity")) {
            settingsV3.components.push({
                name: constants_1.ComponentNames.Identity,
            });
        }
        if (solutionSettings.activeResourcePlugins.includes("fx-resource-key-vault")) {
            settingsV3.components.push({
                name: constants_1.ComponentNames.KeyVault,
            });
        }
        if (solutionSettings.activeResourcePlugins.includes("fx-resource-azure-sql")) {
            settingsV3.components.push({
                name: constants_1.ComponentNames.AzureSQL,
                provision: true,
            });
        }
        if (solutionSettings.activeResourcePlugins.includes("fx-resource-apim")) {
            settingsV3.components.push({
                name: constants_1.ComponentNames.APIM,
                provision: true,
                deploy: true,
            });
        }
        if (solutionSettings.activeResourcePlugins.includes("fx-resource-simple-auth")) {
            settingsV3.components.push({
                name: constants_1.ComponentNames.SimpleAuth,
                provision: true,
            });
        }
        if (solutionSettings.activeResourcePlugins.includes("fx-resource-function")) {
            settingsV3.components.push({
                name: constants_1.ComponentNames.TeamsApi,
                hosting: constants_1.ComponentNames.Function,
                functionNames: [settingsV2.defaultFunctionName || "getUserProfile"],
                build: true,
                folder: "api",
                deploy: true,
                artifactFolder: "api",
            });
            settingsV3.components.push({
                name: constants_1.ComponentNames.Function,
                scenario: "Api",
            });
        }
        utils_1.ensureComponentConnections(settingsV3);
    }
    return settingsV3;
}
exports.convertProjectSettingsV2ToV3 = convertProjectSettingsV2ToV3;
function convertManifestTemplateToV3(content) {
    for (const pluginAndComponentArray of exports.EnvStateMigrationComponentNames) {
        const pluginName = pluginAndComponentArray[0];
        const componentName = pluginAndComponentArray[1];
        if (pluginName !== componentName)
            content = content.replace(new RegExp(`state.${pluginName}`, "g"), `state.${componentName}`);
    }
    return content;
}
exports.convertManifestTemplateToV3 = convertManifestTemplateToV3;
function convertManifestTemplateToV2(content) {
    for (const pluginAndComponentArray of exports.EnvStateMigrationComponentNames) {
        const pluginName = pluginAndComponentArray[0];
        const componentName = pluginAndComponentArray[1];
        if (pluginName !== componentName)
            content = content.replace(new RegExp(`state.${componentName}`, "g"), `state.${pluginName}`);
    }
    return content;
}
exports.convertManifestTemplateToV2 = convertManifestTemplateToV2;
//# sourceMappingURL=migrate.js.map