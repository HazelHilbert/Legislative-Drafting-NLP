"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
exports.getDetailedGraphPermissionMap = exports.getPermissionMap = exports.graphAppName = exports.graphAppId = void 0;
const tslib_1 = require("tslib");
const jsonPermissionList = tslib_1.__importStar(require("./permissions.json"));
exports.graphAppId = "00000003-0000-0000-c000-000000000000";
exports.graphAppName = "Microsoft Graph";
let loadedMap = null;
let loadedGraphPermissionMap = null;
function getPermissionMap() {
    if (loadedMap) {
        return loadedMap;
    }
    const permissionList = jsonPermissionList;
    const map = {};
    permissionList.value.forEach((permission) => {
        const resourceId = permission.appId;
        map[resourceId] = {};
        map[resourceId].scopes = {};
        map[resourceId].roles = {};
        map[resourceId].scopeIds = {};
        map[resourceId].roleIds = {};
        map[resourceId].id = resourceId;
        map[resourceId].displayName = permission.displayName;
        permission.oauth2PermissionScopes.forEach((scope) => {
            map[resourceId].scopes[scope.value] = scope.id;
            map[resourceId].scopeIds[scope.id] = scope.value;
        });
        permission.appRoles.forEach((appRole) => {
            map[resourceId].roles[appRole.value] = appRole.id;
            map[resourceId].roleIds[appRole.id] = appRole.value;
        });
        map[permission.displayName] = map[resourceId];
    });
    loadedMap = map;
    return map;
}
exports.getPermissionMap = getPermissionMap;
function getDetailedGraphPermissionMap() {
    if (loadedGraphPermissionMap) {
        return loadedGraphPermissionMap;
    }
    const permissionList = jsonPermissionList;
    const graphPermission = permissionList.value.find((permission) => permission.appId === exports.graphAppId);
    if (!graphPermission) {
        return null;
    }
    const map = {};
    map.scopeIds = {};
    map.scopes = {};
    graphPermission.oauth2PermissionScopes.forEach((scope) => {
        map.scopeIds[scope.id] = {
            // value is the scope name
            value: scope.value,
            // type is either "Admin" or "User"
            type: scope.type,
        };
        map.scopes[scope.value] = scope.id;
    });
    loadedGraphPermissionMap = map;
    return map;
}
exports.getDetailedGraphPermissionMap = getDetailedGraphPermissionMap;
//# sourceMappingURL=index.js.map