"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
exports.DeleteOrUpdatePermissionFailedError = exports.UnknownResourceAccessTypeUserError = exports.UnknownResourceAccessIdUserError = exports.UnknownResourceAppIdUserError = exports.AadManifestErrorMessage = void 0;
const teamsfx_api_1 = require("@microsoft/teamsfx-api");
const localizeUtils_1 = require("../../../../common/localizeUtils");
class AadManifestErrorMessage {
}
exports.AadManifestErrorMessage = AadManifestErrorMessage;
AadManifestErrorMessage.NameIsMissing = localizeUtils_1.getLocalizedString("error.aad.manifest.NameIsMissing");
AadManifestErrorMessage.SignInAudienceIsMissing = localizeUtils_1.getLocalizedString("error.aad.manifest.SignInAudienceIsMissing");
AadManifestErrorMessage.RequiredResourceAccessIsMissing = localizeUtils_1.getLocalizedString("error.aad.manifest.RequiredResourceAccessIsMissing");
AadManifestErrorMessage.Oauth2PermissionsIsMissing = localizeUtils_1.getLocalizedString("error.aad.manifest.Oauth2PermissionsIsMissing");
AadManifestErrorMessage.PreAuthorizedApplicationsIsMissing = localizeUtils_1.getLocalizedString("error.aad.manifest.PreAuthorizedApplicationsIsMissing");
AadManifestErrorMessage.AccessTokenAcceptedVersionIs1 = localizeUtils_1.getLocalizedString("error.aad.manifest.AccessTokenAcceptedVersionIs1");
AadManifestErrorMessage.OptionalClaimsIsMissing = localizeUtils_1.getLocalizedString("error.aad.manifest.OptionalClaimsIsMissing");
AadManifestErrorMessage.OptionalClaimsMissingIdtypClaim = localizeUtils_1.getLocalizedString("error.aad.manifest.OptionalClaimsMissingIdtypClaim");
AadManifestErrorMessage.AADManifestIssues = localizeUtils_1.getLocalizedString("error.aad.manifest.AADManifestIssues");
class UnknownResourceAppIdUserError extends teamsfx_api_1.UserError {
    constructor(actionName, unknownId) {
        super({
            source: actionName,
            name: "UnknownResourceAppId",
            message: localizeUtils_1.getDefaultString("error.aad.manifest.UnknownResourceAppId", unknownId),
            displayMessage: localizeUtils_1.getLocalizedString("error.aad.manifest.UnknownResourceAppId", unknownId),
            helpLink: "https://aka.ms/teamsfx-aad-manifest",
        });
    }
}
exports.UnknownResourceAppIdUserError = UnknownResourceAppIdUserError;
class UnknownResourceAccessIdUserError extends teamsfx_api_1.UserError {
    constructor(actionName, unknownId) {
        super({
            source: actionName,
            name: "UnknownResourceAccessId",
            message: localizeUtils_1.getDefaultString("error.aad.manifest.UnknownResourceAccessId", unknownId),
            displayMessage: localizeUtils_1.getLocalizedString("error.aad.manifest.UnknownResourceAccessId", unknownId),
            helpLink: "https://aka.ms/teamsfx-aad-manifest",
        });
    }
}
exports.UnknownResourceAccessIdUserError = UnknownResourceAccessIdUserError;
class UnknownResourceAccessTypeUserError extends teamsfx_api_1.UserError {
    constructor(actionName, unknownType) {
        super({
            source: actionName,
            name: "UnknownResourceAccessType",
            message: localizeUtils_1.getDefaultString("error.aad.manifest.UnknownResourceAccessType", unknownType),
            displayMessage: localizeUtils_1.getLocalizedString("error.aad.manifest.UnknownResourceAccessType", unknownType),
            helpLink: "https://aka.ms/teamsfx-aad-manifest",
        });
    }
}
exports.UnknownResourceAccessTypeUserError = UnknownResourceAccessTypeUserError;
class DeleteOrUpdatePermissionFailedError extends teamsfx_api_1.UserError {
    constructor(actionName) {
        super({
            source: actionName,
            name: "DeleteOrUpdatePermissionFailed",
            message: localizeUtils_1.getDefaultString("error.aad.manifest.DeleteOrUpdatePermissionFailed"),
            displayMessage: localizeUtils_1.getLocalizedString("error.aad.manifest.DeleteOrUpdatePermissionFailed"),
            helpLink: "https://aka.ms/teamsfx-aad-manifest",
        });
    }
}
exports.DeleteOrUpdatePermissionFailedError = DeleteOrUpdatePermissionFailedError;
//# sourceMappingURL=aadManifestError.js.map