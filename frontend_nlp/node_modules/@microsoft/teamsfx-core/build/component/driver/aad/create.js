"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
exports.CreateAadAppDriver = void 0;
const tslib_1 = require("tslib");
const typedi_1 = require("typedi");
const aadAppClient_1 = require("./utility/aadAppClient");
const createAadAppOutput_1 = require("./interface/createAadAppOutput");
const teamsfx_api_1 = require("@microsoft/teamsfx-api");
const tools_1 = require("../../../common/tools");
const missingEnvError_1 = require("./error/missingEnvError");
const axios_1 = tslib_1.__importDefault(require("axios"));
const lib_1 = require("@feathersjs/hooks/lib");
const addStartAndEndTelemetry_1 = require("../middleware/addStartAndEndTelemetry");
const localizeUtils_1 = require("../../../common/localizeUtils");
const constants_1 = require("./utility/constants");
const common_1 = require("../../../error/common");
const utils_1 = require("../util/utils");
const signInAudience_1 = require("./interface/signInAudience");
const outputEnvironmentVariableUndefinedError_1 = require("../error/outputEnvironmentVariableUndefinedError");
const aadAppNameTooLongError_1 = require("./error/aadAppNameTooLongError");
const actionName = "aadApp/create"; // DO NOT MODIFY the name
const helpLink = "https://aka.ms/teamsfx-actions/aadapp-create";
const driverConstants = {
    generateSecretErrorMessageKey: "driver.aadApp.error.generateSecretFailed",
};
let CreateAadAppDriver = class CreateAadAppDriver {
    constructor() {
        this.description = localizeUtils_1.getLocalizedString(constants_1.descriptionMessageKeys.create);
        this.progressTitle = localizeUtils_1.getLocalizedString("driver.aadApp.progressBar.createAadAppTitle");
    }
    async execute(args, context, outputEnvVarNames) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l;
        const summaries = [];
        let outputs = new Map();
        try {
            (_a = context.logProvider) === null || _a === void 0 ? void 0 : _a.info(localizeUtils_1.getLocalizedString(constants_1.logMessageKeys.startExecuteDriver, actionName));
            this.validateArgs(args);
            if (!outputEnvVarNames) {
                throw new outputEnvironmentVariableUndefinedError_1.OutputEnvironmentVariableUndefinedError(actionName);
            }
            const aadAppClient = new aadAppClient_1.AadAppClient(context.m365TokenProvider, context.logProvider);
            const aadAppState = utils_1.loadStateFromEnv(outputEnvVarNames);
            if (!aadAppState.clientId) {
                (_b = context.logProvider) === null || _b === void 0 ? void 0 : _b.info(localizeUtils_1.getLocalizedString(constants_1.logMessageKeys.startCreateAadApp, outputEnvVarNames.get(createAadAppOutput_1.OutputKeys.clientId)));
                // Create new Microsoft Entra app if no client id exists
                const signInAudience = args.signInAudience
                    ? args.signInAudience
                    : signInAudience_1.SignInAudience.AzureADMyOrg;
                const aadApp = await aadAppClient.createAadApp(args.name, signInAudience);
                aadAppState.clientId = aadApp.appId;
                aadAppState.objectId = aadApp.id;
                await this.setAadEndpointInfo(context.m365TokenProvider, aadAppState);
                outputs = utils_1.mapStateToEnv(aadAppState, outputEnvVarNames, [createAadAppOutput_1.OutputKeys.clientSecret]);
                const summary = localizeUtils_1.getLocalizedString(constants_1.logMessageKeys.successCreateAadApp, aadApp.id);
                (_c = context.logProvider) === null || _c === void 0 ? void 0 : _c.info(summary);
                summaries.push(summary);
            }
            else {
                (_d = context.logProvider) === null || _d === void 0 ? void 0 : _d.info(localizeUtils_1.getLocalizedString(constants_1.logMessageKeys.skipCreateAadApp, outputEnvVarNames.get(createAadAppOutput_1.OutputKeys.clientId)));
            }
            if (args.generateClientSecret) {
                if (!aadAppState.clientSecret) {
                    (_e = context.logProvider) === null || _e === void 0 ? void 0 : _e.info(localizeUtils_1.getLocalizedString(constants_1.logMessageKeys.startGenerateClientSecret, outputEnvVarNames.get(createAadAppOutput_1.OutputKeys.clientSecret)));
                    // Create new client secret if no client secret exists
                    if (!aadAppState.objectId) {
                        throw new missingEnvError_1.MissingEnvUserError(actionName, outputEnvVarNames.get(createAadAppOutput_1.OutputKeys.objectId), helpLink, driverConstants.generateSecretErrorMessageKey);
                    }
                    aadAppState.clientSecret = await aadAppClient.generateClientSecret(aadAppState.objectId);
                    outputs.set(outputEnvVarNames.get(createAadAppOutput_1.OutputKeys.clientSecret), aadAppState.clientSecret);
                    const summary = localizeUtils_1.getLocalizedString(constants_1.logMessageKeys.successGenerateClientSecret, aadAppState.objectId);
                    (_f = context.logProvider) === null || _f === void 0 ? void 0 : _f.info(summary);
                    summaries.push(summary);
                }
                else {
                    (_g = context.logProvider) === null || _g === void 0 ? void 0 : _g.info(localizeUtils_1.getLocalizedString(constants_1.logMessageKeys.skipCreateAadApp, outputEnvVarNames.get(createAadAppOutput_1.OutputKeys.clientSecret)));
                }
            }
            (_h = context.logProvider) === null || _h === void 0 ? void 0 : _h.info(localizeUtils_1.getLocalizedString(constants_1.logMessageKeys.successExecuteDriver, actionName));
            return {
                result: teamsfx_api_1.ok(outputs),
                summaries: summaries,
            };
        }
        catch (error) {
            if (error instanceof teamsfx_api_1.UserError || error instanceof teamsfx_api_1.SystemError) {
                (_j = context.logProvider) === null || _j === void 0 ? void 0 : _j.error(localizeUtils_1.getLocalizedString(constants_1.logMessageKeys.failExecuteDriver, actionName, error.displayMessage));
                return {
                    result: teamsfx_api_1.err(error),
                    summaries: summaries,
                };
            }
            if (axios_1.default.isAxiosError(error)) {
                const message = JSON.stringify(error.response.data);
                (_k = context.logProvider) === null || _k === void 0 ? void 0 : _k.error(localizeUtils_1.getLocalizedString(constants_1.logMessageKeys.failExecuteDriver, actionName, message));
                if (error.response.status >= 400 && error.response.status < 500) {
                    return {
                        result: teamsfx_api_1.err(new common_1.HttpClientError(error, actionName, message, helpLink)),
                        summaries: summaries,
                    };
                }
                else {
                    return {
                        result: teamsfx_api_1.err(new common_1.HttpServerError(error, actionName, message)),
                        summaries: summaries,
                    };
                }
            }
            const message = JSON.stringify(error);
            (_l = context.logProvider) === null || _l === void 0 ? void 0 : _l.error(localizeUtils_1.getLocalizedString(constants_1.logMessageKeys.failExecuteDriver, actionName, message));
            return {
                result: teamsfx_api_1.err(new common_1.UnhandledError(error, actionName)),
                summaries: summaries,
            };
        }
    }
    validateArgs(args) {
        const invalidParameters = [];
        if (typeof args.name !== "string" || !args.name) {
            invalidParameters.push("name");
        }
        if (args.generateClientSecret === undefined || typeof args.generateClientSecret !== "boolean") {
            invalidParameters.push("generateClientSecret");
        }
        // Throw error if unexpected signInAudience
        if (args.signInAudience &&
            (typeof args.signInAudience !== "string" ||
                !Object.values(signInAudience_1.SignInAudience).includes(args.signInAudience))) {
            invalidParameters.push("signInAudience");
        }
        if (invalidParameters.length > 0) {
            throw new common_1.InvalidActionInputError(actionName, invalidParameters, helpLink);
        }
        if (args.name.length > 120) {
            throw new aadAppNameTooLongError_1.AadAppNameTooLongError(actionName);
        }
    }
    // logic from
    // src\component\resource\aadApp\utils\tokenProvider.ts
    // src\component\resource\aadApp\utils\configs.ts
    async setAadEndpointInfo(tokenProvider, state) {
        const tokenObjectResponse = await tokenProvider.getJsonObject({ scopes: tools_1.GraphScopes });
        if (tokenObjectResponse.isErr()) {
            throw tokenObjectResponse.error;
        }
        const tenantId = tokenObjectResponse.value.tid; // The tid claim is AAD tenant id
        state.tenantId = tenantId;
        state.authorityHost = constants_1.constants.oauthAuthorityPrefix;
        state.authority = `${constants_1.constants.oauthAuthorityPrefix}/${tenantId}`;
    }
};
tslib_1.__decorate([
    lib_1.hooks([addStartAndEndTelemetry_1.addStartAndEndTelemetry(actionName, actionName)]),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object, Map]),
    tslib_1.__metadata("design:returntype", Promise)
], CreateAadAppDriver.prototype, "execute", null);
CreateAadAppDriver = tslib_1.__decorate([
    typedi_1.Service(actionName) // DO NOT MODIFY the service name
], CreateAadAppDriver);
exports.CreateAadAppDriver = CreateAadAppDriver;
//# sourceMappingURL=create.js.map