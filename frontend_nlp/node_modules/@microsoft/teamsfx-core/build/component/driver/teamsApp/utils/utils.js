"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RetryHandler = exports.MeetingsContext = exports.CommandScope = exports.hasMeetingExtension = exports.getFeaturesFromAppDefinition = exports.containsUnsupportedFeature = exports.needBotCode = exports.isBotAndBotBasedMessageExtension = exports.isBotBasedMessageExtension = exports.isBot = exports.needTabCode = exports.needTabAndBotCode = exports.isGroupApp = exports.isPersonalApp = exports.renderTemplate = exports.getCustomizedKeys = void 0;
const tslib_1 = require("tslib");
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
const lodash_1 = require("lodash");
const mustache_1 = tslib_1.__importDefault(require("mustache"));
function getCustomizedKeys(prefix, manifest) {
    let keys = [];
    for (const key in manifest) {
        if (manifest.hasOwnProperty(key)) {
            const value = manifest[key];
            if (typeof value === "object") {
                if (Array.isArray(value)) {
                    value.map((item, index) => {
                        keys = keys.concat(getCustomizedKeys(`${prefix}.${key}[${index}]`, item));
                    });
                }
                else {
                    keys = keys.concat(getCustomizedKeys(`${prefix}.${key}`, value));
                }
            }
            else if (typeof value === "string" && value.startsWith("{{config.manifest")) {
                keys.push(`${prefix}.${key}`);
            }
        }
    }
    return keys;
}
exports.getCustomizedKeys = getCustomizedKeys;
function renderTemplate(manifestString, view) {
    // Unesacped HTML
    mustache_1.default.escape = (value) => value;
    manifestString = mustache_1.default.render(manifestString, view);
    return manifestString;
}
exports.renderTemplate = renderTemplate;
function isPersonalApp(appDefinition) {
    const restrictedEntityIds = [
        "conversations",
        "recent",
        "about",
        "alltabs",
        "chat",
    ];
    if (!!appDefinition.staticTabs && appDefinition.staticTabs.length > 0) {
        return (appDefinition.staticTabs.filter((tab) => !restrictedEntityIds.includes(tab.entityId)).length >
            0);
    }
    return false;
}
exports.isPersonalApp = isPersonalApp;
function isGroupApp(appDefinition) {
    return (!!appDefinition.configurableTabs &&
        appDefinition.configurableTabs.length > 0 &&
        groupAppConfigured(appDefinition.configurableTabs[0]));
}
exports.isGroupApp = isGroupApp;
function needTabAndBotCode(appDefinition) {
    return needTabCode(appDefinition) && needBotCode(appDefinition);
}
exports.needTabAndBotCode = needTabAndBotCode;
function needTabCode(appDefinition) {
    return isPersonalApp(appDefinition) || isGroupApp(appDefinition);
}
exports.needTabCode = needTabCode;
function isBot(appDefinition) {
    return !!appDefinition.bots && appDefinition.bots.length > 0;
}
exports.isBot = isBot;
function isBotBasedMessageExtension(appDefinition) {
    return (!!appDefinition.messagingExtensions &&
        appDefinition.messagingExtensions.length > 0 &&
        !!appDefinition.messagingExtensions[0].botId);
}
exports.isBotBasedMessageExtension = isBotBasedMessageExtension;
function isBotAndBotBasedMessageExtension(appDefinition) {
    return isBot(appDefinition) && isBotBasedMessageExtension(appDefinition);
}
exports.isBotAndBotBasedMessageExtension = isBotAndBotBasedMessageExtension;
function needBotCode(appDefinition) {
    return isBot(appDefinition) || isBotBasedMessageExtension(appDefinition);
}
exports.needBotCode = needBotCode;
function isApiBasedMessageExtension(appDefinition) {
    var _a;
    return (!!appDefinition.messagingExtensions &&
        appDefinition.messagingExtensions.length > 0 &&
        ((_a = appDefinition.messagingExtensions[0].messagingExtensionServiceType) === null || _a === void 0 ? void 0 : _a.toLowerCase()) === "apibased");
}
function containsUnsupportedFeature(appDefinition) {
    var _a, _b, _c, _d, _e;
    const hasScene = (_b = (_a = appDefinition === null || appDefinition === void 0 ? void 0 : appDefinition.meetingExtensionDefinition) === null || _a === void 0 ? void 0 : _a.scenes) === null || _b === void 0 ? void 0 : _b.length;
    const hasConnector = !!((_c = appDefinition === null || appDefinition === void 0 ? void 0 : appDefinition.connectors) === null || _c === void 0 ? void 0 : _c.length);
    const hasActivies = (_e = (_d = appDefinition === null || appDefinition === void 0 ? void 0 : appDefinition.activities) === null || _d === void 0 ? void 0 : _d.activityTypes) === null || _e === void 0 ? void 0 : _e.length;
    return (!!hasScene ||
        !!hasConnector ||
        !!hasActivies ||
        hasMeetingExtension(appDefinition) ||
        isApiBasedMessageExtension(appDefinition));
}
exports.containsUnsupportedFeature = containsUnsupportedFeature;
function getFeaturesFromAppDefinition(appDefinition) {
    const features = [];
    const personalTab = "personal-tab";
    const groupTab = "group-tab";
    const bot = "bot";
    const messageExtension = "messaging-extension";
    if (isPersonalApp(appDefinition)) {
        features.push(personalTab);
    }
    if (isGroupApp(appDefinition)) {
        features.push(groupTab);
    }
    if (isBot(appDefinition)) {
        features.push(bot);
    }
    if (isBotBasedMessageExtension(appDefinition)) {
        features.push(messageExtension);
    }
    return features;
}
exports.getFeaturesFromAppDefinition = getFeaturesFromAppDefinition;
function hasMeetingExtension(appDefinition) {
    return (!!appDefinition.configurableTabs &&
        appDefinition.configurableTabs.length > 0 &&
        meetingExtensionConfigured(appDefinition.configurableTabs[0]));
}
exports.hasMeetingExtension = hasMeetingExtension;
const groupAppConfigured = (tab) => {
    const validGroupAppContext = lodash_1.includes(tab.context, MeetingsContext.ChannelTab) ||
        lodash_1.includes(tab.context, MeetingsContext.PrivateChatTab);
    const validGroupAppScope = (!!tab.scopes && includeGroupChatScope(tab.scopes)) || includeTeamScope(tab.scopes);
    return validGroupAppScope && validGroupAppContext;
};
const meetingExtensionConfigured = (tab) => {
    const validMeetingContext = lodash_1.includes(tab.context, MeetingsContext.SidePanel) ||
        lodash_1.includes(tab.context, MeetingsContext.DetailsTab) ||
        lodash_1.includes(tab.context, MeetingsContext.ChatTab);
    const validMeetingScope = !!tab.scopes && includeGroupChatScope(tab.scopes);
    return validMeetingScope && validMeetingContext;
};
const includeTeamScope = (scopes) => {
    return !!scopes.find((scope) => scope.toLowerCase() === CommandScope.Team.toLowerCase());
};
const includeGroupChatScope = (scopes) => {
    return !!scopes.find((scope) => scope.toLowerCase() === CommandScope.GroupChat.toLowerCase());
};
var CommandScope;
(function (CommandScope) {
    CommandScope["Team"] = "team";
    CommandScope["Personal"] = "personal";
    CommandScope["GroupChat"] = "groupchat";
})(CommandScope = exports.CommandScope || (exports.CommandScope = {}));
var MeetingsContext;
(function (MeetingsContext) {
    MeetingsContext["ChannelTab"] = "channelTab";
    MeetingsContext["PrivateChatTab"] = "privateChatTab";
    MeetingsContext["SidePanel"] = "meetingSidePanel";
    MeetingsContext["ShareToStage"] = "meetingStage";
    MeetingsContext["DetailsTab"] = "meetingDetailsTab";
    MeetingsContext["ChatTab"] = "meetingChatTab";
})(MeetingsContext = exports.MeetingsContext || (exports.MeetingsContext = {}));
class RetryHandler {
    static async Retry(fn) {
        var _a, _b;
        let retries = this.RETRIES;
        let response;
        while (retries > 0) {
            retries = retries - 1;
            try {
                response = await fn();
                return response;
            }
            catch (e) {
                // Directly throw 404 error, keep trying for other status code e.g. 503 400
                if (retries <= 0 || ((_a = e.response) === null || _a === void 0 ? void 0 : _a.status) == 404 || ((_b = e.response) === null || _b === void 0 ? void 0 : _b.status) == 409) {
                    throw e;
                }
                else {
                    await new Promise((resolve) => setTimeout(resolve, 5000));
                }
            }
        }
    }
}
exports.RetryHandler = RetryHandler;
RetryHandler.RETRIES = 6;
//# sourceMappingURL=utils.js.map