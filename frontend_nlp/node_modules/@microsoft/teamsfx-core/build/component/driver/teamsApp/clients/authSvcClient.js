"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
exports.AuthSvcClient = void 0;
const tslib_1 = require("tslib");
const axios_1 = tslib_1.__importDefault(require("axios"));
const utils_1 = require("../utils/utils");
const results_1 = require(".././results");
const errors_1 = require(".././errors");
const telemetry_1 = require("../utils/telemetry");
// eslint-disable-next-line @typescript-eslint/no-namespace
var AuthSvcClient;
(function (AuthSvcClient) {
    const baseUrl = "https://authsvc.teams.microsoft.com";
    /**
     * Creates a new axios instance to prevent setting the accessToken on global instance.
     * @param {string}  authSvcToken
     * @returns {AxiosInstance}
     */
    function createRequesterWithToken(authSvcToken) {
        const instance = axios_1.default.create({
            baseURL: baseUrl,
        });
        instance.defaults.headers.common["Authorization"] = `Bearer ${authSvcToken}`;
        instance.interceptors.request.use(function (config) {
            config.params = Object.assign({ teamstoolkit: true }, config.params);
            return config;
        });
        return instance;
    }
    /**
     * Get the region of M365 user
     * @param authSvcToken
     * @returns e.g. https://dev.teams.microsoft.com/apac, https://dev.teams.microsoft.com/amer
     */
    async function getRegion(authSvcToken) {
        var _a, _b;
        const requester = createRequesterWithToken(authSvcToken);
        try {
            const response = await utils_1.RetryHandler.Retry(() => requester.post(`/v1.0/users/region`));
            return (_b = (_a = response === null || response === void 0 ? void 0 : response.data) === null || _a === void 0 ? void 0 : _a.regionGtms) === null || _b === void 0 ? void 0 : _b.teamsDevPortal;
        }
        catch (e) {
            wrapException(e, "get-region");
            return undefined;
        }
    }
    AuthSvcClient.getRegion = getRegion;
    function wrapException(e, apiName) {
        var _a, _b, _c;
        // eslint-disable-next-line @typescript-eslint/restrict-template-expressions
        const requestPath = ((_a = e.request) === null || _a === void 0 ? void 0 : _a.path) ? `${e.request.method} ${e.request.path}` : "";
        const error = results_1.AppStudioResultFactory.SystemError(errors_1.AppStudioError.AuthServiceAPIFailedError.name, errors_1.AppStudioError.AuthServiceAPIFailedError.message(e, requestPath, apiName));
        telemetry_1.TelemetryUtils.sendErrorEvent(telemetry_1.TelemetryEventName.authSvcApi, error, {
            method: (_b = e.request) === null || _b === void 0 ? void 0 : _b.method,
            // eslint-disable-next-line @typescript-eslint/restrict-template-expressions
            "status-code": `${(_c = e === null || e === void 0 ? void 0 : e.response) === null || _c === void 0 ? void 0 : _c.status}`,
            url: `<${apiName}-url>`,
        });
        return error;
    }
})(AuthSvcClient = exports.AuthSvcClient || (exports.AuthSvcClient = {}));
//# sourceMappingURL=authSvcClient.js.map