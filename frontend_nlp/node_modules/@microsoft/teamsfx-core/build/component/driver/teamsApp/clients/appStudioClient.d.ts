/// <reference types="node" />
import { LogProvider } from "@microsoft/teamsfx-api";
import { AppDefinition } from "../../../driver/teamsApp/interfaces/appdefinitions/appDefinition";
import { AppUser } from "../../../driver/teamsApp/interfaces/appdefinitions/appUser";
import { IPublishingAppDenition } from "../interfaces/appdefinitions/IPublishingAppDefinition";
import { IValidationResult } from "../../../driver/teamsApp/interfaces/appdefinitions/IValidationResult";
import { ApiSecretRegistration } from "../interfaces/ApiSecretRegistration";
export declare namespace AppStudioClient {
    /**
     * Set user region
     * @param _region e.g. https://dev.teams.microsoft.com/amer
     */
    function setRegion(_region: string): void;
    function sendStartEvent(apiName: string, telemetryProperties?: {
        [key: string]: string;
    }): void;
    function sendSuccessEvent(apiName: string, telemetryProperties?: {
        [key: string]: string;
    }): void;
    function wrapException(e: any, apiName: string, telemetryProperties?: {
        [key: string]: string;
    }): Error;
    /**
     * Import an app registration in app studio with the given archived file and returns the app definition.
     * @param {Buffer}  file - Zip file with manifest.json and two icons
     * @param {string}  appStudioToken
     * @param {boolean} overwrite
     * @param {LogProvider} logProvider
     * @returns {Promise<AppDefinition>}
     */
    function importApp(file: Buffer, appStudioToken: string, logProvider: LogProvider, overwrite?: boolean): Promise<AppDefinition>;
    function getApp(teamsAppId: string, appStudioToken: string, logProvider: LogProvider): Promise<AppDefinition>;
    /**
     * Check if app exists in the user's organization by the Teams app id
     * @param teamsAppId
     * @param appStudioToken
     * @param logProvider
     * @returns
     */
    function checkExistsInTenant(teamsAppId: string, appStudioToken: string, logProvider?: LogProvider): Promise<boolean>;
    /**
     * Publish Teams app to Teams App Catalog
     * @param teamsAppId
     * @param file
     * @param appStudioToken
     * @returns
     */
    function publishTeamsApp(teamsAppId: string, file: Buffer, appStudioToken: string): Promise<string>;
    /**
     * Update existed publish request
     * @param teamsAppId
     * @param file
     * @param appStudioToken
     * @returns
     */
    function publishTeamsAppUpdate(teamsAppId: string, file: Buffer, appStudioToken: string): Promise<string>;
    /**
     * Get Stagged Teams app from tenant app catalog
     * @param teamsAppId manifest.id, which is externalId in app catalog.
     * @param appStudioToken
     * @returns
     */
    function getAppByTeamsAppId(teamsAppId: string, appStudioToken: string): Promise<IPublishingAppDenition | undefined>;
    function getUserList(teamsAppId: string, appStudioToken: string, logProvider: LogProvider): Promise<AppUser[] | undefined>;
    function checkPermission(teamsAppId: string, appStudioToken: string, userObjectId: string, logProvider: LogProvider): Promise<string>;
    function grantPermission(teamsAppId: string, appStudioToken: string, newUser: AppUser, logProvider: LogProvider): Promise<void>;
    function getAppPackage(teamsAppId: string, appStudioToken: string, logProvider?: LogProvider): Promise<any>;
    function partnerCenterAppPackageValidation(file: Buffer, appStudioToken: string): Promise<IValidationResult>;
    function getSideloadingStatus(appStudioToken: string): Promise<boolean | undefined>;
    /**
     * Create the Api Key registration.
     * @param appStudioToken
     * @param apiKeyRegistration
     */
    function createApiKeyRegistration(appStudioToken: string, apiKeyRegistration: ApiSecretRegistration): Promise<ApiSecretRegistration>;
    /**
     * Get the Api Key registration by Id.
     * @param appStudioToken
     * @param apiSecretRegistrationId
     */
    function getApiKeyRegistrationById(appStudioToken: string, apiSecretRegistrationId: string): Promise<ApiSecretRegistration>;
}
//# sourceMappingURL=appStudioClient.d.ts.map