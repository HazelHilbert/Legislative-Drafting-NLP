"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
exports.TelemetryUtils = exports.TelemetryEventName = exports.TelemetryPropertyKey = void 0;
const teamsfx_api_1 = require("@microsoft/teamsfx-api");
const constants_1 = require("../constants");
var TelemetryPropertyKey;
(function (TelemetryPropertyKey) {
    TelemetryPropertyKey["component"] = "component";
    TelemetryPropertyKey["errorType"] = "error-type";
    TelemetryPropertyKey["errorCode"] = "error-code";
    TelemetryPropertyKey["errorMessage"] = "error-message";
    TelemetryPropertyKey["updateExistingApp"] = "update";
    TelemetryPropertyKey["success"] = "success";
    TelemetryPropertyKey["appId"] = "appid";
    TelemetryPropertyKey["tenantId"] = "tenant-id";
    TelemetryPropertyKey["publishedAppId"] = "published-app-id";
    TelemetryPropertyKey["customizedKeys"] = "customized-manifest-keys";
    TelemetryPropertyKey["customizedOpenAPIKeys"] = "customized-openapi-keys";
    TelemetryPropertyKey["validationErrors"] = "validation-errors";
    TelemetryPropertyKey["validationWarnings"] = "validation-warnings";
    TelemetryPropertyKey["OverwriteIfAppAlreadyExists"] = "overwrite-if-app-already-exists";
    TelemetryPropertyKey["region"] = "region";
})(TelemetryPropertyKey = exports.TelemetryPropertyKey || (exports.TelemetryPropertyKey = {}));
var TelemetryPropertyValue;
(function (TelemetryPropertyValue) {
    TelemetryPropertyValue["UserError"] = "user";
    TelemetryPropertyValue["SystemError"] = "system";
    TelemetryPropertyValue["success"] = "yes";
    TelemetryPropertyValue["failure"] = "no";
})(TelemetryPropertyValue || (TelemetryPropertyValue = {}));
var TelemetryEventName;
(function (TelemetryEventName) {
    TelemetryEventName["checkPermission"] = "check-permission";
    TelemetryEventName["grantPermission"] = "grant-permission";
    TelemetryEventName["listCollaborator"] = "list-collaborator";
    TelemetryEventName["appStudioApi"] = "app-studio-api";
    TelemetryEventName["authSvcApi"] = "auth-svc-api";
})(TelemetryEventName = exports.TelemetryEventName || (exports.TelemetryEventName = {}));
class TelemetryUtils {
    static init(ctx) {
        TelemetryUtils.ctx = ctx;
    }
    static sendStartEvent(eventName, _properties, measurements) {
        var _a;
        const properties = Object.assign({}, _properties);
        this.addCommonProperty(properties);
        (_a = TelemetryUtils.ctx.telemetryReporter) === null || _a === void 0 ? void 0 : _a.sendTelemetryEvent(`${eventName}-start`, properties, measurements);
    }
    static sendSuccessEvent(eventName, _properties, measurements) {
        var _a;
        const properties = Object.assign({}, _properties);
        this.addCommonProperty(properties);
        properties[TelemetryPropertyKey.success] = TelemetryPropertyValue.success;
        (_a = TelemetryUtils.ctx.telemetryReporter) === null || _a === void 0 ? void 0 : _a.sendTelemetryEvent(eventName, properties, measurements);
    }
    static sendErrorEvent(eventName, error, _properties, measurements) {
        var _a;
        if (!this.ctx) {
            return;
        }
        const properties = Object.assign({}, _properties);
        this.addCommonProperty(properties);
        if (error instanceof teamsfx_api_1.SystemError) {
            properties[TelemetryPropertyKey.errorType] = TelemetryPropertyValue.SystemError;
        }
        else if (error instanceof teamsfx_api_1.UserError) {
            properties[TelemetryPropertyKey.errorType] = TelemetryPropertyValue.UserError;
        }
        properties[TelemetryPropertyKey.errorCode] = `${error.source}.${error.name}`;
        properties[TelemetryPropertyKey.errorMessage] = error.message;
        properties[TelemetryPropertyKey.success] = TelemetryPropertyValue.failure;
        (_a = TelemetryUtils.ctx.telemetryReporter) === null || _a === void 0 ? void 0 : _a.sendTelemetryErrorEvent(eventName, properties, measurements);
    }
    static addCommonProperty(properties) {
        properties[TelemetryPropertyKey.component] = constants_1.Constants.PLUGIN_NAME;
    }
}
exports.TelemetryUtils = TelemetryUtils;
//# sourceMappingURL=telemetry.js.map