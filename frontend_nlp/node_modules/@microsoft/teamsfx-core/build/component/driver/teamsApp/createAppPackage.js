"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
var CreateAppPackageDriver_1;
Object.defineProperty(exports, "__esModule", { value: true });
exports.CreateAppPackageDriver = exports.actionName = void 0;
const tslib_1 = require("tslib");
const lib_1 = require("@feathersjs/hooks/lib");
const teamsfx_api_1 = require("@microsoft/teamsfx-api");
const adm_zip_1 = tslib_1.__importDefault(require("adm-zip"));
const fs_extra_1 = tslib_1.__importDefault(require("fs-extra"));
const path = tslib_1.__importStar(require("path"));
const typedi_1 = require("typedi");
const localizeUtils_1 = require("../../../common/localizeUtils");
const globalVars_1 = require("../../../core/globalVars");
const common_1 = require("../../../error/common");
const addStartAndEndTelemetry_1 = require("../middleware/addStartAndEndTelemetry");
const wrapUtil_1 = require("../util/wrapUtil");
const constants_1 = require("./constants");
const ManifestUtils_1 = require("./utils/ManifestUtils");
const common_2 = require("../../utils/common");
const telemetry_1 = require("./utils/telemetry");
const teamsApp_1 = require("../../../error/teamsApp");
exports.actionName = "teamsApp/zipAppPackage";
let CreateAppPackageDriver = CreateAppPackageDriver_1 = class CreateAppPackageDriver {
    constructor() {
        this.description = localizeUtils_1.getLocalizedString("driver.teamsApp.description.createAppPackageDriver");
        this.progressTitle = localizeUtils_1.getLocalizedString("plugins.appstudio.createPackage.progressBar.message");
    }
    async execute(args, context) {
        const wrapContext = new wrapUtil_1.WrapDriverContext(context, exports.actionName, exports.actionName);
        const res = await this.build(args, wrapContext);
        return {
            result: res,
            summaries: wrapContext.summaries,
        };
    }
    async build(args, context) {
        const result = this.validateArgs(args);
        if (result.isErr()) {
            return teamsfx_api_1.err(result.error);
        }
        let manifestPath = args.manifestPath;
        if (!path.isAbsolute(manifestPath)) {
            manifestPath = path.join(context.projectPath, manifestPath);
        }
        const manifestRes = await ManifestUtils_1.manifestUtils.getManifestV3(manifestPath, context);
        if (manifestRes.isErr()) {
            return teamsfx_api_1.err(manifestRes.error);
        }
        const manifest = manifestRes.value;
        // Deal with relative path
        // Environment variables should have been replaced by value
        // ./build/appPackage/appPackage.dev.zip instead of ./build/appPackage/appPackage.${{TEAMSFX_ENV}}.zip
        let zipFileName = args.outputZipPath;
        if (!path.isAbsolute(zipFileName)) {
            zipFileName = path.join(context.projectPath, zipFileName);
        }
        const zipFileDir = path.dirname(zipFileName);
        await fs_extra_1.default.mkdir(zipFileDir, { recursive: true });
        let jsonFileName = args.outputJsonPath;
        if (!path.isAbsolute(jsonFileName)) {
            jsonFileName = path.join(context.projectPath, jsonFileName);
        }
        const jsonFileDir = path.dirname(jsonFileName);
        await fs_extra_1.default.mkdir(jsonFileDir, { recursive: true });
        const appDirectory = path.dirname(manifestPath);
        const colorFile = path.resolve(appDirectory, manifest.icons.color);
        if (!(await fs_extra_1.default.pathExists(colorFile))) {
            const error = new common_1.FileNotFoundError(exports.actionName, colorFile, "https://aka.ms/teamsfx-actions/teamsapp-zipAppPackage");
            return teamsfx_api_1.err(error);
        }
        const colorFileRelativePath = path.relative(appDirectory, colorFile);
        if (colorFileRelativePath.startsWith("..")) {
            return teamsfx_api_1.err(new teamsApp_1.InvalidFileOutsideOfTheDirectotryError(colorFile));
        }
        const outlineFile = path.resolve(appDirectory, manifest.icons.outline);
        if (!(await fs_extra_1.default.pathExists(outlineFile))) {
            const error = new common_1.FileNotFoundError(exports.actionName, outlineFile, "https://aka.ms/teamsfx-actions/teamsapp-zipAppPackage");
            return teamsfx_api_1.err(error);
        }
        const outlineFileRelativePath = path.relative(appDirectory, outlineFile);
        if (outlineFileRelativePath.startsWith("..")) {
            return teamsfx_api_1.err(new teamsApp_1.InvalidFileOutsideOfTheDirectotryError(outlineFile));
        }
        // pre-check existence
        if (manifest.localizationInfo &&
            manifest.localizationInfo.additionalLanguages &&
            manifest.localizationInfo.additionalLanguages.length > 0) {
            for (const language of manifest.localizationInfo.additionalLanguages) {
                const file = language.file;
                const fileName = `${appDirectory}/${file}`;
                if (!(await fs_extra_1.default.pathExists(fileName))) {
                    return teamsfx_api_1.err(new common_1.FileNotFoundError(exports.actionName, fileName, "https://aka.ms/teamsfx-actions/teamsapp-zipAppPackage"));
                }
            }
        }
        const zip = new adm_zip_1.default();
        zip.addFile(constants_1.Constants.MANIFEST_FILE, Buffer.from(JSON.stringify(manifest, null, 4)));
        // outline.png & color.png, relative path
        let dir = path.dirname(manifest.icons.color);
        zip.addLocalFile(colorFile, dir === "." ? "" : dir);
        dir = path.dirname(manifest.icons.outline);
        zip.addLocalFile(outlineFile, dir === "." ? "" : dir);
        // localization file
        if (manifest.localizationInfo &&
            manifest.localizationInfo.additionalLanguages &&
            manifest.localizationInfo.additionalLanguages.length > 0) {
            for (const language of manifest.localizationInfo.additionalLanguages) {
                const file = language.file;
                const fileName = path.resolve(appDirectory, file);
                const relativePath = path.relative(appDirectory, fileName);
                if (relativePath.startsWith("..")) {
                    return teamsfx_api_1.err(new teamsApp_1.InvalidFileOutsideOfTheDirectotryError(fileName));
                }
                const dir = path.dirname(file);
                zip.addLocalFile(fileName, dir === "." ? "" : dir);
            }
        }
        // M365 Copilot plugin, API specification and Adaptive card templates
        if (manifest.composeExtensions &&
            manifest.composeExtensions.length > 0 &&
            manifest.composeExtensions[0].composeExtensionType == "apiBased" &&
            manifest.composeExtensions[0].apiSpecificationFile) {
            const apiSpecificationFile = path.resolve(appDirectory, manifest.composeExtensions[0].apiSpecificationFile);
            if (!(await fs_extra_1.default.pathExists(apiSpecificationFile))) {
                return teamsfx_api_1.err(new common_1.FileNotFoundError(exports.actionName, apiSpecificationFile, "https://aka.ms/teamsfx-actions/teamsapp-zipAppPackage"));
            }
            const relativePath = path.relative(appDirectory, apiSpecificationFile);
            if (relativePath.startsWith("..")) {
                return teamsfx_api_1.err(new teamsApp_1.InvalidFileOutsideOfTheDirectotryError(apiSpecificationFile));
            }
            const expandedEnvVarResult = await CreateAppPackageDriver_1.expandOpenAPIEnvVars(apiSpecificationFile, context);
            if (expandedEnvVarResult.isErr()) {
                return teamsfx_api_1.err(expandedEnvVarResult.error);
            }
            const openAPIContent = expandedEnvVarResult.value;
            const attr = await fs_extra_1.default.stat(apiSpecificationFile);
            zip.addFile(manifest.composeExtensions[0].apiSpecificationFile, Buffer.from(openAPIContent), "", attr.mode);
            if (manifest.composeExtensions[0].commands.length > 0) {
                for (const command of manifest.composeExtensions[0].commands) {
                    if (command.apiResponseRenderingTemplateFile) {
                        const adaptiveCardFile = path.resolve(appDirectory, command.apiResponseRenderingTemplateFile);
                        if (!(await fs_extra_1.default.pathExists(adaptiveCardFile))) {
                            return teamsfx_api_1.err(new common_1.FileNotFoundError(exports.actionName, adaptiveCardFile, "https://aka.ms/teamsfx-actions/teamsapp-zipAppPackage"));
                        }
                        const relativePath = path.relative(appDirectory, adaptiveCardFile);
                        if (relativePath.startsWith("..")) {
                            return teamsfx_api_1.err(new teamsApp_1.InvalidFileOutsideOfTheDirectotryError(adaptiveCardFile));
                        }
                        const dir = path.dirname(command.apiResponseRenderingTemplateFile);
                        zip.addLocalFile(adaptiveCardFile, dir === "." ? "" : dir);
                    }
                }
            }
        }
        zip.writeZip(zipFileName);
        if (await fs_extra_1.default.pathExists(jsonFileName)) {
            await fs_extra_1.default.chmod(jsonFileName, 0o777);
        }
        await fs_extra_1.default.writeFile(jsonFileName, JSON.stringify(manifest, null, 4));
        await fs_extra_1.default.chmod(jsonFileName, 0o444);
        const builtSuccess = [
            { content: "(âˆš)Done: ", color: teamsfx_api_1.Colors.BRIGHT_GREEN },
            { content: "Teams Package ", color: teamsfx_api_1.Colors.BRIGHT_WHITE },
            { content: zipFileName, color: teamsfx_api_1.Colors.BRIGHT_MAGENTA },
            { content: " built successfully!", color: teamsfx_api_1.Colors.BRIGHT_WHITE },
        ];
        context.logProvider.info(builtSuccess);
        return teamsfx_api_1.ok(new Map());
    }
    static async expandOpenAPIEnvVars(openAPISpecPath, ctx) {
        const content = await fs_extra_1.default.readFile(openAPISpecPath, "utf8");
        const vars = common_2.getEnvironmentVariables(content);
        ctx.addTelemetryProperties({
            [telemetry_1.TelemetryPropertyKey.customizedOpenAPIKeys]: vars.join(";"),
        });
        const result = common_2.expandEnvironmentVariable(content);
        const notExpandedVars = common_2.getEnvironmentVariables(result);
        if (notExpandedVars.length > 0) {
            return teamsfx_api_1.err(new common_1.MissingEnvironmentVariablesError("teamsApp", notExpandedVars.join(","), openAPISpecPath));
        }
        return teamsfx_api_1.ok(result);
    }
    validateArgs(args) {
        const invalidParams = [];
        if (!args || !args.manifestPath) {
            invalidParams.push("manifestPath");
        }
        if (!args || !args.outputJsonPath) {
            invalidParams.push("outputJsonPath");
        }
        if (!args || !args.outputZipPath) {
            invalidParams.push("outputZipPath");
        }
        if (invalidParams.length > 0) {
            return teamsfx_api_1.err(new common_1.InvalidActionInputError(exports.actionName, invalidParams, "https://aka.ms/teamsfx-actions/teamsapp-zipAppPackage"));
        }
        else {
            return teamsfx_api_1.ok(undefined);
        }
    }
};
tslib_1.__decorate([
    lib_1.hooks([
        globalVars_1.ErrorContextMW({ source: "Teams", component: "CreateAppPackageDriver" }),
        addStartAndEndTelemetry_1.addStartAndEndTelemetry(exports.actionName, exports.actionName),
    ]),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, wrapUtil_1.WrapDriverContext]),
    tslib_1.__metadata("design:returntype", Promise)
], CreateAppPackageDriver.prototype, "build", null);
CreateAppPackageDriver = CreateAppPackageDriver_1 = tslib_1.__decorate([
    typedi_1.Service(exports.actionName)
], CreateAppPackageDriver);
exports.CreateAppPackageDriver = CreateAppPackageDriver;
//# sourceMappingURL=createAppPackage.js.map