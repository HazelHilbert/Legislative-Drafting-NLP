"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.manifestUtils = exports.ManifestUtils = void 0;
const tslib_1 = require("tslib");
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
const teamsfx_api_1 = require("@microsoft/teamsfx-api");
const adm_zip_1 = tslib_1.__importDefault(require("adm-zip"));
const fs_extra_1 = tslib_1.__importDefault(require("fs-extra"));
const lodash_1 = require("lodash");
const path = tslib_1.__importStar(require("path"));
require("reflect-metadata");
const strip_bom_1 = tslib_1.__importDefault(require("strip-bom"));
const uuid_1 = require("uuid");
const isUUID_1 = tslib_1.__importDefault(require("validator/lib/isUUID"));
const common_1 = require("../../../../error/common");
const create_1 = require("../../../../question/create");
const constants_1 = require("../../../constants");
const migrate_1 = require("../../../migrate");
const common_2 = require("../../../utils/common");
const constants_2 = require("../constants");
const errors_1 = require("../errors");
const results_1 = require("../results");
const telemetry_1 = require("./telemetry");
const hooks_1 = require("@feathersjs/hooks");
const globalVars_1 = require("../../../../core/globalVars");
class ManifestUtils {
    async readAppManifest(projectPath) {
        const filePath = this.getTeamsAppManifestPath(projectPath);
        return await this._readAppManifest(filePath);
    }
    async _readAppManifest(manifestTemplatePath) {
        if (!(await fs_extra_1.default.pathExists(manifestTemplatePath))) {
            return teamsfx_api_1.err(new common_1.FileNotFoundError("teamsApp", manifestTemplatePath));
        }
        // Be compatible with UTF8-BOM encoding
        // Avoid Unexpected token error at JSON.parse()
        let content = await fs_extra_1.default.readFile(manifestTemplatePath, { encoding: "utf-8" });
        content = strip_bom_1.default(content);
        const contentV3 = migrate_1.convertManifestTemplateToV3(content);
        try {
            const manifest = JSON.parse(contentV3);
            return teamsfx_api_1.ok(manifest);
        }
        catch (e) {
            return teamsfx_api_1.err(new common_1.JSONSyntaxError(manifestTemplatePath, e, "ManifestUtils"));
        }
    }
    async _writeAppManifest(appManifest, manifestTemplatePath) {
        const content = JSON.stringify(appManifest, undefined, 4);
        const contentV2 = migrate_1.convertManifestTemplateToV2(content);
        await fs_extra_1.default.writeFile(manifestTemplatePath, contentV2);
        return teamsfx_api_1.ok(undefined);
    }
    getTeamsAppManifestPath(projectPath) {
        const filePath = path.join(projectPath, "appPackage", "manifest.json");
        return filePath;
    }
    async addCapabilities(inputs, capabilities, isM365 = false) {
        var _a, _b, _c, _d;
        const appManifestRes = await this._readAppManifest(inputs["addManifestPath"]);
        if (appManifestRes.isErr())
            return teamsfx_api_1.err(appManifestRes.error);
        const appManifest = appManifestRes.value;
        for (const capability of capabilities) {
            const exceedLimit = this._capabilityExceedLimit(appManifest, capability.name);
            if (exceedLimit) {
                return teamsfx_api_1.err(results_1.AppStudioResultFactory.UserError(errors_1.AppStudioError.CapabilityExceedLimitError.name, errors_1.AppStudioError.CapabilityExceedLimitError.message(capability.name)));
            }
            let staticTabIndex = (_b = (_a = appManifest.staticTabs) === null || _a === void 0 ? void 0 : _a.length) !== null && _b !== void 0 ? _b : 0;
            switch (capability.name) {
                case "staticTab":
                    appManifest.staticTabs = appManifest.staticTabs || [];
                    if (capability.snippet) {
                        appManifest.staticTabs.push(capability.snippet);
                    }
                    else {
                        if (capability.existingApp) {
                            const template = lodash_1.cloneDeep(constants_2.STATIC_TABS_TPL_EXISTING_APP[0]);
                            // eslint-disable-next-line @typescript-eslint/restrict-plus-operands
                            template.entityId = "index" + staticTabIndex;
                            appManifest.staticTabs.push(template);
                        }
                        else {
                            const tabManifest = inputs.features === create_1.CapabilityOptions.dashboardTab().id
                                ? constants_2.STATIC_TABS_TPL_V3[1]
                                : constants_2.STATIC_TABS_TPL_V3[0];
                            const template = lodash_1.cloneDeep(tabManifest);
                            // eslint-disable-next-line @typescript-eslint/restrict-plus-operands
                            template.entityId = "index" + staticTabIndex;
                            appManifest.staticTabs.push(template);
                        }
                        staticTabIndex++;
                    }
                    break;
                case "configurableTab":
                    appManifest.configurableTabs = appManifest.configurableTabs || [];
                    if (capability.snippet) {
                        appManifest.configurableTabs.push(capability.snippet);
                    }
                    else {
                        if (capability.existingApp) {
                            appManifest.configurableTabs = appManifest.configurableTabs.concat(constants_2.CONFIGURABLE_TABS_TPL_EXISTING_APP);
                        }
                        else {
                            appManifest.configurableTabs =
                                appManifest.configurableTabs.concat(constants_2.CONFIGURABLE_TABS_TPL_V3);
                        }
                    }
                    break;
                case "Bot":
                    appManifest.bots = appManifest.bots || [];
                    if (capability.snippet) {
                        appManifest.bots.push(capability.snippet);
                    }
                    else {
                        if (capability.existingApp) {
                            appManifest.bots = appManifest.bots.concat(constants_2.BOTS_TPL_EXISTING_APP);
                        }
                        else {
                            // import CoreQuestionNames introduces dependency cycle and breaks the whole program
                            // inputs[CoreQuestionNames.Features]
                            if (inputs.features) {
                                const feature = inputs.features;
                                if (feature === create_1.CapabilityOptions.commandBot().id ||
                                    feature == create_1.CapabilityOptions.workflowBot().id) {
                                    // command and response bot or workflow bot
                                    appManifest.bots = appManifest.bots.concat(constants_2.BOTS_TPL_FOR_COMMAND_AND_RESPONSE_V3);
                                }
                                else if (feature === create_1.CapabilityOptions.notificationBot().id) {
                                    // notification
                                    appManifest.bots = appManifest.bots.concat(constants_2.BOTS_TPL_FOR_NOTIFICATION_V3);
                                }
                                else {
                                    // legacy bot
                                    appManifest.bots = appManifest.bots.concat(constants_2.BOTS_TPL_V3);
                                }
                            }
                            else if (inputs.scenarios) {
                                const scenariosRaw = inputs.scenarios;
                                const scenarios = Array.isArray(scenariosRaw) ? scenariosRaw : [];
                                if (scenarios.includes(constants_1.BotScenario.CommandAndResponseBot) ||
                                    scenarios.includes(constants_1.BotScenario.WorkflowBot)) {
                                    // command and response bot or workflow bot
                                    appManifest.bots = appManifest.bots.concat(constants_2.BOTS_TPL_FOR_COMMAND_AND_RESPONSE_V3);
                                }
                                else if (scenarios.includes(constants_1.BotScenario.NotificationBot)) {
                                    // notification
                                    appManifest.bots = appManifest.bots.concat(constants_2.BOTS_TPL_FOR_NOTIFICATION_V3);
                                }
                                else {
                                    // legacy bot
                                    appManifest.bots = appManifest.bots.concat(constants_2.BOTS_TPL_V3);
                                }
                            }
                            else {
                                appManifest.bots = appManifest.bots.concat(constants_2.BOTS_TPL_V3);
                            }
                        }
                    }
                    break;
                case "MessageExtension":
                    appManifest.composeExtensions = appManifest.composeExtensions || [];
                    if (capability.snippet) {
                        appManifest.composeExtensions.push(capability.snippet);
                    }
                    else {
                        if (capability.existingApp) {
                            appManifest.composeExtensions = appManifest.composeExtensions.concat(constants_2.COMPOSE_EXTENSIONS_TPL_EXISTING_APP);
                        }
                        else {
                            appManifest.composeExtensions = appManifest.composeExtensions.concat(isM365 ? constants_2.COMPOSE_EXTENSIONS_TPL_M365_V3 : constants_2.COMPOSE_EXTENSIONS_TPL_V3);
                        }
                    }
                    break;
                case "WebApplicationInfo":
                    if (capability.snippet) {
                        appManifest.webApplicationInfo = capability.snippet;
                    }
                    else {
                        appManifest.webApplicationInfo = constants_2.WEB_APPLICATION_INFO_V3;
                    }
                    break;
            }
        }
        if (inputs.validDomain && !((_c = appManifest.validDomains) === null || _c === void 0 ? void 0 : _c.includes(inputs.validDomain))) {
            (_d = appManifest.validDomains) === null || _d === void 0 ? void 0 : _d.push(inputs.validDomain);
        }
        const content = JSON.stringify(appManifest, undefined, 4);
        const contentV2 = migrate_1.convertManifestTemplateToV2(content);
        await fs_extra_1.default.writeFile(inputs["addManifestPath"], contentV2);
        return teamsfx_api_1.ok(undefined);
    }
    _capabilityExceedLimit(manifest, capability) {
        switch (capability) {
            case "staticTab":
                return (manifest.staticTabs !== undefined && manifest.staticTabs.length >= constants_2.STATIC_TABS_MAX_ITEMS);
            case "configurableTab":
                return manifest.configurableTabs !== undefined && manifest.configurableTabs.length >= 1;
            case "Bot":
                return manifest.bots !== undefined && manifest.bots.length >= 1;
            case "MessageExtension":
                return manifest.composeExtensions !== undefined && manifest.composeExtensions.length >= 1;
            case "WebApplicationInfo":
                return false;
            default:
                return false;
        }
    }
    getCapabilities(template) {
        const capabilities = [];
        if (template.staticTabs && template.staticTabs.length > 0) {
            capabilities.push("staticTab");
        }
        if (template.configurableTabs && template.configurableTabs.length > 0) {
            capabilities.push("configurableTab");
        }
        if (template.bots && template.bots.length > 0) {
            capabilities.push("Bot");
        }
        if (template.composeExtensions) {
            capabilities.push("MessageExtension");
        }
        return capabilities;
    }
    /**
     * Get command id from composeExtensions
     * @param manifest
     */
    getOperationIds(manifest) {
        var _a;
        const ids = [];
        (_a = manifest.composeExtensions) === null || _a === void 0 ? void 0 : _a.map((extension) => {
            var _a;
            (_a = extension.commands) === null || _a === void 0 ? void 0 : _a.map((command) => {
                ids.push(command.id);
            });
        });
        return ids;
    }
    async getManifestV3(manifestTemplatePath, context, generateIdIfNotResolved = true) {
        const manifestRes = await exports.manifestUtils._readAppManifest(manifestTemplatePath);
        if (manifestRes.isErr()) {
            return teamsfx_api_1.err(manifestRes.error);
        }
        let manifest = manifestRes.value;
        let teamsAppId = "";
        if (generateIdIfNotResolved) {
            // Corner Case: Avoid MissingEnvironmentVariablesError for manifest.id
            teamsAppId = common_2.expandEnvironmentVariable(manifest.id);
            manifest.id = "";
        }
        const manifestTemplateString = JSON.stringify(manifest);
        // Add environment variable keys to telemetry
        const customizedKeys = common_2.getEnvironmentVariables(manifestTemplateString);
        const telemetryProps = {};
        telemetryProps[telemetry_1.TelemetryPropertyKey.customizedKeys] = customizedKeys.join(";");
        if (context) {
            context.addTelemetryProperties(telemetryProps);
        }
        const resolvedManifestString = common_2.expandEnvironmentVariable(manifestTemplateString);
        const tokens = common_2.getEnvironmentVariables(resolvedManifestString);
        if (tokens.length > 0) {
            return teamsfx_api_1.err(new common_1.MissingEnvironmentVariablesError("teamsApp", tokens.join(","), manifestTemplatePath));
        }
        manifest = JSON.parse(resolvedManifestString);
        if (generateIdIfNotResolved) {
            if (!isUUID_1.default(teamsAppId)) {
                manifest.id = uuid_1.v4();
            }
            else {
                manifest.id = teamsAppId;
            }
        }
        return teamsfx_api_1.ok(manifest);
    }
    extractManifestFromArchivedFile(archivedFile) {
        const zipEntries = new adm_zip_1.default(archivedFile).getEntries();
        const manifestFile = zipEntries.find((x) => x.entryName === constants_2.Constants.MANIFEST_FILE);
        if (!manifestFile) {
            return teamsfx_api_1.err(results_1.AppStudioResultFactory.UserError(errors_1.AppStudioError.FileNotFoundError.name, errors_1.AppStudioError.FileNotFoundError.message(constants_2.Constants.MANIFEST_FILE)));
        }
        const manifestString = manifestFile.getData().toString();
        const manifest = JSON.parse(manifestString);
        return teamsfx_api_1.ok(manifest);
    }
}
tslib_1.__decorate([
    hooks_1.hooks([globalVars_1.ErrorContextMW({ component: "ManifestUtils" })]),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [String]),
    tslib_1.__metadata("design:returntype", Promise)
], ManifestUtils.prototype, "_readAppManifest", null);
exports.ManifestUtils = ManifestUtils;
exports.manifestUtils = new ManifestUtils();
//# sourceMappingURL=ManifestUtils.js.map