"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
exports.AppStudioError = void 0;
const constants_1 = require("./constants");
const localizeUtils_1 = require("../../../common/localizeUtils");
class AppStudioError {
}
exports.AppStudioError = AppStudioError;
AppStudioError.FileNotFoundError = {
    name: "FileNotFoundError",
    message: (filePath) => [
        localizeUtils_1.getDefaultString("error.common.FileNotFoundError", filePath),
        localizeUtils_1.getLocalizedString("error.common.FileNotFoundError", filePath),
    ],
};
AppStudioError.AuthServiceAPIFailedError = {
    name: "AuthServiceAPIFailed",
    message: (e, requestPath, apiName) => [
        localizeUtils_1.getDefaultString("error.appstudio.authServiceApiFailed", e.name, e.message, apiName),
        localizeUtils_1.getLocalizedString("error.appstudio.authServiceApiFailed", e.name, e.message, requestPath),
    ],
};
AppStudioError.TeamsAppCreateFailedError = {
    name: "TeamsAppCreateFailed",
    message: (error) => [
        localizeUtils_1.getDefaultString("error.appstudio.teamsAppCreateFailed", error === null || error === void 0 ? void 0 : error.message),
        localizeUtils_1.getLocalizedString("error.appstudio.teamsAppCreateFailed", error === null || error === void 0 ? void 0 : error.displayMessage),
    ],
};
AppStudioError.TeamsAppUpdateFailedError = {
    name: "TeamsAppUpdateFailed",
    message: (teamsAppId, error) => [
        localizeUtils_1.getDefaultString("error.appstudio.teamsAppUpdateFailed", teamsAppId, error.message),
        localizeUtils_1.getLocalizedString("error.appstudio.teamsAppUpdateFailed", teamsAppId, error.displayMessage),
    ],
};
AppStudioError.InvalidTeamsAppIdError = {
    name: "InvalidTeamsAppId",
    message: (teamsAppId) => [
        localizeUtils_1.getDefaultString("error.teamsApp.InvalidAppIdError", teamsAppId),
        localizeUtils_1.getLocalizedString("error.teamsApp.InvalidAppIdError", teamsAppId),
    ],
};
AppStudioError.TeamsAppNotExistsError = {
    name: "TeasmAppNotExists",
    message: (teamsAppId) => [
        localizeUtils_1.getDefaultString("error.teamsApp.AppIdNotExistError", teamsAppId),
        localizeUtils_1.getLocalizedString("error.teamsApp.AppIdNotExistError", teamsAppId),
    ],
};
AppStudioError.ValidationFailedError = {
    name: "ManifestValidationFailed",
    message: (errors) => [
        localizeUtils_1.getDefaultString("plugins.appstudio.validationFailedNotice") + " " + errors.join("\n"),
        localizeUtils_1.getLocalizedString("plugins.appstudio.validationFailedNotice") + " " + errors.join("\n"),
    ],
};
AppStudioError.TeamsAppPublishFailedError = {
    name: "TeamsAppPublishFailed",
    message: (teamsAppId, requestPath, correlationId) => [
        localizeUtils_1.getDefaultString("error.appstudio.publishFailed", teamsAppId) +
            `Request path: ${requestPath}` +
            (correlationId ? `X-Correlation-ID: ${correlationId}` : ""),
        localizeUtils_1.getLocalizedString("error.appstudio.publishFailed", teamsAppId) +
            `Request path: ${requestPath}` +
            (correlationId ? `X-Correlation-ID: ${correlationId}` : ""),
    ],
};
AppStudioError.TeamsPackageBuildError = {
    name: "TeamsPackageBuildError",
    message: (error) => {
        var _a, _b;
        return [
            (_a = error.message) !== null && _a !== void 0 ? _a : localizeUtils_1.getDefaultString("error.appstudio.buildError"),
            (_b = error.displayMessage) !== null && _b !== void 0 ? _b : localizeUtils_1.getLocalizedString("error.appstudio.buildError"),
        ];
    },
};
AppStudioError.CheckPermissionFailedError = {
    name: "CheckPermissionFailed",
    message: (error) => [
        localizeUtils_1.getDefaultString("error.appstudio.checkPermissionFailed", error.message),
        localizeUtils_1.getLocalizedString("error.appstudio.checkPermissionFailed", error.message),
    ],
};
AppStudioError.GrantPermissionFailedError = {
    name: "GrantPermissionFailed",
    message: (errorMessage, id) => [
        // eslint-disable-next-line @typescript-eslint/restrict-template-expressions
        `${constants_1.Constants.PERMISSIONS.name}: ${id}. ` +
            localizeUtils_1.getDefaultString("error.appstudio.grantPermissionFailed", errorMessage),
        // eslint-disable-next-line @typescript-eslint/restrict-template-expressions
        `${constants_1.Constants.PERMISSIONS.name}: ${id}. ` +
            localizeUtils_1.getLocalizedString("error.appstudio.grantPermissionFailed", errorMessage),
    ],
};
AppStudioError.ListCollaboratorFailedError = {
    name: "ListCollaboratorFailedError",
    message: (error) => [
        localizeUtils_1.getDefaultString("error.appstudio.listCollaboratorFailed", error.message),
        localizeUtils_1.getLocalizedString("error.appstudio.listCollaboratorFailed", error.message),
    ],
};
AppStudioError.UpdateManifestWithInvalidAppError = {
    name: "UpdateManifestWithInvalidAppError",
    message: (appId) => [
        localizeUtils_1.getDefaultString("error.appstudio.updateManifestInvalidApp", appId),
        localizeUtils_1.getLocalizedString("error.appstudio.updateManifestInvalidApp", appId),
    ],
};
AppStudioError.InvalidCapabilityError = {
    name: "InvalidCapabilityError",
    message: (capability) => [
        localizeUtils_1.getDefaultString("error.appstudio.invalidCapability", capability),
        localizeUtils_1.getLocalizedString("error.appstudio.invalidCapability", capability),
    ],
};
AppStudioError.CapabilityExceedLimitError = {
    name: "CapabilityExceedLimitError",
    message: (capability) => [
        localizeUtils_1.getDefaultString("error.appstudio.capabilityExceedLimit", capability),
        localizeUtils_1.getLocalizedString("error.appstudio.capabilityExceedLimit", capability),
    ],
};
AppStudioError.StaticTabNotExistError = {
    name: "StaticTabNotExist",
    message: (index) => [
        localizeUtils_1.getDefaultString("error.appstudio.staticTabNotExist", index),
        localizeUtils_1.getLocalizedString("error.appstudio.staticTabNotExist", index),
    ],
};
AppStudioError.CapabilityNotExistError = {
    name: "CapabilityNotExist",
    message: (capability) => [
        localizeUtils_1.getDefaultString("error.appstudio.capabilityNotExist", capability),
        localizeUtils_1.getLocalizedString("error.appstudio.capabilityNotExist", capability),
    ],
};
AppStudioError.TeamsAppCreateConflictError = {
    name: "TeamsAppCreateConflict",
    message: () => [
        localizeUtils_1.getDefaultString("error.appstudio.teamsAppCreateConflict"),
        localizeUtils_1.getLocalizedString("error.appstudio.teamsAppCreateConflict"),
    ],
};
AppStudioError.TeamsAppCreateConflictWithPublishedAppError = {
    name: "TeamsAppCreateConflictWithPublishedApp",
    message: () => [
        localizeUtils_1.getDefaultString("error.appstudio.teamsAppCreateConflictWithPublishedApp"),
        localizeUtils_1.getLocalizedString("error.appstudio.teamsAppCreateConflictWithPublishedApp"),
    ],
};
AppStudioError.TeamsAppPublishConflictError = {
    name: "TeamsAppPublishConflict",
    message: (teamsAppId) => [
        localizeUtils_1.getDefaultString("error.appstudio.teamsAppPublishConflict", teamsAppId),
        localizeUtils_1.getLocalizedString("error.appstudio.teamsAppPublishConflict", teamsAppId),
    ],
};
//# sourceMappingURL=errors.js.map