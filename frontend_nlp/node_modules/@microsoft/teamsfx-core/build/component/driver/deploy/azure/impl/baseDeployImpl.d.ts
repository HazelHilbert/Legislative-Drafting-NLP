/**
 * @author FanH <Siglud@gmail.com>
 */
import { DeployArgs, DeployContext, DeployStepArgs } from "../../../interface/buildAndDeployArgs";
import { Ignore } from "ignore";
import { ExecutionResult } from "../../../interface/stepDriver";
import { IProgressHandler, UserInteraction, LogProvider } from "@microsoft/teamsfx-api";
import { DriverContext } from "../../../interface/commonArgs";
export declare abstract class BaseDeployImpl {
    args: unknown;
    context: DeployContext;
    workingDirectory: string;
    distDirectory: string;
    dryRun: boolean;
    zipFilePath?: string;
    protected logger: LogProvider;
    protected ui?: UserInteraction;
    protected progressBar?: IProgressHandler;
    protected static readonly emptyMap: Map<string, string>;
    protected helpLink: string | undefined;
    protected abstract summaries: () => string[];
    protected abstract summaryPrepare: () => string[];
    protected progressPrepare: (() => string)[];
    constructor(args: unknown, context: DriverContext);
    abstract updateProgressbar(): void;
    protected static asDeployArgs: (data: unknown, helpLink?: string | undefined) => DeployArgs;
    run(): Promise<ExecutionResult>;
    private handlePath;
    protected handleIgnore(args: DeployStepArgs, context: DeployContext): Promise<Ignore>;
    protected wrapErrorHandler(fn: () => boolean | Promise<boolean>): Promise<ExecutionResult>;
    /**
     * real deploy process
     * @param args deploy arguments
     */
    abstract deploy(args: DeployArgs): Promise<boolean>;
}
//# sourceMappingURL=baseDeployImpl.d.ts.map