"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
exports.SPOClient = void 0;
const tslib_1 = require("tslib");
const axios_1 = tslib_1.__importDefault(require("axios"));
// eslint-disable-next-line @typescript-eslint/no-namespace
var SPOClient;
(function (SPOClient) {
    let baseUrl = "";
    function setBaseUrl(tenant) {
        baseUrl = tenant;
    }
    SPOClient.setBaseUrl = setBaseUrl;
    /**
     * Creates a new axios instance to call SharePoint Service to prevent setting the accessToken on global instance.
     * @param {string}  spoToken
     * @returns {AxiosInstance}
     */
    function createRequesterWithToken(spoToken) {
        const instance = axios_1.default.create({
            baseURL: baseUrl,
        });
        instance.defaults.headers.common["Authorization"] = `Bearer ${spoToken}`;
        instance.defaults.headers.common["Client-Source"] = "teamstoolkit";
        instance.interceptors.request.use(function (config) {
            config.params = Object.assign({ teamstoolkit: true }, config.params);
            return config;
        });
        return instance;
    }
    /**
     *
     * @param spoToken
     * @returns tenant app catalog URL
     */
    async function getAppCatalogSite(spoToken) {
        const requester = createRequesterWithToken(spoToken);
        const res = await requester.get("/_api/SP_TenantSettings_Current");
        if (res && res.data && res.data.CorporateCatalogUrl) {
            return res.data.CorporateCatalogUrl;
        }
        else {
            return undefined;
        }
    }
    SPOClient.getAppCatalogSite = getAppCatalogSite;
    /**
     *
     * @param spoToken
     * @param fileName - *.sppkg file name
     * @param file - binary of *.sppkg
     */
    async function uploadAppPackage(spoToken, fileName, file) {
        const requester = createRequesterWithToken(spoToken);
        await requester.post(`/_api/web/tenantappcatalog/Add(overwrite=true, url='${fileName}')`, file);
    }
    SPOClient.uploadAppPackage = uploadAppPackage;
    /**
     *
     * @param spoToken
     * @param appId - appId in package-solution.json
     */
    async function deployAppPackage(spoToken, appId) {
        const deploySetting = {
            skipFeatureDeployment: true,
        };
        const requester = createRequesterWithToken(spoToken);
        await requester.post(`/_api/web/tenantappcatalog/AvailableApps/GetById('${appId}')/Deploy`, deploySetting);
    }
    SPOClient.deployAppPackage = deployAppPackage;
    async function createAppCatalog(spoToken) {
        const requester = createRequesterWithToken(spoToken);
        await requester.post(`/_api/web/EnsureTenantAppCatalog(callerId='teamsdev')`);
    }
    SPOClient.createAppCatalog = createAppCatalog;
})(SPOClient = exports.SPOClient || (exports.SPOClient = {}));
//# sourceMappingURL=spoClient.js.map