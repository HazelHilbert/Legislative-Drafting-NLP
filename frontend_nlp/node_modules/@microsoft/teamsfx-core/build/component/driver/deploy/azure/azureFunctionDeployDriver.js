"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
/**
 * @author Siglud <siglud@gmail.com>
 */
var AzureFunctionDeployDriver_1;
Object.defineProperty(exports, "__esModule", { value: true });
exports.AzureFunctionDeployDriver = void 0;
const tslib_1 = require("tslib");
const typedi_1 = require("typedi");
const hooks_1 = require("@feathersjs/hooks");
const addStartAndEndTelemetry_1 = require("../../middleware/addStartAndEndTelemetry");
const commonConstant_1 = require("../../../constant/commonConstant");
const localizeUtils_1 = require("../../../../common/localizeUtils");
const AzureZipDeployImpl_1 = require("./impl/AzureZipDeployImpl");
const ACTION_NAME = "azureFunctions/zipDeploy";
let AzureFunctionDeployDriver = AzureFunctionDeployDriver_1 = class AzureFunctionDeployDriver {
    constructor() {
        this.description = localizeUtils_1.getLocalizedString("driver.deploy.deployToAzureFunctionsDescription");
    }
    async execute(args, ctx) {
        const impl = new AzureZipDeployImpl_1.AzureZipDeployImpl(args, ctx, AzureFunctionDeployDriver_1.SERVICE_NAME, "https://aka.ms/teamsfx-actions/azure-functions-deploy", AzureFunctionDeployDriver_1.SUMMARY, AzureFunctionDeployDriver_1.SUMMARY_PREPARE);
        return await impl.run();
    }
};
AzureFunctionDeployDriver.SERVICE_NAME = "Azure Function App";
// eslint-disable-next-line no-secrets/no-secrets
AzureFunctionDeployDriver.SUMMARY = ["driver.deploy.azureFunctionsDeployDetailSummary"];
AzureFunctionDeployDriver.SUMMARY_PREPARE = ["driver.deploy.notice.deployDryRunComplete"];
tslib_1.__decorate([
    hooks_1.hooks([addStartAndEndTelemetry_1.addStartAndEndTelemetry(ACTION_NAME, commonConstant_1.TelemetryConstant.DEPLOY_COMPONENT_NAME)]),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object]),
    tslib_1.__metadata("design:returntype", Promise)
], AzureFunctionDeployDriver.prototype, "execute", null);
AzureFunctionDeployDriver = AzureFunctionDeployDriver_1 = tslib_1.__decorate([
    typedi_1.Service(ACTION_NAME)
], AzureFunctionDeployDriver);
exports.AzureFunctionDeployDriver = AzureFunctionDeployDriver;
//# sourceMappingURL=azureFunctionDeployDriver.js.map