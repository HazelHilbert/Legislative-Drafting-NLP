import { DeployStepArgs, AzureUploadConfig, DeployArgs, DeployResult } from "../../../interface/buildAndDeployArgs";
import { LogProvider } from "@microsoft/teamsfx-api";
import { BaseDeployImpl } from "./baseDeployImpl";
import * as appService from "@azure/arm-appservice";
import { AzureResourceInfo } from "../../../interface/commonArgs";
import { TokenCredential } from "@azure/identity";
export declare abstract class AzureDeployImpl extends BaseDeployImpl {
    protected managementClient: appService.WebSiteManagementClient | undefined;
    static readonly AXIOS_INSTANCE: import("axios").AxiosInstance;
    /**
     * the pattern that used to parse resource id and extract info from it
     */
    abstract pattern: RegExp;
    protected prepare?: (args: DeployStepArgs) => Promise<void>;
    deploy(args: DeployArgs): Promise<boolean>;
    /**
     * real azure deploy logic
     * @param args local file needed to be deployed
     * @param azureResource azure resource info
     * @param azureCredential azure user login credential
     */
    abstract azureDeploy(args: DeployStepArgs, azureResource: AzureResourceInfo, azureCredential: TokenCredential): Promise<void>;
    /**
     * check if resource id is legal and parse it
     * @param resourceId deploy target
     * @protected
     */
    protected parseResourceId(resourceId: string): AzureResourceInfo;
    /**
     * loop and check azure deployment status
     * by default, it will wait for 120 minutes
     * @param location azure deployment location
     * @param config azure upload config, including azure account credential
     * @param logger log provider
     * @protected
     */
    checkDeployStatus(location: string, config: AzureUploadConfig, logger: LogProvider): Promise<DeployResult | undefined>;
    /**
     * create azure deploy config for Azure Function and Azure App service
     * @param azureResource azure resource info
     * @param azureCredential user azure credential
     */
    createAzureDeployConfig(azureResource: AzureResourceInfo, azureCredential: TokenCredential): Promise<AzureUploadConfig>;
    protected restartFunctionApp(azureResource: AzureResourceInfo): Promise<void>;
}
//# sourceMappingURL=azureDeployImpl.d.ts.map