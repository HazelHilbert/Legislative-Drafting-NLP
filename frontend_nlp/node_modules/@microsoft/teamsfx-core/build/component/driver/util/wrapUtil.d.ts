import { IProgressHandler } from "@microsoft/teamsfx-api";
import { TeamsFxTelemetryReporter } from "../../utils/teamsFxTelemetryReporter";
import { DriverContext } from "../interface/commonArgs";
import { ExecutionResult } from "../interface/stepDriver";
declare type ActionResult = ExecutionResult | ExecutionResult["result"];
export interface WrapDriverContext extends DriverContext {
    createProgressBar(title: string, steps: number): Promise<IProgressHandler | undefined>;
    addTelemetryProperties(properties: Record<string, string>): void;
    addSummary(...summaries: string[]): void;
}
export declare class WrapDriverContext {
    progressBars: IProgressHandler[];
    summaries: string[];
    eventName: string;
    telemetryProperties: Record<string, string>;
    wrapTelemetryReporter?: TeamsFxTelemetryReporter;
    constructor(driverContext: DriverContext, eventName: string, componentName: string);
    endProgressBars(success: boolean): Promise<void>;
}
export declare function wrapRun(context: WrapDriverContext, exec: () => Promise<Map<string, string>>, isExecute?: boolean): Promise<ActionResult>;
export {};
//# sourceMappingURL=wrapUtil.d.ts.map