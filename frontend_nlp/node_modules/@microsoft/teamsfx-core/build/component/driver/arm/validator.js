"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
exports.validateArgs = void 0;
const uuid_1 = require("uuid");
const constant_1 = require("./constant");
const util_1 = require("./util/util");
function validateArgs(args) {
    const invalidParameters = [];
    if (!args.subscriptionId || !uuid_1.validate(args.subscriptionId)) {
        invalidParameters.push("subscriptionId is invalid");
    }
    if (!args.resourceGroupName) {
        invalidParameters.push("resourceGroupName is invalid");
    }
    const res = validateTemplates(args.templates);
    invalidParameters.push(...res);
    return Promise.resolve(invalidParameters);
}
exports.validateArgs = validateArgs;
function validateTemplates(templates) {
    const res = [];
    if (templates.length === 0) {
        res.push(`templates is invalid for it is empty`);
    }
    for (let i = 0; i < templates.length; i++) {
        const iRes = validateTemplate(templates[i]);
        for (const value of iRes) {
            res.push(`templates.${i}.${value}`);
        }
    }
    return res;
}
function validateTemplate(template) {
    const res = [];
    if (!template.deploymentName) {
        res.push("deploymentName is invalid");
    }
    if (template.parameters && util_1.getFileExtension(template.parameters) !== "json") {
        res.push("parameters is invalid");
    }
    const templateType = util_1.getFileExtension(template.path);
    if (templateType !== constant_1.TemplateType.Json && templateType !== constant_1.TemplateType.Bicep) {
        res.push("path is invalid");
    }
    return res;
}
//# sourceMappingURL=validator.js.map