"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
exports.convertOutputs = exports.getFileExtension = exports.hasBicepTemplate = void 0;
const tslib_1 = require("tslib");
const path = tslib_1.__importStar(require("path"));
const constant_1 = require("../constant");
const arm_1 = require("../../../../error/arm");
function hasBicepTemplate(args) {
    for (const arg of args) {
        const templateType = getFileExtension(arg.path);
        if (templateType === constant_1.TemplateType.Bicep) {
            return true;
        }
    }
    return false;
}
exports.hasBicepTemplate = hasBicepTemplate;
function getFileExtension(filename) {
    if (!filename) {
        return "";
    }
    const ext = path.extname(filename).toLowerCase();
    return ext ? ext.substring(1) : ext;
}
exports.getFileExtension = getFileExtension;
function convertOutputs(outputs) {
    const res = new Map();
    for (const output of outputs) {
        convertOutput(output, res);
    }
    return res;
}
exports.convertOutputs = convertOutputs;
/**
 * convert arm deployment output to string-string map which will be set in env.
 * The key will be converted to upperCase
 * The nested key will use "__" to join the key name
 * { tabOutput:
 *    {
 *      type: "Object",
 *      value: {
 *        keyA: "valueA",
 *        KeyB: 1
 *      }
 *    }
 * }
 * Convert the above output, there will be 2 keys TABOUTPUT__KEYA, TABOUTPUT__KEYB
 */
function convertOutput(output, map, prefix) {
    const keys = Object.keys(output);
    for (const key of keys) {
        const value = output[key].value;
        if (value instanceof Object) {
            const newPrefix = buildKey(key, prefix);
            convertOutput(value, map, newPrefix);
        }
        else {
            const mapKey = buildKey(key, prefix);
            if (map.get(mapKey)) {
                throw new arm_1.ConvertArmOutputError(mapKey);
            }
            map.set(mapKey.toUpperCase(), value ? value.toString() : output[key].toString());
        }
    }
}
function buildKey(key, prefix) {
    return prefix ? prefix + "__" + key : key;
}
//# sourceMappingURL=util.js.map