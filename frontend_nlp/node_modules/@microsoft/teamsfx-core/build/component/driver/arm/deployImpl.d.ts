/**
 * @author xzf0587 <zhaofengxu@microsoft.com>
 */
import { Deployment, ResourceManagementClient } from "@azure/arm-resources";
import { FxError, Result } from "@microsoft/teamsfx-api";
import { WrapDriverContext } from "../util/wrapUtil";
import { deployArgs, deploymentOutput, templateArgs } from "./interface";
import { DeployContext } from "./util/handleError";
export declare class ArmDeployImpl {
    args: deployArgs;
    context: WrapDriverContext;
    bicepCommand?: string;
    client?: ResourceManagementClient;
    constructor(args: deployArgs, context: WrapDriverContext);
    run(): Promise<Map<string, string>>;
    private validateArgs;
    ensureBicepCli(): Promise<string>;
    private createClient;
    deployTemplates(): Promise<Result<deploymentOutput[], FxError>>;
    deployTemplate(templateArg: templateArgs): Promise<Result<deploymentOutput | undefined, FxError>>;
    executeDeployment(templateArg: templateArgs, deploymentParameters: Deployment, deployCtx: DeployContext): Promise<Result<deploymentOutput | undefined, FxError>>;
    innerExecuteDeployment(templateArg: templateArgs, deploymentParameters: Deployment): Promise<Result<deploymentOutput | undefined, FxError>>;
    getDeployParameters(parameters?: string): Promise<any>;
    checkPlaceholderInTemplate(parameterJsonString: string, filePath: string): void;
    getDeployTemplate(templatePath: string): Promise<string>;
    compileBicepToJson(filePath: string): Promise<JSON>;
    private setTelemetries;
}
//# sourceMappingURL=deployImpl.d.ts.map