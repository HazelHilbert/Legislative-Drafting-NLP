"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
/**
 * @owner fanhu <fanhu@microsoft.com>
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.NpmBuildDriverImpl = exports.NpmBuildDriver = void 0;
const tslib_1 = require("tslib");
const baseBuildDriver_1 = require("./baseBuildDriver");
const typedi_1 = require("typedi");
const hooks_1 = require("@feathersjs/hooks");
const addStartAndEndTelemetry_1 = require("../middleware/addStartAndEndTelemetry");
const commonConstant_1 = require("../../constant/commonConstant");
const baseBuildStepDriver_1 = require("./baseBuildStepDriver");
const localizeUtils_1 = require("../../../common/localizeUtils");
const ACTION_NAME = "cli/runNpmCommand";
let NpmBuildDriver = class NpmBuildDriver extends baseBuildStepDriver_1.BaseBuildStepDriver {
    constructor() {
        super(...arguments);
        this.description = localizeUtils_1.getLocalizedString("driver.script.npmDescription");
    }
    getImpl(args, context) {
        return new NpmBuildDriverImpl(args, context, "https://aka.ms/teamsfx-actions/cli-run-npm-command");
    }
    execute(args, ctx) {
        return super.execute(args, ctx);
    }
};
tslib_1.__decorate([
    hooks_1.hooks([addStartAndEndTelemetry_1.addStartAndEndTelemetry(ACTION_NAME, commonConstant_1.TelemetryConstant.SCRIPT_COMPONENT)]),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object]),
    tslib_1.__metadata("design:returntype", Promise)
], NpmBuildDriver.prototype, "execute", null);
NpmBuildDriver = tslib_1.__decorate([
    typedi_1.Service(ACTION_NAME)
], NpmBuildDriver);
exports.NpmBuildDriver = NpmBuildDriver;
class NpmBuildDriverImpl extends baseBuildDriver_1.BaseBuildDriver {
    constructor() {
        super(...arguments);
        this.buildPrefix = "npm";
    }
}
exports.NpmBuildDriverImpl = NpmBuildDriverImpl;
//# sourceMappingURL=npmBuildDriver.js.map