"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
/**
 * @owner fanhu <fanhu@microsoft.com>
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.BaseBuildDriver = void 0;
const tslib_1 = require("tslib");
const common_1 = require("../../utils/common");
const teamsfx_api_1 = require("@microsoft/teamsfx-api");
const path = tslib_1.__importStar(require("path"));
const localizeUtils_1 = require("../../../common/localizeUtils");
const messages_1 = require("../../messages");
const scriptDriver_1 = require("./scriptDriver");
class BaseBuildDriver {
    constructor(args, context, helpLink) {
        var _a;
        this.args = BaseBuildDriver.toBuildArgs(args, helpLink);
        this.args.workingDirectory = (_a = this.args.workingDirectory) !== null && _a !== void 0 ? _a : "./";
        // if working dir is not absolute path, then join the path with project path
        this.workingDirectory = path.isAbsolute(this.args.workingDirectory)
            ? this.args.workingDirectory
            : path.join(context.projectPath, this.args.workingDirectory);
        this.logProvider = context.logProvider;
        this.telemetryReporter = context.telemetryReporter;
        this.context = context;
        this.progressBar = context.progressBar;
        this.execPath = this.args.execPath;
    }
    static toBuildArgs(args, helpLink) {
        return BaseBuildDriver.asBuildArgs(args, helpLink);
    }
    async run() {
        var _a;
        const command = this.getCommand();
        // add path to env if execPath is set
        let env = undefined;
        if (this.execPath) {
            // eslint-disable-next-line @typescript-eslint/restrict-template-expressions
            env = { PATH: `${this.execPath}${path.delimiter}${process.env.PATH}` };
        }
        await ((_a = this.progressBar) === null || _a === void 0 ? void 0 : _a.next(messages_1.ProgressMessages.runCommand(command, this.workingDirectory)));
        const res = await scriptDriver_1.executeCommand(command, this.context.projectPath, this.logProvider, this.context.ui, this.workingDirectory, env);
        if (res.isErr()) {
            return {
                result: teamsfx_api_1.err(res.error),
                summaries: [],
            };
        }
        return {
            result: teamsfx_api_1.ok(BaseBuildDriver.emptyMap),
            summaries: [
                localizeUtils_1.getLocalizedString("driver.script.runCommandSummary", command, this.workingDirectory),
            ],
        };
    }
    getCommand() {
        const commandSuffix = common_1.checkMissingArgs("BuildCommand", this.args.args).trim();
        return `${this.buildPrefix} ${commandSuffix}`;
    }
}
exports.BaseBuildDriver = BaseBuildDriver;
BaseBuildDriver.emptyMap = new Map();
BaseBuildDriver.asBuildArgs = common_1.asFactory({
    workingDirectory: common_1.asOptional(common_1.asString),
    args: common_1.asString,
    execPath: common_1.asOptional(common_1.asString),
});
//# sourceMappingURL=baseBuildDriver.js.map