"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
exports.capitalizeFirstLetter = exports.maskSecretValues = exports.parseSetOutputCommand = exports.convertScriptErrorToFxError = exports.bufferToString = exports.getStderrHandler = exports.executeCommand = exports.scriptDriver = exports.ScriptDriver = void 0;
const tslib_1 = require("tslib");
/**
 * @author huajiezhang <huajiezhang@microsoft.com>
 */
const teamsfx_api_1 = require("@microsoft/teamsfx-api");
const typedi_1 = require("typedi");
const hooks_1 = require("@feathersjs/hooks");
const addStartAndEndTelemetry_1 = require("../middleware/addStartAndEndTelemetry");
const commonConstant_1 = require("../../constant/commonConstant");
const messages_1 = require("../../messages");
const script_1 = require("../../../error/script");
const charsetUtils_1 = require("../../utils/charsetUtils");
const path = tslib_1.__importStar(require("path"));
const os_1 = tslib_1.__importDefault(require("os"));
const fs_extra_1 = tslib_1.__importDefault(require("fs-extra"));
const iconv_lite_1 = tslib_1.__importDefault(require("iconv-lite"));
const child_process_1 = tslib_1.__importDefault(require("child_process"));
const ACTION_NAME = "script";
let ScriptDriver = class ScriptDriver {
    async _run(typedArgs, context) {
        var _a, _b;
        await ((_a = context.progressBar) === null || _a === void 0 ? void 0 : _a.next(messages_1.ProgressMessages.runCommand(typedArgs.run, (_b = typedArgs.workingDirectory) !== null && _b !== void 0 ? _b : "./")));
        const res = await executeCommand(typedArgs.run, context.projectPath, context.logProvider, context.ui, typedArgs.workingDirectory, undefined, typedArgs.shell, typedArgs.timeout, typedArgs.redirectTo);
        if (res.isErr())
            return teamsfx_api_1.err(res.error);
        const outputs = res.value[1];
        const kvArray = Object.keys(outputs).map((k) => [k, outputs[k]]);
        return teamsfx_api_1.ok(new Map(kvArray));
    }
    async execute(args, ctx) {
        const typedArgs = args;
        const res = await this._run(typedArgs, ctx);
        const summaries = res.isOk()
            ? [`Successfully executed command ${maskSecretValues(args.run)}`]
            : [];
        return { result: res, summaries: summaries };
    }
};
tslib_1.__decorate([
    hooks_1.hooks([addStartAndEndTelemetry_1.addStartAndEndTelemetry(ACTION_NAME, commonConstant_1.TelemetryConstant.SCRIPT_COMPONENT)]),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object]),
    tslib_1.__metadata("design:returntype", Promise)
], ScriptDriver.prototype, "execute", null);
ScriptDriver = tslib_1.__decorate([
    typedi_1.Service(ACTION_NAME)
], ScriptDriver);
exports.ScriptDriver = ScriptDriver;
exports.scriptDriver = new ScriptDriver();
async function executeCommand(command, projectPath, logProvider, ui, workingDirectory, env, shell, timeout, redirectTo) {
    const systemEncoding = await charsetUtils_1.getSystemEncoding();
    return new Promise((resolve, reject) => {
        var _a, _b;
        const platform = os_1.default.platform();
        let workingDir = workingDirectory || ".";
        workingDir = path.isAbsolute(workingDir) ? workingDir : path.join(projectPath, workingDir);
        if (platform === "win32") {
            workingDir = capitalizeFirstLetter(path.resolve(workingDir !== null && workingDir !== void 0 ? workingDir : ""));
        }
        let run = command;
        let appendFile = undefined;
        if (redirectTo) {
            appendFile = path.isAbsolute(redirectTo) ? redirectTo : path.join(projectPath, redirectTo);
        }
        if (shell === "cmd") {
            run = `%ComSpec% /D /E:ON /V:OFF /S /C "CALL ${command}"`;
        }
        logProvider.verbose(`Start to run command: "${maskSecretValues(command)}" with args: ${JSON.stringify({
            shell: shell,
            cwd: workingDir,
            encoding: "buffer",
            env: Object.assign(Object.assign({}, process.env), env),
            timeout: timeout,
        })}.`);
        const allOutputStrings = [];
        const stderrStrings = [];
        process.env.VSLANG = undefined; // Workaroud to disable VS environment variable to void charset encoding issue for non-English characters
        const cp = child_process_1.default.exec(run, {
            shell: shell,
            cwd: workingDir,
            encoding: "buffer",
            env: Object.assign(Object.assign({}, process.env), env),
            timeout: timeout,
        }, (error) => {
            if (error) {
                error.message = stderrStrings.join("").trim() || error.message;
                resolve(teamsfx_api_1.err(convertScriptErrorToFxError(error, run)));
            }
            else {
                // handle '::set-output' or '::set-teamsfx-env' pattern
                const outputString = allOutputStrings.join("");
                const outputObject = parseSetOutputCommand(outputString);
                if (Object.keys(outputObject).length > 0)
                    logProvider.verbose(`script output env variables: ${maskSecretValues(JSON.stringify(outputObject))}`);
                resolve(teamsfx_api_1.ok([outputString, outputObject]));
            }
        });
        const dataHandler = (data) => {
            allOutputStrings.push(data);
            if (appendFile) {
                fs_extra_1.default.appendFileSync(appendFile, data);
            }
        };
        (_a = cp.stdout) === null || _a === void 0 ? void 0 : _a.on("data", (data) => {
            const str = bufferToString(data, systemEncoding);
            logProvider.info(` [script action stdout] ${maskSecretValues(str)}`);
            dataHandler(str);
        });
        const handler = getStderrHandler(logProvider, systemEncoding, stderrStrings, dataHandler);
        (_b = cp.stderr) === null || _b === void 0 ? void 0 : _b.on("data", handler);
    });
}
exports.executeCommand = executeCommand;
function getStderrHandler(logProvider, systemEncoding, stderrStrings, dataHandler) {
    return (data) => {
        const str = bufferToString(data, systemEncoding);
        logProvider.warning(` [script action stderr] ${maskSecretValues(str)}`);
        dataHandler(str);
        stderrStrings.push(str);
    };
}
exports.getStderrHandler = getStderrHandler;
function bufferToString(data, systemEncoding) {
    const str = systemEncoding === "utf8" || systemEncoding === "utf-8"
        ? data.toString()
        : iconv_lite_1.default.decode(data, systemEncoding);
    return str;
}
exports.bufferToString = bufferToString;
function convertScriptErrorToFxError(error, run) {
    if (error.killed) {
        return new script_1.ScriptTimeoutError(run, error);
    }
    else {
        return new script_1.ScriptExecutionError(run, error.message, error);
    }
}
exports.convertScriptErrorToFxError = convertScriptErrorToFxError;
function parseSetOutputCommand(stdout) {
    const regex = /(::set-teamsfx-env|::set-output)\s+([^"'\s]+)=([^"'\s]+)/g;
    const output = {};
    let match;
    while ((match = regex.exec(stdout))) {
        if (match && match.length === 4) {
            const key = match[2].trim();
            const value = match[3].trim();
            output[key] = value;
        }
    }
    return output;
}
exports.parseSetOutputCommand = parseSetOutputCommand;
function maskSecretValues(stdout) {
    for (const key of Object.keys(process.env)) {
        if (key.startsWith("SECRET_")) {
            const value = process.env[key];
            if (value) {
                stdout = stdout.replace(value, "***");
            }
        }
    }
    return stdout;
}
exports.maskSecretValues = maskSecretValues;
function capitalizeFirstLetter(raw) {
    return raw.charAt(0).toUpperCase() + raw.slice(1);
}
exports.capitalizeFirstLetter = capitalizeFirstLetter;
//# sourceMappingURL=scriptDriver.js.map