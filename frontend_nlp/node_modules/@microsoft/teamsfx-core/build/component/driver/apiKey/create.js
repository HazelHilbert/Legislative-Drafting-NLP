"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
exports.CreateApiKeyDriver = void 0;
const tslib_1 = require("tslib");
const typedi_1 = require("typedi");
const localizeUtils_1 = require("../../../common/localizeUtils");
const addStartAndEndTelemetry_1 = require("../middleware/addStartAndEndTelemetry");
const hooks_1 = require("@feathersjs/hooks");
const constants_1 = require("./utility/constants");
const teamsfx_api_1 = require("@microsoft/teamsfx-api");
const outputEnvironmentVariableUndefinedError_1 = require("../error/outputEnvironmentVariableUndefinedError");
const createApiKeyOutputs_1 = require("./interface/createApiKeyOutputs");
const tools_1 = require("../../../common/tools");
const appStudioClient_1 = require("../teamsApp/clients/appStudioClient");
const ApiSecretRegistration_1 = require("../teamsApp/interfaces/ApiSecretRegistration");
const error_1 = require("../../../error");
const apiKeyNameTooLong_1 = require("./error/apiKeyNameTooLong");
const apiKeyClientSecretInvalid_1 = require("./error/apiKeyClientSecretInvalid");
const apiKeyDomainInvalid_1 = require("./error/apiKeyDomainInvalid");
const questionMW_1 = require("../../middleware/questionMW");
const question_1 = require("../../../question");
const spec_parser_1 = require("../../../common/spec-parser");
const common_1 = require("../../utils/common");
const apiKeyFailedToGetDomain_1 = require("./error/apiKeyFailedToGetDomain");
const actionName = "apiKey/register"; // DO NOT MODIFY the name
const helpLink = "https://aka.ms/teamsfx-actions/apiKey-register";
let CreateApiKeyDriver = class CreateApiKeyDriver {
    constructor() {
        this.description = localizeUtils_1.getLocalizedString("driver.apiKey.description.create");
        this.progressTitle = localizeUtils_1.getLocalizedString("driver.aadApp.apiKey.title.create");
    }
    async execute(args, context, outputEnvVarNames) {
        var _a, _b, _c, _d, _e, _f;
        const summaries = [];
        const outputs = new Map();
        try {
            (_a = context.logProvider) === null || _a === void 0 ? void 0 : _a.info(localizeUtils_1.getLocalizedString(constants_1.logMessageKeys.startExecuteDriver, actionName));
            if (!outputEnvVarNames) {
                throw new outputEnvironmentVariableUndefinedError_1.OutputEnvironmentVariableUndefinedError(actionName);
            }
            const state = this.loadStateFromEnv(outputEnvVarNames);
            const appStudioTokenRes = await context.m365TokenProvider.getAccessToken({
                scopes: tools_1.AppStudioScopes,
            });
            if (appStudioTokenRes.isErr()) {
                throw appStudioTokenRes.error;
            }
            const appStudioToken = appStudioTokenRes.value;
            if (state && state.registrationId) {
                try {
                    await appStudioClient_1.AppStudioClient.getApiKeyRegistrationById(appStudioToken, state.registrationId);
                    (_b = context.logProvider) === null || _b === void 0 ? void 0 : _b.info(localizeUtils_1.getLocalizedString(constants_1.logMessageKeys.skipCreateApiKey, outputEnvVarNames.get(createApiKeyOutputs_1.OutputKeys.registrationId)));
                }
                catch (error) {
                    (_c = context.logProvider) === null || _c === void 0 ? void 0 : _c.warning(localizeUtils_1.getLocalizedString(constants_1.logMessageKeys.apiKeyNotFound, outputEnvVarNames.get(createApiKeyOutputs_1.OutputKeys.registrationId)));
                }
            }
            else {
                const clientSecret = this.loadClientSecret();
                if (clientSecret) {
                    args.clientSecret = clientSecret;
                }
                this.validateArgs(args);
                const domains = await this.getDomain(args, context);
                this.validateDomain(domains);
                const apiKey = await this.mapArgsToApiSecretRegistration(context.m365TokenProvider, args, domains);
                const apiRegistrationRes = await appStudioClient_1.AppStudioClient.createApiKeyRegistration(appStudioToken, apiKey);
                outputs.set(outputEnvVarNames.get(createApiKeyOutputs_1.OutputKeys.registrationId), apiRegistrationRes.id);
                const summary = localizeUtils_1.getLocalizedString(constants_1.logMessageKeys.successCreateApiKey, apiRegistrationRes.id);
                (_d = context.logProvider) === null || _d === void 0 ? void 0 : _d.info(summary);
                summaries.push(summary);
            }
            return {
                result: teamsfx_api_1.ok(outputs),
                summaries: summaries,
            };
        }
        catch (error) {
            if (error instanceof teamsfx_api_1.UserError || error instanceof teamsfx_api_1.SystemError) {
                (_e = context.logProvider) === null || _e === void 0 ? void 0 : _e.error(localizeUtils_1.getLocalizedString(constants_1.logMessageKeys.failedExecuteDriver, actionName, error.displayMessage));
                return {
                    result: teamsfx_api_1.err(error),
                    summaries: summaries,
                };
            }
            const message = JSON.stringify(error);
            (_f = context.logProvider) === null || _f === void 0 ? void 0 : _f.error(localizeUtils_1.getLocalizedString(constants_1.logMessageKeys.failedExecuteDriver, actionName, message));
            return {
                result: teamsfx_api_1.err(new error_1.UnhandledError(error, actionName)),
                summaries: summaries,
            };
        }
    }
    // Needs to validate the parameters outside of the function
    loadStateFromEnv(outputEnvVarNames) {
        const result = {};
        for (const [propertyName, envVarName] of outputEnvVarNames) {
            result[propertyName] = process.env[envVarName];
        }
        return result;
    }
    loadClientSecret() {
        const clientSecret = process.env[question_1.QuestionNames.ApiSpecApiKey];
        return clientSecret;
    }
    // Allowed secrets: secret or secret1, secret2
    // Need to validate secrets outside of the function
    parseSecret(apiKeyClientSecret) {
        const secrets = apiKeyClientSecret.trim().split(",");
        return secrets.map((secret) => secret.trim());
    }
    validateSecret(apiKeySecret) {
        if (typeof apiKeySecret !== "string") {
            return false;
        }
        const regExp = /^(\w){10,128}(,\s*\w{10,128})*/g;
        const regResult = regExp.exec(apiKeySecret);
        if (!regResult) {
            return false;
        }
        const secrets = this.parseSecret(apiKeySecret);
        if (secrets.length > constants_1.maxSecretPerApiKey) {
            return false;
        }
        return true;
    }
    // TODO: need to add logic to read domain from env if need to support non-lifecycle commands
    async getDomain(args, context) {
        const absolutePath = common_1.getAbsolutePath(args.apiSpecPath, context.projectPath);
        const parser = new spec_parser_1.SpecParser(absolutePath, {
            allowAPIKeyAuth: true,
        });
        const operations = await parser.list();
        const domains = operations
            .filter((value) => {
            var _a;
            return ((_a = value.auth) === null || _a === void 0 ? void 0 : _a.name) === args.name;
        })
            .map((value) => {
            return value.server;
        })
            .filter((value, index, self) => {
            return self.indexOf(value) === index;
        });
        return domains;
    }
    validateDomain(domain) {
        if (domain.length > constants_1.maxDomainPerApiKey) {
            throw new apiKeyDomainInvalid_1.ApiKeyDomainInvalidError(actionName);
        }
        if (domain.length === 0) {
            throw new apiKeyFailedToGetDomain_1.ApiKeyFailedToGetDomainError(actionName);
        }
    }
    validateArgs(args) {
        const invalidParameters = [];
        if (typeof args.name !== "string" || !args.name) {
            invalidParameters.push("name");
        }
        if (args.name.length > 128) {
            throw new apiKeyNameTooLong_1.ApiKeyNameTooLongError(actionName);
        }
        if (typeof args.appId !== "string" || !args.appId) {
            invalidParameters.push("appId");
        }
        if (args.clientSecret && !this.validateSecret(args.clientSecret)) {
            throw new apiKeyClientSecretInvalid_1.ApiKeyClientSecretInvalidError(actionName);
        }
        if (typeof args.apiSpecPath !== "string" || !args.apiSpecPath) {
            invalidParameters.push("apiSpecPath");
        }
        if (invalidParameters.length > 0) {
            throw new error_1.InvalidActionInputError(actionName, invalidParameters, helpLink);
        }
    }
    async mapArgsToApiSecretRegistration(tokenProvider, args, domain) {
        const currentUserRes = await tokenProvider.getJsonObject({ scopes: tools_1.GraphScopes });
        if (currentUserRes.isErr()) {
            throw currentUserRes.error;
        }
        const currentUser = currentUserRes.value;
        const userId = currentUser["oid"];
        const secrets = this.parseSecret(args.clientSecret);
        let isPrimary = true;
        const clientSecrets = secrets.map((secret) => {
            const clientSecret = {
                value: secret,
                description: args.name,
                priority: isPrimary ? 0 : 1,
                isValueRedacted: true,
            };
            isPrimary = false;
            return clientSecret;
        });
        const apiKey = {
            description: args.name,
            targetUrlsShouldStartWith: domain,
            applicableToApps: ApiSecretRegistration_1.ApiSecretRegistrationAppType.SpecificApp,
            specificAppId: args.appId,
            targetAudience: ApiSecretRegistration_1.ApiSecretRegistrationTargetAudience.AnyTenant,
            clientSecrets: clientSecrets,
            manageableByUsers: [
                {
                    userId: userId,
                    accessType: ApiSecretRegistration_1.ApiSecretRegistrationUserAccessType.ReadWrite,
                },
            ],
        };
        return apiKey;
    }
};
tslib_1.__decorate([
    hooks_1.hooks([questionMW_1.QuestionMW("apiKey", true), addStartAndEndTelemetry_1.addStartAndEndTelemetry(actionName, actionName)]),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object, Map]),
    tslib_1.__metadata("design:returntype", Promise)
], CreateApiKeyDriver.prototype, "execute", null);
CreateApiKeyDriver = tslib_1.__decorate([
    typedi_1.Service(actionName) // DO NOT MODIFY the service name
], CreateApiKeyDriver);
exports.CreateApiKeyDriver = CreateApiKeyDriver;
//# sourceMappingURL=create.js.map