"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
exports.CreateOrUpdateJsonFileDriver = void 0;
const tslib_1 = require("tslib");
const fs = tslib_1.__importStar(require("fs-extra"));
const typedi_1 = require("typedi");
const lib_1 = require("@feathersjs/hooks/lib");
const teamsfx_api_1 = require("@microsoft/teamsfx-api");
const localizeUtils_1 = require("../../../common/localizeUtils");
const common_1 = require("../../utils/common");
const constants_1 = require("../aad/utility/constants");
const addStartAndEndTelemetry_1 = require("../middleware/addStartAndEndTelemetry");
const common_2 = require("../../../error/common");
const commentJson = tslib_1.__importStar(require("comment-json"));
const actionName = "file/createOrUpdateJsonFile";
const helpLink = "https://aka.ms/teamsfx-actions/file-createOrUpdateJsonFile";
let CreateOrUpdateJsonFileDriver = class CreateOrUpdateJsonFileDriver {
    constructor() {
        this.description = localizeUtils_1.getLocalizedString("driver.file.createOrUpdateJsonFile.description");
        this.progressTitle = localizeUtils_1.getLocalizedString("driver.file.progressBar.appsettings");
    }
    async run(args, context) {
        return common_1.wrapRun(async () => {
            const result = await this.handler(args, context);
            return result.output;
        }, actionName);
    }
    async execute(args, ctx) {
        let summaries = [];
        const outputResult = await common_1.wrapRun(async () => {
            const result = await this.handler(args, ctx);
            summaries = result.summaries;
            return result.output;
        }, actionName);
        return {
            result: outputResult,
            summaries,
        };
    }
    async handler(args, context) {
        var _a, _b, _c, _d;
        try {
            this.validateArgs(args);
            const jsonFilePath = common_1.getAbsolutePath(args.target, context.projectPath);
            if (!(await fs.pathExists(jsonFilePath))) {
                await fs.ensureFile(jsonFilePath);
                await fs.writeFile(jsonFilePath, "{}", "utf-8");
            }
            const jsonContent = commentJson.parse((await fs.readFile(jsonFilePath, "utf-8")).toString());
            this.addOrUpdateJsonContent(jsonContent, (_b = (_a = args.appsettings) !== null && _a !== void 0 ? _a : args.content) !== null && _b !== void 0 ? _b : {});
            await fs.writeFile(jsonFilePath, commentJson.stringify(jsonContent, null, "\t"), "utf-8");
            return {
                output: new Map(),
                summaries: [localizeUtils_1.getLocalizedString("driver.file.createOrUpdateJsonFile.summary", args.target)],
            };
        }
        catch (error) {
            if (error instanceof teamsfx_api_1.UserError || error instanceof teamsfx_api_1.SystemError) {
                (_c = context.logProvider) === null || _c === void 0 ? void 0 : _c.error(localizeUtils_1.getLocalizedString(constants_1.logMessageKeys.failExecuteDriver, actionName, error.displayMessage));
                throw error;
            }
            const message = JSON.stringify(error);
            (_d = context.logProvider) === null || _d === void 0 ? void 0 : _d.error(localizeUtils_1.getLocalizedString(constants_1.logMessageKeys.failExecuteDriver, actionName, message));
            throw new common_2.UnhandledError(error, actionName);
        }
    }
    validateArgs(args) {
        const invalidParameters = [];
        if (args.target === undefined) {
            invalidParameters.push("target");
        }
        else if (args.target !== undefined &&
            (typeof args.target !== "string" || args.target.length === 0)) {
            invalidParameters.push("target");
        }
        if (args.appsettings === undefined && args.content === undefined) {
            invalidParameters.push("content");
        }
        else if (args.appsettings !== undefined && args.content !== undefined) {
            invalidParameters.push("appsettings");
        }
        else if (args.appsettings) {
            if (typeof args.appsettings !== "object") {
                invalidParameters.push("appsettings");
            }
        }
        else if (args.content) {
            if (typeof args.content !== "object") {
                invalidParameters.push("content");
            }
        }
        if (invalidParameters.length > 0) {
            throw new common_2.InvalidActionInputError(actionName, invalidParameters, helpLink);
        }
    }
    addOrUpdateJsonContent(jsonContent, ymlJsonContent) {
        for (const [key, value] of Object.entries(ymlJsonContent)) {
            if (typeof value === "object") {
                if (!jsonContent[key]) {
                    jsonContent[key] = value;
                }
                else {
                    this.addOrUpdateJsonContent(jsonContent[key], value);
                }
            }
            else {
                jsonContent[key] = value;
            }
        }
    }
};
tslib_1.__decorate([
    lib_1.hooks([addStartAndEndTelemetry_1.addStartAndEndTelemetry(actionName, actionName)]),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object]),
    tslib_1.__metadata("design:returntype", Promise)
], CreateOrUpdateJsonFileDriver.prototype, "run", null);
tslib_1.__decorate([
    lib_1.hooks([addStartAndEndTelemetry_1.addStartAndEndTelemetry(actionName, actionName)]),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object]),
    tslib_1.__metadata("design:returntype", Promise)
], CreateOrUpdateJsonFileDriver.prototype, "execute", null);
CreateOrUpdateJsonFileDriver = tslib_1.__decorate([
    typedi_1.Service(actionName) // DO NOT MODIFY the service name
], CreateOrUpdateJsonFileDriver);
exports.CreateOrUpdateJsonFileDriver = CreateOrUpdateJsonFileDriver;
//# sourceMappingURL=createOrUpdateJsonFile.js.map