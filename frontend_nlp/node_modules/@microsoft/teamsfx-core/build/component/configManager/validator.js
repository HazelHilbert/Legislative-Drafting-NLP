"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
exports.Validator = void 0;
const tslib_1 = require("tslib");
const ajv_1 = tslib_1.__importDefault(require("ajv"));
const fs_extra_1 = tslib_1.__importDefault(require("fs-extra"));
const path_1 = tslib_1.__importDefault(require("path"));
const folder_1 = require("../../folder");
const supportedVersions = ["1.0.0", "1.1.0", "v1.2", "v1.3"];
class Validator {
    constructor() {
        this.impl = new Map();
        for (const version of this.supportedVersions()) {
            this.initVersion(version);
        }
    }
    initVersion(version) {
        const ajv = new ajv_1.default({ allowUnionTypes: true });
        ajv.addKeyword("deprecationMessage");
        const schemaPath = path_1.default.join(folder_1.getResourceFolder(), "yaml-schema", version, "yaml.schema.json");
        const schema = fs_extra_1.default.readJSONSync(schemaPath);
        this.impl.set(version, {
            validator: ajv.compile(schema),
        });
    }
    isVersionSupported(version) {
        return this.supportedVersions().includes(version);
    }
    supportedVersions() {
        return supportedVersions;
    }
    latestSupportedVersion() {
        return this.supportedVersions()[this.supportedVersions().length - 1];
    }
    validate(obj, version) {
        const impl = this.impl.get(version !== null && version !== void 0 ? version : this.latestSupportedVersion());
        if (!impl) {
            return false;
        }
        return !!impl.validator(obj);
    }
}
exports.Validator = Validator;
//# sourceMappingURL=validator.js.map