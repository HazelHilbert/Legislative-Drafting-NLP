/**
 * @author Huajie Zhang <huajiezhang@microsoft.com>
 */
import { OptionItem } from "@microsoft/teamsfx-api";
export declare const ComponentNames: {
    TeamsTab: string;
    TeamsBot: string;
    TeamsApi: string;
    AppManifest: string;
    AadApp: string;
    AzureWebApp: string;
    AzureStorage: string;
    BotService: string;
    SPFxTab: string;
    SPFx: string;
    Identity: string;
    APIM: string;
    KeyVault: string;
    AzureSQL: string;
    TabCode: string;
    BotCode: string;
    ApiCode: string;
    Function: string;
    SimpleAuth: string;
    SSO: string;
    ApiConnector: string;
    CICD: string;
};
export declare const AzureResources: string[];
export declare enum Scenarios {
    Tab = "Tab",
    Bot = "Bot",
    Api = "Api"
}
export declare const TelemetryConstants: {
    eventPrefix: string;
    properties: {
        component: string;
        appId: string;
        tenantId: string;
        success: string;
        errorCode: string;
        errorType: string;
        errorMessage: string;
        errorStack: string;
        timeCost: string;
        errorName: string;
        innerError: string;
        errorCat: string;
        errorCat1: string;
        errorCat2: string;
        errorCat3: string;
        errorStage: string;
        errorComponent: string;
        errorMethod: string;
        errorSource: string;
        errorInnerCode: string;
    };
    values: {
        yes: string;
        no: string;
        userError: string;
        systemError: string;
    };
};
export declare const ErrorConstants: {
    unhandledError: string;
    unhandledErrorMessage: string;
};
export declare const AadAppOutputs: {
    applicationIdUris: {
        key: string;
    };
    clientId: {
        key: string;
    };
    clientSecret: {
        key: string;
    };
    objectId: {
        key: string;
    };
    oauth2PermissionScopeId: {
        key: string;
    };
    frontendEndpoint: {
        key: string;
    };
    botId: {
        key: string;
    };
    botEndpoint: {
        key: string;
    };
    domain: {
        key: string;
    };
    endpoint: {
        key: string;
    };
    oauthAuthority: {
        key: string;
    };
    oauthHost: {
        key: string;
    };
    tenantId: {
        key: string;
    };
};
export declare const PathConstants: {
    botWorkingDir: string;
    apiWorkingDir: string;
    tabWorkingDir: string;
    dotnetWorkingDir: string;
    npmPackageFolder: string;
    nodePackageFile: string;
    deploymentInfoFolder: string;
    deploymentInfoFile: string;
    nodeArtifactFolder: string;
    dotnetArtifactFolder: string;
    reactTabIndexPath: string;
    blazorTabIndexPath: string;
};
/**
 * Void is used to construct Result<Void, FxError>.
 * e.g. return ok(Void);
 * It exists because ok(void) does not compile.
 */
export declare const Void: {};
/**
 * The key of global config visible to all resource plugins.
 */
export declare const GLOBAL_CONFIG = "solution";
/**
 * Used to track whether provision succeeded
 * Set to true when provison succeeds, to false when a new resource is added.
 */
export declare const SOLUTION_PROVISION_SUCCEEDED = "provisionSucceeded";
export declare const ARM_TEMPLATE_OUTPUT = "armTemplateOutput";
/**
 * Config key whose value is output of ARM templates deployment.
 */
export declare const TEAMS_FX_RESOURCE_ID_KEY = "teamsFxPluginId";
export declare const DEFAULT_PERMISSION_REQUEST: {
    resource: string;
    delegated: string[];
    application: never[];
}[];
export declare enum PluginNames {
    SQL = "fx-resource-azure-sql",
    MSID = "fx-resource-identity",
    FE = "fx-resource-frontend-hosting",
    SPFX = "fx-resource-spfx",
    BOT = "fx-resource-bot",
    AAD = "fx-resource-aad-app-for-teams",
    FUNC = "fx-resource-function",
    SA = "fx-resource-simple-auth",
    LDEBUG = "fx-resource-local-debug",
    APIM = "fx-resource-apim",
    APPST = "fx-resource-appstudio",
    SOLUTION = "solution"
}
export declare const BuiltInFeaturePluginNames: {
    appStudio: string;
    aad: string;
    bot: string;
    function: string;
    frontend: string;
    spfx: string;
    simpleAuth: string;
    identity: string;
    apim: string;
    keyVault: string;
    sql: string;
};
export declare enum SolutionError {
    MissingPermissionsJson = "MissingPermissionsJson",
    NoAppStudioToken = "NoAppStudioToken",
    NoUserName = "NoUserName",
    SubscriptionNotFound = "SubscriptionNotFound",
    CannotLocalDebugInDifferentTenant = "CannotLocalDebugInDifferentTenant",
    NoSubscriptionSelected = "NoSubscriptionSelected",
    InvalidInput = "InvalidInput",
    FailedToRetrieveUserInfo = "FailedToRetrieveUserInfo",
    CannotFindUserInCurrentTenant = "CannotFindUserInCurrentTenant",
    EmailCannotBeEmptyOrSame = "EmailCannotBeEmptyOrSame",
    TeamsAppTenantIdNotRight = "TeamsAppTenantIdNotRight",
    AddSsoNotSupported = "AddSsoNotSupported",
    SsoEnabled = "SsoEnabled",
    InvalidProjectPath = "InvalidProjectPath",
    FailedToCreateAuthFiles = "FailedToCreateAuthFiles",
    FailedToLoadDotEnvFile = "FailedToLoadDotEnvFile",
    InvalidManifestError = "InvalidManifestError",
    FailedToLoadManifestFile = "FailedToLoadManifestFile"
}
export declare const REMOTE_AAD_ID = "clientId";
export declare const REMOTE_TEAMS_APP_TENANT_ID = "teamsAppTenantId";
export declare const AzureRoleAssignmentsHelpLink = "https://aka.ms/teamsfx-azure-role-assignments-help-link";
export declare const SharePointManageSiteAdminHelpLink = "https://aka.ms/teamsfx-sharepoint-manage-site-admin-help-link";
export declare const ViewAadAppHelpLinkV5 = "https://aka.ms/teamsfx-view-aad-app-v5";
export declare const ViewAadAppHelpLink = "https://aka.ms/teamsfx-view-aad-app";
export declare enum SolutionTelemetryEvent {
    ArmDeploymentStart = "deploy-armtemplate-start",
    ArmDeployment = "deploy-armtemplate",
    AddSsoStart = "add-sso-start",
    AddSso = "add-sso"
}
export declare enum SolutionTelemetryProperty {
    Component = "component",
    Success = "success",
    CollaboratorCount = "collaborator-count",
    AadOwnerCount = "aad-owner-count",
    AadPermission = "aad-permission",
    ArmDeploymentError = "arm-deployment-error",
    TeamsAppPermission = "teams-app-permission",
    Env = "env",
    SubscriptionId = "subscription-id",
    M365TenantId = "m365-tenant-id",
    PreviousM365TenantId = "previous-m365-tenant-id",
    ConfirmRes = "confirm-res"
}
export declare enum SolutionTelemetrySuccess {
    Yes = "yes",
    No = "no"
}
export declare const SolutionTelemetryComponentName = "solution";
export declare const SolutionSource = "Solution";
export declare const CoordinatorSource = "coordinator";
export declare enum Language {
    JavaScript = "javascript",
    TypeScript = "typescript",
    CSharp = "csharp"
}
export declare class AddSsoParameters {
    static readonly filePath: string;
    static readonly Bot = "bot";
    static readonly Tab = "tab";
    static readonly V3 = "V3";
    static readonly V3AuthFolder = "TeamsFx-Auth";
    static readonly Readme = "README.md";
    static readonly ReadmeCSharp = "README.txt";
    static readonly LearnMore: () => string;
    static readonly LearnMoreUrl = "https://aka.ms/teamsfx-add-sso-readme";
    static readonly AddSso = "addSso";
    static readonly AppSettings = "appsettings.json";
    static readonly AppSettingsDev = "appsettings.Development.json";
    static readonly AppSettingsToAdd: {
        Authentication: {
            ClientId: string;
            ClientSecret: string;
            OAuthAuthority: string;
        };
    };
    static readonly AppSettingsToAddForBot: {
        Authentication: {
            ClientId: string;
            ClientSecret: string;
            OAuthAuthority: string;
            ApplicationIdUri: string;
            Bot: {
                InitiateLoginEndpoint: string;
            };
        };
    };
}
export declare enum AzureSolutionQuestionNames {
    Capabilities = "capabilities",
    TabScopes = "tab-scopes",
    HostType = "host-type",
    AzureResources = "azure-resources",
    PluginSelectionDeploy = "deploy-plugin",
    AddResources = "add-azure-resources",
    AppName = "app-name",
    AskSub = "subscription",
    ProgrammingLanguage = "programming-language",
    Solution = "solution",
    Scenarios = "scenarios",
    Features = "features"
}
export declare enum SPFxQuestionNames {
    SPFxFolder = "spfx-folder",
    WebPartName = "spfx-webpart-name",
    ManifestPath = "manifest-path",
    LocalManifestPath = "local-manifest-path"
}
export declare const SingleSignOnOptionItem: OptionItem;
export declare enum BotScenario {
    NotificationBot = "notificationBot",
    CommandAndResponseBot = "commandAndResponseBot",
    WorkflowBot = "workflowBot"
}
export declare const BotNotificationTriggers: {
    readonly Timer: "timer";
    readonly Http: "http";
};
export declare type BotNotificationTrigger = typeof BotNotificationTriggers[keyof typeof BotNotificationTriggers];
export declare const AadConstants: {
    DefaultTemplateFileName: string;
};
export declare const validateSchemaOption: OptionItem;
export declare const validateAppPackageOption: OptionItem;
//# sourceMappingURL=constants.d.ts.map