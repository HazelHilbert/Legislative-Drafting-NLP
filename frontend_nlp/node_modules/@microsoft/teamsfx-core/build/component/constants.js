"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.validateAppPackageOption = exports.validateSchemaOption = exports.AadConstants = exports.BotNotificationTriggers = exports.BotScenario = exports.SingleSignOnOptionItem = exports.SPFxQuestionNames = exports.AzureSolutionQuestionNames = exports.AddSsoParameters = exports.Language = exports.CoordinatorSource = exports.SolutionSource = exports.SolutionTelemetryComponentName = exports.SolutionTelemetrySuccess = exports.SolutionTelemetryProperty = exports.SolutionTelemetryEvent = exports.ViewAadAppHelpLink = exports.ViewAadAppHelpLinkV5 = exports.SharePointManageSiteAdminHelpLink = exports.AzureRoleAssignmentsHelpLink = exports.REMOTE_TEAMS_APP_TENANT_ID = exports.REMOTE_AAD_ID = exports.SolutionError = exports.BuiltInFeaturePluginNames = exports.PluginNames = exports.DEFAULT_PERMISSION_REQUEST = exports.TEAMS_FX_RESOURCE_ID_KEY = exports.ARM_TEMPLATE_OUTPUT = exports.SOLUTION_PROVISION_SUCCEEDED = exports.GLOBAL_CONFIG = exports.Void = exports.PathConstants = exports.AadAppOutputs = exports.ErrorConstants = exports.TelemetryConstants = exports.Scenarios = exports.AzureResources = exports.ComponentNames = void 0;
const tslib_1 = require("tslib");
const path_1 = tslib_1.__importDefault(require("path"));
const localizeUtils_1 = require("../common/localizeUtils");
exports.ComponentNames = {
    TeamsTab: "teams-tab",
    TeamsBot: "teams-bot",
    TeamsApi: "teams-api",
    AppManifest: "app-manifest",
    AadApp: "aad-app",
    AzureWebApp: "azure-web-app",
    AzureStorage: "azure-storage",
    BotService: "bot-service",
    SPFxTab: "spfx-tab",
    SPFx: "spfx",
    Identity: "identity",
    APIM: "apim",
    KeyVault: "key-vault",
    AzureSQL: "azure-sql",
    TabCode: "tab-code",
    BotCode: "bot-code",
    ApiCode: "api-code",
    Function: "azure-function",
    SimpleAuth: "simple-auth",
    SSO: "sso",
    ApiConnector: "api-connector",
    CICD: "cicd",
};
exports.AzureResources = [
    exports.ComponentNames.APIM,
    exports.ComponentNames.AzureWebApp,
    exports.ComponentNames.Function,
    exports.ComponentNames.Identity,
    exports.ComponentNames.KeyVault,
    exports.ComponentNames.AzureSQL,
    exports.ComponentNames.AzureStorage,
];
var Scenarios;
(function (Scenarios) {
    Scenarios["Tab"] = "Tab";
    Scenarios["Bot"] = "Bot";
    Scenarios["Api"] = "Api";
})(Scenarios = exports.Scenarios || (exports.Scenarios = {}));
exports.TelemetryConstants = {
    eventPrefix: "-start",
    properties: {
        component: "component",
        appId: "appid",
        tenantId: "tenant-id",
        success: "success",
        errorCode: "error-code",
        errorType: "error-type",
        errorMessage: "error-message",
        errorStack: "error-stack",
        timeCost: "time-cost",
        errorName: "error-name",
        innerError: "inner-error",
        errorCat: "error-cat",
        errorCat1: "error-cat1",
        errorCat2: "error-cat2",
        errorCat3: "error-cat3",
        errorStage: "error-stage",
        errorComponent: "error-component",
        errorMethod: "error-method",
        errorSource: "error-source",
        errorInnerCode: "error-inner-code", // need classify
    },
    values: {
        yes: "yes",
        no: "no",
        userError: "user",
        systemError: "system",
    },
};
exports.ErrorConstants = {
    unhandledError: "UnhandledError",
    unhandledErrorMessage: "Unhandled Error",
};
exports.AadAppOutputs = {
    applicationIdUris: {
        key: "applicationIdUris",
    },
    clientId: {
        key: "clientId",
    },
    clientSecret: {
        key: "clientSecret",
    },
    objectId: {
        key: "objectId",
    },
    oauth2PermissionScopeId: {
        key: "oauth2PermissionScopeId",
    },
    frontendEndpoint: {
        key: "frontendEndpoint",
    },
    botId: {
        key: "botId",
    },
    botEndpoint: {
        key: "botEndpoint",
    },
    domain: {
        key: "domain",
    },
    endpoint: {
        key: "endpoint",
    },
    oauthAuthority: {
        key: "oauthAuthority",
    },
    oauthHost: {
        key: "oauthHost",
    },
    tenantId: {
        key: "tenantId",
    },
};
exports.PathConstants = {
    botWorkingDir: "bot",
    apiWorkingDir: "api",
    tabWorkingDir: "tabs",
    dotnetWorkingDir: ".",
    npmPackageFolder: "node_modules",
    nodePackageFile: "package.json",
    deploymentInfoFolder: ".deployment",
    deploymentInfoFile: "deployment.json",
    nodeArtifactFolder: "build",
    dotnetArtifactFolder: "publish",
    reactTabIndexPath: "/index.html#",
    blazorTabIndexPath: "/",
};
/**
 * Void is used to construct Result<Void, FxError>.
 * e.g. return ok(Void);
 * It exists because ok(void) does not compile.
 */
exports.Void = {};
/**
 * The key of global config visible to all resource plugins.
 */
exports.GLOBAL_CONFIG = "solution";
// export const SELECTED_PLUGINS = "selectedPlugins";
/**
 * Used to track whether provision succeeded
 * Set to true when provison succeeds, to false when a new resource is added.
 */
exports.SOLUTION_PROVISION_SUCCEEDED = "provisionSucceeded";
exports.ARM_TEMPLATE_OUTPUT = "armTemplateOutput";
/**
 * Config key whose value is output of ARM templates deployment.
 */
exports.TEAMS_FX_RESOURCE_ID_KEY = "teamsFxPluginId";
exports.DEFAULT_PERMISSION_REQUEST = [
    {
        resource: "Microsoft Graph",
        delegated: ["User.Read"],
        application: [],
    },
];
var PluginNames;
(function (PluginNames) {
    PluginNames["SQL"] = "fx-resource-azure-sql";
    PluginNames["MSID"] = "fx-resource-identity";
    PluginNames["FE"] = "fx-resource-frontend-hosting";
    PluginNames["SPFX"] = "fx-resource-spfx";
    PluginNames["BOT"] = "fx-resource-bot";
    PluginNames["AAD"] = "fx-resource-aad-app-for-teams";
    PluginNames["FUNC"] = "fx-resource-function";
    PluginNames["SA"] = "fx-resource-simple-auth";
    PluginNames["LDEBUG"] = "fx-resource-local-debug";
    PluginNames["APIM"] = "fx-resource-apim";
    PluginNames["APPST"] = "fx-resource-appstudio";
    PluginNames["SOLUTION"] = "solution";
})(PluginNames = exports.PluginNames || (exports.PluginNames = {}));
exports.BuiltInFeaturePluginNames = {
    appStudio: "fx-resource-appstudio",
    aad: "fx-resource-aad-app-for-teams",
    bot: "fx-resource-bot",
    function: "fx-resource-function",
    frontend: "fx-resource-frontend-hosting",
    spfx: "fx-resource-spfx",
    simpleAuth: "fx-resource-simple-auth",
    identity: "fx-resource-identity",
    apim: "fx-resource-apim",
    keyVault: "fx-resource-key-vault",
    sql: "fx-resource-azure-sql",
};
var SolutionError;
(function (SolutionError) {
    SolutionError["MissingPermissionsJson"] = "MissingPermissionsJson";
    SolutionError["NoAppStudioToken"] = "NoAppStudioToken";
    SolutionError["NoUserName"] = "NoUserName";
    SolutionError["SubscriptionNotFound"] = "SubscriptionNotFound";
    SolutionError["CannotLocalDebugInDifferentTenant"] = "CannotLocalDebugInDifferentTenant";
    SolutionError["NoSubscriptionSelected"] = "NoSubscriptionSelected";
    SolutionError["InvalidInput"] = "InvalidInput";
    SolutionError["FailedToRetrieveUserInfo"] = "FailedToRetrieveUserInfo";
    SolutionError["CannotFindUserInCurrentTenant"] = "CannotFindUserInCurrentTenant";
    SolutionError["EmailCannotBeEmptyOrSame"] = "EmailCannotBeEmptyOrSame";
    SolutionError["TeamsAppTenantIdNotRight"] = "TeamsAppTenantIdNotRight";
    SolutionError["AddSsoNotSupported"] = "AddSsoNotSupported";
    SolutionError["SsoEnabled"] = "SsoEnabled";
    SolutionError["InvalidProjectPath"] = "InvalidProjectPath";
    SolutionError["FailedToCreateAuthFiles"] = "FailedToCreateAuthFiles";
    SolutionError["FailedToLoadDotEnvFile"] = "FailedToLoadDotEnvFile";
    SolutionError["InvalidManifestError"] = "InvalidManifestError";
    SolutionError["FailedToLoadManifestFile"] = "FailedToLoadManifestFile";
})(SolutionError = exports.SolutionError || (exports.SolutionError = {}));
exports.REMOTE_AAD_ID = "clientId";
exports.REMOTE_TEAMS_APP_TENANT_ID = "teamsAppTenantId";
exports.AzureRoleAssignmentsHelpLink = "https://aka.ms/teamsfx-azure-role-assignments-help-link";
exports.SharePointManageSiteAdminHelpLink = "https://aka.ms/teamsfx-sharepoint-manage-site-admin-help-link";
exports.ViewAadAppHelpLinkV5 = "https://aka.ms/teamsfx-view-aad-app-v5";
exports.ViewAadAppHelpLink = "https://aka.ms/teamsfx-view-aad-app";
// This is the max length specified in
// https://developer.microsoft.com/en-us/json-schemas/teams/v1.7/MicrosoftTeams.schema.json
var SolutionTelemetryEvent;
(function (SolutionTelemetryEvent) {
    SolutionTelemetryEvent["ArmDeploymentStart"] = "deploy-armtemplate-start";
    SolutionTelemetryEvent["ArmDeployment"] = "deploy-armtemplate";
    SolutionTelemetryEvent["AddSsoStart"] = "add-sso-start";
    SolutionTelemetryEvent["AddSso"] = "add-sso";
})(SolutionTelemetryEvent = exports.SolutionTelemetryEvent || (exports.SolutionTelemetryEvent = {}));
var SolutionTelemetryProperty;
(function (SolutionTelemetryProperty) {
    SolutionTelemetryProperty["Component"] = "component";
    SolutionTelemetryProperty["Success"] = "success";
    SolutionTelemetryProperty["CollaboratorCount"] = "collaborator-count";
    SolutionTelemetryProperty["AadOwnerCount"] = "aad-owner-count";
    SolutionTelemetryProperty["AadPermission"] = "aad-permission";
    SolutionTelemetryProperty["ArmDeploymentError"] = "arm-deployment-error";
    SolutionTelemetryProperty["TeamsAppPermission"] = "teams-app-permission";
    SolutionTelemetryProperty["Env"] = "env";
    SolutionTelemetryProperty["SubscriptionId"] = "subscription-id";
    SolutionTelemetryProperty["M365TenantId"] = "m365-tenant-id";
    SolutionTelemetryProperty["PreviousM365TenantId"] = "previous-m365-tenant-id";
    SolutionTelemetryProperty["ConfirmRes"] = "confirm-res";
})(SolutionTelemetryProperty = exports.SolutionTelemetryProperty || (exports.SolutionTelemetryProperty = {}));
var SolutionTelemetrySuccess;
(function (SolutionTelemetrySuccess) {
    SolutionTelemetrySuccess["Yes"] = "yes";
    SolutionTelemetrySuccess["No"] = "no";
})(SolutionTelemetrySuccess = exports.SolutionTelemetrySuccess || (exports.SolutionTelemetrySuccess = {}));
exports.SolutionTelemetryComponentName = "solution";
exports.SolutionSource = "Solution";
exports.CoordinatorSource = "coordinator";
var Language;
(function (Language) {
    Language["JavaScript"] = "javascript";
    Language["TypeScript"] = "typescript";
    Language["CSharp"] = "csharp";
})(Language = exports.Language || (exports.Language = {}));
class AddSsoParameters {
}
exports.AddSsoParameters = AddSsoParameters;
AddSsoParameters.filePath = path_1.default.join("plugins", "resource", "aad", "auth");
AddSsoParameters.Bot = "bot";
AddSsoParameters.Tab = "tab";
AddSsoParameters.V3 = "V3";
AddSsoParameters.V3AuthFolder = "TeamsFx-Auth";
AddSsoParameters.Readme = "README.md";
AddSsoParameters.ReadmeCSharp = "README.txt";
AddSsoParameters.LearnMore = () => localizeUtils_1.getLocalizedString("core.provision.learnMore");
AddSsoParameters.LearnMoreUrl = "https://aka.ms/teamsfx-add-sso-readme";
AddSsoParameters.AddSso = "addSso";
AddSsoParameters.AppSettings = "appsettings.json";
AddSsoParameters.AppSettingsDev = "appsettings.Development.json";
AddSsoParameters.AppSettingsToAdd = {
    Authentication: {
        ClientId: "$clientId$",
        ClientSecret: "$client-secret$",
        OAuthAuthority: "$oauthAuthority$",
    },
};
AddSsoParameters.AppSettingsToAddForBot = {
    Authentication: {
        ClientId: "$clientId$",
        ClientSecret: "$client-secret$",
        OAuthAuthority: "$oauthAuthority$",
        ApplicationIdUri: "$applicationIdUri$",
        Bot: {
            InitiateLoginEndpoint: "$initiateLoginEndpoint$",
        },
    },
};
var AzureSolutionQuestionNames;
(function (AzureSolutionQuestionNames) {
    AzureSolutionQuestionNames["Capabilities"] = "capabilities";
    AzureSolutionQuestionNames["TabScopes"] = "tab-scopes";
    AzureSolutionQuestionNames["HostType"] = "host-type";
    AzureSolutionQuestionNames["AzureResources"] = "azure-resources";
    AzureSolutionQuestionNames["PluginSelectionDeploy"] = "deploy-plugin";
    AzureSolutionQuestionNames["AddResources"] = "add-azure-resources";
    AzureSolutionQuestionNames["AppName"] = "app-name";
    AzureSolutionQuestionNames["AskSub"] = "subscription";
    AzureSolutionQuestionNames["ProgrammingLanguage"] = "programming-language";
    AzureSolutionQuestionNames["Solution"] = "solution";
    AzureSolutionQuestionNames["Scenarios"] = "scenarios";
    AzureSolutionQuestionNames["Features"] = "features";
})(AzureSolutionQuestionNames = exports.AzureSolutionQuestionNames || (exports.AzureSolutionQuestionNames = {}));
var SPFxQuestionNames;
(function (SPFxQuestionNames) {
    SPFxQuestionNames["SPFxFolder"] = "spfx-folder";
    SPFxQuestionNames["WebPartName"] = "spfx-webpart-name";
    SPFxQuestionNames["ManifestPath"] = "manifest-path";
    SPFxQuestionNames["LocalManifestPath"] = "local-manifest-path";
})(SPFxQuestionNames = exports.SPFxQuestionNames || (exports.SPFxQuestionNames = {}));
exports.SingleSignOnOptionItem = {
    id: "sso",
    label: `$(unlock) ${localizeUtils_1.getLocalizedString("core.SingleSignOnOption.label")}`,
    detail: localizeUtils_1.getLocalizedString("core.SingleSignOnOption.detail"),
    groupName: localizeUtils_1.getLocalizedString("core.options.separator.additional"),
    data: "https://aka.ms/teamsfx-add-sso",
    buttons: [
        {
            iconPath: "tasklist",
            tooltip: localizeUtils_1.getLocalizedString("core.option.tutorial"),
            command: "fx-extension.openTutorial",
        },
    ],
};
var BotScenario;
(function (BotScenario) {
    BotScenario["NotificationBot"] = "notificationBot";
    BotScenario["CommandAndResponseBot"] = "commandAndResponseBot";
    BotScenario["WorkflowBot"] = "workflowBot";
})(BotScenario = exports.BotScenario || (exports.BotScenario = {}));
exports.BotNotificationTriggers = {
    Timer: "timer",
    Http: "http",
};
exports.AadConstants = {
    DefaultTemplateFileName: "aad.manifest.json",
};
exports.validateSchemaOption = {
    id: "validateAgainstSchema",
    label: localizeUtils_1.getLocalizedString("core.selectValidateMethodQuestion.validate.schemaOption"),
    description: localizeUtils_1.getLocalizedString("core.selectValidateMethodQuestion.validate.schemaOptionDescription"),
};
exports.validateAppPackageOption = {
    id: "validateAgainstPackage",
    label: localizeUtils_1.getLocalizedString("core.selectValidateMethodQuestion.validate.appPackageOption"),
    description: localizeUtils_1.getLocalizedString("core.selectValidateMethodQuestion.validate.appPackageOptionDescription"),
};
//# sourceMappingURL=constants.js.map