"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
exports.CheckThrowSomethingMissing = exports.BotFrameworkConflictResultError = exports.BotFrameworkForbiddenResultError = exports.BotFrameworkNotAllowedToAcquireTokenError = exports.BotRegistrationNotFoundError = exports.ConfigUpdatingError = exports.ProvisionError = void 0;
/**
 * @author Qianhao Dong <qidon@microsoft.com>
 */
const constants_1 = require("./constants");
const messages_1 = require("./messages");
const localizeUtils_1 = require("../../../common/localizeUtils");
const ErrorType = {
    USER: "User",
    SYSTEM: "System",
};
class PluginError extends Error {
    constructor(type, name, details, suggestions, innerError, helpLink) {
        super(details[0]);
        this.name = name;
        this.details = details;
        this.suggestions = suggestions;
        this.errorType = type;
        this.innerError = innerError;
        this.helpLink = helpLink;
        Object.setPrototypeOf(this, PluginError.prototype);
    }
    genMessage() {
        let msg = `${this.details[0]} `;
        if (this.suggestions.length > 0) {
            msg += localizeUtils_1.getDefaultString("plugins.bot.ErrorSuggestions", this.suggestions.join(" "));
        }
        return msg;
    }
    genDisplayMessage() {
        let msg = `${this.details[1]} `;
        if (this.suggestions.length > 0) {
            msg += localizeUtils_1.getLocalizedString("plugins.bot.ErrorSuggestions", this.suggestions.join(" "));
        }
        return msg;
    }
}
class ProvisionError extends PluginError {
    constructor(resource, innerError) {
        super(ErrorType.USER, constants_1.ErrorNames.PROVISION_ERROR, messages_1.Messages.FailToProvisionSomeResource(resource), [messages_1.Messages.CheckOutputLogAndTryToFix, messages_1.Messages.RetryTheCurrentStep], innerError);
    }
}
exports.ProvisionError = ProvisionError;
class ConfigUpdatingError extends PluginError {
    constructor(configName, innerError) {
        super(ErrorType.USER, constants_1.ErrorNames.CONFIG_UPDATING_ERROR, messages_1.Messages.FailToUpdateConfigs(configName), [messages_1.Messages.CheckOutputLogAndTryToFix, messages_1.Messages.RetryTheCurrentStep], innerError);
    }
}
exports.ConfigUpdatingError = ConfigUpdatingError;
class BotRegistrationNotFoundError extends PluginError {
    constructor(botId, innerError) {
        super(ErrorType.USER, constants_1.ErrorNames.BOT_REGISTRATION_NOTFOUND_ERROR, messages_1.Messages.BotRegistrationNotFoundWith(botId), [messages_1.Messages.CheckOutputLogAndTryToFix], innerError);
    }
}
exports.BotRegistrationNotFoundError = BotRegistrationNotFoundError;
class BotFrameworkNotAllowedToAcquireTokenError extends PluginError {
    constructor() {
        super(ErrorType.USER, constants_1.ErrorNames.ACQUIRE_BOT_FRAMEWORK_TOKEN_ERROR, messages_1.Messages.NotAllowedToAcquireBotFrameworkToken(), [messages_1.Messages.CheckOutputLogAndTryToFix]);
    }
}
exports.BotFrameworkNotAllowedToAcquireTokenError = BotFrameworkNotAllowedToAcquireTokenError;
class BotFrameworkForbiddenResultError extends PluginError {
    constructor() {
        super(ErrorType.USER, constants_1.ErrorNames.FORBIDDEN_RESULT_BOT_FRAMEWORK_ERROR, messages_1.Messages.BotProvisionReturnsForbiddenResult(), [messages_1.Messages.CheckOutputLogAndTryToFix, messages_1.Messages.RetryTheCurrentStep]);
    }
}
exports.BotFrameworkForbiddenResultError = BotFrameworkForbiddenResultError;
class BotFrameworkConflictResultError extends PluginError {
    constructor() {
        super(ErrorType.USER, constants_1.ErrorNames.CONFLICT_RESULT_BOT_FRAMEWORK_ERROR, messages_1.Messages.BotProvisionReturnsConflictResult(), [messages_1.Messages.CheckOutputLogAndTryToFix, messages_1.Messages.RetryTheCurrentStep]);
    }
}
exports.BotFrameworkConflictResultError = BotFrameworkConflictResultError;
class PreconditionError extends PluginError {
    constructor(name) {
        super(ErrorType.USER, constants_1.ErrorNames.PRECONDITION_ERROR, messages_1.Messages.SomethingIsMissing(name), [
            messages_1.Messages.RetryTheCurrentStep,
        ]);
    }
}
function CheckThrowSomethingMissing(name, value) {
    if (!value) {
        throw new PreconditionError(name);
    }
    return value;
}
exports.CheckThrowSomethingMissing = CheckThrowSomethingMissing;
//# sourceMappingURL=errors.js.map