declare const ErrorType: {
    readonly USER: "User";
    readonly SYSTEM: "System";
};
declare type ErrorType = typeof ErrorType[keyof typeof ErrorType];
declare type InnerError = HttpError | Error | ErrorWithMessage | ErrorWithCode | unknown;
declare type HttpError = {
    response: {
        status?: number;
        data?: {
            errorMessage?: string;
            error?: {
                code?: string;
                message?: string;
            };
            errors?: any;
        };
    };
};
declare type ErrorWithMessage = {
    message: string;
};
declare type ErrorWithCode = {
    code: string;
};
declare class PluginError extends Error {
    name: string;
    details: [string, string];
    suggestions: string[];
    errorType: ErrorType;
    innerError?: InnerError;
    helpLink?: string;
    constructor(type: ErrorType, name: string, details: [string, string], suggestions: string[], innerError?: InnerError, helpLink?: string);
    genMessage(): string;
    genDisplayMessage(): string;
}
export declare class ProvisionError extends PluginError {
    constructor(resource: string, innerError?: InnerError);
}
export declare class ConfigUpdatingError extends PluginError {
    constructor(configName: string, innerError?: InnerError);
}
export declare class BotRegistrationNotFoundError extends PluginError {
    constructor(botId: string, innerError?: InnerError);
}
export declare class BotFrameworkNotAllowedToAcquireTokenError extends PluginError {
    constructor();
}
export declare class BotFrameworkForbiddenResultError extends PluginError {
    constructor();
}
export declare class BotFrameworkConflictResultError extends PluginError {
    constructor();
}
export declare function CheckThrowSomethingMissing<T>(name: string, value: T | undefined): T;
export {};
//# sourceMappingURL=errors.d.ts.map