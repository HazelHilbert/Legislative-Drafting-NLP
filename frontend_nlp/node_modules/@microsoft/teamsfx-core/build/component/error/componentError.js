"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
exports.PrerequisiteError = exports.ExternalApiCallError = exports.BaseComponentInnerError = void 0;
const teamsfx_api_1 = require("@microsoft/teamsfx-api");
const localizeUtils_1 = require("../../common/localizeUtils");
const deployConstant_1 = require("../constant/deployConstant");
const commonConstant_1 = require("../constant/commonConstant");
const lodash_1 = require("lodash");
/**
 * component error
 * store more information in FxError's innerError property for telemetry, logging and debugging
 *
 * @property name name of error, for classification
 * @property message always save error message in english
 * @property errorType which type of error will throw to fx-core
 * @property displayMessage the message show to user, always save as localized message
 * @property helpLink link to help page, mostly no use
 * @property detail detail error message, http response, console output, etc..
 */
class BaseComponentInnerError extends Error {
    constructor(source, errorType, name, messageKey, messageParams, suggestionKey, detail, helpLink, innerError) {
        super(messageKey
            ? messageParams
                ? localizeUtils_1.getDefaultString(messageKey, ...messageParams)
                : localizeUtils_1.getDefaultString(messageKey)
            : "");
        this.source = source;
        this.errorType = errorType;
        this.name = name;
        this.helpLink = helpLink;
        this.suggestionKey = suggestionKey;
        this.displayMessage = messageKey
            ? messageParams
                ? localizeUtils_1.getLocalizedString(messageKey, ...messageParams)
                : localizeUtils_1.getLocalizedString(messageKey)
            : "";
        this.detail = detail;
        this.innerError = innerError;
    }
    toFxError() {
        var _a, _b;
        if (this.errorType === "UserError") {
            return new teamsfx_api_1.UserError({
                source: lodash_1.camelCase(this.source),
                // if innerError is set, send innerError to telemetry
                error: (_a = this.innerError) !== null && _a !== void 0 ? _a : this,
                helpLink: this.helpLink,
                name: this.name,
                message: this.message,
                displayMessage: this.toDisplayMessage(),
            });
        }
        else {
            return new teamsfx_api_1.SystemError({
                source: lodash_1.camelCase(this.source),
                name: this.name,
                message: this.message,
                // if innerError is set, send innerError to telemetry
                error: (_b = this.innerError) !== null && _b !== void 0 ? _b : this,
                helpLink: this.helpLink,
                displayMessage: this.toDisplayMessage(),
            });
        }
    }
    /**
     * The suggestion message will be localized and add 'Suggestions:' by default
     * the final method will be like:
     *    'Error message. Suggestions: suggestion message'
     * can be overwritten by subclasses
     * @protected
     */
    toDisplayMessage() {
        var _a;
        const suggestion = (_a = this.suggestionKey) === null || _a === void 0 ? void 0 : _a.map((key) => localizeUtils_1.getLocalizedString(key)).join(" ");
        return this.displayMessage
            ? suggestion
                ? this.displayMessage + localizeUtils_1.getLocalizedString("plugins.bot.ErrorSuggestions", suggestion)
                : this.displayMessage
            : this.message;
    }
    static unknownError(source, error) {
        return new BaseComponentInnerError(source, "SystemError", 
        // use inner error name instead of "UnhandledError"
        error instanceof Error ? error.name : "UnhandledError", "error.common.UnhandledError", [source, JSON.stringify(error, Object.getOwnPropertyNames(error))], undefined, undefined, undefined, error instanceof Error ? error : undefined);
    }
}
exports.BaseComponentInnerError = BaseComponentInnerError;
/**
 * component call external api error
 */
class ExternalApiCallError extends BaseComponentInnerError {
    constructor(source, name, message, statusCode, messageParams, suggestionKey, detail, helpLink) {
        super(source, "UserError", name, message, messageParams, suggestionKey, detail, helpLink);
        this.statusCode = statusCode;
    }
    static getAzureCredentialError(source, error) {
        error = error !== null && error !== void 0 ? error : "";
        return new ExternalApiCallError(source, "GetAzureCredentialError", "plugins.bot.FailRetrieveAzureCredentials", -1, undefined, undefined, typeof error === "string" ? error : JSON.stringify(error));
    }
    static getAzureCredentialRemoteError(source, error) {
        return new ExternalApiCallError(source, "GetAzureCredentialRemoteError", "driver.common.FailRetrieveAzureCredentialsRemoteError", commonConstant_1.HttpStatusCode.INTERNAL_SERVER_ERROR, undefined, ["driver.common.suggestion.retryLater"], typeof error === "string" ? error : JSON.stringify(error));
    }
    static getSasTokenError(source, detail) {
        return new ExternalApiCallError(source, "AzureStorageSASToeknEmpty", "error.frontend.GetContainerError", -1, [deployConstant_1.DeployConstant.AZURE_STORAGE_CONTAINER_NAME], [
            "plugins.frontend.checkSystemTimeTip",
            // eslint-disable-next-line no-secrets/no-secrets
            "plugins.frontend.checkStoragePermissionsTip",
            "plugins.frontend.checkNetworkTip",
        ], detail);
    }
    static getSasTokenRemoteError(source, detail) {
        return new ExternalApiCallError(source, "AzureStorageSASToeknEmpty", "driver.common.GetContainerRemoteError", commonConstant_1.HttpStatusCode.INTERNAL_SERVER_ERROR, [deployConstant_1.DeployConstant.AZURE_STORAGE_CONTAINER_NAME], [
            "driver.common.suggestion.retryLater",
            "plugins.frontend.checkSystemTimeTip",
            // eslint-disable-next-line no-secrets/no-secrets
            "plugins.frontend.checkStoragePermissionsTip",
            "plugins.frontend.checkNetworkTip",
        ], detail);
    }
}
exports.ExternalApiCallError = ExternalApiCallError;
/**
 * parameter in environmental error or user input error
 */
class PrerequisiteError extends BaseComponentInnerError {
    constructor(source, name, messageKey, messageParams, suggestionKey, helpLink) {
        super(source, "UserError", name, messageKey, messageParams, suggestionKey, undefined, helpLink);
    }
    static somethingIllegal(source, name, messageKey, messageParams, helpLink) {
        return new PrerequisiteError(source, "Illegal" + PrerequisiteError.toCamel(name), messageKey, messageParams, undefined, helpLink);
    }
    static somethingMissing(source, name, helpLink) {
        return new PrerequisiteError(source, PrerequisiteError.toCamel(name) + "IsMissing", "plugins.bot.SomethingIsMissing", [name], undefined, helpLink);
    }
    static folderNotExists(source, name, helpLink) {
        return new PrerequisiteError(source, "FolderNotExists", "error.common.FileNotFoundError", [name], undefined, helpLink);
    }
    static toCamel(name) {
        return name.charAt(0).toUpperCase() + name.slice(1);
    }
}
exports.PrerequisiteError = PrerequisiteError;
//# sourceMappingURL=componentError.js.map