import { FxError, LogProvider, Result } from "@microsoft/teamsfx-api";
import { ExecutionResult } from "../driver/interface/stepDriver";
/**
 * check parameter, throw error if value is null or undefined
 * @param name parameter name
 * @param value parameter value
 */
export declare function checkMissingArgs<T>(name: string, value: T | null | undefined): T;
export declare function asOptional<T>(as: (s: unknown, key: string, helpLink?: string) => T): (s: unknown, key: string, helpLink?: string | undefined) => T | undefined;
export declare function asBoolean(s: unknown, key: string, helpLink?: string): boolean;
export declare function asString(s: unknown, key: string, helpLink?: string): string;
declare type KeyValidators<T> = {
    [P in keyof T]-?: (s: unknown, key: string, helpLink?: string) => T[P];
};
export declare function asFactory<T>(keyValidators: KeyValidators<T>): (data: unknown, helpLink?: string | undefined) => T;
export declare function wrapRun(exec: () => Promise<Map<string, string>>, errorSource: string, errorHandler?: () => Promise<void>, logProvider?: LogProvider): Promise<Result<Map<string, string>, FxError>>;
export declare function wrapSummary(exec: () => Promise<Result<Map<string, string>, FxError>>, summary: string[]): Promise<ExecutionResult>;
export declare function expandEnvironmentVariable(content: string): string;
/**
 * Expand environment variables in content. The format of referencing environment variable is: ${{ENV_NAME}}
 * @return An array of environment variables
 */
export declare function getEnvironmentVariables(content: string): string[];
export declare function getAbsolutePath(relativeOrAbsolutePath: string, projectPath: string): string;
export {};
//# sourceMappingURL=common.d.ts.map