"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
exports.pathUtils = void 0;
const tslib_1 = require("tslib");
const teamsfx_api_1 = require("@microsoft/teamsfx-api");
const fs_extra_1 = tslib_1.__importDefault(require("fs-extra"));
const path = tslib_1.__importStar(require("path"));
const versionMetadata_1 = require("../../common/versionMetadata");
const common_1 = require("../../error/common");
const parser_1 = require("../configManager/parser");
const environmentName_1 = require("../../core/environmentName");
class PathUtils {
    getYmlFilePath(projectPath, env) {
        const envName = env || process.env.TEAMSFX_ENV;
        if (!envName)
            throw new common_1.MissingRequiredInputError("env", "PathUtils");
        const ymlPath = path.join(projectPath, envName === environmentName_1.environmentNameManager.getLocalEnvName()
            ? versionMetadata_1.MetadataV3.localConfigFile
            : envName === environmentName_1.environmentNameManager.getTestToolEnvName()
                ? versionMetadata_1.MetadataV3.testToolConfigFile
                : versionMetadata_1.MetadataV3.configFile);
        if (fs_extra_1.default.pathExistsSync(ymlPath)) {
            return ymlPath;
        }
        if (environmentName_1.environmentNameManager.isRemoteEnvironment(envName)) {
            throw new common_1.MissingRequiredFileError("core", "", ymlPath);
        }
        else {
            throw new common_1.MissingRequiredFileError("core", "Debug ", ymlPath);
        }
    }
    async getEnvFolderPath(projectPath) {
        const ymlFilePath = this.getYmlFilePath(projectPath, "dev");
        const parseRes = await parser_1.yamlParser.parse(ymlFilePath);
        if (parseRes.isErr())
            return teamsfx_api_1.err(parseRes.error);
        const projectModel = parseRes.value;
        if (!projectModel.environmentFolderPath)
            projectModel.environmentFolderPath = "./env";
        const envFolderPath = path.isAbsolute(projectModel.environmentFolderPath)
            ? projectModel.environmentFolderPath
            : path.join(projectPath, projectModel.environmentFolderPath);
        if (!(await fs_extra_1.default.pathExists(envFolderPath)))
            return teamsfx_api_1.ok(undefined);
        return teamsfx_api_1.ok(envFolderPath);
    }
    async getEnvFilePath(projectPath, env) {
        const envFolderPathRes = await this.getEnvFolderPath(projectPath);
        if (envFolderPathRes.isErr())
            return teamsfx_api_1.err(envFolderPathRes.error);
        const folderPath = envFolderPathRes.value;
        if (!folderPath)
            return teamsfx_api_1.ok(undefined);
        const envFilePath = path.join(folderPath, `.env.${env}`);
        return teamsfx_api_1.ok(envFilePath);
    }
}
exports.pathUtils = new PathUtils();
//# sourceMappingURL=pathUtils.js.map