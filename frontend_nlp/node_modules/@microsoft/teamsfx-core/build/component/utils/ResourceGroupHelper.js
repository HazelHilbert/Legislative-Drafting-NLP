"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.resourceGroupHelper = exports.recommendedLocations = void 0;
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
const arm_resources_1 = require("@azure/arm-resources");
const arm_subscriptions_1 = require("@azure/arm-subscriptions");
const teamsfx_api_1 = require("@microsoft/teamsfx-api");
const globalVars_1 = require("../../core/globalVars");
const azure_1 = require("../../error/azure");
const other_1 = require("../../question/other");
const questionNames_1 = require("../../question/questionNames");
const visitor_1 = require("../../ui/visitor");
const constants_1 = require("../constants");
const MsResources = "Microsoft.Resources";
const ResourceGroups = "resourceGroups";
exports.recommendedLocations = [
    "South Africa North",
    "Australia East",
    "Central India",
    "East Asia",
    "Japan East",
    "Korea Central",
    "Southeast Asia",
    "Canada Central",
    "France Central",
    "Germany West Central",
    "Italy North",
    "North Europe",
    "Norway East",
    "Poland Central",
    "Sweden Central",
    "Switzerland North",
    "UK South",
    "West Europe",
    "Israel Central",
    "Qatar Central",
    "UAE North",
    "Brazil South",
    "Central US",
    "East US",
    "East US 2",
    "South Central US",
    "West US 2",
    "West US 3",
];
// TODO: use the emoji plus sign like Azure Functions extension
const newResourceGroupOption = "+ New resource group";
class ResourceGroupHelper {
    async createNewResourceGroup(resourceGroupName, azureAccountProvider, subscriptionId, location) {
        const rmClient = await this.createRmClient(azureAccountProvider, subscriptionId);
        const maybeExist = await this.checkResourceGroupExistence(resourceGroupName, rmClient);
        if (maybeExist.isErr()) {
            return teamsfx_api_1.err(maybeExist.error);
        }
        if (maybeExist.value) {
            return teamsfx_api_1.err(new azure_1.ResourceGroupConflictError(resourceGroupName, subscriptionId));
        }
        try {
            const response = await rmClient.resourceGroups.createOrUpdate(resourceGroupName, {
                location: location,
                tags: { "created-by": "teamsfx" },
            });
            if (response.name === undefined) {
                return teamsfx_api_1.err(new azure_1.CreateResourceGroupError(resourceGroupName, subscriptionId, `illegal response: ${JSON.stringify(response)}`));
            }
            return teamsfx_api_1.ok(response.name);
        }
        catch (e) {
            delete e["request"];
            return teamsfx_api_1.err(new azure_1.CreateResourceGroupError(resourceGroupName, subscriptionId, e.message || JSON.stringify(e), e));
        }
    }
    async checkResourceGroupExistence(resourceGroupName, rmClient) {
        try {
            const checkRes = await rmClient.resourceGroups.checkExistence(resourceGroupName);
            return teamsfx_api_1.ok(!!checkRes.body);
        }
        catch (e) {
            delete e["request"];
            return teamsfx_api_1.err(new azure_1.CheckResourceGroupExistenceError(resourceGroupName, rmClient.subscriptionId, e.message || JSON.stringify(e), e));
        }
    }
    async getResourceGroupInfo(resourceGroupName, rmClient) {
        try {
            const getRes = await rmClient.resourceGroups.get(resourceGroupName);
            if (getRes.name) {
                return teamsfx_api_1.ok({
                    createNewResourceGroup: false,
                    name: getRes.name,
                    location: getRes.location,
                });
            }
            else
                return teamsfx_api_1.ok(undefined);
        }
        catch (e) {
            delete e["request"];
            return teamsfx_api_1.err(new azure_1.GetResourceGroupError(resourceGroupName, rmClient.subscriptionId, e.message || JSON.stringify(e), e));
        }
    }
    async listResourceGroups(rmClient) {
        var _a;
        try {
            const results = [];
            const res = rmClient.resourceGroups.list();
            let result;
            do {
                result = await res.next();
                if ((_a = result.value) === null || _a === void 0 ? void 0 : _a.name)
                    results.push([result.value.name, result.value.location]);
            } while (!result.done);
            return teamsfx_api_1.ok(results);
        }
        catch (e) {
            delete e["request"];
            return teamsfx_api_1.err(new azure_1.ListResourceGroupsError(rmClient.subscriptionId, e.message || JSON.stringify(e), e));
        }
    }
    async getLocations(azureAccountProvider, rmClient) {
        var _a, _b;
        const azureToken = await azureAccountProvider.getIdentityCredentialAsync();
        if (!azureToken)
            return teamsfx_api_1.err(new azure_1.InvalidAzureCredentialError());
        const subscriptionClient = new arm_subscriptions_1.SubscriptionClient(azureToken);
        const askSubRes = await azureAccountProvider.getSelectedSubscription(true);
        try {
            const res = subscriptionClient.subscriptions.listLocations(askSubRes.subscriptionId);
            const locations = [];
            let result;
            do {
                result = await res.next();
                if ((_a = result.value) === null || _a === void 0 ? void 0 : _a.displayName)
                    locations.push(result.value.displayName);
            } while (!result.done);
            const providerData = await rmClient.providers.get(MsResources);
            const resourceTypeData = (_b = providerData.resourceTypes) === null || _b === void 0 ? void 0 : _b.find((rt) => { var _a; return ((_a = rt.resourceType) === null || _a === void 0 ? void 0 : _a.toLowerCase()) === ResourceGroups.toLowerCase(); });
            const resourceLocations = resourceTypeData === null || resourceTypeData === void 0 ? void 0 : resourceTypeData.locations;
            const rgLocations = resourceLocations === null || resourceLocations === void 0 ? void 0 : resourceLocations.filter((item) => locations.includes(item));
            if (!rgLocations || rgLocations.length == 0) {
                return teamsfx_api_1.err(new azure_1.ListResourceGroupLocationsError(rmClient.subscriptionId, "No available locations found!"));
            }
            return teamsfx_api_1.ok(rgLocations);
        }
        catch (e) {
            delete e["request"];
            return teamsfx_api_1.err(new azure_1.ListResourceGroupLocationsError(rmClient.subscriptionId, e.message || JSON.stringify(e), e));
        }
    }
    /**
     * Ask user to create a new resource group or use an existing resource group  V3
     */
    async askResourceGroupInfoV3(inputs, azureAccountProvider, rmClient, defaultResourceGroupName) {
        const node = other_1.resourceGroupQuestionNode(azureAccountProvider, rmClient.subscriptionId, defaultResourceGroupName);
        if (node) {
            const res = await visitor_1.traverse(node, inputs, globalVars_1.TOOLS.ui);
            if (res.isErr()) {
                return teamsfx_api_1.err(res.error);
            }
        }
        const targetResourceGroupNameOptionItem = inputs[questionNames_1.QuestionNames.TargetResourceGroupName];
        const targetResourceGroupName = targetResourceGroupNameOptionItem.id;
        if (!targetResourceGroupName || typeof targetResourceGroupName !== "string") {
            return teamsfx_api_1.err(new teamsfx_api_1.UserError(constants_1.SolutionSource, "InvalidInputError", "Invalid targetResourceGroupName"));
        }
        if (targetResourceGroupName === newResourceGroupOption) {
            return teamsfx_api_1.ok({
                name: inputs[questionNames_1.QuestionNames.NewResourceGroupName],
                location: inputs[questionNames_1.QuestionNames.NewResourceGroupLocation],
                createNewResourceGroup: true,
            });
        }
        else {
            const location = targetResourceGroupNameOptionItem.description; // location must exist because the user can only select from this list.
            return teamsfx_api_1.ok({
                createNewResourceGroup: false,
                name: targetResourceGroupName,
                location: location,
            });
        }
    }
    async createRmClient(azureAccountProvider, subscriptionId) {
        const azureToken = await azureAccountProvider.getIdentityCredentialAsync();
        if (azureToken === undefined) {
            throw new azure_1.InvalidAzureCredentialError();
        }
        await azureAccountProvider.setSubscription(subscriptionId);
        const rmClient = new arm_resources_1.ResourceManagementClient(azureToken, subscriptionId);
        return rmClient;
    }
}
exports.resourceGroupHelper = new ResourceGroupHelper();
//# sourceMappingURL=ResourceGroupHelper.js.map