"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
exports.settingsUtil = void 0;
const tslib_1 = require("tslib");
const teamsfx_api_1 = require("@microsoft/teamsfx-api");
const fs = tslib_1.__importStar(require("fs-extra"));
const uuid = tslib_1.__importStar(require("uuid"));
const globalVars_1 = require("../../core/globalVars");
const yaml_1 = require("yaml");
const telemetry_1 = require("../../common/telemetry");
const common_1 = require("../../error/common");
const pathUtils_1 = require("./pathUtils");
class SettingsUtils {
    async readSettings(projectPath, ensureTrackingId = true) {
        const projectYamlPath = pathUtils_1.pathUtils.getYmlFilePath(projectPath, "dev");
        if (!(await fs.pathExists(projectYamlPath))) {
            return teamsfx_api_1.err(new common_1.FileNotFoundError("SettingsUtils", projectYamlPath));
        }
        const yamlFileContent = await fs.readFile(projectYamlPath, "utf8");
        const appYaml = yaml_1.parseDocument(yamlFileContent);
        if (!appYaml.has("projectId") && ensureTrackingId) {
            const projectId = uuid.v4();
            const projectIdField = appYaml.createPair("projectId", uuid.v4());
            appYaml.add(projectIdField);
            await fs.writeFile(projectYamlPath, appYaml.toString()); // only write yaml file once instead of write yaml file after every command
            telemetry_1.sendTelemetryEvent(telemetry_1.Component.core, telemetry_1.TelemetryEvent.FillProjectId, {
                [telemetry_1.TelemetryProperty.ProjectId]: projectId,
            });
        }
        const projectSettings = {
            trackingId: appYaml.get("projectId"),
            version: appYaml.get("version"),
        };
        globalVars_1.globalVars.trackingId = projectSettings.trackingId; // set trackingId to globalVars
        return teamsfx_api_1.ok(projectSettings);
    }
    async writeSettings(projectPath, settings) {
        const projectYamlPath = pathUtils_1.pathUtils.getYmlFilePath(projectPath, "dev");
        if (!(await fs.pathExists(projectYamlPath))) {
            return teamsfx_api_1.err(new common_1.FileNotFoundError("SettingsUtils", projectYamlPath));
        }
        const yamlFileContent = await fs.readFile(projectYamlPath, "utf8");
        const appYaml = yaml_1.parseDocument(yamlFileContent);
        appYaml.set("projectId", settings.trackingId);
        await fs.writeFile(projectYamlPath, appYaml.toString());
        return teamsfx_api_1.ok(projectYamlPath);
    }
}
exports.settingsUtil = new SettingsUtils();
//# sourceMappingURL=settingsUtil.js.map