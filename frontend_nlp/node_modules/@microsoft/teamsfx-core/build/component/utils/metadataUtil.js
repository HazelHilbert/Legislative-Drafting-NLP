"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
exports.metadataUtil = void 0;
const telemetry_1 = require("../../common/telemetry");
const versionMetadata_1 = require("../../common/versionMetadata");
const globalVars_1 = require("../../core/globalVars");
const interface_1 = require("../configManager/interface");
const parser_1 = require("../configManager/parser");
const crypto_1 = require("crypto");
const metadataGraphPermssion_1 = require("./metadataGraphPermssion");
class MetadataUtil {
    async parse(path, env) {
        var _a, _b;
        const res = await parser_1.yamlParser.parse(path, true);
        const props = {};
        props[telemetry_1.TelemetryProperty.YmlName] = (env === "local" ? versionMetadata_1.MetadataV3.localConfigFile : versionMetadata_1.MetadataV3.configFile)
            .split(".")
            .join("");
        if (res.isOk()) {
            for (const name of interface_1.LifecycleNames) {
                const str = (_a = res.value[name]) === null || _a === void 0 ? void 0 : _a.driverDefs.map((def) => def.uses).toString().split("/").join("");
                props[name + ".actions"] = str !== null && str !== void 0 ? str : "";
            }
            props[telemetry_1.TelemetryProperty.YmlSchemaVersion] = res.value.version;
            props[telemetry_1.TelemetryProperty.SampleAppName] = MetadataUtil.parseSampleTag(res.value.additionalMetadata);
            await metadataGraphPermssion_1.metadataGraphPermissionUtil.parseAadManifest(path, res.value, props);
            (_b = globalVars_1.TOOLS.telemetryReporter) === null || _b === void 0 ? void 0 : _b.sendTelemetryEvent(telemetry_1.TelemetryEvent.MetaData, props);
        }
        return res;
    }
    static parseSampleTag(additionalMetadata) {
        if (additionalMetadata === undefined) {
            return "";
        }
        const sampleTag = additionalMetadata["sampleTag"];
        if (typeof sampleTag === "string") {
            // replace characters that could make the tag be mistaken as a file path or an email address
            return sampleTag.replace(/[@\/\\\.]/g, "_");
        }
        else {
            return "";
        }
    }
    parseManifest(manifest) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q;
        const props = {};
        const prefix = "manifest.";
        props[prefix + "id"] = (_a = manifest.id) !== null && _a !== void 0 ? _a : "";
        props[prefix + "version"] = (_b = manifest.version) !== null && _b !== void 0 ? _b : "";
        props[prefix + "manifestVersion"] = (_c = manifest.manifestVersion) !== null && _c !== void 0 ? _c : "";
        props[prefix + "bots"] = (_e = (_d = manifest.bots) === null || _d === void 0 ? void 0 : _d.map((bot) => bot.botId).toString()) !== null && _e !== void 0 ? _e : "";
        props[prefix + "composeExtensions"] =
            (_g = (_f = manifest.composeExtensions) === null || _f === void 0 ? void 0 : _f.map((bot) => bot.botId).toString()) !== null && _g !== void 0 ? _g : "";
        props[prefix + "staticTabs.contentUrl"] =
            (_j = (_h = manifest.staticTabs) === null || _h === void 0 ? void 0 : _h.map((tab) => tab.contentUrl ? crypto_1.createHash("sha256").update(tab.contentUrl).digest("hex") : "undefined").toString()) !== null && _j !== void 0 ? _j : "";
        props[prefix + "configurableTabs.configurationUrl"] =
            (_l = (_k = manifest.configurableTabs) === null || _k === void 0 ? void 0 : _k.map((tab) => tab.configurationUrl
                ? crypto_1.createHash("sha256").update(tab.configurationUrl).digest("hex")
                : "undefined").toString()) !== null && _l !== void 0 ? _l : "";
        props[prefix + "webApplicationInfo.id"] = (_o = (_m = manifest.webApplicationInfo) === null || _m === void 0 ? void 0 : _m.id) !== null && _o !== void 0 ? _o : "";
        props[prefix + "extensions"] =
            "extensions" in manifest && ((_p = manifest["extensions"]) === null || _p === void 0 ? void 0 : _p.length) != 0 ? "true" : "false";
        (_q = globalVars_1.TOOLS.telemetryReporter) === null || _q === void 0 ? void 0 : _q.sendTelemetryEvent(telemetry_1.TelemetryEvent.MetaData, props);
    }
}
exports.metadataUtil = new MetadataUtil();
//# sourceMappingURL=metadataUtil.js.map