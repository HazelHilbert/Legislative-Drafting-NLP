import { Context, CreateProjectResult, FxError, Inputs, InputsWithProjectPath, Result } from "@microsoft/teamsfx-api";
import { DotenvParseOutput } from "dotenv";
import { ExecutionError, ExecutionOutput } from "../configManager/interface";
import { DriverContext } from "../driver/interface/commonArgs";
import { ActionContext } from "../middleware/actionExecutionMW";
export declare enum TemplateNames {
    Tab = "non-sso-tab",
    SsoTab = "sso-tab",
    M365Tab = "m365-tab",
    DashboardTab = "dashboard-tab",
    NotificationRestify = "notification-restify",
    NotificationWebApi = "notification-webapi",
    NotificationHttpTrigger = "notification-http-trigger",
    NotificationTimerTrigger = "notification-timer-trigger",
    NotificationHttpTimerTrigger = "notification-http-timer-trigger",
    CommandAndResponse = "command-and-response",
    Workflow = "workflow",
    DefaultBot = "default-bot",
    MessageExtension = "message-extension",
    MessageExtensionAction = "message-extension-action",
    MessageExtensionSearch = "message-extension-search",
    MessageExtensionCopilot = "message-extension-copilot",
    M365MessageExtension = "m365-message-extension",
    TabAndDefaultBot = "non-sso-tab-default-bot",
    BotAndMessageExtension = "default-bot-message-extension",
    SsoTabObo = "sso-tab-with-obo-flow",
    LinkUnfurling = "link-unfurling",
    CopilotPluginFromScratch = "copilot-plugin-from-scratch",
    AIBot = "ai-bot",
    AIAssistantBot = "ai-assistant-bot"
}
declare class Coordinator {
    create(context: Context, inputs: Inputs, actionContext?: ActionContext): Promise<Result<CreateProjectResult, FxError>>;
    ensureTeamsFxInCsproj(projectPath: string): Promise<Result<undefined, FxError>>;
    ensureTrackingId(projectPath: string, trackingId?: string | undefined): Promise<Result<string, FxError>>;
    preProvisionForVS(ctx: DriverContext, inputs: InputsWithProjectPath): Promise<Result<{
        needAzureLogin: boolean;
        needM365Login: boolean;
        resolvedAzureSubscriptionId?: string;
        resolvedAzureResourceGroupName?: string;
    }, FxError>>;
    preCheckYmlAndEnvForVS(ctx: DriverContext, inputs: InputsWithProjectPath): Promise<Result<undefined, FxError>>;
    provision(ctx: DriverContext, inputs: InputsWithProjectPath): Promise<Result<DotenvParseOutput, FxError>>;
    convertExecuteResult(execRes: Result<ExecutionOutput, ExecutionError>, templatePath: string): [DotenvParseOutput, FxError | undefined];
    deploy(ctx: DriverContext, inputs: InputsWithProjectPath): Promise<Result<DotenvParseOutput, FxError>>;
    publish(ctx: DriverContext, inputs: InputsWithProjectPath): Promise<Result<DotenvParseOutput, FxError>>;
    publishInDeveloperPortal(ctx: Context, inputs: InputsWithProjectPath): Promise<Result<undefined, FxError>>;
}
export declare const coordinator: Coordinator;
export {};
//# sourceMappingURL=index.d.ts.map