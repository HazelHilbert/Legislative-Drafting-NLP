"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
exports.fillInTelemetryPropsForFxError = exports.sendTelemetryErrorEvent = exports.sendTelemetryEvent = exports.ProjectMigratorGuideStatus = exports.ProjectMigratorStatus = exports.CustomizeSubscriptionType = exports.CustomizeResourceGroupType = exports.Component = exports.TelemetryErrorType = exports.TelemetrySuccess = exports.TelemetryEvent = exports.TelemetryProperty = void 0;
const teamsfx_api_1 = require("@microsoft/teamsfx-api");
const constants_1 = require("../component/constants");
const globalVars_1 = require("../core/globalVars");
var TelemetryProperty;
(function (TelemetryProperty) {
    TelemetryProperty["TriggerFrom"] = "trigger-from";
    TelemetryProperty["Component"] = "component";
    TelemetryProperty["Components"] = "components";
    TelemetryProperty["Feature"] = "feature";
    TelemetryProperty["Hosting"] = "hosting";
    TelemetryProperty["AppId"] = "appid";
    TelemetryProperty["BotId"] = "botid";
    TelemetryProperty["Success"] = "success";
    TelemetryProperty["ErrorType"] = "error-type";
    TelemetryProperty["ErrorCode"] = "error-code";
    TelemetryProperty["ErrorMessage"] = "error-message";
    TelemetryProperty["SampleAppName"] = "sample-app-name";
    TelemetryProperty["ProjectId"] = "project-id";
    TelemetryProperty["NewProjectId"] = "new-project-id";
    TelemetryProperty["CorrelationId"] = "correlation-id";
    TelemetryProperty["Env"] = "env";
    TelemetryProperty["CustomizeResourceGroupType"] = "customize-resource-group-type";
    TelemetryProperty["EnvConfig"] = "env-config";
    TelemetryProperty["Status"] = "status";
    TelemetryProperty["HostType"] = "hostType";
    TelemetryProperty["AzureResources"] = "azure-resources";
    TelemetryProperty["Capabilities"] = "capabilities";
    TelemetryProperty["ActivePlugins"] = "active-plugins";
    TelemetryProperty["IsCopilotAllowed"] = "is-copilot-allowed";
    TelemetryProperty["IsSideloadingAllowed"] = "is-sideloading-allowed";
    TelemetryProperty["NeedMigrateAadManifest"] = "need-migrate-aad-manifest";
    TelemetryProperty["CheckCopilotTracingId"] = "copilot-trace-id";
    TelemetryProperty["CheckSideloadingStatusCode"] = "status-code";
    TelemetryProperty["CheckSideloadingMethod"] = "method";
    TelemetryProperty["CheckSideloadingUrl"] = "url";
    TelemetryProperty["TemplateGroup"] = "template-group";
    TelemetryProperty["TemplateLanguage"] = "template-language";
    TelemetryProperty["TemplateScenario"] = "template-scenario";
    TelemetryProperty["TemplateFallback"] = "template-fallback";
    TelemetryProperty["TemplateName"] = "template-name";
    TelemetryProperty["SampleDownloadDirectory"] = "sample-download-directory";
    TelemetryProperty["Fallback"] = "fallback";
    TelemetryProperty["HasSwitchedSubscription"] = "has-switched-subscription";
    TelemetryProperty["HasSwitchedM365Tenant"] = "has-switched-m365";
    TelemetryProperty["CustomizeSubscriptionType"] = "customize-subscription-type";
    TelemetryProperty["IsFromTdp"] = "is-from-developer-portal";
    TelemetryProperty["ToolkitVersion"] = "toolkit-version";
    TelemetryProperty["YmlName"] = "yml-name";
    TelemetryProperty["YmlSchemaVersion"] = "yml-schema-version";
    TelemetryProperty["GraphPermission"] = "graph-permission";
    TelemetryProperty["GraphPermissionHasRole"] = "graph-permission-has-role";
    TelemetryProperty["GraphPermissionHasAdminScope"] = "graph-permission-has-admin-scope";
    TelemetryProperty["GraphPermissionScopes"] = "graph-permission-scopes";
    TelemetryProperty["AadManifest"] = "aad-manifest";
})(TelemetryProperty = exports.TelemetryProperty || (exports.TelemetryProperty = {}));
var TelemetryEvent;
(function (TelemetryEvent) {
    TelemetryEvent["Scaffold"] = "scaffold";
    TelemetryEvent["GenerateBicep"] = "generate-arm-templates";
    TelemetryEvent["LocalDebug"] = "local-debug";
    TelemetryEvent["PostLocalDebug"] = "post-local-debug";
    TelemetryEvent["Provision"] = "provision";
    TelemetryEvent["PostProvision"] = "post-provision";
    TelemetryEvent["PreDeploy"] = "pre-deploy";
    TelemetryEvent["Deploy"] = "deploy";
    TelemetryEvent["DownloadSampleStart"] = "download-sample-start";
    TelemetryEvent["DownloadSample"] = "download-sample";
    TelemetryEvent["CreateProject"] = "create";
    TelemetryEvent["AddFeature"] = "add-feature";
    TelemetryEvent["ProjectUpgrade"] = "project-upgrade";
    TelemetryEvent["ProjectUpgradeStart"] = "project-upgrade-start";
    TelemetryEvent["ReadJson"] = "read-json";
    TelemetryEvent["DecryptUserdata"] = "decrypt-userdata";
    TelemetryEvent["CheckCopilot"] = "check-copilot";
    TelemetryEvent["CheckResourceGroupStart"] = "check-resource-group-start";
    TelemetryEvent["CheckResourceGroup"] = "check-resource-group";
    TelemetryEvent["CheckSubscriptionStart"] = "check-subscription-start";
    TelemetryEvent["CheckSubscription"] = "check-subscription";
    TelemetryEvent["CheckSideloading"] = "check-sideloading";
    TelemetryEvent["EnvConfig"] = "env-config";
    TelemetryEvent["DisplayToolingUpdateNotification"] = "display-tooling-update-notification";
    TelemetryEvent["ProjectMigratorNotificationStart"] = "project-migrator-notification-start";
    TelemetryEvent["ProjectMigratorNotification"] = "project-migrator-notification";
    TelemetryEvent["ProjectMigratorMigrateStart"] = "project-migrator-migrate-start";
    TelemetryEvent["ProjectMigratorMigrate"] = "project-migrator-migrate";
    TelemetryEvent["ProjectMigratorPrecheckFailed"] = "project-migrator-pre-check-failed";
    TelemetryEvent["ProjectMigratorError"] = "project-migrator-error";
    TelemetryEvent["ProjectConsolidateNotificationStart"] = "project-consolidate-notification-start";
    TelemetryEvent["ProjectConsolidateNotification"] = "project-consolidate-notification";
    TelemetryEvent["ProjectConsolidateUpgradeStart"] = "project-consolidate-upgrade-start";
    TelemetryEvent["ProjectConsolidateUpgrade"] = "project-consolidate-upgrade";
    TelemetryEvent["ProjectConsolidateAddLocalEnvStart"] = "project-consolidate-add-local-env-start";
    TelemetryEvent["ProjectConsolidateAddLocalEnv"] = "project-consolidate-add-local-env";
    TelemetryEvent["ProjectConsolidateAddSPFXManifestStart"] = "project-consolidate-add-spfx-manifest-start";
    TelemetryEvent["ProjectConsolidateAddSPFXManifest"] = "project-consolidate-add-spfx-manifest";
    TelemetryEvent["ProjectConsolidateCopyAzureManifestStart"] = "project-consolidate-copy-azure-manifest-start";
    TelemetryEvent["ProjectConsolidateCopyAzureManifest"] = "project-consolidate-copy-azure-manifest";
    TelemetryEvent["ProjectConsolidateAddAzureManifestStart"] = "project-consolidate-add-azure-manifest-start";
    TelemetryEvent["ProjectConsolidateAddAzureManifest"] = "project-consolidate-add-azure-manifest";
    TelemetryEvent["ProjectConsolidateBackupConfigStart"] = "project-consolidate-backup-config-start";
    TelemetryEvent["ProjectConsolidateBackupConfig"] = "project-consolidate-backup-config";
    TelemetryEvent["ProjectConsolidateGuideStart"] = "project-Consolidate-guide-start";
    TelemetryEvent["ProjectConsolidateGuide"] = "project-consolidate-guide";
    TelemetryEvent["ProjectConsolidateError"] = "project-consolidate-error";
    TelemetryEvent["ProjectConsolidateCheckManifestError"] = "project-consolidate-check-manifest-error";
    TelemetryEvent["DetectPortStart"] = "detect-port-start";
    TelemetryEvent["DetectPort"] = "detect-port";
    TelemetryEvent["FillProjectId"] = "fill-project-id";
    TelemetryEvent["ScaffoldFromTemplatesStart"] = "scaffold-from-templates-start";
    TelemetryEvent["ScaffoldFromTemplates"] = "scaffold-from-templates";
    TelemetryEvent["GenerateTemplate"] = "generate-template";
    TelemetryEvent["GenerateSample"] = "generate-sample";
    TelemetryEvent["ConfirmProvision"] = "confirm-provision";
    TelemetryEvent["CheckLocalDebugTenant"] = "check-local-debug-tenant";
    TelemetryEvent["DebugSetUpSSO"] = "debug-set-up-sso";
    TelemetryEvent["DeploymentInfoNotFound"] = "deployment-info-not-found";
    TelemetryEvent["InstallScriptNotFound"] = "install-script-not-found";
    TelemetryEvent["SkipDeploy"] = "skip-deploy";
    TelemetryEvent["PublishInDeveloperPortal"] = "publish-in-developer-portal";
    TelemetryEvent["MetaData"] = "metadata";
})(TelemetryEvent = exports.TelemetryEvent || (exports.TelemetryEvent = {}));
var TelemetrySuccess;
(function (TelemetrySuccess) {
    TelemetrySuccess["Yes"] = "yes";
    TelemetrySuccess["No"] = "no";
})(TelemetrySuccess = exports.TelemetrySuccess || (exports.TelemetrySuccess = {}));
var TelemetryErrorType;
(function (TelemetryErrorType) {
    TelemetryErrorType["UserError"] = "user";
    TelemetryErrorType["SystemError"] = "system";
})(TelemetryErrorType = exports.TelemetryErrorType || (exports.TelemetryErrorType = {}));
var Component;
(function (Component) {
    Component["vsc"] = "extension";
    Component["cli"] = "cli";
    Component["vs"] = "vs";
    Component["core"] = "core";
    Component["solution"] = "solution";
})(Component = exports.Component || (exports.Component = {}));
var CustomizeResourceGroupType;
(function (CustomizeResourceGroupType) {
    CustomizeResourceGroupType["CommandLine"] = "command-line";
    CustomizeResourceGroupType["EnvConfig"] = "env-config";
    CustomizeResourceGroupType["EnvState"] = "env-state";
    CustomizeResourceGroupType["InteractiveCreateDefault"] = "interactive-create-default";
    CustomizeResourceGroupType["InteractiveCreateCustomized"] = "interactive-create-customized";
    CustomizeResourceGroupType["InteractiveUseExisting"] = "interactive-use-existing";
    CustomizeResourceGroupType["FallbackDefault"] = "fallback-default";
})(CustomizeResourceGroupType = exports.CustomizeResourceGroupType || (exports.CustomizeResourceGroupType = {}));
var CustomizeSubscriptionType;
(function (CustomizeSubscriptionType) {
    CustomizeSubscriptionType["CommandLine"] = "command-line";
    CustomizeSubscriptionType["EnvConfig"] = "env-config";
    CustomizeSubscriptionType["EnvState"] = "env-state";
    CustomizeSubscriptionType["Default"] = "default";
})(CustomizeSubscriptionType = exports.CustomizeSubscriptionType || (exports.CustomizeSubscriptionType = {}));
var ProjectMigratorStatus;
(function (ProjectMigratorStatus) {
    ProjectMigratorStatus["OK"] = "ok";
    ProjectMigratorStatus["Cancel"] = "cancel";
})(ProjectMigratorStatus = exports.ProjectMigratorStatus || (exports.ProjectMigratorStatus = {}));
var ProjectMigratorGuideStatus;
(function (ProjectMigratorGuideStatus) {
    ProjectMigratorGuideStatus["Reload"] = "reload";
    ProjectMigratorGuideStatus["LearnMore"] = "learn-more";
    ProjectMigratorGuideStatus["Cancel"] = "cancel";
})(ProjectMigratorGuideStatus = exports.ProjectMigratorGuideStatus || (exports.ProjectMigratorGuideStatus = {}));
function sendTelemetryEvent(component, eventName, properties, measurements) {
    var _a;
    if (!properties) {
        properties = {};
    }
    properties[TelemetryProperty.Component] = component;
    (_a = globalVars_1.TOOLS.telemetryReporter) === null || _a === void 0 ? void 0 : _a.sendTelemetryEvent(eventName, properties, measurements);
}
exports.sendTelemetryEvent = sendTelemetryEvent;
function sendTelemetryErrorEvent(component, eventName, fxError, properties) {
    var _a;
    if (!properties) {
        properties = {};
    }
    properties[TelemetryProperty.Component] = component;
    fillInTelemetryPropsForFxError(properties, fxError);
    (_a = globalVars_1.TOOLS.telemetryReporter) === null || _a === void 0 ? void 0 : _a.sendTelemetryErrorEvent(eventName, properties, {});
}
exports.sendTelemetryErrorEvent = sendTelemetryErrorEvent;
/**
 * fill in telemetry properties for FxError
 * @param error FxError
 * @param props teletry properties
 */
function fillInTelemetryPropsForFxError(props, error) {
    const errorCode = error.source + "." + error.name;
    const errorType = error instanceof teamsfx_api_1.SystemError
        ? constants_1.TelemetryConstants.values.systemError
        : constants_1.TelemetryConstants.values.userError;
    props[constants_1.TelemetryConstants.properties.success] = constants_1.TelemetryConstants.values.no;
    props[constants_1.TelemetryConstants.properties.errorCode] =
        props[constants_1.TelemetryConstants.properties.errorCode] || errorCode;
    props[constants_1.TelemetryConstants.properties.errorType] = errorType;
    props[constants_1.TelemetryConstants.properties.errorMessage] = error.message;
    props[constants_1.TelemetryConstants.properties.errorStack] = error.stack !== undefined ? error.stack : ""; // error stack will not append in error-message any more
    props[constants_1.TelemetryConstants.properties.errorName] = error.name;
    // append global context properties
    props[constants_1.TelemetryConstants.properties.errorComponent] = globalVars_1.globalVars.component;
    props[constants_1.TelemetryConstants.properties.errorStage] = globalVars_1.globalVars.stage;
    props[constants_1.TelemetryConstants.properties.errorMethod] = globalVars_1.globalVars.method;
    props[constants_1.TelemetryConstants.properties.errorSource] = globalVars_1.globalVars.source;
    if (error.innerError && error.innerError["code"]) {
        props[constants_1.TelemetryConstants.properties.errorInnerCode] = error.innerError["code"];
    }
    if (error.innerError) {
        props[constants_1.TelemetryConstants.properties.innerError] = JSON.stringify(error.innerError, Object.getOwnPropertyNames(error.innerError));
    }
    if (error.categories) {
        props[constants_1.TelemetryConstants.properties.errorCat] = error.categories.join("|");
        props[constants_1.TelemetryConstants.properties.errorCat1] = error.categories[0];
        props[constants_1.TelemetryConstants.properties.errorCat2] = error.categories[1];
        props[constants_1.TelemetryConstants.properties.errorCat3] = error.categories[2];
    }
}
exports.fillInTelemetryPropsForFxError = fillInTelemetryPropsForFxError;
//# sourceMappingURL=telemetry.js.map