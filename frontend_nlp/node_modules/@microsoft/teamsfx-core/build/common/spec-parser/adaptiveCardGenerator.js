// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.isImageUrlProperty = exports.getResponseJsonPathFromSchema = exports.generateCardFromResponse = exports.generateAdaptiveCard = void 0;
const utils_1 = require("./utils");
const interfaces_1 = require("./interfaces");
const constants_1 = require("./constants");
const specParserError_1 = require("./specParserError");
function generateAdaptiveCard(operationItem) {
    try {
        const json = utils_1.getResponseJson(operationItem);
        let cardBody = [];
        let schema = json.schema;
        let jsonPath = "$";
        if (schema && Object.keys(schema).length > 0) {
            jsonPath = getResponseJsonPathFromSchema(schema);
            if (jsonPath !== "$") {
                schema = schema.properties[jsonPath];
            }
            cardBody = generateCardFromResponse(schema, "");
        }
        // if no schema, try to use example value
        if (cardBody.length === 0 && (json.examples || json.example)) {
            cardBody = [
                {
                    type: constants_1.ConstantString.TextBlockType,
                    text: "${jsonStringify($root)}",
                    wrap: true,
                },
            ];
        }
        // if no example value, use default success response
        if (cardBody.length === 0) {
            cardBody = [
                {
                    type: constants_1.ConstantString.TextBlockType,
                    text: "success",
                    wrap: true,
                },
            ];
        }
        const fullCard = {
            type: constants_1.ConstantString.AdaptiveCardType,
            $schema: constants_1.ConstantString.AdaptiveCardSchema,
            version: constants_1.ConstantString.AdaptiveCardVersion,
            body: cardBody,
        };
        return [fullCard, jsonPath];
    }
    catch (err) {
        throw new specParserError_1.SpecParserError(err.toString(), interfaces_1.ErrorType.GenerateAdaptiveCardFailed);
    }
}
exports.generateAdaptiveCard = generateAdaptiveCard;
function generateCardFromResponse(schema, name, parentArrayName = "") {
    if (schema.type === "array") {
        // schema.items can be arbitrary object: schema { type: array, items: {} }
        if (Object.keys(schema.items).length === 0) {
            return [
                {
                    type: constants_1.ConstantString.TextBlockType,
                    text: name ? `${name}: \${jsonStringify(${name})}` : "result: ${jsonStringify($root)}",
                    wrap: true,
                },
            ];
        }
        const obj = generateCardFromResponse(schema.items, "", name);
        const template = {
            type: constants_1.ConstantString.ContainerType,
            $data: name ? `\${${name}}` : "${$root}",
            items: Array(),
        };
        template.items.push(...obj);
        return [template];
    }
    // some schema may not contain type but contain properties
    if (schema.type === "object" || (!schema.type && schema.properties)) {
        const { properties } = schema;
        const result = [];
        for (const property in properties) {
            const obj = generateCardFromResponse(properties[property], name ? `${name}.${property}` : property, parentArrayName);
            result.push(...obj);
        }
        if (schema.additionalProperties) {
            // TODO: better ways to handler warnings.
            console.warn(constants_1.ConstantString.AdditionalPropertiesNotSupported);
        }
        return result;
    }
    if (schema.type === "string" ||
        schema.type === "integer" ||
        schema.type === "boolean" ||
        schema.type === "number") {
        if (!isImageUrlProperty(schema, name, parentArrayName)) {
            // string in root: "ddd"
            let text = "result: ${$root}";
            if (name) {
                // object { id: "1" }
                text = `${name}: \${if(${name}, ${name}, 'N/A')}`;
                if (parentArrayName) {
                    // object types inside array: { tags: ["id": 1, "name": "name"] }
                    text = `${parentArrayName}.${text}`;
                }
            }
            else if (parentArrayName) {
                // string array: photoUrls: ["1", "2"]
                text = `${parentArrayName}: ` + "${$data}";
            }
            return [
                {
                    type: constants_1.ConstantString.TextBlockType,
                    text,
                    wrap: true,
                },
            ];
        }
        else {
            if (name) {
                return [
                    {
                        type: "Image",
                        url: `\${${name}}`,
                        $when: `\${${name} != null}`,
                    },
                ];
            }
            else {
                return [
                    {
                        type: "Image",
                        url: "${$data}",
                        $when: "${$data != null}",
                    },
                ];
            }
        }
    }
    if (schema.oneOf || schema.anyOf || schema.not || schema.allOf) {
        throw new Error(utils_1.format(constants_1.ConstantString.SchemaNotSupported, JSON.stringify(schema)));
    }
    throw new Error(utils_1.format(constants_1.ConstantString.UnknownSchema, JSON.stringify(schema)));
}
exports.generateCardFromResponse = generateCardFromResponse;
// Find the first array property in the response schema object with the well-known name
function getResponseJsonPathFromSchema(schema) {
    if (schema.type === "object" || (!schema.type && schema.properties)) {
        const { properties } = schema;
        for (const property in properties) {
            const schema = properties[property];
            if (schema.type === "array" &&
                utils_1.isWellKnownName(property, constants_1.ConstantString.WellknownResultNames)) {
                return property;
            }
        }
    }
    return "$";
}
exports.getResponseJsonPathFromSchema = getResponseJsonPathFromSchema;
function isImageUrlProperty(schema, name, parentArrayName) {
    const propertyName = name ? name : parentArrayName;
    return (!!propertyName &&
        schema.type === "string" &&
        utils_1.isWellKnownName(propertyName, constants_1.ConstantString.WellknownImageName) &&
        (propertyName.toLocaleLowerCase().indexOf("url") >= 0 || schema.format === "uri"));
}
exports.isImageUrlProperty = isImageUrlProperty;
//# sourceMappingURL=adaptiveCardGenerator.js.map