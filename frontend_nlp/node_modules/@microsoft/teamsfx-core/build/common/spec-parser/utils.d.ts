import { OpenAPIV3 } from "openapi-types";
import SwaggerParser from "@apidevtools/swagger-parser";
import { CheckParamResult, ErrorResult, Parameter, ValidateResult, WarningResult } from "./interfaces";
import { IMessagingExtensionCommand } from "@microsoft/teamsfx-api";
export declare function checkParameters(paramObject: OpenAPIV3.ParameterObject[]): CheckParamResult;
export declare function checkPostBody(schema: OpenAPIV3.SchemaObject, isRequired?: boolean): CheckParamResult;
/**
 * Checks if the given API is supported.
 * @param {string} method - The HTTP method of the API.
 * @param {string} path - The path of the API.
 * @param {OpenAPIV3.Document} spec - The OpenAPI specification document.
 * @returns {boolean} - Returns true if the API is supported, false otherwise.
 * @description The following APIs are supported:
 * 1. only support Get/Post operation without auth property
 * 2. parameter inside query or path only support string, number, boolean and integer
 * 3. parameter inside post body only support string, number, boolean, integer and object
 * 4. request body + required parameters <= 1
 * 5. response body should be “application/json” and not empty, and response code should be 20X
 * 6. only support request body with “application/json” content type
 */
export declare function isSupportedApi(method: string, path: string, spec: OpenAPIV3.Document, allowMissingId: boolean, allowAPIKeyAuth: boolean): boolean;
export declare function getAPIKeyAuthArray(securities: OpenAPIV3.SecurityRequirementObject[] | undefined, spec: OpenAPIV3.Document): OpenAPIV3.ApiKeySecurityScheme[][];
export declare function updateFirstLetter(str: string): string;
export declare function getResponseJson(operationObject: OpenAPIV3.OperationObject | undefined): OpenAPIV3.MediaTypeObject;
export declare function convertPathToCamelCase(path: string): string;
export declare function getUrlProtocol(urlString: string): string | undefined;
export declare function resolveServerUrl(url: string): string;
export declare function checkServerUrl(servers: OpenAPIV3.ServerObject[]): ErrorResult[];
export declare function validateServer(spec: OpenAPIV3.Document, allowMissingId: boolean, allowAPIKeyAuth: boolean): ErrorResult[];
export declare function isWellKnownName(name: string, wellknownNameList: string[]): boolean;
export declare function generateParametersFromSchema(schema: OpenAPIV3.SchemaObject, name: string, isRequired?: boolean): [Parameter[], Parameter[]];
export declare function parseApiInfo(operationItem: OpenAPIV3.OperationObject): [IMessagingExtensionCommand, WarningResult | undefined];
export declare function listSupportedAPIs(spec: OpenAPIV3.Document, allowMissingId: boolean, allowAPIKeyAuth: boolean): {
    [key: string]: OpenAPIV3.OperationObject;
};
export declare function validateSpec(spec: OpenAPIV3.Document, parser: SwaggerParser, isSwaggerFile: boolean, allowMissingId: boolean, allowAPIKeyAuth: boolean): ValidateResult;
export declare function format(str: string, ...args: string[]): string;
export declare function getSafeRegistrationIdEnvName(authName: string): string;
//# sourceMappingURL=utils.d.ts.map