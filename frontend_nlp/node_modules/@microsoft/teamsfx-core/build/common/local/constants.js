// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TunnelType = exports.Prerequisite = exports.TaskDefaultValue = exports.TaskLabel = exports.TaskOverallLabel = exports.TeamsFxNpmCommands = exports.TaskCommand = exports.BotCapabilities = exports.BotHostTypes = exports.BotHostTypeName = exports.LocalDebugCertificate = exports.LocalEnvFrontendKeys = exports.LocalEnvCertKeys = exports.LocalEnvBotKeys = exports.LocalEnvBackendKeys = exports.LocalEnvAuthKeys = exports.npmInstallCommand = exports.defaultNpmInstallArg = exports.baseNpmInstallCommand = exports.FolderName = void 0;
class FolderName {
}
exports.FolderName = FolderName;
FolderName.Frontend = "tabs";
FolderName.Bot = "bot";
FolderName.Function = "api";
FolderName.SPFx = "SPFx";
FolderName.VideoFilter = "app";
exports.baseNpmInstallCommand = "npm install";
exports.defaultNpmInstallArg = "--no-audit";
exports.npmInstallCommand = `${exports.baseNpmInstallCommand} ${exports.defaultNpmInstallArg}`;
exports.LocalEnvAuthKeys = Object.freeze({
    ClientId: "AUTH_CLIENT_ID",
    ClientSecret: "AUTH_CLIENT_SECRET",
    IdentifierUri: "AUTH_IDENTIFIER_URI",
    AadMetadataAddress: "AUTH_AAD_METADATA_ADDRESS",
    OauthAuthority: "AUTH_OAUTH_AUTHORITY",
    TabEndpoint: "AUTH_TAB_APP_ENDPOINT",
    AllowedAppIds: "AUTH_ALLOWED_APP_IDS",
    Urls: "AUTH_urls",
    ServicePath: "AUTH_SERVICE_PATH",
});
exports.LocalEnvBackendKeys = Object.freeze({
    WebJobsStorage: "BACKEND_AzureWebJobsStorage",
    FuncWorkerRuntime: "BACKEND_FUNCTIONS_WORKER_RUNTIME",
    AuthorityHost: "BACKEND_M365_AUTHORITY_HOST",
    TenantId: "BACKEND_M365_TENANT_ID",
    ClientId: "BACKEND_M365_CLIENT_ID",
    ClientSecret: "BACKEND_M365_CLIENT_SECRET",
    SqlEndpoint: "BACKEND_SQL_ENDPOINT",
    SqlDbName: "BACKEND_SQL_DATABASE_NAME",
    SqlUserName: "BACKEND_SQL_USER_NAME",
    SqlPassword: "BACKEND_SQL_PASSWORD",
    IdentityId: "BACKEND_IDENTITY_ID",
    ApiEndpoint: "BACKEND_API_ENDPOINT",
    ApplicationIdUri: "BACKEND_M365_APPLICATION_ID_URI",
    AllowedAppIds: "BACKEND_ALLOWED_APP_IDS",
});
exports.LocalEnvBotKeys = Object.freeze({
    BotId: "BOT_BOT_ID",
    BotPassword: "BOT_BOT_PASSWORD",
    ClientId: "BOT_M365_CLIENT_ID",
    ClientSecret: "BOT_M365_CLIENT_SECRET",
    TenantID: "BOT_M365_TENANT_ID",
    OauthAuthority: "BOT_M365_AUTHORITY_HOST",
    LoginEndpoint: "BOT_INITIATE_LOGIN_ENDPOINT",
    SqlEndpoint: "BOT_SQL_ENDPOINT",
    SqlDbName: "BOT_SQL_DATABASE_NAME",
    SqlUserName: "BOT_SQL_USER_NAME",
    SqlPassword: "BOT_SQL_PASSWORD",
    IdentityId: "BOT_IDENTITY_ID",
    ApiEndpoint: "BOT_API_ENDPOINT",
    ApplicationIdUri: "BOT_M365_APPLICATION_ID_URI",
});
exports.LocalEnvCertKeys = Object.freeze({
    SslCrtFile: "FRONTEND_SSL_CRT_FILE",
    SslKeyFile: "FRONTEND_SSL_KEY_FILE",
});
exports.LocalEnvFrontendKeys = Object.freeze({
    Browser: "FRONTEND_BROWSER",
    Https: "FRONTEND_HTTPS",
    Port: "FRONTEND_PORT",
    TeamsFxEndpoint: "FRONTEND_REACT_APP_TEAMSFX_ENDPOINT",
    LoginUrl: "FRONTEND_REACT_APP_START_LOGIN_PAGE_URL",
    FuncEndpoint: "FRONTEND_REACT_APP_FUNC_ENDPOINT",
    FuncName: "FRONTEND_REACT_APP_FUNC_NAME",
    ClientId: "FRONTEND_REACT_APP_CLIENT_ID",
});
class LocalDebugCertificate {
}
exports.LocalDebugCertificate = LocalDebugCertificate;
LocalDebugCertificate.CertFileName = "localhost.crt";
LocalDebugCertificate.KeyFileName = "localhost.key";
LocalDebugCertificate.FriendlyName = "TeamsFx Development Certificate";
exports.BotHostTypeName = "host-type";
exports.BotHostTypes = Object.freeze({
    AppService: "app-service",
    AzureFunctions: "azure-functions",
});
exports.BotCapabilities = "capabilities";
exports.TaskCommand = Object.freeze({
    checkPrerequisites: "debug-check-prerequisites",
    npmInstall: "debug-npm-install",
    startLocalTunnel: "debug-start-local-tunnel",
    setUpTab: "debug-set-up-tab",
    setUpBot: "debug-set-up-bot",
    setUpSSO: "debug-set-up-sso",
    prepareManifest: "debug-prepare-manifest",
    launchWebClient: "launch-web-client",
    provision: "provision",
    deploy: "deploy",
    migrate: "migrate",
});
exports.TeamsFxNpmCommands = Object.freeze({
    startApplication: "npm run dev:teamsfx",
    startApplicationForTestTool: "npm run dev:teamsfx:testtool",
    startTestTool: "npm run dev:teamsfx:launch-testtool",
});
exports.TaskOverallLabel = Object.freeze({
    NextDefault: "Pre Debug Check & Start All",
    NextM365: "Pre Debug Check & Start All & Install App",
    NextSPFx: "prepare dev env",
    TransparentDefault: "Start Teams App Locally",
    TransparentM365: "Start Teams App Locally & Install App",
    TestToolDefault: "Start Teams App (Test Tool)",
});
exports.TaskLabel = Object.freeze({
    PrerequisiteCheck: "Validate & install prerequisites",
    PrerequisiteCheckV3: "Validate prerequisites",
    PrerequisiteCheckV3TestTool: "Validate prerequisites (Test Tool)",
    InstallNpmPackages: "Install npm packages",
    StartLocalTunnel: "Start local tunnel",
    SetUpTab: "Set up tab",
    SetUpBot: "Set up bot",
    SetUpSSO: "Set up SSO",
    PrepareManifest: "Build & upload Teams manifest",
    InstallAzureFuncBindingExt: "Install Azure Functions binding extensions",
    StartServices: "Start services",
    StartApplication: "Start application",
    StartApplicationTestTool: "Start application for Test Tool",
    StartTestTool: "Start Test Tool",
    StartFrontend: "Start frontend",
    StartBackend: "Start backend",
    WatchBackend: "Watch backend",
    WatchBot: "Watch bot",
    StartBot: "Start bot",
    StartAzuriteEmulator: "Start Azurite emulator",
    InstallAppInTeams: "Install app in Teams",
    GulpTrustDevCert: "gulp trust-dev-cert",
    GulpServe: "gulp serve",
    Provision: "Provision",
    Deploy: "Deploy",
    DeployTestTool: "Deploy (Test Tool)", // V3
});
exports.TaskDefaultValue = Object.freeze({
    checkPrerequisites: {
        ports: {
            tabService: 53000,
            backendService: 7071,
            backendDebug: 9229,
            botService: 3978,
            botDebug: 9239,
            spfxService: 4321,
        },
    },
    npmInstall: {
        npmInstallArgs: ["--no-audit"],
    },
    startLocalTunnel: {
        ngrokArgs: "http 3978 --log=stdout --log-format=logfmt",
        ngrokPath: "ngrok",
        writeToEnvironmentFile: {
            endpoint: "BOT_ENDPOINT",
            domain: "BOT_DOMAIN",
        },
        devTunnel: {
            bot: {
                port: 3978,
                protocol: "http",
                access: "public",
            },
        },
    },
    setUpTab: {
        baseUrl: "https://localhost:53000",
    },
    setUpBot: {
        botMessagingEndpoint: "/api/messages",
    },
    env: "local",
});
exports.Prerequisite = Object.freeze({
    nodejs: "nodejs",
    m365Account: "m365Account",
    copilotAccess: "copilotAccess",
    devCert: "devCert",
    func: "func",
    ngrok: "ngrok",
    dotnet: "dotnet",
    portOccupancy: "portOccupancy",
    vxTestApp: "vxTestApp", // TODO(aochengwang): maybe change app name
});
exports.TunnelType = Object.freeze({
    devTunnel: "dev-tunnel",
    ngrok: "ngrok",
});
//# sourceMappingURL=constants.js.map