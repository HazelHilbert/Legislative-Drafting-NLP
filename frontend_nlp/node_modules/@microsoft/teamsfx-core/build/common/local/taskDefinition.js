// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TaskDefinition = void 0;
const tslib_1 = require("tslib");
const constants_1 = require("./constants");
const path_1 = tslib_1.__importDefault(require("path"));
const system_1 = require("../deps-checker/util/system");
const create_1 = require("../../question/create");
class TaskDefinition {
    static frontendStart(workspaceFolder) {
        return {
            name: "frontend start",
            command: "npx react-scripts start",
            cwd: path_1.default.join(workspaceFolder, constants_1.FolderName.Frontend),
            execOptions: {
                needShell: true,
            },
            isBackground: true,
        };
    }
    static backendStart(workspaceFolder, programmingLanguage, funcCommand, enableLanguageWorker) {
        // NOTE: properly handle quoting and escaping to work on windows (both powershell and cmd), linux and osx
        const languageWorkerArg = enableLanguageWorker ? `--language-worker="--inspect=9229"` : "";
        const args = programmingLanguage === create_1.ProgrammingLanguage.TS
            ? `start --typescript ${languageWorkerArg} --port "7071" --cors "*"`
            : `start --javascript ${languageWorkerArg} --port "7071" --cors "*"`;
        return {
            name: "backend start",
            command: `${funcCommand} ${args}`,
            cwd: path_1.default.join(workspaceFolder, constants_1.FolderName.Function),
            execOptions: {
                needShell: true,
                needCmd: system_1.isWindows(),
            },
            isBackground: true,
        };
    }
    static backendWatch(workspaceFolder) {
        return {
            name: "backend watch",
            command: "npx tsc --watch",
            cwd: path_1.default.join(workspaceFolder, constants_1.FolderName.Function),
            execOptions: {
                needShell: true,
            },
            isBackground: true,
        };
    }
    static authStart(dotnetExecPath, authServicePath) {
        return {
            name: "auth start",
            command: dotnetExecPath,
            args: ["Microsoft.TeamsFx.SimpleAuth.dll"],
            cwd: authServicePath,
            execOptions: {
                needShell: false,
            },
            isBackground: true,
        };
    }
    static botStart(workspaceFolder, programmingLanguage, enableInspect) {
        // TODO: tell nodemon which files to watch (depends on bot's decision)
        const inspectArg = enableInspect ? "--inspect=9239" : "";
        const command = programmingLanguage === create_1.ProgrammingLanguage.TS
            ? `npx nodemon --exec node ${inspectArg} --signal SIGINT -r ts-node/register index.ts`
            : `npx nodemon ${inspectArg} --signal SIGINT index.js`;
        return {
            name: "bot start",
            command: command,
            cwd: path_1.default.join(workspaceFolder, constants_1.FolderName.Bot),
            execOptions: {
                needShell: true,
            },
            isBackground: true,
        };
    }
    static funcHostedBotWatch(workspaceFolder) {
        return {
            name: "bot watch",
            // command is never used for the new local preview in CLI.
            command: "npm run watch:teamsfx",
            cwd: path_1.default.join(workspaceFolder, constants_1.FolderName.Bot),
            execOptions: {
                needShell: true,
            },
            isBackground: true,
        };
    }
    static funcHostedBotStart(workspaceFolder) {
        return {
            name: "bot start",
            // command is never used for the new local preview in CLI.
            command: `npm run dev:teamsfx`,
            cwd: path_1.default.join(workspaceFolder, constants_1.FolderName.Bot),
            execOptions: {
                needShell: true,
                needCmd: system_1.isWindows(),
            },
            isBackground: true,
        };
    }
    static funcHostedBotAzurite(workspaceFolder) {
        return {
            name: "start Azurite emulator",
            command: "npm run prepare-storage:teamsfx",
            cwd: path_1.default.join(workspaceFolder, constants_1.FolderName.Bot),
            execOptions: {
                needShell: true,
            },
            isBackground: true,
        };
    }
    static ngrokStart(workspaceFolder, skipNgrok, ngrokBinFolders) {
        var _a;
        return {
            name: "ngrok start",
            command: skipNgrok
                ? "echo 'Skip starting ngrok, and will use predefined bot endpoint.'"
                : "ngrok http 3978 --log=stdout",
            env: ngrokBinFolders
                ? {
                    PATH: `${ngrokBinFolders.join(path_1.default.delimiter)}${path_1.default.delimiter}${(_a = process.env.PATH) !== null && _a !== void 0 ? _a : ""}`,
                }
                : undefined,
            cwd: path_1.default.join(workspaceFolder, constants_1.FolderName.Bot),
            execOptions: {
                needShell: true,
                needCmd: system_1.isWindows(),
            },
            isBackground: !skipNgrok,
        };
    }
    static frontendInstall(workspaceFolder) {
        return {
            name: "frontend npm install",
            command: constants_1.npmInstallCommand,
            cwd: path_1.default.join(workspaceFolder, constants_1.FolderName.Frontend),
            execOptions: {
                needShell: true,
            },
            isBackground: false,
        };
    }
    static backendInstall(workspaceFolder) {
        return {
            name: "backend npm install",
            command: constants_1.npmInstallCommand,
            cwd: path_1.default.join(workspaceFolder, constants_1.FolderName.Function),
            execOptions: {
                needShell: true,
            },
            isBackground: false,
        };
    }
    static backendExtensionsInstall(workspaceFolder, dotnetExecPath) {
        return {
            name: "backend extensions install",
            command: dotnetExecPath,
            args: ["build", "extensions.csproj", "-o", "bin", "--ignore-failed-sources"],
            cwd: path_1.default.join(workspaceFolder, constants_1.FolderName.Function),
            execOptions: {
                needShell: false,
            },
            isBackground: false,
        };
    }
    static botInstall(workspaceFolder) {
        return {
            name: "bot npm install",
            command: constants_1.npmInstallCommand,
            cwd: path_1.default.join(workspaceFolder, constants_1.FolderName.Bot),
            execOptions: {
                needShell: true,
            },
            isBackground: false,
        };
    }
    static spfxInstall(workspaceFolder) {
        return {
            name: "spfx npm install",
            command: constants_1.npmInstallCommand,
            cwd: path_1.default.join(workspaceFolder, constants_1.FolderName.SPFx),
            execOptions: {
                needShell: true,
            },
            isBackground: false,
        };
    }
    static gulpCert(workspaceFolder) {
        const spfxRoot = path_1.default.join(workspaceFolder, constants_1.FolderName.SPFx);
        return {
            name: "gulp trust-dev-cert",
            command: "node",
            args: [`${spfxRoot}/node_modules/gulp/bin/gulp.js`, "trust-dev-cert", "--no-color"],
            cwd: spfxRoot,
            execOptions: {
                needShell: false,
            },
            isBackground: false,
        };
    }
    static gulpServe(workspaceFolder) {
        const spfxRoot = path_1.default.join(workspaceFolder, constants_1.FolderName.SPFx);
        return {
            name: "gulp serve",
            command: "node",
            args: [`${spfxRoot}/node_modules/gulp/bin/gulp.js`, "serve", "--nobrowser", "--no-color"],
            cwd: spfxRoot,
            execOptions: {
                needShell: false,
            },
            isBackground: true,
        };
    }
}
exports.TaskDefinition = TaskDefinition;
//# sourceMappingURL=taskDefinition.js.map