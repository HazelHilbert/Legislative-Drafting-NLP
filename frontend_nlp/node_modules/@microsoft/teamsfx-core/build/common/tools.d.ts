import { Tunnel } from "@microsoft/dev-tunnels-contracts";
import { AzureAccountProvider, FxError, M365TokenProvider, Result, SubscriptionInfo, UserInteraction } from "@microsoft/teamsfx-api";
export declare const deepCopy: <T>(target: T) => T;
export declare function isUserCancelError(error: Error): boolean;
export declare function isCheckAccountError(error: Error): boolean;
export declare function askSubscription(azureAccountProvider: AzureAccountProvider, ui: UserInteraction, activeSubscriptionId?: string): Promise<Result<SubscriptionInfo, FxError>>;
export declare function getResourceGroupInPortal(subscriptionId?: string, tenantId?: string, resourceGroupName?: string): string | undefined;
export declare function compileHandlebarsTemplateString(templateString: string, context: any): string;
export declare function getResourceGroupNameFromResourceId(resourceId: string): string;
export declare function parseFromResourceId(pattern: RegExp, resourceId: string): string;
export declare function waitSeconds(second: number): Promise<void>;
export declare function getUuid(): string;
export declare function isSPFxProject(projectSettings?: any): boolean;
export declare function isVideoFilterProject(projectPath: string): Promise<Result<boolean, FxError>>;
export declare function getHashedEnv(envName: string): string;
export declare function getAllowedAppMaps(): Record<string, string>;
export declare function getCopilotStatus(token: string): Promise<boolean | undefined>;
export declare function getSideloadingStatus(token: string): Promise<boolean | undefined>;
export declare const AppStudioScopes: string[];
export declare const AuthSvcScopes: string[];
export declare const GraphScopes: string[];
export declare const GraphReadUserScopes: string[];
export declare const SPFxScopes: (tenant: string) => string[];
export declare const AzureScopes: string[];
export declare function getSPFxTenant(graphToken: string): Promise<string>;
export declare function getSPFxToken(m365TokenProvider: M365TokenProvider): Promise<string | undefined>;
/**
 * Get and set regin for App Studio client
 * @param m365TokenProvider
 */
export declare function setRegion(authSvcToken: string): Promise<void>;
export declare function ConvertTokenToJson(token: string): Record<string, unknown>;
export declare function getFixedCommonProjectSettings(rootPath: string | undefined): {
    projectId: any;
} | undefined;
export declare function listDevTunnels(token: string): Promise<Result<Tunnel[], FxError>>;
//# sourceMappingURL=tools.d.ts.map