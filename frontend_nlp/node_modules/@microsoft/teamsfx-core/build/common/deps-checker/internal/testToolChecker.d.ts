import { DependencyStatus, DepsChecker, TestToolInstallOptions } from "../depsChecker";
declare enum InstallType {
    Global = "global",
    Portable = "portable"
}
declare type TestToolDependencyStatus = Omit<DependencyStatus, "isInstalled"> & ({
    isInstalled: true;
    installType: InstallType;
} | {
    isInstalled: false;
});
export declare class TestToolChecker implements DepsChecker {
    private telemetryProperties;
    private readonly name;
    private readonly npmPackageName;
    private readonly timeout;
    private readonly checkUpdateTimeout;
    private readonly commandName;
    private readonly portableDirName;
    private readonly defaultUpdateInterval;
    constructor();
    getInstallationInfo(installOptions: TestToolInstallOptions): Promise<TestToolDependencyStatus>;
    resolve(installOptions: TestToolInstallOptions): Promise<DependencyStatus>;
    private install;
    private hasNewVersionReleasedInRange;
    private autoUpdate;
    private validateInstallInfoFile;
    private readInstallInfoFile;
    private writeInstallInfoFile;
    private findLatestInstalledPortableVersion;
    private checkVersion;
    private queryVersion;
    private hasNode;
    private hasNPM;
    private npmInstall;
    private findLocalNpmPackage;
    private getBinFolder;
    private getPortableVersionsDir;
    private getPortableInstallPath;
    private getInstallInfoPath;
    private getSuccessDepsInfo;
    private createFailureDepsInfo;
}
export {};
//# sourceMappingURL=testToolChecker.d.ts.map