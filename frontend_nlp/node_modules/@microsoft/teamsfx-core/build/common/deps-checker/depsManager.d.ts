import { DepsLogger } from "./depsLogger";
import { DepsTelemetry } from "./depsTelemetry";
import { DependencyStatus, DepsType, InstallOptions } from "./depsChecker";
export declare type DepsOptions = {
    fastFail?: boolean;
    doctor?: boolean;
};
export declare class DepsManager {
    private static readonly depsOrders;
    private readonly logger;
    private readonly emptyLogger;
    private readonly telemetry;
    constructor(logger: DepsLogger, telemetry: DepsTelemetry);
    /**
     * Ensure dependencies installed.
     * Installation Orders:
     *      Node, Dotnet, FuncCoreTools, Ngrok
     * @param dependencies Dependency types. If it is empty, do nothing.
     * @param options If fastFail is false, it will continue even if one of the dependencies fails to install. Default value is true.
     */
    ensureDependencies(dependencies: DepsType[], { fastFail, doctor }: DepsOptions): Promise<DependencyStatus[]>;
    ensureDependency(depsType: DepsType, doctor?: boolean, options?: InstallOptions): Promise<DependencyStatus>;
    /**
     * @deprecated
     * Get status without installOptions. Only used in legacy code.
     */
    getStatus(depsTypes: DepsType[]): Promise<DependencyStatus[]>;
    getStatusWithInstallOptions(depsType: DepsType, options: InstallOptions): Promise<DependencyStatus>;
    private resolve;
    static sortBySequence(dependencies: DepsType[]): DepsType[];
}
//# sourceMappingURL=depsManager.d.ts.map