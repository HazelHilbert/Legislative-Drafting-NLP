/// <reference types="node" />
import * as cp from "child_process";
export interface DebugLogger {
    debug(message: string): void;
}
export declare namespace cpUtils {
    function executeCommand(workingDirectory: string | undefined, logger: DebugLogger | undefined, options: cp.SpawnOptions | undefined, command: string, ...args: string[]): Promise<string>;
    function tryExecuteCommand(workingDirectory: string | undefined, logger: DebugLogger | undefined, additionalOptions: cp.SpawnOptions | undefined, command: string, ...args: string[]): Promise<ICommandResult>;
    interface ICommandResult {
        code: number;
        cmdOutput: string;
        cmdOutputIncludingStderr: string;
        formattedArgs: string;
    }
    /**
     * Ensures spaces and special characters (most notably $) are preserved
     */
    function wrapArgInQuotes(arg: string): string;
    /**
     * timeout with millisecond
     */
    function withTimeout(millis: number, promise: Promise<any>, msg: string): Promise<any>;
}
//# sourceMappingURL=cpUtils.d.ts.map