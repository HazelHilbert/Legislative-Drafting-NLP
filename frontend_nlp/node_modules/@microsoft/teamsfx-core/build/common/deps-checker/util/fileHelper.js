"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
exports.cleanup = exports.rename = exports.createSymlink = exports.unlinkSymlink = void 0;
const tslib_1 = require("tslib");
/**
 * @author Xiaofu Huang <xiaofhua@microsoft.com>
 */
const fs = tslib_1.__importStar(require("fs-extra"));
const helpLink_1 = require("../constant/helpLink");
const message_1 = require("../constant/message");
const depsError_1 = require("../depsError");
async function unlinkSymlink(linkFilePath) {
    try {
        const stat = await fs.lstat(linkFilePath);
        if (stat.isSymbolicLink()) {
            await fs.unlink(linkFilePath);
        }
    }
    catch (error) {
        const statError = error;
        if (statError.code !== "ENOENT") {
            throw error;
        }
    }
}
exports.unlinkSymlink = unlinkSymlink;
async function createSymlink(target, linkFilePath) {
    await unlinkSymlink(linkFilePath);
    // check if destination already exists
    if (await fs.pathExists(linkFilePath)) {
        throw new depsError_1.DepsCheckerError(message_1.Messages.symlinkDirAlreadyExist(), helpLink_1.v3DefaultHelpLink);
    }
    return await fs.ensureSymlink(target, linkFilePath, 
    /* Only used for Windows. Directory junction is similar to directory link but does not require admin permission. */
    "junction");
}
exports.createSymlink = createSymlink;
async function rename(oldPath, newPath) {
    if (await fs.pathExists(newPath)) {
        await fs.remove(newPath);
    }
    await fs.rename(oldPath, newPath);
}
exports.rename = rename;
// sliently remove file or dir
async function cleanup(path) {
    try {
        await fs.remove(path);
    }
    catch (_a) { }
}
exports.cleanup = cleanup;
//# sourceMappingURL=fileHelper.js.map