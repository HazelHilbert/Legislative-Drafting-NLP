"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
exports.TelemetryMessurement = exports.TelemetryProperties = exports.TelemtryMessages = exports.DepsCheckerEvent = void 0;
var DepsCheckerEvent;
(function (DepsCheckerEvent) {
    DepsCheckerEvent["nodeVersion"] = "node-version";
    DepsCheckerEvent["nodeNotFound"] = "node-not-found";
    DepsCheckerEvent["nodeNotSupportedForProject"] = "node-not-supported-for-project";
    DepsCheckerEvent["nodeNotLts"] = "node-not-lts";
    DepsCheckerEvent["dotnetCheckSkipped"] = "dotnet-check-skipped";
    DepsCheckerEvent["dotnetAlreadyInstalled"] = "dotnet-already-installed";
    DepsCheckerEvent["dotnetInstallCompleted"] = "dotnet-install-completed";
    DepsCheckerEvent["dotnetInstallError"] = "dotnet-install-error";
    DepsCheckerEvent["dotnetInstallScriptCompleted"] = "dotnet-install-script-completed";
    DepsCheckerEvent["dotnetInstallScriptError"] = "dotnet-install-script-error";
    DepsCheckerEvent["dotnetValidationError"] = "dotnet-validation-error";
    DepsCheckerEvent["dotnetSearchDotnetSdks"] = "dotnet-search-dotnet-sdks";
})(DepsCheckerEvent = exports.DepsCheckerEvent || (exports.DepsCheckerEvent = {}));
var TelemtryMessages;
(function (TelemtryMessages) {
    TelemtryMessages["failedToExecDotnetScript"] = "failed to exec dotnet script.";
    TelemtryMessages["failedToValidateDotnet"] = "failed to validate dotnet.";
    TelemtryMessages["failedToSearchDotnetSdks"] = "failed to search dotnet sdks.";
})(TelemtryMessages = exports.TelemtryMessages || (exports.TelemtryMessages = {}));
var TelemetryProperties;
(function (TelemetryProperties) {
    TelemetryProperties["SymlinkFuncVersion"] = "symlink-func-version";
    TelemetryProperties["SelectedPortableFuncVersion"] = "selected-portable-func-version";
    TelemetryProperties["HistoryFuncVersion"] = "history-func-version";
    TelemetryProperties["VersioningFuncVersions"] = "versioning-func-versions";
    TelemetryProperties["GlobalFuncVersion"] = "global-func-version";
    TelemetryProperties["InstalledFuncVersion"] = "installed-func-version";
    TelemetryProperties["SymlinkFuncVersionError"] = "symlink-func-version-error";
    TelemetryProperties["HistoryFuncVersionError"] = "history-func-version-error";
    TelemetryProperties["VersioningFuncVersionError"] = "versioning-func-version-error";
    TelemetryProperties["GlobalFuncVersionError"] = "global-func-version-error";
    TelemetryProperties["InstallFuncError"] = "install-func-error";
    TelemetryProperties["InstalledTestToolVersion"] = "installed-test-tool-version";
    TelemetryProperties["InstallTestToolError"] = "install-test-tool-error";
    TelemetryProperties["SymlinkTestToolVersion"] = "symlink-test-tool-version";
    TelemetryProperties["SymlinkTestToolVersionError"] = "symlink-test-tool-version-error";
    TelemetryProperties["SelectedPortableTestToolVersion"] = "selected-test-tool-version";
    TelemetryProperties["VersioningTestToolVersionError"] = "versioning-test-tool-version-error";
    TelemetryProperties["GlobalTestToolVersion"] = "global-test-tool-version";
    TelemetryProperties["GlobalTestToolVersionError"] = "global-test-tool-version-error";
    TelemetryProperties["TestToolLastUpdateTimestamp"] = "test-tool-last-update-timestamp";
    TelemetryProperties["TestToolUpdatePreviousVersion"] = "test-tool-update-previous-version";
    TelemetryProperties["TestToolUpdateError"] = "test-tool-update-error";
})(TelemetryProperties = exports.TelemetryProperties || (exports.TelemetryProperties = {}));
var TelemetryMessurement;
(function (TelemetryMessurement) {
    TelemetryMessurement["completionTime"] = "completion-time";
})(TelemetryMessurement = exports.TelemetryMessurement || (exports.TelemetryMessurement = {}));
//# sourceMappingURL=telemetry.js.map