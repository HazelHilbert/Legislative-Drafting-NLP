"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
exports.Messages = void 0;
const localizeUtils_1 = require("../../localizeUtils");
const helpLink_1 = require("./helpLink");
exports.Messages = {
    // learnMoreButtonText: getLocalizedString("depChecker.learnMoreButtonText"),
    defaultErrorMessage: () => [
        localizeUtils_1.getDefaultString("error.depChecker.DefaultErrorMessage"),
        localizeUtils_1.getLocalizedString("error.depChecker.DefaultErrorMessage"),
    ],
    needInstallNpm: () => localizeUtils_1.getLocalizedString("depChecker.needInstallNpm"),
    failToValidateFuncCoreTool: () => localizeUtils_1.getLocalizedString("depChecker.failToValidateFuncCoreTool"),
    portableFuncNodeNotMatched: (nodeVersion, funcVersion) => localizeUtils_1.getLocalizedString("depChecker.portableFuncNodeNotMatched")
        .replace("@NodeVersion", nodeVersion)
        .replace("@FuncVersion", funcVersion),
    symlinkDirAlreadyExist: () => localizeUtils_1.getLocalizedString("depChecker.symlinkDirAlreadyExist"),
    invalidFuncVersion: (version) => localizeUtils_1.getLocalizedString("depChecker.invalidFuncVersion", version),
    noSentinelFile: () => localizeUtils_1.getLocalizedString("depChecker.noSentinelFile"),
    funcVersionNotMatch: (funcVersion, expectedFuncVersion) => localizeUtils_1.getLocalizedString("depChecker.funcVersionNotMatch", funcVersion, expectedFuncVersion),
    downloadDotnet: () => localizeUtils_1.getLocalizedString("depChecker.downloadDotnet"),
    finishInstallDotnet: () => localizeUtils_1.getLocalizedString("depChecker.finishInstallDotnet"),
    useGlobalDotnet: () => localizeUtils_1.getLocalizedString("depChecker.useGlobalDotnet"),
    dotnetInstallStderr: () => localizeUtils_1.getLocalizedString("depChecker.dotnetInstallStderr"),
    dotnetInstallErrorCode: () => localizeUtils_1.getLocalizedString("depChecker.dotnetInstallErrorCode"),
    NodeNotFound: () => localizeUtils_1.getLocalizedString("depChecker.NodeNotFound", helpLink_1.nodeInstallationLink),
    // In v3, the message will be displayed in the output.
    // TODO: add localized string to FxError.displayMessage
    V3NodeNotSupported: (currentVersion, supportedVersions) => localizeUtils_1.getDefaultString("depChecker.V3NodeNotSupported", currentVersion, supportedVersions, helpLink_1.nodeInstallationLink),
    NodeNotLts: (currentVersion, supportedVersions) => localizeUtils_1.getDefaultString("depChecker.NodeNotLts", currentVersion, supportedVersions, helpLink_1.nodeInstallationLink),
    dotnetNotFound: () => localizeUtils_1.getLocalizedString("depChecker.dotnetNotFound"),
    // depsNotFound: () => getLocalizedString("depChecker.depsNotFound"),
    testToolVersionNotMatch: (version, expectedVersion) => localizeUtils_1.getLocalizedString("depChecker.testToolVersionNotMatch", version, expectedVersion),
    failToValidateTestTool: (errorMessage) => localizeUtils_1.getLocalizedString("depChecker.failedToValidateTestTool", errorMessage),
    failToValidateVxTestAppInstallOptions: () => localizeUtils_1.getLocalizedString("depChecker.failToValidateVxTestAppInstallOptions"),
    failToValidateVxTestApp: () => localizeUtils_1.getLocalizedString("depChecker.failToValidateVxTestApp"),
    failToDownloadFromUrl: () => localizeUtils_1.getLocalizedString("depChecker.failToDownloadFromUrl"),
    linuxDepsNotFound: () => localizeUtils_1.getLocalizedString("depChecker.linuxDepsNotFound"),
    // linuxDepsNotFoundHelpLinkMessage: () => getLocalizedString(
    //   "depChecker.linuxDepsNotFoundHelpLinkMessage"
    // ),
};
//# sourceMappingURL=message.js.map