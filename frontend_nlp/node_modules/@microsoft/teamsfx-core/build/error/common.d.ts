import { FxError, SystemError, UserError } from "@microsoft/teamsfx-api";
export declare class FileNotFoundError extends UserError {
    constructor(source: string, filePath: string, helpLink?: string);
}
export declare class MissingEnvironmentVariablesError extends UserError {
    constructor(source: string, variableNames: string, filePath?: string, helpLink?: string);
}
export declare class InvalidActionInputError extends UserError {
    constructor(actionName: string, parameters: string[], helpLink?: string);
}
export declare class InvalidProjectError extends UserError {
    constructor();
}
export declare class MultipleAuthError extends UserError {
    constructor(authNames: Set<string>);
}
export declare class MultipleServerError extends UserError {
    constructor(serverUrls: Set<string>);
}
export declare class InjectAPIKeyActionFailedError extends UserError {
    constructor();
}
export declare class JSONSyntaxError extends UserError {
    constructor(filePathOrContent: string, error: any, source?: string);
}
export declare class ReadFileError extends SystemError {
    constructor(e: Error, source?: string);
}
export declare class WriteFileError extends SystemError {
    constructor(e: Error, source?: string);
}
export declare class FilePermissionError extends UserError {
    constructor(e: Error, source?: string);
}
export declare class UnhandledError extends SystemError {
    constructor(e: Error, source?: string);
}
export declare class UnhandledUserError extends UserError {
    constructor(e: Error, source?: string, helpLink?: string);
}
export declare class InstallSoftwareError extends UserError {
    constructor(source: string, nameAndVersion: string, helpLink?: string);
}
export declare class MissingRequiredInputError extends UserError {
    constructor(name: string, source?: string);
}
export declare class InputValidationError extends UserError {
    constructor(name: string, reason: string, source?: string);
}
export declare class NoEnvFilesError extends UserError {
    constructor(source: string);
}
export declare class MissingRequiredFileError extends UserError {
    constructor(source: string, task: string, file: string);
}
export declare class HttpClientError extends UserError {
    constructor(error: any, actionName: string, responseBody: string, helpLink?: string);
}
export declare class HttpServerError extends SystemError {
    constructor(error: any, actionName: string, responseBody: string);
}
export declare class AccessGithubError extends UserError {
    constructor(url: string, source: string, error: any);
}
export declare class UserCancelError extends UserError {
    constructor(actionName?: string);
}
export declare class EmptyOptionError extends SystemError {
    constructor(name: string, source?: string);
}
export declare class NotImplementedError extends SystemError {
    constructor(source: string, method: string);
}
export declare class ConcurrentError extends UserError {
    constructor(source: string);
}
export declare class InternalError extends UserError {
    constructor(error: any, source: string);
}
export declare function assembleError(e: any, source?: string): FxError;
//# sourceMappingURL=common.d.ts.map