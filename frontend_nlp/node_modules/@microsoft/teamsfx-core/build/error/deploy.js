"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
exports.AzureStorageSetContainerPropertiesError = exports.AzureStorageGetContainerPropertiesError = exports.AzureStorageGetContainerError = exports.AzureStorageUploadFilesError = exports.AzureStorageClearBlobsError = exports.CheckDeploymentStatusError = exports.DeployZipPackageError = exports.GetPublishingCredentialsError = exports.CheckDeploymentStatusTimeoutError = exports.DeployEmptyFolderError = void 0;
const teamsfx_api_1 = require("@microsoft/teamsfx-api");
const localizeUtils_1 = require("../common/localizeUtils");
const types_1 = require("./types");
class DeployEmptyFolderError extends teamsfx_api_1.UserError {
    constructor(folderPath) {
        super({
            source: "azureDeploy",
            message: localizeUtils_1.getDefaultString("error.deploy.DeployEmptyFolderError", folderPath),
            displayMessage: localizeUtils_1.getLocalizedString("error.deploy.DeployEmptyFolderError", folderPath),
            categories: [types_1.ErrorCategory.Internal],
        });
    }
}
exports.DeployEmptyFolderError = DeployEmptyFolderError;
class CheckDeploymentStatusTimeoutError extends teamsfx_api_1.UserError {
    constructor(helpLink) {
        super({
            source: "azureDeploy",
            message: localizeUtils_1.getDefaultString("error.deploy.CheckDeploymentStatusTimeoutError"),
            displayMessage: localizeUtils_1.getLocalizedString("error.deploy.CheckDeploymentStatusTimeoutError"),
            helpLink: helpLink,
            categories: [types_1.ErrorCategory.External],
        });
    }
}
exports.CheckDeploymentStatusTimeoutError = CheckDeploymentStatusTimeoutError;
class GetPublishingCredentialsError extends teamsfx_api_1.UserError {
    constructor(appName, resourceGroup, error, helpLink) {
        super({
            source: "azureDeploy",
            message: localizeUtils_1.getDefaultString("error.deploy.GetPublishingCredentialsError", appName, resourceGroup, JSON.stringify(error, Object.getOwnPropertyNames(error)), "https://learn.microsoft.com/en-us/rest/api/appservice/web-apps/list-publishing-credentials#code-try-0"),
            displayMessage: localizeUtils_1.getLocalizedString("error.deploy.GetPublishingCredentialsError.Notification", appName, resourceGroup),
            helpLink: helpLink,
            error: error,
            categories: [types_1.ErrorCategory.External],
        });
    }
}
exports.GetPublishingCredentialsError = GetPublishingCredentialsError;
class DeployZipPackageError extends teamsfx_api_1.UserError {
    constructor(endpoint, error, helpLink) {
        super({
            source: "azureDeploy",
            message: localizeUtils_1.getDefaultString("error.deploy.DeployZipPackageError", endpoint, JSON.stringify(error, Object.getOwnPropertyNames(error)), "https://learn.microsoft.com/azure/app-service/deploy-zip?tabs=cli"),
            displayMessage: localizeUtils_1.getLocalizedString("error.deploy.DeployZipPackageError.Notification", endpoint),
            helpLink: helpLink,
            error: error,
            categories: [types_1.ErrorCategory.External],
        });
    }
}
exports.DeployZipPackageError = DeployZipPackageError;
class CheckDeploymentStatusError extends teamsfx_api_1.UserError {
    constructor(location, error, helpLink, displayMessage) {
        super({
            source: "azureDeploy",
            message: localizeUtils_1.getDefaultString("error.deploy.CheckDeploymentStatusError", location, JSON.stringify(error, Object.getOwnPropertyNames(error))),
            displayMessage: localizeUtils_1.getLocalizedString("error.deploy.CheckDeploymentStatusError", location, displayMessage || error.message),
            helpLink: helpLink,
            error: error,
            categories: [types_1.ErrorCategory.External],
        });
    }
}
exports.CheckDeploymentStatusError = CheckDeploymentStatusError;
class AzureStorageClearBlobsError extends teamsfx_api_1.UserError {
    constructor(storageName, errorResponse, helpLink) {
        super({
            source: "azureDeploy",
            message: localizeUtils_1.getDefaultString("error.deploy.AzureStorageClearBlobsError", storageName, JSON.stringify(errorResponse, Object.getOwnPropertyNames(errorResponse), 4)),
            displayMessage: localizeUtils_1.getLocalizedString("error.deploy.AzureStorageClearBlobsError.Notification", storageName),
            error: errorResponse,
            helpLink: helpLink,
            categories: [types_1.ErrorCategory.External],
        });
    }
}
exports.AzureStorageClearBlobsError = AzureStorageClearBlobsError;
class AzureStorageUploadFilesError extends teamsfx_api_1.UserError {
    constructor(storageName, localFolder, errorResponse, helpLink) {
        super({
            source: "azureDeploy",
            message: localizeUtils_1.getDefaultString("error.deploy.AzureStorageUploadFilesError", localFolder, storageName, JSON.stringify(errorResponse, Object.getOwnPropertyNames(errorResponse), 4)),
            displayMessage: localizeUtils_1.getLocalizedString("error.deploy.AzureStorageUploadFilesError.Notification", localFolder, storageName),
            helpLink: helpLink,
            error: errorResponse,
            categories: [types_1.ErrorCategory.External],
        });
    }
}
exports.AzureStorageUploadFilesError = AzureStorageUploadFilesError;
class AzureStorageGetContainerError extends teamsfx_api_1.UserError {
    constructor(storageName, containerName, error, helpLink) {
        super({
            source: "azureDeploy",
            message: localizeUtils_1.getDefaultString("error.deploy.AzureStorageGetContainerError", containerName, storageName, JSON.stringify(error, Object.getOwnPropertyNames(error))),
            displayMessage: localizeUtils_1.getLocalizedString("error.deploy.AzureStorageGetContainerError.Notification", containerName, storageName, error.message || ""),
            helpLink: helpLink,
            error: error,
            categories: [types_1.ErrorCategory.External],
        });
    }
}
exports.AzureStorageGetContainerError = AzureStorageGetContainerError;
class AzureStorageGetContainerPropertiesError extends teamsfx_api_1.UserError {
    constructor(storageName, containerName, error, helpLink) {
        super({
            source: "azureDeploy",
            message: localizeUtils_1.getDefaultString("error.deploy.AzureStorageGetContainerPropertiesError", containerName, storageName, JSON.stringify(error, Object.getOwnPropertyNames(error))),
            displayMessage: localizeUtils_1.getLocalizedString("error.deploy.AzureStorageGetContainerPropertiesError.Notification", containerName, storageName, error.message || ""),
            helpLink: helpLink,
            error: error,
            categories: [types_1.ErrorCategory.External],
        });
    }
}
exports.AzureStorageGetContainerPropertiesError = AzureStorageGetContainerPropertiesError;
class AzureStorageSetContainerPropertiesError extends teamsfx_api_1.UserError {
    constructor(storageName, containerName, error, helpLink) {
        super({
            source: "azureDeploy",
            message: localizeUtils_1.getDefaultString("error.deploy.AzureStorageSetContainerPropertiesError", containerName, storageName, JSON.stringify(error, Object.getOwnPropertyNames(error))),
            displayMessage: localizeUtils_1.getLocalizedString("error.deploy.AzureStorageSetContainerPropertiesError.Notification", containerName, storageName, error.message || ""),
            helpLink: helpLink,
            error: error,
            categories: [types_1.ErrorCategory.External],
        });
    }
}
exports.AzureStorageSetContainerPropertiesError = AzureStorageSetContainerPropertiesError;
//# sourceMappingURL=deploy.js.map