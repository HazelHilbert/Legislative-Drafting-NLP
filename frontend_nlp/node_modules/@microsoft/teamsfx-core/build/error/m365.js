"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
exports.M365TenantIdNotMatchError = exports.M365TenantIdNotFoundInTokenError = exports.M365TokenJSONNotFoundError = void 0;
const teamsfx_api_1 = require("@microsoft/teamsfx-api");
const constants_1 = require("../common/constants");
const localizeUtils_1 = require("../common/localizeUtils");
const types_1 = require("./types");
/**
 * Failed to get M365 token JSON object after sign in
 */
class M365TokenJSONNotFoundError extends teamsfx_api_1.SystemError {
    constructor() {
        const key = "error.m365.M365TokenJSONNotFoundError";
        const errorOptions = {
            source: "coordinator",
            name: "M365TokenJSONNotFoundError",
            message: localizeUtils_1.getDefaultString(key),
            displayMessage: localizeUtils_1.getLocalizedString(key),
            categories: [types_1.ErrorCategory.External],
        };
        super(errorOptions);
    }
}
exports.M365TokenJSONNotFoundError = M365TokenJSONNotFoundError;
/**
 * M365 tenant id in token object is not available
 */
class M365TenantIdNotFoundInTokenError extends teamsfx_api_1.SystemError {
    constructor() {
        const key = "error.m365.M365TenantIdNotFoundInTokenError";
        const errorOptions = {
            source: "coordinator",
            name: "M365TenantIdNotFoundInTokenError",
            message: localizeUtils_1.getDefaultString(key),
            displayMessage: localizeUtils_1.getLocalizedString(key),
            categories: [types_1.ErrorCategory.External],
        };
        super(errorOptions);
    }
}
exports.M365TenantIdNotFoundInTokenError = M365TenantIdNotFoundInTokenError;
/**
 * The M365 tenant id in .env does not match with the one in token signed in
 */
class M365TenantIdNotMatchError extends teamsfx_api_1.UserError {
    constructor(signedInTenantId, dotEnvTenantId, clearKeys) {
        const key = "error.m365.M365TenantIdNotMatchError";
        const errorOptions = {
            source: "coordinator",
            name: "M365TenantIdNotMatchError",
            message: localizeUtils_1.getDefaultString(key, signedInTenantId, dotEnvTenantId, clearKeys),
            displayMessage: localizeUtils_1.getLocalizedString(key, signedInTenantId, dotEnvTenantId, clearKeys),
            helpLink: constants_1.HelpLinks.SwitchTenant,
            categories: [types_1.ErrorCategory.External],
        };
        super(errorOptions);
    }
}
exports.M365TenantIdNotMatchError = M365TenantIdNotMatchError;
//# sourceMappingURL=m365.js.map