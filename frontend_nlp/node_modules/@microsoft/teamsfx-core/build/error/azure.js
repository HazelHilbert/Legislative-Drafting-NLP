"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
exports.ListResourceGroupLocationsError = exports.GetResourceGroupError = exports.ListResourceGroupsError = exports.CheckResourceGroupExistenceError = exports.CreateResourceGroupError = exports.ResourceGroupNotExistError = exports.ResourceGroupConflictError = exports.SelectSubscriptionError = exports.InvalidAzureSubscriptionError = exports.InvalidAzureCredentialError = void 0;
const teamsfx_api_1 = require("@microsoft/teamsfx-api");
const localizeUtils_1 = require("../common/localizeUtils");
const types_1 = require("./types");
/**
 * Azure token/credential is invalid (usually not happen because TTK will ask user to login)
 */
class InvalidAzureCredentialError extends teamsfx_api_1.SystemError {
    constructor(source) {
        const key = "error.azure.InvalidAzureCredentialError";
        const errorOptions = {
            source: source || "coordinator",
            name: "InvalidAzureCredentialError",
            message: localizeUtils_1.getDefaultString(key),
            displayMessage: localizeUtils_1.getLocalizedString(key),
            categories: [types_1.ErrorCategory.External],
        };
        super(errorOptions);
    }
}
exports.InvalidAzureCredentialError = InvalidAzureCredentialError;
/**
 * Azure subscription not available in the login tenant
 * may caused by user's account it not right
 */
class InvalidAzureSubscriptionError extends teamsfx_api_1.UserError {
    constructor(subscriptionId, source) {
        const key = "error.azure.InvalidAzureSubscriptionError";
        const errorOptions = {
            source: source || "coordinator",
            name: "InvalidAzureSubscriptionError",
            message: localizeUtils_1.getDefaultString(key, subscriptionId),
            displayMessage: localizeUtils_1.getLocalizedString(key, subscriptionId),
            categories: [types_1.ErrorCategory.External],
        };
        super(errorOptions);
    }
}
exports.InvalidAzureSubscriptionError = InvalidAzureSubscriptionError;
/**
 * Failed to select subscription in current account.
 */
class SelectSubscriptionError extends teamsfx_api_1.UserError {
    constructor(source) {
        const key = "error.azure.SelectSubscriptionError";
        const errorOptions = {
            source: source || "coordinator",
            name: "SelectSubscriptionError",
            message: localizeUtils_1.getDefaultString(key),
            displayMessage: localizeUtils_1.getLocalizedString(key),
            categories: [types_1.ErrorCategory.External],
        };
        super(errorOptions);
    }
}
exports.SelectSubscriptionError = SelectSubscriptionError;
/**
 * Resource group name exists when trying to create it
 */
class ResourceGroupConflictError extends teamsfx_api_1.UserError {
    constructor(resourceGroupName, subscriptionId) {
        const key = "error.azure.ResourceGroupConflictError";
        const errorOptions = {
            source: "coordinator",
            name: "ResourceGroupConflictError",
            message: localizeUtils_1.getDefaultString(key, resourceGroupName, subscriptionId),
            displayMessage: localizeUtils_1.getLocalizedString(key, resourceGroupName, subscriptionId),
            categories: [types_1.ErrorCategory.External],
        };
        super(errorOptions);
    }
}
exports.ResourceGroupConflictError = ResourceGroupConflictError;
/**
 * Resource group does not exist when try to use it
 */
class ResourceGroupNotExistError extends teamsfx_api_1.UserError {
    constructor(resourceGroupName, subscriptionId) {
        const key = "error.azure.ResourceGroupNotExistError";
        const errorOptions = {
            source: "coordinator",
            name: "ResourceGroupNotExistError",
            message: localizeUtils_1.getDefaultString(key, resourceGroupName, subscriptionId),
            displayMessage: localizeUtils_1.getLocalizedString(key, resourceGroupName, subscriptionId),
            categories: [types_1.ErrorCategory.External],
        };
        super(errorOptions);
    }
}
exports.ResourceGroupNotExistError = ResourceGroupNotExistError;
/**
 * Create resource group error
 */
class CreateResourceGroupError extends teamsfx_api_1.UserError {
    constructor(resourceGroupName, subscriptionId, message, error) {
        const key = "error.azure.CreateResourceGroupError";
        const errorOptions = {
            source: "coordinator",
            name: "CreateResourceGroupError",
            message: localizeUtils_1.getDefaultString(key, resourceGroupName, subscriptionId, message),
            displayMessage: localizeUtils_1.getLocalizedString(key, resourceGroupName, subscriptionId, message),
            categories: [types_1.ErrorCategory.External],
            error: error,
        };
        super(errorOptions);
    }
}
exports.CreateResourceGroupError = CreateResourceGroupError;
/**
 * Check resource group existence error
 */
class CheckResourceGroupExistenceError extends teamsfx_api_1.UserError {
    constructor(resourceGroupName, subscriptionId, message, error) {
        const key = "error.azure.CheckResourceGroupExistenceError";
        const errorOptions = {
            source: "coordinator",
            name: "CheckResourceGroupExistenceError",
            message: localizeUtils_1.getDefaultString(key, resourceGroupName, subscriptionId, message),
            displayMessage: localizeUtils_1.getLocalizedString(key, resourceGroupName, subscriptionId, message),
            categories: [types_1.ErrorCategory.External],
            error: error,
        };
        super(errorOptions);
    }
}
exports.CheckResourceGroupExistenceError = CheckResourceGroupExistenceError;
/**
 * List resource groups error
 */
class ListResourceGroupsError extends teamsfx_api_1.UserError {
    constructor(subscriptionId, message, error) {
        const key = "error.azure.ListResourceGroupsError";
        const errorOptions = {
            source: "coordinator",
            name: "ListResourceGroupsError",
            message: localizeUtils_1.getDefaultString(key, subscriptionId, message),
            displayMessage: localizeUtils_1.getLocalizedString(key, subscriptionId, message),
            categories: [types_1.ErrorCategory.External],
            error: error,
        };
        super(errorOptions);
    }
}
exports.ListResourceGroupsError = ListResourceGroupsError;
/**
 * Get resource group error
 */
class GetResourceGroupError extends teamsfx_api_1.UserError {
    constructor(resourceGroupName, subscriptionId, message, error) {
        const key = "error.azure.GetResourceGroupError";
        const errorOptions = {
            source: "coordinator",
            name: "GetResourceGroupError",
            message: localizeUtils_1.getDefaultString(key, resourceGroupName, subscriptionId, message),
            displayMessage: localizeUtils_1.getLocalizedString(key, resourceGroupName, subscriptionId, message),
            categories: [types_1.ErrorCategory.External],
            error: error,
        };
        super(errorOptions);
    }
}
exports.GetResourceGroupError = GetResourceGroupError;
/**
 * List resource group locations error
 */
class ListResourceGroupLocationsError extends teamsfx_api_1.UserError {
    constructor(subscriptionId, message, error) {
        const key = "error.azure.ListResourceGroupLocationsError";
        const errorOptions = {
            source: "coordinator",
            name: "ListResourceGroupLocationsError",
            message: localizeUtils_1.getDefaultString(key, subscriptionId, message),
            displayMessage: localizeUtils_1.getLocalizedString(key, subscriptionId, message),
            categories: [types_1.ErrorCategory.External],
            error: error,
        };
        super(errorOptions);
    }
}
exports.ListResourceGroupLocationsError = ListResourceGroupLocationsError;
//# sourceMappingURL=azure.js.map