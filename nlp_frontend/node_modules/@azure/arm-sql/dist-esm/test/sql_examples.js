/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { __asyncValues, __awaiter } from "tslib";
import { env, Recorder, isPlaybackMode, } from "@azure-tools/test-recorder";
import { createTestCredential } from "@azure-tools/test-credential";
import { assert } from "chai";
import { SqlManagementClient } from "../src/sqlManagementClient";
const replaceableVariables = {
    AZURE_CLIENT_ID: "azure_client_id",
    AZURE_CLIENT_SECRET: "azure_client_secret",
    AZURE_TENANT_ID: "88888888-8888-8888-8888-888888888888",
    SUBSCRIPTION_ID: "azure_subscription_id"
};
const recorderOptions = {
    envSetupForPlayback: replaceableVariables
};
export const testPollingOptions = {
    updateIntervalInMs: isPlaybackMode() ? 0 : undefined,
};
describe("Sql test", () => {
    let recorder;
    let subscriptionId;
    let client;
    let location;
    let resourceGroup;
    let serverName;
    let databaseName;
    beforeEach(function () {
        return __awaiter(this, void 0, void 0, function* () {
            recorder = new Recorder(this.currentTest);
            yield recorder.start(recorderOptions);
            subscriptionId = env.SUBSCRIPTION_ID || '';
            // This is an example of how the environment variables are used
            const credential = createTestCredential();
            client = new SqlManagementClient(credential, subscriptionId, recorder.configureClientOptions({}));
            location = "eastus";
            resourceGroup = "myjstest";
            databaseName = "mydatabasezzzz";
            serverName = "myserverppp";
        });
    });
    afterEach(function () {
        return __awaiter(this, void 0, void 0, function* () {
            yield recorder.stop();
        });
    });
    it("servers create test", function () {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield client.servers.beginCreateOrUpdateAndWait(resourceGroup, serverName, {
                location: "eastus",
                administratorLogin: "dummylogin",
                administratorLoginPassword: "Placeholder123",
                version: "12.0"
            }, testPollingOptions);
            assert.equal(res.name, serverName);
        });
    });
    it("databases create test", function () {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield client.databases.beginCreateOrUpdateAndWait(resourceGroup, serverName, databaseName, {
                location: "eastus",
                readScale: "Disabled"
            }, testPollingOptions);
            assert.equal(res.name, databaseName);
        });
    });
    it("servers get test", function () {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield client.servers.get(resourceGroup, serverName);
            assert.equal(res.name, serverName);
        });
    });
    it("databases get test", function () {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield client.databases.get(resourceGroup, serverName, databaseName);
            assert.equal(res.name, databaseName);
        });
    });
    it("servers list test", function () {
        var e_1, _a;
        return __awaiter(this, void 0, void 0, function* () {
            const resArray = new Array();
            try {
                for (var _b = __asyncValues(client.servers.listByResourceGroup(resourceGroup)), _c; _c = yield _b.next(), !_c.done;) {
                    let item = _c.value;
                    resArray.push(item);
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield _a.call(_b);
                }
                finally { if (e_1) throw e_1.error; }
            }
            assert.equal(resArray.length, 1);
        });
    });
    it("databases list test", function () {
        var e_2, _a;
        return __awaiter(this, void 0, void 0, function* () {
            const resArray = new Array();
            try {
                for (var _b = __asyncValues(client.databases.listByServer(resourceGroup, serverName)), _c; _c = yield _b.next(), !_c.done;) {
                    let item = _c.value;
                    resArray.push(item);
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield _a.call(_b);
                }
                finally { if (e_2) throw e_2.error; }
            }
            assert.equal(resArray.length, 2);
        });
    });
    it("servers update test", function () {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield client.servers.beginUpdateAndWait(resourceGroup, serverName, {
                tags: {
                    tag1: "value1"
                }
            }, testPollingOptions);
            assert.equal(res.type, "Microsoft.Sql/servers");
        });
    });
    it("databases update test", function () {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield client.databases.beginUpdateAndWait(resourceGroup, serverName, databaseName, {
                sku: {
                    name: "S1",
                    tier: "Standard",
                },
                collation: "SQL_Latin1_General_CP1_CI_AS",
                maxLogSizeBytes: 1073741824
            }, testPollingOptions);
            assert.equal(res.type, "Microsoft.Sql/servers/databases");
        });
    });
    it("databases delete test", function () {
        var e_3, _a;
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield client.databases.beginDeleteAndWait(resourceGroup, serverName, databaseName, testPollingOptions);
            const resArray = new Array();
            try {
                for (var _b = __asyncValues(client.databases.listByServer(resourceGroup, serverName)), _c; _c = yield _b.next(), !_c.done;) {
                    let item = _c.value;
                    resArray.push(item);
                }
            }
            catch (e_3_1) { e_3 = { error: e_3_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield _a.call(_b);
                }
                finally { if (e_3) throw e_3.error; }
            }
            assert.equal(resArray.length, 1);
        });
    });
    it("servers delete test", function () {
        var e_4, _a;
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield client.servers.beginDeleteAndWait(resourceGroup, serverName, testPollingOptions);
            const resArray = new Array();
            try {
                for (var _b = __asyncValues(client.servers.listByResourceGroup(resourceGroup)), _c; _c = yield _b.next(), !_c.done;) {
                    let item = _c.value;
                    resArray.push(item);
                }
            }
            catch (e_4_1) { e_4 = { error: e_4_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield _a.call(_b);
                }
                finally { if (e_4) throw e_4.error; }
            }
            assert.equal(resArray.length, 0);
        });
    });
});
//# sourceMappingURL=sql_examples.js.map