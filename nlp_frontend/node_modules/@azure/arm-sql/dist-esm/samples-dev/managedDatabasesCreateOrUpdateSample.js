/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { __awaiter } from "tslib";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
import { SqlManagementClient } from "@azure/arm-sql";
import { DefaultAzureCredential } from "@azure/identity";
/**
 * This sample demonstrates how to Creates a new database or updates an existing database.
 *
 * @summary Creates a new database or updates an existing database.
 * x-ms-original-file: specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedDatabaseCreateRestoreExternalBackup.json
 */
function createsANewManagedDatabaseByRestoringFromAnExternalBackup() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = "00000000-1111-2222-3333-444444444444";
        const resourceGroupName = "Default-SQL-SouthEastAsia";
        const managedInstanceName = "managedInstance";
        const databaseName = "managedDatabase";
        const parameters = {
            autoCompleteRestore: true,
            collation: "SQL_Latin1_General_CP1_CI_AS",
            createMode: "RestoreExternalBackup",
            lastBackupName: "last_backup_name",
            location: "southeastasia",
            storageContainerSasToken: "sv=2015-12-11&sr=c&sp=rl&sig=1234",
            storageContainerUri: "https://myaccountname.blob.core.windows.net/backups"
        };
        const credential = new DefaultAzureCredential();
        const client = new SqlManagementClient(credential, subscriptionId);
        const result = yield client.managedDatabases.beginCreateOrUpdateAndWait(resourceGroupName, managedInstanceName, databaseName, parameters);
        console.log(result);
    });
}
createsANewManagedDatabaseByRestoringFromAnExternalBackup().catch(console.error);
/**
 * This sample demonstrates how to Creates a new database or updates an existing database.
 *
 * @summary Creates a new database or updates an existing database.
 * x-ms-original-file: specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedDatabaseCreateRecovery.json
 */
function createsANewManagedDatabaseFromRestoringAGeoReplicatedBackup() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = "00000000-1111-2222-3333-444444444444";
        const resourceGroupName = "Default-SQL-SouthEastAsia";
        const managedInstanceName = "server1";
        const databaseName = "testdb_recovered";
        const parameters = {
            createMode: "Recovery",
            location: "southeastasia",
            recoverableDatabaseId: "/subscriptions/11111111-2222-3333-4444-555555555555/resourceGroups/Default-SQL-WestEurope/providers/Microsoft.Sql/managedInstances/testsvr/recoverableDatabases/testdb"
        };
        const credential = new DefaultAzureCredential();
        const client = new SqlManagementClient(credential, subscriptionId);
        const result = yield client.managedDatabases.beginCreateOrUpdateAndWait(resourceGroupName, managedInstanceName, databaseName, parameters);
        console.log(result);
    });
}
createsANewManagedDatabaseFromRestoringAGeoReplicatedBackup().catch(console.error);
/**
 * This sample demonstrates how to Creates a new database or updates an existing database.
 *
 * @summary Creates a new database or updates an existing database.
 * x-ms-original-file: specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedDatabaseCreateRestoreLtrBackup.json
 */
function createsANewManagedDatabaseFromRestoringALongTermRetentionBackup() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = "00000000-1111-2222-3333-444444444444";
        const resourceGroupName = "Default-SQL-SouthEastAsia";
        const managedInstanceName = "managedInstance";
        const databaseName = "managedDatabase";
        const parameters = {
            collation: "SQL_Latin1_General_CP1_CI_AS",
            createMode: "RestoreExternalBackup",
            location: "southeastasia",
            storageContainerSasToken: "sv=2015-12-11&sr=c&sp=rl&sig=1234",
            storageContainerUri: "https://myaccountname.blob.core.windows.net/backups"
        };
        const credential = new DefaultAzureCredential();
        const client = new SqlManagementClient(credential, subscriptionId);
        const result = yield client.managedDatabases.beginCreateOrUpdateAndWait(resourceGroupName, managedInstanceName, databaseName, parameters);
        console.log(result);
    });
}
createsANewManagedDatabaseFromRestoringALongTermRetentionBackup().catch(console.error);
/**
 * This sample demonstrates how to Creates a new database or updates an existing database.
 *
 * @summary Creates a new database or updates an existing database.
 * x-ms-original-file: specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedDatabaseCreatePointInTimeRestore.json
 */
function createsANewManagedDatabaseUsingPointInTimeRestore() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = "00000000-1111-2222-3333-444444444444";
        const resourceGroupName = "Default-SQL-SouthEastAsia";
        const managedInstanceName = "managedInstance";
        const databaseName = "managedDatabase";
        const parameters = {
            createMode: "PointInTimeRestore",
            location: "southeastasia",
            restorePointInTime: new Date("2017-07-14T05:35:31.503Z"),
            sourceDatabaseId: "/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default-SQL-SouthEastAsia/providers/Microsoft.Sql/managedInstances/testsvr/databases/testdb"
        };
        const credential = new DefaultAzureCredential();
        const client = new SqlManagementClient(credential, subscriptionId);
        const result = yield client.managedDatabases.beginCreateOrUpdateAndWait(resourceGroupName, managedInstanceName, databaseName, parameters);
        console.log(result);
    });
}
createsANewManagedDatabaseUsingPointInTimeRestore().catch(console.error);
/**
 * This sample demonstrates how to Creates a new database or updates an existing database.
 *
 * @summary Creates a new database or updates an existing database.
 * x-ms-original-file: specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedDatabaseCreateMax.json
 */
function createsANewManagedDatabaseWithMaximalProperties() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = "00000000-1111-2222-3333-444444444444";
        const resourceGroupName = "Default-SQL-SouthEastAsia";
        const managedInstanceName = "managedInstance";
        const databaseName = "managedDatabase";
        const parameters = {
            location: "southeastasia",
            tags: { tagKey1: "TagValue1" }
        };
        const credential = new DefaultAzureCredential();
        const client = new SqlManagementClient(credential, subscriptionId);
        const result = yield client.managedDatabases.beginCreateOrUpdateAndWait(resourceGroupName, managedInstanceName, databaseName, parameters);
        console.log(result);
    });
}
createsANewManagedDatabaseWithMaximalProperties().catch(console.error);
/**
 * This sample demonstrates how to Creates a new database or updates an existing database.
 *
 * @summary Creates a new database or updates an existing database.
 * x-ms-original-file: specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedDatabaseCreateMin.json
 */
function createsANewManagedDatabaseWithMinimalProperties() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = "00000000-1111-2222-3333-444444444444";
        const resourceGroupName = "Default-SQL-SouthEastAsia";
        const managedInstanceName = "managedInstance";
        const databaseName = "managedDatabase";
        const parameters = { location: "southeastasia" };
        const credential = new DefaultAzureCredential();
        const client = new SqlManagementClient(credential, subscriptionId);
        const result = yield client.managedDatabases.beginCreateOrUpdateAndWait(resourceGroupName, managedInstanceName, databaseName, parameters);
        console.log(result);
    });
}
createsANewManagedDatabaseWithMinimalProperties().catch(console.error);
//# sourceMappingURL=managedDatabasesCreateOrUpdateSample.js.map