import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { DatabaseSecurityAlertPolicies } from "../operationsInterfaces";
import { SqlManagementClient } from "../sqlManagementClient";
import { DatabaseSecurityAlertPolicy, DatabaseSecurityAlertPoliciesListByDatabaseOptionalParams, SecurityAlertPolicyName, DatabaseSecurityAlertPoliciesGetOptionalParams, DatabaseSecurityAlertPoliciesGetResponse, DatabaseSecurityAlertPoliciesCreateOrUpdateOptionalParams, DatabaseSecurityAlertPoliciesCreateOrUpdateResponse } from "../models";
/** Class containing DatabaseSecurityAlertPolicies operations. */
export declare class DatabaseSecurityAlertPoliciesImpl implements DatabaseSecurityAlertPolicies {
    private readonly client;
    /**
     * Initialize a new instance of the class DatabaseSecurityAlertPolicies class.
     * @param client Reference to the service client
     */
    constructor(client: SqlManagementClient);
    /**
     * Gets a list of database's security alert policies.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serverName The name of the  server.
     * @param databaseName The name of the  database for which the security alert policy is defined.
     * @param options The options parameters.
     */
    listByDatabase(resourceGroupName: string, serverName: string, databaseName: string, options?: DatabaseSecurityAlertPoliciesListByDatabaseOptionalParams): PagedAsyncIterableIterator<DatabaseSecurityAlertPolicy>;
    private listByDatabasePagingPage;
    private listByDatabasePagingAll;
    /**
     * Gets a database's security alert policy.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serverName The name of the  server.
     * @param databaseName The name of the  database for which the security alert policy is defined.
     * @param securityAlertPolicyName The name of the security alert policy.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, serverName: string, databaseName: string, securityAlertPolicyName: SecurityAlertPolicyName, options?: DatabaseSecurityAlertPoliciesGetOptionalParams): Promise<DatabaseSecurityAlertPoliciesGetResponse>;
    /**
     * Creates or updates a database's security alert policy.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serverName The name of the  server.
     * @param databaseName The name of the  database for which the security alert policy is defined.
     * @param securityAlertPolicyName The name of the security alert policy.
     * @param parameters The database security alert policy.
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName: string, serverName: string, databaseName: string, securityAlertPolicyName: SecurityAlertPolicyName, parameters: DatabaseSecurityAlertPolicy, options?: DatabaseSecurityAlertPoliciesCreateOrUpdateOptionalParams): Promise<DatabaseSecurityAlertPoliciesCreateOrUpdateResponse>;
    /**
     * Gets a list of database's security alert policies.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serverName The name of the  server.
     * @param databaseName The name of the  database for which the security alert policy is defined.
     * @param options The options parameters.
     */
    private _listByDatabase;
    /**
     * ListByDatabaseNext
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serverName The name of the  server.
     * @param databaseName The name of the  database for which the security alert policy is defined.
     * @param nextLink The nextLink from the previous successful call to the ListByDatabase method.
     * @param options The options parameters.
     */
    private _listByDatabaseNext;
}
//# sourceMappingURL=databaseSecurityAlertPolicies.d.ts.map