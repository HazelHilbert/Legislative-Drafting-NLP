/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/** Known values of {@link ExpressionEvaluationOptionsScopeType} that the service accepts. */
export var KnownExpressionEvaluationOptionsScopeType;
(function (KnownExpressionEvaluationOptionsScopeType) {
    KnownExpressionEvaluationOptionsScopeType["NotSpecified"] = "NotSpecified";
    KnownExpressionEvaluationOptionsScopeType["Outer"] = "Outer";
    KnownExpressionEvaluationOptionsScopeType["Inner"] = "Inner";
})(KnownExpressionEvaluationOptionsScopeType || (KnownExpressionEvaluationOptionsScopeType = {}));
/** Known values of {@link ProvisioningState} that the service accepts. */
export var KnownProvisioningState;
(function (KnownProvisioningState) {
    KnownProvisioningState["NotSpecified"] = "NotSpecified";
    KnownProvisioningState["Accepted"] = "Accepted";
    KnownProvisioningState["Running"] = "Running";
    KnownProvisioningState["Ready"] = "Ready";
    KnownProvisioningState["Creating"] = "Creating";
    KnownProvisioningState["Created"] = "Created";
    KnownProvisioningState["Deleting"] = "Deleting";
    KnownProvisioningState["Deleted"] = "Deleted";
    KnownProvisioningState["Canceled"] = "Canceled";
    KnownProvisioningState["Failed"] = "Failed";
    KnownProvisioningState["Succeeded"] = "Succeeded";
    KnownProvisioningState["Updating"] = "Updating";
})(KnownProvisioningState || (KnownProvisioningState = {}));
/** Known values of {@link AliasPathTokenType} that the service accepts. */
export var KnownAliasPathTokenType;
(function (KnownAliasPathTokenType) {
    /** The token type is not specified. */
    KnownAliasPathTokenType["NotSpecified"] = "NotSpecified";
    /** The token type can be anything. */
    KnownAliasPathTokenType["Any"] = "Any";
    /** The token type is string. */
    KnownAliasPathTokenType["String"] = "String";
    /** The token type is object. */
    KnownAliasPathTokenType["Object"] = "Object";
    /** The token type is array. */
    KnownAliasPathTokenType["Array"] = "Array";
    /** The token type is integer. */
    KnownAliasPathTokenType["Integer"] = "Integer";
    /** The token type is number. */
    KnownAliasPathTokenType["Number"] = "Number";
    /** The token type is boolean. */
    KnownAliasPathTokenType["Boolean"] = "Boolean";
})(KnownAliasPathTokenType || (KnownAliasPathTokenType = {}));
/** Known values of {@link AliasPathAttributes} that the service accepts. */
export var KnownAliasPathAttributes;
(function (KnownAliasPathAttributes) {
    /** The token that the alias path is referring to has no attributes. */
    KnownAliasPathAttributes["None"] = "None";
    /** The token that the alias path is referring to is modifiable by policies with 'modify' effect. */
    KnownAliasPathAttributes["Modifiable"] = "Modifiable";
})(KnownAliasPathAttributes || (KnownAliasPathAttributes = {}));
/** Known values of {@link ProviderAuthorizationConsentState} that the service accepts. */
export var KnownProviderAuthorizationConsentState;
(function (KnownProviderAuthorizationConsentState) {
    KnownProviderAuthorizationConsentState["NotSpecified"] = "NotSpecified";
    KnownProviderAuthorizationConsentState["Required"] = "Required";
    KnownProviderAuthorizationConsentState["NotRequired"] = "NotRequired";
    KnownProviderAuthorizationConsentState["Consented"] = "Consented";
})(KnownProviderAuthorizationConsentState || (KnownProviderAuthorizationConsentState = {}));
/** Known values of {@link ExtendedLocationType} that the service accepts. */
export var KnownExtendedLocationType;
(function (KnownExtendedLocationType) {
    KnownExtendedLocationType["EdgeZone"] = "EdgeZone";
})(KnownExtendedLocationType || (KnownExtendedLocationType = {}));
/** Known values of {@link TagsPatchOperation} that the service accepts. */
export var KnownTagsPatchOperation;
(function (KnownTagsPatchOperation) {
    /** The 'replace' option replaces the entire set of existing tags with a new set. */
    KnownTagsPatchOperation["Replace"] = "Replace";
    /** The 'merge' option allows adding tags with new names and updating the values of tags with existing names. */
    KnownTagsPatchOperation["Merge"] = "Merge";
    /** The 'delete' option allows selectively deleting tags based on given names or name/value pairs. */
    KnownTagsPatchOperation["Delete"] = "Delete";
})(KnownTagsPatchOperation || (KnownTagsPatchOperation = {}));
//# sourceMappingURL=index.js.map