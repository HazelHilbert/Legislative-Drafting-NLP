/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { __awaiter } from "tslib";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
import { ApiManagementClient } from "@azure/arm-apimanagement";
import { DefaultAzureCredential } from "@azure/identity";
/**
 * This sample demonstrates how to Creates or Updates a logger.
 *
 * @summary Creates or Updates a logger.
 * x-ms-original-file: specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementCreateAILogger.json
 */
function apiManagementCreateAiLogger() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = "subid";
        const resourceGroupName = "rg1";
        const serviceName = "apimService1";
        const loggerId = "loggerId";
        const parameters = {
            description: "adding a new logger",
            credentials: { instrumentationKey: "11................a1" },
            loggerType: "applicationInsights"
        };
        const credential = new DefaultAzureCredential();
        const client = new ApiManagementClient(credential, subscriptionId);
        const result = yield client.logger.createOrUpdate(resourceGroupName, serviceName, loggerId, parameters);
        console.log(result);
    });
}
apiManagementCreateAiLogger().catch(console.error);
/**
 * This sample demonstrates how to Creates or Updates a logger.
 *
 * @summary Creates or Updates a logger.
 * x-ms-original-file: specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementCreateEHLogger.json
 */
function apiManagementCreateEhLogger() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = "subid";
        const resourceGroupName = "rg1";
        const serviceName = "apimService1";
        const loggerId = "eh1";
        const parameters = {
            description: "adding a new logger",
            credentials: {
                name: "hydraeventhub",
                connectionString: "Endpoint=sb://hydraeventhub-ns.servicebus.windows.net/;SharedAccessKeyName=RootManageSharedAccessKey;SharedAccessKey=********="
            },
            loggerType: "azureEventHub"
        };
        const credential = new DefaultAzureCredential();
        const client = new ApiManagementClient(credential, subscriptionId);
        const result = yield client.logger.createOrUpdate(resourceGroupName, serviceName, loggerId, parameters);
        console.log(result);
    });
}
apiManagementCreateEhLogger().catch(console.error);
//# sourceMappingURL=loggerCreateOrUpdateSample.js.map