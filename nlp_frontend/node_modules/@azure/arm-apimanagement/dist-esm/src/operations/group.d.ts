import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { Group } from "../operationsInterfaces";
import { ApiManagementClient } from "../apiManagementClient";
import { GroupContract, GroupListByServiceOptionalParams, GroupGetEntityTagOptionalParams, GroupGetEntityTagResponse, GroupGetOptionalParams, GroupGetResponse, GroupCreateParameters, GroupCreateOrUpdateOptionalParams, GroupCreateOrUpdateResponse, GroupUpdateParameters, GroupUpdateOptionalParams, GroupUpdateResponse, GroupDeleteOptionalParams } from "../models";
/** Class containing Group operations. */
export declare class GroupImpl implements Group {
    private readonly client;
    /**
     * Initialize a new instance of the class Group class.
     * @param client Reference to the service client
     */
    constructor(client: ApiManagementClient);
    /**
     * Lists a collection of groups defined within a service instance.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param options The options parameters.
     */
    listByService(resourceGroupName: string, serviceName: string, options?: GroupListByServiceOptionalParams): PagedAsyncIterableIterator<GroupContract>;
    private listByServicePagingPage;
    private listByServicePagingAll;
    /**
     * Lists a collection of groups defined within a service instance.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param options The options parameters.
     */
    private _listByService;
    /**
     * Gets the entity state (Etag) version of the group specified by its identifier.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param groupId Group identifier. Must be unique in the current API Management service instance.
     * @param options The options parameters.
     */
    getEntityTag(resourceGroupName: string, serviceName: string, groupId: string, options?: GroupGetEntityTagOptionalParams): Promise<GroupGetEntityTagResponse>;
    /**
     * Gets the details of the group specified by its identifier.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param groupId Group identifier. Must be unique in the current API Management service instance.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, serviceName: string, groupId: string, options?: GroupGetOptionalParams): Promise<GroupGetResponse>;
    /**
     * Creates or Updates a group.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param groupId Group identifier. Must be unique in the current API Management service instance.
     * @param parameters Create parameters.
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName: string, serviceName: string, groupId: string, parameters: GroupCreateParameters, options?: GroupCreateOrUpdateOptionalParams): Promise<GroupCreateOrUpdateResponse>;
    /**
     * Updates the details of the group specified by its identifier.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param groupId Group identifier. Must be unique in the current API Management service instance.
     * @param ifMatch ETag of the Entity. ETag should match the current entity state from the header
     *                response of the GET request or it should be * for unconditional update.
     * @param parameters Update parameters.
     * @param options The options parameters.
     */
    update(resourceGroupName: string, serviceName: string, groupId: string, ifMatch: string, parameters: GroupUpdateParameters, options?: GroupUpdateOptionalParams): Promise<GroupUpdateResponse>;
    /**
     * Deletes specific group of the API Management service instance.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param groupId Group identifier. Must be unique in the current API Management service instance.
     * @param ifMatch ETag of the Entity. ETag should match the current entity state from the header
     *                response of the GET request or it should be * for unconditional update.
     * @param options The options parameters.
     */
    delete(resourceGroupName: string, serviceName: string, groupId: string, ifMatch: string, options?: GroupDeleteOptionalParams): Promise<void>;
    /**
     * ListByServiceNext
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param nextLink The nextLink from the previous successful call to the ListByService method.
     * @param options The options parameters.
     */
    private _listByServiceNext;
}
//# sourceMappingURL=group.d.ts.map